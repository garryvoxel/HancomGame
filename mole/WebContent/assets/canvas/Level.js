
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;	
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = false;

	var varUA = navigator.userAgent.toLowerCase(); //userAgent 값 얻기
	if (varUA.match('android') != null) { 
	   //안드로이드 일때 처리
	} else if (varUA.indexOf("iphone")>-1||varUA.indexOf("ipad")>-1||varUA.indexOf("ipod")>-1) { 
	   //IOS 일때 처리
		this.scale.maxWidth = (window.innerHeight * 720) / (800 * 2);
		this.scale.maxHeight = window.innerHeight / 2;
	} else {
	   //아이폰, 안드로이드 외 처리
	}

	this.stage.backgroundColor = '#000000';	
	this.tajaInit();

};

Level.prototype.preload = function () {
	
	this.game.stage.disableVisibilityChange = true;
	
	this.loadStageData();

};

Level.prototype.create = function () {
	this.game.time.advancedTiming = true;
	
	// create Layer	
	var _BgLayer = this.add.group();
	var _charLayer = this.add.group();
	var _charLayer2 = this.add.group();
	var _charLayer3 = this.add.group();
	var _CharLayer = new Array();
	for(var j=0; j<MAX_CHAR_LEN; j++) {
		_CharLayer[j] = this.add.group();
	}
		
	var _BgMaskLayer = this.add.group();
	var _WordPanel = this.add.group();
	var _WordPanelText = this.add.group();	// 190318 add
		
	var _ItemIconLayer = new Array();
	for(var j=0; j<MAX_ITEM; j++) {
		_ItemIconLayer[j] = this.add.group();
	}
	var _ItemIconBlinkLayer = this.add.group();
	var _fullScreenEffLayer = this.add.group();
	var _itemEffLayer = this.add.group();
	var _HammerLayer = this.add.group();
	var _EffectLayer1 = this.add.group();
	var _missionPanelLayer = this.add.group();
	var _itemToastMsgLayer = this.add.group();
	var _countLayer = this.add.group();
	var _UILayer = this.add.group();
	var _ResultLayer = this.add.group();
	var _effectWrongLayer = this.add.group();
	var _NewItemInfoPopup = this.add.group();
	
	
	// 19.02.01 modify
	this.add.sprite(0.0, 0.0, 'BackImg_type_'+this.gStageDataJSON.stageData.bg, null, _BgLayer);
	
	var _pos = [ {x:120, y:293}, {x:360, y:293}, {x:594, y:293}, {x:241, y:477}, {x:475, y:477}, {x:120, y:661}, {x:360, y:661}, {x:594, y:661} ];
	
	for(var j=0; j<MAX_CHAR_LEN; j++) {
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			switch(j) {
			// 아모개
			case 0:	
				// 2019-07-08 modify
//				var char = new Prefab_Char_Amogae(this.game, _pos[i].x, _pos[i].y);
				var char = new Prefab_Char_AmogaeV2(this.game, _pos[i].x, _pos[i].y);
				 _CharLayer[j].add(char);
				 break;
			// 지지
			case 1:
				var char = new PrefabCharJiji(this.game, _pos[i].x, _pos[i].y);
				 _CharLayer[j].add(char);
				break;
			// 모아
			case 2:
				var char = new PrefabCharMoa(this.game, _pos[i].x, _pos[i].y);
				 _CharLayer[j].add(char);
				break;				 
			// 마망
			case 3:
				// 2019-07-08 modify
//				var char = new PrefabCharMamang(this.game, _pos[i].x, _pos[i].y);
				var char = new PrefabCharMamangV2(this.game, _pos[i].x, _pos[i].y);
				 _CharLayer[j].add(char);
				break;
			// 육비
			case 4:
				var char = new PrefabChar6B(this.game, _pos[i].x, _pos[i].y);
				 _CharLayer[j].add(char);
				break;				
			// 야야
			case 5:
				var char = new PrefabCharYaya(this.game, _pos[i].x, _pos[i].y);
				 _CharLayer[j].add(char);
				break;
			}			
		}
	}	

	// 19.02.01 modify	
	this.add.sprite(0.0, 0.0, 'BackImg_typeA_'+this.gStageDataJSON.stageData.bg, null, _BgMaskLayer);
	
	// WordPanel Layer	
	var _pos2 = [ {x:120, y:335}, {x:360, y:335}, {x:594, y:335}, {x:241, y:519}, {x:475, y:519}, {x:120, y:703}, {x:360, y:703}, {x:594, y:703} ];
	var _talkBox = [];
	for(var i=0; i<MAX_HOLE_LEN; i++) {
		_talkBox[i] = new Prefab_talkBox(this.game,  _pos2[i].x, _pos2[i].y);
		_WordPanel.add(_talkBox[i]);
		
		// 190318 add
		var _style = { font: "30px 나눔고딕", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle" };
		var _talkBoxText = this.game.add.text(  _pos2[i].x - 97, _pos2[i].y - 20, "", _style);	
		_talkBoxText.setTextBounds(0, 0, 194, 56);
		_WordPanelText.add(_talkBoxText);
	}
	
	// 19.01.14 add
	var _iconPos = [ {x:0, y:309.75 - 43}, {x:240, y:309.75 - 43}, {x:474, y:309.75 - 43}, {x:121, y:493.75 - 43}, {x:355, y:493.75 - 43}, {x:0, y:677.75 - 43}, {x:240, y:677.75 - 43}, {x:474, y:677.75 - 43} ];
	var _iconName = [ 'ItemIcon1', 'ItemIcon2', 'ItemIcon3', 'ItemIcon4', 'ItemIcon5', 'ItemIcon6' ];
	for(var j=0; j<MAX_ITEM; j++) {
		for(var i=0; i<8; i++) {
			var _icon = this.game.add.sprite(_iconPos[i].x, _iconPos[i].y, _iconName[j], null);
			_icon.visible = false;
			_ItemIconLayer[j].add(_icon);
		}
	}
	// 190301 마이너스 아이템 변경으로 추가 구현.
	for(var i=0; i<8; i++) {
		var _itemIconBlinkSheet = this.game.add.sprite(_iconPos[i].x-9, _iconPos[i].y-9, 'DisturbItemCoverSheet');
		_itemIconBlinkSheet.animations.add('play');
		_itemIconBlinkSheet.visible = false;
		_ItemIconBlinkLayer.add(_itemIconBlinkSheet);
	}
	
	
//	for(var j=0; j<MAX_CHAR_LEN; j++) {
//		// console.log("_CharLayer[" + j + "].children.length : " +_CharLayer[j].children.length);
//	}
	
	// 2019-06-26 modify
	// Hammer fullscreen eff Layer
	gFSE = new PrefabEffWhite(this.game, 10000.0, 10000.0);
	_fullScreenEffLayer.add(gFSE);
	
	// 19.01.11 item eff layer
	// item bomb eff (폭탄)
	var _itemEffPos = [ {x:120, y:232}, {x:360, y:232}, {x:594, y:232}, {x:241, y:416}, {x:475, y:416}, {x:120, y:600}, {x:360, y:600}, {x:594, y:600} ];
	var _itemEff = [];
	// 0 ~ 7
	for(var i=0; i<8; i++) {
		_itemEff[i] = new PrefabEffBomb(this.game,  _itemEffPos[i].x, _itemEffPos[i].y);
		_itemEffLayer.add(_itemEff[i]);
	}
	
	// item laser eff (레이저)
	var _itemLaserEffPos = [ {x:108, y:226}, {x:348, y:226}, {x:582, y:226}, {x:229, y:410}, {x:463, y:410}, {x:108, y:594}, {x:348, y:594}, {x:582, y:594} ];

	// 8 ~ 15
	for(var i=0; i<8; i++) {
		var _itemLaserEff = new PrefabEffDPunch(this.game, _itemLaserEffPos[i].x, _itemLaserEffPos[i].y);
		_itemEffLayer.add(_itemLaserEff);
	}
	
	// item Laser Line
	var _itemLaserLinePos = [{x:359, y:262}, {x:359, y:446}, {x:359, y:630} ];
	// 16 ~ 18
	for(var i=0; i<3; i++){
		var _itemLaserLine = new PrefabEffLine(this.game, _itemLaserLinePos[i].x, _itemLaserLinePos[i].y);
		_itemEffLayer.add(_itemLaserLine);
	}
	
	// item bird eff (새)
	var _itemWowPos = [ {x:149, y:205}, {x:389, y:205}, {x:623, y:205}, {x:270, y:389}, {x:504, y:389}, {x:149, y:573}, {x:389, y:573}, {x:623, y:573} ];
	// 19 ~ 26
	for(var i=0; i<8; i++){
		var _itemWow = new PrefabEffWow(this.game, _itemWowPos[i].x, _itemWowPos[i].y);
		_itemEffLayer.add(_itemWow);
	}	
	// 27
	var _itemBird = new PrefabBird(this.game, 892, 370);
	_itemEffLayer.add(_itemBird);
	
	
	// item eraser eff (지우개) 
	var _itemEraserPos = [ {x:113, y:331}, {x:353, y:331}, {x:587, y:331}, {x:234, y:515}, {x:468, y:515}, {x:113, y:699}, {x:353, y:699}, {x:587, y:699} ];
	// 28 ~ 35
	for(var i=0; i<8; i++) {
		var _itemEraserEff = new PrefabEffErazer(this.game, _itemEraserPos[i].x, _itemEraserPos[i].y);
		_itemEffLayer.add(_itemEraserEff);
	}
	// 36
	var _itemEraser = new PrefabEraser(this.game, 724, 303);
	_itemEffLayer.add(_itemEraser);
	
	
	
	// 37 (새총)
	var _itemSlingShot = new PrefabSlingshot(this.game, 272, 801);
	_itemEffLayer.add(_itemSlingShot);
	
	// item slingShot eff (새총 이펙트)
	var _itemSlingShotPos = [ {x:119, y:254}, {x:359, y:254}, {x:593, y:254}, {x:240, y:438}, {x:474, y:438}, {x:119, y:622}, {x:359, y:622}, {x:593, y:622} ];
	// 38 ~ 45
	for(var i=0; i<8; i++) {
		var _itemSlingShotEff = new PrefabEffSlingshot(this.game, _itemSlingShotPos[i].x, _itemSlingShotPos[i].y);
		_itemEffLayer.add(_itemSlingShotEff);
	}	
	
	// 46 (백기)
	var _itemWFlag = new PrefabWFlag(this.game, 138, 806);
	_itemEffLayer.add(_itemWFlag);
	// 47 ~ 54 (백기 - 말풍선)
	var _itemWFlagTalkboxPos = [ {x:119, y:147}, {x:359, y:147}, {x:593, y:147}, {x:240, y:331}, {x:474, y:331}, {x:119, y:515}, {x:359, y:515}, {x:593, y:515} ];
	for(var i=0; i<8; i++) {
		var _itemWFlagTalkbox = new PrefabWFlagTalkbox(this.game, _itemWFlagTalkboxPos[i].x, _itemWFlagTalkboxPos[i].y);
		_itemEffLayer.add(_itemWFlagTalkbox);
	}
	// 55 (백기 - 스코어 차감 표시)
	var _itemMinusValue = new PrefabMinusValue(this.game, 124, 114);
	_itemEffLayer.add(_itemMinusValue);

	
	// Hammer Layer
	// 19.02.01 modify
	// hammer : 1~10 셋팅, 아래 코드에서 사용은 0~9
	var hammerIdx = this.gStageDataJSON.stageData.hammer - 1;
	
	var _hammerName = [ "솔방울", "망치", "소라", "축구공", "비치볼", "나뭇가지", "숟가락", "눈삽", "눈덩이", "신발" ];
	
	var _hammerPos = [
	    [ {x:94, y:139}, {x:334, y:139}, {x:568, y:139}, {x:215, y:323}, {x:449, y:323}, {x:94, y:507}, {x:334, y:507}, {x:568, y:507} ],		// 솔방울   (던지기)
		[ {x:59, y:-188}, {x:299, y:-188}, {x:533, y:-188}, {x:180, y:-4}, {x:414, y:-4}, {x:59, y:180}, {x:299, y:180}, {x:533, y:180} ],		// 망치     (때리기)				
		[ {x:85, y:113}, {x:325, y:113}, {x:559, y:113}, {x:206, y:297}, {x:440, y:297}, {x:85, y:481}, {x:325, y:481}, {x:559, y:481} ],		// 소라     (던지기)
		[ {x:71, y:125}, {x:311, y:125}, {x:545, y:125}, {x:192, y:309}, {x:426, y:309}, {x:71, y:493}, {x:311, y:493}, {x:545, y:493} ],		// 축구공   (던지기)
		[ {x:70, y:124}, {x:310, y:124}, {x:544, y:124}, {x:191, y:308}, {x:425, y:308}, {x:70, y:492}, {x:310, y:492}, {x:544, y:492} ],		// 비치볼   (던지기)
		[ {x:26, y:-103}, {x:266, y:-103}, {x:500, y:-103}, {x:147, y:81}, {x:381, y:81}, {x:26, y:265}, {x:266, y:265}, {x:500, y:265} ],		// 나뭇가지 (때리기)
		[ {x:37, y:-122}, {x:277, y:-122}, {x:511, y:-122}, {x:158, y:62}, {x:392, y:62}, {x:37, y:246}, {x:277, y:246}, {x:511, y:246} ],		// 숟가락   (때리기)
		[ {x:41, y:-102}, {x:281, y:-102}, {x:515, y:-102}, {x:162, y:82}, {x:396, y:82}, {x:41, y:266}, {x:281, y:266}, {x:515, y:266} ],		// 눈삽     (때리기)
		[ {x:101, y:142}, {x:341, y:142}, {x:575, y:142}, {x:222, y:326}, {x:456, y:326}, {x:101, y:510}, {x:341, y:510}, {x:575, y:510} ],		// 눈덩이   (던지기)
		[ {x:35, y:-94}, {x:275, y:-94}, {x:509, y:-94}, {x:156, y:90}, {x:390, y:90}, {x:35, y:274}, {x:275, y:274}, {x:509, y:274} ]			// 신발     (때리기)
		
	];
	var _hammer = new Array();
	switch(hammerIdx) {
	case 0:
		// 솔방울		
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType1(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}
		break;		
	case 1:
		// 망치
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType2(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;
	case 2:
		// 소라
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType3(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;		
	case 3:
		// 축구공 w311, h351
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType4(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;
		
	case 4:
		// 비치볼
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerTyp5(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;
	case 5:
		// 나뭇가지
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType6(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;
	case 6:
		// 숟가락
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType7(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;
	case 7:
		// 눈삽
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType8(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;
	case 8:
		// 눈덩이
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType9(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;
	case 9:
		// 신발		
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			_hammer[i] = new PrefabHammerType10(this.game, _hammerPos[hammerIdx][i].x, _hammerPos[hammerIdx][i].y);
			_HammerLayer.add(_hammer[i]);
		}	
		break;		
	}
	
	// Effect Layer 1 (망치 기본 이펙트)
	var _effPos = [ {x:120, y:232}, {x:360, y:232}, {x:594, y:232}, {x:241, y:416}, {x:475, y:416}, {x:120, y:600}, {x:360, y:600}, {x:594, y:600} ];
	var _eff = [];
	for(var i=0; i<8; i++) {
		_eff[i] = new Prefab_EffPunch(this.game,  _effPos[i].x, _effPos[i].y);
		_EffectLayer1.add(_eff[i]);
	}

	// 미션 패널
	var _missionPanel = new PrefabUIMissionPanel(this.game);
	_missionPanelLayer.add(_missionPanel);
	
	// 목표점수 패널(일반 스테이지용)	
	var _minScorePanel = this.add.sprite(205.0, 87.0, 'ObjectiveValuePanel', null);		// 1
	_minScorePanel.visible = false;
	_missionPanelLayer.add(_minScorePanel);
	var _minScoreStyle = { font: "bold 24px 나눔고딕", fill: "#FFEA38", boundsAlignH: "center", boundsAlignV: "middle" };
	var _minScoreText = this.add.text(331.0 + 77.5, 125, "0", _minScoreStyle);	// 2
	_minScoreText.anchor.x = 0.5;
	_minScoreText.anchor.y = 0.5;
	_missionPanelLayer.add(_minScoreText);
	_missionPanelLayer.visible = false;
	
	// 아이템 사용 토스트 메세지
	var _itemToastBG = this.add.sprite(0, 164, 'ToastMessagePanel', null);
	_itemToastMsgLayer.add(_itemToastBG);
	for(var i=0; i<6; i++) {
		var _icon = this.add.sprite(129, 138, 'BItemIcon'+(i+1), null);
		_icon.visible = false;
		_itemToastMsgLayer.add(_icon);		
	}
	var _itemToastMsgStyle = { font: "22px 나눔고딕", fill: "#ffffff", boundsAlignH: "left", boundsAlignV: "middle" };
	var _itemToastMsg = this.add.text(249, 178, "[폭탄] 아이템을 사용하였습니다.", _itemToastMsgStyle);
	_itemToastMsgLayer.add(_itemToastMsg);
	_itemToastMsgLayer.visible = false;
	
	var _count = new Array();
	_count[0] = this.add.sprite(127.0, 334.0, 'CountStage', null, _UILayer);
	_count[0].visible = false;
	_countLayer.add(_count[0]);
	
	_count[1] = this.game.add.bitmapText(592.0, 332.0, 'StageEmNum', gCurrentStage, 110, _UILayer);
	if (gCurrentStage > 0 && gCurrentStage < 10) {
		_count[1].x -= 57;
	}
	_count[1].anchor.x = 1.0;
	_count[1].anchor.y = 0.0;
	_count[1].visible = false;
	_countLayer.add(_count[1]);
	
	_count[2] = this.add.sprite(720/2, 800/2, 'Count0');
	_count[2].anchor.x = 0.5;
	_count[2].anchor.y = 0.5;
	_count[2].visible = false;
	_countLayer.add(_count[2]);
	
	// UI Layer
	this.add.sprite(170.0, 740.0, 'ui_input', null, _UILayer);
	this.add.button(459.0, 745.0, 'ui_input_btnSheet', this.inputBtn, this, 1, 0, 2, 3, _UILayer);
	
	// mobile keyboard
	this.add.button(566.0, 727.0, 'MobileKeyboardBtnSheet2', this.showKeyboard, this, null, null, 1, 0, _UILayer);
	
	// Score Panel
	gScore = 0;
	this.add.sprite(7.0, 13.0, 'UIPanel1', null, _UILayer);
	this.add.sprite(25.0, 26.0, 'UIIconCoin', null, _UILayer);
	
	var _scoreText = this.game.add.bitmapText(165.0, 51.0, 'IngameNum', gScore.toString(), 24, _UILayer);
	_scoreText.anchor.x = 1.0;
	_scoreText.anchor.y = 0.5;
	gScoreText = _scoreText;
	
	// Life Panel
	gLife = 5;
	this.add.sprite(530.0, 13.0, 'UIPanel1', null, _UILayer);
	gBalloonDestroySheet = new PrefabEffBalloonDestroy(this.game, 580.0, 49.0);
	_UILayer.add(gBalloonDestroySheet);
	
	this.add.sprite(625.0, 40.0, 'GameUIInX', null, _UILayer);
	var _lifeText = this.game.add.bitmapText(670.0, 51.0, 'IngameNum', '5', 24, _UILayer);
	_lifeText.anchor.x = 1.0;
	_lifeText.anchor.y = 0.5;
	gLifeText = _lifeText;

	
	// Time Panel
	var stageTime = this.gStageDataJSON.stageData.playLimitTime;
	gTimerText = stageTime;

	var _limitTime = pad(parseInt(gTimerText/60), 2) + ":" + pad(parseInt(gTimerText%60), 2);
	
	gTimeGaugeSpeed = 208 / stageTime;
	this.gauge_px = 0;
	
	this.add.sprite(199.0, 0.0, 'UITimePanel', null, _UILayer);
	this.bmd = this.make.bitmapData(208, 40);
	this.bmd.alphaMask('UITimeGauge', 'UITimeGaugeMask');
	this.timeGauge = this.add.image(296.0, 30.0, this.bmd, null, _UILayer);
	
	var _timerPanel = this.game.add.bitmapText(401.0, 52.0, 'IngameNum', _limitTime, 24, _UILayer);
	_timerPanel.anchor.x = 0.5;
	_timerPanel.anchor.y = 0.5;
	gTimerPanel = _timerPanel;	
	
	// 영문자판 상태 알림 토스트 메세지
	var _keyAlertPanel = this.add.sprite(0.0, 400.0, 'KeyboradAlertPanel', null, _UILayer);
	_keyAlertPanel.anchor.y = 0.5;
	_keyAlertPanel.visible = false;
	gkeyAlertPanel = _keyAlertPanel;

	// 커서 추가
	var _cursor = new InputCursor(this.game, 170.0 + 23.0, 740.0 + 16.0);
	gCursor = _cursor;
	_UILayer.add(_cursor);
	
	// timer create
	gTimer = this.game.time.create(false);
	gTimer.loop(1000, this.updateCount, this);
	
	
	// text
	this.testText = "";
	var _txt = this.add.text(170.0+20.0, 755.0, this.testText, { font: '20px 나눔고딕', fill: '#ffffff'});
	gTxt = _txt;

	
	// 오답 연출
	var _WorngInputCover = this.add.sprite(316, 800-57, 'InputCover', null, _effectWrongLayer);
	_WorngInputCover.anchor.x = 0.5;
	_WorngInputCover.visible = false;
	
	var _WrongActionSheet = new PrefabEffWrongAnswer(this.game, 0.0, 0.0);
	gEffectWrong = this.add.existing(_WrongActionSheet);
	
	var _UIFailPanel = new PrefabUIFail(this.game, 360.0, 400.0);
	gFailPanel = this.add.existing(_UIFailPanel);
	
	// 새 아이템 소개 팝업	
	this.add.sprite(0.0, 0.0, 'UIResultBack', null, _NewItemInfoPopup);	
	this.add.sprite(106.0, 111.0, 'NewItemPanel', null, _NewItemInfoPopup);
	// 2
	var _itemInfoText = this.add.text(360.0, 346.0, '이제부터 [폭탄] 아이템이\n등장합니다.\n\n[폭탄]\n화면상 모든 단어 제거', {"font":"bold 30px 나눔고딕","fill":"#103d5f","stroke":"#75daff","strokeThickness":4,"align":"center"}, _NewItemInfoPopup);
	_itemInfoText.anchor.x = 0.5;
	this.add.sprite(297.0, 218.0, 'NewItemPanelSlot', null, _NewItemInfoPopup);
	this.add.sprite(237.0, 159.0, 'TitleNewItem', null, _NewItemInfoPopup);
	this.add.button(490.0, 94.0, 'PopupBtnExit', this.newItemInfoPopupHide, this, 1, 0, 2, 0, _NewItemInfoPopup);
	this.add.sprite(307.0, 228.0, 'BItemIcon1', null, _NewItemInfoPopup);		// 6
	var _itemNoticePanel = this.add.sprite(360.0, 615.0, 'NoticePanelDisturb', null, _NewItemInfoPopup);	// 7
	_itemNoticePanel.anchor.x = 0.5;
	_itemNoticePanel.anchor.y = 0.5;
	_NewItemInfoPopup.visible = false;
	
	this.bgLayer = _BgLayer;
	this.charLayer = _charLayer;
	this.charLayer2 = _charLayer2;
	this.charLayer3 = _charLayer3;
	
	this.CharLayer = new Array();
	for(var j=0; j<MAX_CHAR_LEN; j++) {
		this.CharLayer[j] = _CharLayer[j];
	}
		
	this.bgMaskLayer = _BgMaskLayer;
	this.wordPanel = _WordPanel;
	this.WordPanelText = _WordPanelText;	// 190318 add
		
	this.ItemIconLayer = new Array();
	for(var j=0; j<MAX_ITEM; j++) {
		this.ItemIconLayer[j] = _ItemIconLayer[j];
	}
	this.itemIconBlinkLayer = _ItemIconBlinkLayer;
	this.fullScreenEffLayer = _fullScreenEffLayer;
	this.hammerLayer = _HammerLayer;
	this.itemEffLayer = _itemEffLayer;
	this.effectLayer1 = _EffectLayer1;
	this.uiLayer = _UILayer;
	this.resultLayer = _ResultLayer;
	
	this.effectWrongLayer = _effectWrongLayer;
	
	this.newItemInfoPopup = _NewItemInfoPopup;
	
	gCharLayer = this.charLayer;
	gCharLayer2 = this.charLayer2;
	gCharLayer3 = this.charLayer3;

	gCharLayer = new Array();
	for(var j=0; j<MAX_CHAR_LEN; j++) {
		gCharLayer[j] = this.CharLayer[j];
	}
	
	gWordPanel = this.wordPanel;
	gWordPanelText = this.WordPanelText;	// 190318 add
		
	gItemIconLayer = new Array();
	for(var j=0; j<MAX_ITEM; j++) {
		gItemIconLayer[j] = this.ItemIconLayer[j];
	}
	gItemIconBlinkLayer = this.itemIconBlinkLayer;
	gFullScreenEffLayer = this.fullScreenEffLayer;
	gHammerLayer = this.hammerLayer;
	gItemEffLayer = this.itemEffLayer;
	gEffectLayer1 = this.effectLayer1;
	gMissionPanelLayer = _missionPanelLayer;
	gItemToastMsgLayer = _itemToastMsgLayer;
	gCountLayer = _countLayer;
	gUiLayer = this.uiLayer;
	gResultLayer = this.resultLayer;
		
	gNewItemInfoPopup = this.newItemInfoPopup;

	this.initStageInfo();

	// mobile Keyboard
	if (checkPlatform() != 'mobile') {
		gUiLayer.children[2].visible = false;
	}
	
	// 사운드
	esPopup = this.game.add.audio('Popup', mEffectVolume * 0.01);
	esClick = this.game.add.audio('Click', mEffectVolume * 0.01);
	
	esItem1 = this.game.add.audio('Mole_it1', mEffectVolume * 0.01);
	esItem2 = this.game.add.audio('Mole_it2', mEffectVolume * 0.01);
	esItem3 = this.game.add.audio('Mole_it3', mEffectVolume * 0.01);
	esItem4 = this.game.add.audio('Mole_it4', mEffectVolume * 0.01);
	esItem5 = this.game.add.audio('Mole_it5', mEffectVolume * 0.01);
	esItem6 = this.game.add.audio('Mole_it6', mEffectVolume * 0.01);
	
	esHit = this.game.add.audio('Mole_hit', mEffectVolume * 0.01);
	esIn = this.game.add.audio('Mole_in', mEffectVolume * 0.01);
	esOut = this.game.add.audio('Mole_out', mEffectVolume * 0.01);
	
	esVict = this.game.add.audio('Vict', mEffectVolume * 0.01);
	esLose = this.game.add.audio('Lose', mEffectVolume * 0.01);
	
	es321 = this.game.add.audio('CoDown_3_2_1', mEffectVolume * 0.01);
	esGstart = this.game.add.audio('G_Start', mEffectVolume * 0.01);
	
	esAnsRight = this.game.add.audio('Ans_right', mEffectVolume * 0.01);
	esAnsWrong = this.game.add.audio('Ans_wrong', mEffectVolume * 0.01);

	var _bgmArr = [ -1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 
		               2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
		               1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ];

	if (_bgmArr[ gCurrentStage ] == 1) {
		// 학교(테마 01) : Mole_sch
		this.setBGM('Mole_sch', mBackgroundVolume * 0.01, true);
	}
	else if (_bgmArr[ gCurrentStage ] == 2) {
		// 자연(테마 02) : Mole_nat	
		this.setBGM('Mole_nat', mBackgroundVolume * 0.01, true);
	}
	
	// The AudioContext was not allowed to start. It must be resumed (or created) after a user gesture on the page.
	this.game.time.events.repeat(500, 1, function() {
		if (mBackgroundMute == false) {
			this.playBGM();
		}
	}, this);	
	
};

/* --- end generated code --- */
// -- user code here --




var GEN_TIME = 1300;
var MAX_ITEM = 6;

var MAX_CHAR_LEN = 6;
var MAX_HOLE_LEN = 8;
var MAX_HAMMER_LEN = 10;


var gWords = [ "동해물과", "백두산이", "안녕", "방가", "하이", "마르고", "깡통", "이기상", "오늘밤",
       		"한글", "하느님", "보우하사", "이맘으로", "타자", "연습", "우리", "나라", "충성", "파이브", "식스",
       		"만세", "남산", "다하여", "가나다", "아자차", "무궁화", "소나무", "괴로우나", "강아지",
       		"고양이", "삼천리", "철갑", "즐거우나", "볶음밥", "집밥", "화려강산", "두른듯", "사랑", "짜장밥",
       		"탕수육", "대한사람", "바람서리", "하세요", "유린기", "라조기", "대한으로", "불변함", "나야나",
       		"가지튀김", "새우튀김", "길이", "일세", "우리", "카타파하", "회사", "보전하세", "기상", "밥줘",
       		"황금마차", "둥글레차" ];
               
var correctWordList = ["", "", "", "", "", "", "", ""];
var onTextField;
var onTextFieldInput;

var startCnt = 0;
var endCnt = 0;


// 19.01.12 add
var GAME_STATE = Object.freeze( { "ITEM_INTRO":1, "READY":2, "PLAY":3, "RESULT":4, "GAME_OVER":5 } );
var PLAY_STATE = Object.freeze( { "IDLE":1, "HAMMER":2, "ITEM":3 } );
var gGameState = GAME_STATE.ITEM_INTRO;
var gState = 0;
var gCorrectIndex = -1;

var gItemLaserIndex = 0;

//// 19.01.22 add mission
//var MISSION_TEXT = [
//	"[아모개]를 10회 공격한다.",
//	"10000점 이상의 점수 획득.",
//	"[모아연합]을 10회 공격한다.",
//	"20000점 이상의 점수 획득.",
//	"[지지]를 10회 공격한다.",
//	"30000점 이상의 점수 획득.",
//	"[마망]을 10회 공격한다.",
//	"제한시간동안 [육비]를 5회 이하 공격한다.",
//	"제한시간동안 [야야]를 3회 이하 공격한다.",	// 8
//	"50000점 이상의 점수 획득."
//];

//19.02.20 modify
var MISSION_TEXT = [
//	"[아모개]를 10회 공격한다.",
	"[아모개]를 10회 이상 공격, 2000점 이상 획득.",
	"5000점 이상의 점수 획득.",
//	"[모아연합]을 10회 공격한다.",
	"[모아]를 10회 이상 공격, 6000점 이상 획득.",
	"10000점 이상의 점수 획득.",
//	"[지지]를 10회 공격한다.",
	"[지지]를 10회 이상 공격, 10000점 이상 획득.",
	"15000점 이상의 점수 획득.",
//	"[마망]을 10회 공격한다.",
	"[마망]을 10회 이상 공격, 13000점 이상 획득.",
//	"제한시간동안 [육비]를 5회 이하 공격한다.",
//	"제한시간동안 [야야]를 5회 이하 공격한다.",
	"[육비]를 5회 이하 공격, 15000점 이상 획득.",
	"[야야]를 3회 이하 공격, 17000점 이상 획득.",		// 8
	"25000점 이상의 점수 획득."
];

var gCheckMissionStage = [ 5, 10, 15, 20, 25, 30, 35, 40, 45, 50 ];
var gCurrentStage = 0;	// 테스트로 5스테이지 임시 설정

var gSelectIdx = 0;	//
var gItemList;	// 스테이지 데이터에서 읽어온 사용 가능 아이템 목록(type, per)

var gIsMissionStage = false;	// 미션 스테이지 체크용.
var gStageClear = false;	// 스테이지 클리어 여부 체크용.
var gGetStar = 0;			// 별점 획득.

var gFlagWrong = false;		// 오답에 연출시 입력 방지 플래그

// 아모개, 지지, 모아연합, 마망, 육비, 야야
var gCharTypeCount = [ 0, 0, 0, 0, 0, 0 ];

// 영문자판 알림 토스트 플래그
var isShowKeyAlertPanel = false;
// 50스테이지 클리어 후 처리 플래그
var isShowComingSoonPanel = false;

// 최대점수 초과 클리어 (가산점 추가 플래그)
var gMaxScoreClear = false;
var gMaxScore = 0;

var gResultFail;
var gResultSucessM;
var gResultSucess;
var gComingSoonPanel;

var gLog = {
		stage: 0,
		score: 0,
		point: 0,
		gameStartTime: 0,
		gameEndTime: 0
};

var gNext = 0;

var gWordPanel;
var gWordPanelText;		// 190318 add

Level.prototype.initStageInfo = function() {
	// 초기화
	tajaTyping.value = "";
	gTxt.setText(tajaTyping.value, true);
	
	gState = 0;
	hole = [ 0, 0, 0,  0, 0,  0, 0, 0 ];
	itemSpawnTable = [ 0, 0, 0,  0, 0,  0, 0, 0 ];
	
};

Level.prototype.loadStageData = function() {
	var testCurrentStage = selectStage;

	gCurrentStage = parseInt(testCurrentStage)+1;
	
	if (gCurrentStage > 50) 
		gCurrentStage = 50;
	
	gIsMissionStage = false;

	for (var i=0; i<10; i++) {
		if(gCheckMissionStage[i] === gCurrentStage) {
			gIsMissionStage = true;
		}
	}
	
	gSelectIdx = gCurrentStage-1;
	
	this.gStageDataJSON = this.game.cache.getJSON('stage'+gCurrentStage);

		gCharList = new Array();
		var _charListLen = this.gStageDataJSON.stageData.char.length;

		for (var i=0; i<_charListLen; i++) {
			gCharList.push( {
				type : this.gStageDataJSON.stageData.char[i].type,
				per : this.gStageDataJSON.stageData.char[i].per
			});

			var _charName = [ "", "[아모개]", "[지지]", "[모아]", "[마망]", "[육비]", "[야야]" ];
		}
		gCharPer = new Array();
		for (var i=0; i<_charListLen; i++) {
			for (var j=0; j<gCharList[i].per; j++) {
				gCharPer.push(gCharList[i].type);
			}
		}
		
		gItemList = new Array();
		var _itemListLen = this.gStageDataJSON.stageData.item.length;
		
		for (var i=0; i<_itemListLen; i++) {
			
			gItemList.push( {
				type : this.gStageDataJSON.stageData.item[i].type,
				per : this.gStageDataJSON.stageData.item[i].per
			});
			
			var _itemName = [ "[새총]", "[백기]", "[레이저]", "[지우개]", "[폭탄]", "[새]" ];
		}
		gItemPer = new Array();
		for (var i=0; i<_itemListLen; i++) {
			for (var j=0; j<gItemList[i].per; j++) {
				gItemPer.push(gItemList[i].type);
			}
		}
		
		gWordSetList = new Array();
		var _WordSetLen = this.gStageDataJSON.stageData.wordSet.length;
		
		for (var i=0; i<_WordSetLen; i++) {
			
			gWordSetList.push( {
				type : this.gStageDataJSON.stageData.wordSet[i].type,
				per : this.gStageDataJSON.stageData.wordSet[i].per,
				data : this.gStageDataJSON.stageData.wordSet[i].data
			});
		}
		gWordSetPer = new Array();
		for (var i=0; i<_WordSetLen; i++) {
			for (var j=0; j<gWordSetList[i].per; j++) {
				gWordSetPer.push(gWordSetList[i].type);
			}
		}

};



var hole = [ 0, 0, 0,  0, 0,  0, 0, 0 ];
var itemSpawnTable = [ 0, 0, 0,  0, 0,  0, 0, 0 ];

Level.prototype.spawnChar = function() {
	var __jsonLen = this.gStageDataJSON.stageData.length;
	
	// 19.02.02 modify	======================================================================
	var len = this.gStageDataJSON.stageData.char.length;
	
	var rnd = this.game.rnd.integerInRange(0, 10000) % len;
	gCharRnd = this.gStageDataJSON.stageData.char[rnd].type;
	
	var per = this.gStageDataJSON.stageData.char[rnd].per;
	var _rnd = this.game.rnd.integerInRange(0, 7);
	
	if(hole[_rnd] == 0) {
		if (gItemList.length > 0) {
			// 19.01.12 add
			var _genItem = this.game.rnd.integerInRange(0, 10000) % 100; 
			var _itemCnt = 0;
			for (var i=0; i<8; i++) {
				_itemCnt += itemSpawnTable[i];
			}

			if (_genItem < 10) {
				if (_itemCnt === 0) {
					var _rndGen = (this.game.rnd.integerInRange(0, 100000) % 100);
					var _itemName = [ "", "[폭탄]", "[레이저]", "[새총]", "[새]", "[지우개]", "[돌격기]" ];
					itemSpawnTable[_rnd] = gItemPer[_rndGen];
				}
			}
			// 19.01.12 add end
		}
	
		hole[_rnd] = gCharRnd;
		
		var idx = 0;
		var _r = 0;
		var _wordSetListLen = gWordSetList.length;
		var _selectedType = this.game.rnd.integerInRange(0, 100000) % _wordSetListLen;
		var _dataLen = gWordSetList[ _selectedType].data.length;
		var _selectedWord = 0; 
		
		while(idx !== -1) {
			_r = this.game.rnd.integerInRange(0, 10000000) % _dataLen;
			_selectedWord = gWordSetList[ _selectedType ].data[ _r ];
			
			if (correctWordList.length == 0) {
				idx = -1;
			}
			else {
				idx = correctWordList.indexOf( _selectedWord );
			}
		}
		correctWordList[_rnd] = _selectedWord;		

		gCharLayer[hole[_rnd]-1].children[_rnd].setCharInfo( _selectedWord );
		
		var _showTime = this.gStageDataJSON.stageData.showTime;
		gCharLayer[hole[_rnd]-1].children[_rnd].charUp(_rnd, _showTime);

		var _charName = [ "", "[아모개]", "[지지]", "[모아]", "[마망]", "[육비]", "[야야]" ];

	}
};


var gCheckItemIntro = [ 6, 11, 16, 21, 26, 31 ];

Level.prototype.update = function() {
	
	switch(gGameState) {
	case GAME_STATE.ITEM_INTRO:
		gGameState = -1;
		
		var _result = gCheckItemIntro.indexOf(gCurrentStage);
		if (_result != -1) {
			if (mEffectMute == false) {
				esPopup.play();
			}
			
			this.newItemInfoPopupShow(_result, gCurrentStage);
		}
		else {
			gGameState = GAME_STATE.READY;
		}
		break;
	case GAME_STATE.READY:
		gGameState = -1;
		
		gCountLayer.children[0].visible = true;
		gCountLayer.children[1].visible = true;
		if (mEffectMute == false) {
			es321.play();
		}
	
		this.game.time.events.repeat(1000, 1, function() {
			if (mEffectMute == false) {
				esGstart.play();
			}			
			gCountLayer.children[0].visible = false;
			gCountLayer.children[1].visible = false;
			gCountLayer.children[2].visible = true;
		}, this);
		this.game.time.events.repeat(2000, 1, function() {
			gCountLayer.children[2].visible = false;
			
			if(gIsMissionStage === true) {
				var _idx = (gCurrentStage/5) - 1;
				var _charType = -1;			
				
				if (gCurrentStage === 5 || gCurrentStage === 15 || gCurrentStage === 25 || gCurrentStage === 35 ||
						gCurrentStage === 40 || gCurrentStage === 45) {
	
					switch (gCurrentStage) {
					case 5:
						_charType = 0; 
						break;
					case 15:
						_charType = 2; 
						break;
					case 25:
						_charType = 1; 
						break;
					case 35:
						_charType = 3;
						break;					
					case 40:
						_charType = 4; 
						break;
					case 45:
						_charType = 5;
						break;
					}
					
					gMissionPanelLayer.children[0].show(MISSION_TEXT[_idx] + "("+gCharTypeCount[_charType]+"/10)", _idx, _charType);
				}
				else if (gCurrentStage === 10 || gCurrentStage === 20 || gCurrentStage === 30 || gCurrentStage === 50) {
					gMissionPanelLayer.children[0].show(MISSION_TEXT[_idx], _idx, _charType);
				}
				else if (gCurrentStage === 40 || gCurrentStage === 45) {
					gMissionPanelLayer.children[0].show(MISSION_TEXT[_idx], _idx, _charType);
				}
			}
	
			gCharSpawnEvent = this.game.time.events.loop(GEN_TIME, this.spawnChar, this);
			gTimer.start();
	
			gGameState = GAME_STATE.PLAY;
	
		}, this);
		break;
	case GAME_STATE.PLAY:
		
//		gScoreText.setText(window.innerHeight);
//		
//		if(mPhoneHeight !== 0 && (mPhoneHeight !== window.innerHeight)){
//			mPhoneHeight = window.innerHeight;
//			var ratio = window.innerHeight / 800;
//			console.log("window.innerWidth : " + window.innerWidth);
//			console.log("window.innerHeight : " + window.innerHeight);
//			console.log("ratio : " + ratio);
//			
//			var varUA = navigator.userAgent.toLowerCase(); //userAgent 값 얻기
//			if (varUA.match('android') != null) { 
//			} else if (varUA.indexOf("iphone")>-1||varUA.indexOf("ipad")>-1||varUA.indexOf("ipod")>-1) { 
//			   //IOS 일때 처리
//				this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;
//				this.scale.pageAlignHorizontally = true;
//				this.scale.pageAlignVertically = false;		
//				this.scale.setUserScale(ratio, ratio, 0, 0);    
//			} else {
//			   //아이폰, 안드로이드 외 처리
//				this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;
//				this.scale.pageAlignHorizontally = true;
//				this.scale.pageAlignVertically = false;
//				this.scale.setUserScale(ratio, ratio, 0, 0); 
//			}
//		}
		
			
		
		
		
		if (isShowKeyAlertPanel == true) {
			isShowKeyAlertPanel = false;
			this.game.time.events.repeat(500, 1, this.hideKeyAlertToast, this);
		}
	
		// 190301 목표점수 추가
		// 일반 스테이지 목표점수 표시
		if(gIsMissionStage == false) {
			var _minScore = (1000 + 400 * (gCurrentStage-1));		
			gMissionPanelLayer.children[1].visible = true;
			gMissionPanelLayer.children[2].visible = true;
			gMissionPanelLayer.children[2].setText(_minScore.toString(), true);
		}
		else {
			gMissionPanelLayer.children[1].visible = false;
			gMissionPanelLayer.children[2].visible = false;
		}
		gMissionPanelLayer.visible = true;
		
		if (gFlagWrong == true) {
			this.effectWrongLayer.children[0].visible = true;
		}
		else {
			this.effectWrongLayer.children[0].visible = false;
		}
		
		// 플레이중 미션 체크
		if(gIsMissionStage === true) {
			var _idx = (gCurrentStage/5) - 1;
	
			// 두더지 잡기 체크
			if(gCheckMissionStage[0] === gCurrentStage || gCheckMissionStage[2] === gCurrentStage
					|| gCheckMissionStage[4] === gCurrentStage || gCheckMissionStage[6] === gCurrentStage) {
				var _charType = 0;
				switch (gCurrentStage) {
				case 5:
					_charType = 1;
					break;
				case 15:
					_charType = 3; 
					break;
				case 25:
					_charType = 2; 
					break;
				case 35:
					_charType = 4;
					break;
				}
				
				gMissionPanelLayer.children[0].updateText(MISSION_TEXT[_idx] + "("+gCharTypeCount[_charType-1]+"/10)");
	
				if (gCharTypeCount[_charType-1] >= 10) {
					// 190303 미션 캐릭터 타입 공격 + 점수 획득으로 수정.
					var _missionIdx = ((gCurrentStage-5)/10);
					var _stageClearScore = [ 2000, 6000, 10000, 13000 ];
	 
					if (gScore >= _stageClearScore[_missionIdx]) {
						gStageClear = true;
						gGetStar = 3;
	
						gGameState = GAME_STATE.RESULT;
						break;
					}
				}
			}
			// 두더지 잡기 체크 (미션 8번) Stage 40 : 시간 내 실패 체크 : 성공 체크는 updateCount
			if(gCheckMissionStage[7] === gCurrentStage) {
				gMissionPanelLayer.children[0].updateText(MISSION_TEXT[7] + "("+gCharTypeCount[4]+"/5)");
				if (gCharTypeCount[4] >= 5) {
					gStageClear = false;
					gGetStar = 0;
	
					gGameState = GAME_STATE.RESULT;
					break;
				}
			}
			// 두더지 잡기 체크 (미션 9번) Stage 45 : 시간 내 실패 체크 : 성공 체크는 updateCount
			if(gCheckMissionStage[8] === gCurrentStage) {
				gMissionPanelLayer.children[0].updateText(MISSION_TEXT[8] + "("+gCharTypeCount[5]+"/3)");
				if (gCharTypeCount[5] >= 3) {
					gStageClear = false;
					gGetStar = 0;
	
					gGameState = GAME_STATE.RESULT;
					break;
				}
			}
			
			if (gCurrentStage === 10 || gCurrentStage === 20 || gCurrentStage === 30 || gCurrentStage === 50 ) {
				var _idx = (gCurrentStage/10) - 1;
				var stageClearScore = [ 5000, 10000, 15000, 0, 25000 ];
	
				if (gScore >= stageClearScore[_idx]) {
					gStageClear = true;
					gGetStar = 3;
	
					gGameState = GAME_STATE.RESULT;
					break;
				}
			}
			
			if (gCurrentStage === 40) {
				if (gScore >= 15000 && gCharTypeCount[4] < 5) {
					gStageClear = true;
					gGetStar = 3;
	
					gGameState = GAME_STATE.RESULT;
					break;
				}
			}
	
			if (gCurrentStage === 45) {
				if (gScore >= 17000 && gCharTypeCount[5] < 3) {
					gStageClear = true;
					gGetStar = 3;
	
					gGameState = GAME_STATE.RESULT;
					break;
				}
			}
	
		}
		else {	// 일반 스테이지 체크 (시간 내 체크)
			var _maxScore = (1000 + 400 * (gCurrentStage-1)) * 1.5;
	
			if (gScore >= _maxScore) {
				gMaxScoreClear = true;
				gStageClear = true;
				gGetStar = 3;
	
				gGameState = GAME_STATE.RESULT;
				break;
			}
			
		}
		
		this.gameProcess();
		
			
		if(gState == 2) {
			// 아이템 사용 토스트 메세지
			var _itemIndex = itemSpawnTable[gCorrectIndex];
			gItemToastMsgLayer.children[_itemIndex].visible = true;
			var _itemName = [ "[폭탄]", "[레이저]", "[새총]", "[새]", "[지우개]", "[돌격기]" ];
			if (_itemIndex == 1 || _itemIndex == 2 || _itemIndex == 3) {
				gItemToastMsgLayer.children[7].setText(_itemName[_itemIndex-1] + " 아이템을 사용하였습니다.", true);
			}
			else {
				gItemToastMsgLayer.children[7].setText(_itemName[_itemIndex-1] + " 아이템이 제거됐습니다.", true);
			}
			gItemToastMsgLayer.visible = true;
			this.game.time.events.repeat(1000, 1, this.hideItemToast, this, _itemIndex);
			
			switch(itemSpawnTable[gCorrectIndex]) {
			case 1:
				var idx = gCorrectIndex;
				var arr = new Array( 0, 1, 2, 3, 4, 5, 6, 7 );
				var srcIndex = 0;
				var tmp = new Array();
				var result = new Array();
				
				this.game.time.events.remove(gCharSpawnEvent);

				// 2019-07-08 delete
				/*for (var i=0; i<MAX_HOLE_LEN; i++) {
					var charType = hole[i];
					if (charType > 0) {
						// 190316 : isIdle 체크 추가
//						var charType = hole[i];
//						if (gCharLayer[charType-1].children[i].isIdle == true) {					
							gCharLayer[charType-1].children[i].cancelEvent();
							gCharLayer[charType-1].children[i].hitFear();
							
							gCharTypeCount[charType-1] += 1;
//						}
						
					}
				}*/
				
				for (var i=0; i<10; i++){
					srcIndex = this.game.rnd.integerInRange(1, 7);
					tmp = arr.splice(srcIndex, arr.length-srcIndex);
					arr.reverse();
					result = arr.concat(tmp);
					arr = result;
				}
	
				tmp = arr.splice(arr.indexOf(idx), 1);
				result = tmp.concat(arr);
				arr = result;
				
				if (mEffectMute == false) {
					esItem1.play();
				}
				
				var dt = [ 0, 333, 583, 750, 833, 917, 1000, 1083];
				for(var i=0; i<8; i++) {
					this.game.time.events.repeat(dt[i], 1, this.testBomb, this, arr[i]);
				}
				gCharSpawnEvent = this.game.time.events.loop(GEN_TIME, this.spawnChar, this);
				break;
				
			case 2:
				// testLaser 
				// 레이저 라인 체크
				var idx = gCorrectIndex;
				if(idx >= 0 && idx < 3)
					gItemLaserIndex = 1;
				else if(idx >= 3 && idx < 5)
					gItemLaserIndex = 2;
				else if(idx >= 5 && idx < 8)
					gItemLaserIndex = 3;
				
				// line : 16~18
				if (mEffectMute == false) {
					esItem2.play();
				}
				gItemEffLayer.children[gItemLaserIndex + 15].play();
				
				this.game.time.events.repeat(300, 1, this.testLaserLineCheck, this, gItemLaserIndex);
				break;
				
			case 3:
				var idx = gCorrectIndex;
				var array = new Array();
				for(var i=0; i<8; i++) {
					if (i !== idx && hole[i] !== 0) {
						var charType = hole[i];
						if (charType > 0) {
							if (gCharLayer[charType-1].children[i].isIdle == true) {
								array.push(i);
							}
						}
					}
				}
				var rnd = this.game.rnd.integerInRange(0, 10000) % array.length;
				var target = new Array();
				target.push(idx);
				target.push(array[rnd]);
				
				// 새총 연출
				if (mEffectMute == false) {
					esItem3.play();
				}
				gItemEffLayer.children[37].show();
				
				this.game.time.events.repeat(300, 1, this.showTarget, this, target);
				break;			
				
			case 4:
				// 190228 add : 마이너스 아이템 기능 수정
				// 일반 공격으로 수정
				this.removeItem(gCorrectIndex);
				itemSpawnTable[gCorrectIndex] = 0;
				break;
				
			case 5:
				// 190228 add : 마이너스 아이템 기능 수정 
				// 일반 공격으로 수정
				this.removeItem(gCorrectIndex);
				itemSpawnTable[gCorrectIndex] = 0;
				break;
				
			case 6:
				// 190228 add : 마이너스 아이템 기능 수정			
				// 일반 공격으로 수정
				this.removeItem(gCorrectIndex);
				itemSpawnTable[gCorrectIndex] = 0;
				break;
			}
			itemSpawnTable[gCorrectIndex] = 0;
			gState = 0;
			
		}
		// 190228 add : 마이너스 아이템 기능 수정
		else if(gState == 3) {
			if (itemSpawnTable[gCorrectIndex] == 1 || itemSpawnTable[gCorrectIndex] == 2 || itemSpawnTable[gCorrectIndex] == 3) {
				itemSpawnTable[gCorrectIndex] = 0;
				gState = 0;
				break;
			}
			
			// 아이템 사용 토스트 메세지
			var _itemIndex = itemSpawnTable[gCorrectIndex];
			gItemToastMsgLayer.children[_itemIndex].visible = true;
			var _itemName = [ "[폭탄]", "[레이저]", "[새총]", "[새]", "[지우개]", "[돌격기]" ];
			gItemToastMsgLayer.children[7].setText(_itemName[_itemIndex-1] + " 아이템이 발동 됐습니다.", true);
			gItemToastMsgLayer.visible = true;
			this.game.time.events.repeat(1000, 1, this.hideItemToast, this, _itemIndex);
			
			switch(itemSpawnTable[gCorrectIndex]) {
			case 4:	
				// 새 연출
				if (mEffectMute == false) {
					esItem4.play();
				}
				
				var idx = gCorrectIndex;
				for (var i=0; i<8; i++) {
					var charType = hole[i];
					if (charType > 0) {
						gCharLayer[charType-1].children[i].cancelEvent();
						gCharLayer[charType-1].children[i].hitFear();
						
						if (idx === i)
							gCharTypeCount[charType-1] += 1;
					}
				}
	
				for(var i=0; i<8; i++) {
					if (hole[i] !== 0) {
						gItemEffLayer.children[i + 19].play(i);
					}
				}
	
				gItemEffLayer.children[27].show();
				break;
				
			case 5:
				// 지우개 연출
				if (mEffectMute == false) {
					esItem5.play();
				}
				gItemEffLayer.children[36].show();
				
				var idx = gCorrectIndex;
				var charType = hole[idx];
				if (charType > 0) {
					gCharLayer[charType-1].children[idx].cancelEvent();
					gCharLayer[charType-1].children[idx].hide();
	
					gCharTypeCount[charType-1] += 1;
				}
				
				this.game.time.events.repeat(150, 1, this.showEffEraser, this);	
				break;
				
			case 6:
				// 백기 연출
				var idx = gCorrectIndex;
				if (mEffectMute == false) {
					esItem6.play();
				}
				gItemEffLayer.children[46].show();
				
				this.game.time.events.repeat(400, 1, this.showWFlagTalkbox, this, idx);
				this.game.time.events.repeat(1250, 1, this.showMinusValue, this);
				break;
			}
			itemSpawnTable[gCorrectIndex] = 0;
			gState = 0;
		}
		break;
	case GAME_STATE.RESULT:
		if(gIsMissionStage !== true) {
			var _stageClearScore = (1000 + 400 * (gCurrentStage-1));
			
			if (gScore >= _stageClearScore) {
				if (gScore >= _stageClearScore * 1.5) {
					gGetStar = 3;
				}
				else if (gScore >= _stageClearScore * 1.3) {
					gGetStar = 3;
				}
				else if (gScore >= _stageClearScore * 1.1) {
					gGetStar = 2;
				}
				else if (gScore >= _stageClearScore) {
					gGetStar = 1;
				}
				
				gStageClear = true;
			}
			else {
				gGetStar = 0;
				gStageClear = false;
			}
		}
		else {
			// 40, 45 미션 수정으로 코드 제거
		}
		
		gGameState = 99;
	
		this.game.time.events.repeat(500, 1, this.judgment, this);
		break;
		
	case GAME_STATE.GAME_OVER:
		this.gameOverProduction();
		break;
		
	case 99:
		if (isShowComingSoonPanel == true) {
			isShowComingSoonPanel = false;
			this.game.time.events.repeat(1500, 1, this.hideComingSoonPanel, this);
		}
		break;
		
	case 100:
		if (gCurrentStage <= 50) {	// 190319 modify
			if (gMaxScoreClear == true)
				gScore = gMaxScore;
			
			if (gUUID.toString().indexOf("Guest") == -1) {
				this.clearDataServerSave();
			}
			else {
				this.sessionStorageSave();
			}
		}
		gGameState = 101;
		break;
		
	case 101:
	
		switch (gNext) {
		case 1:
			gGameState = 102;
			this.goMenu();
			break;
		case 2:
			gGameState = 102;
			this.stageReStart();
			break;
		case 3:
			gGameState = 102;
			this.nextStageStart();
			break;
		}
		break;
		
	}	
	
};

//190228 add : 마이너스 아이템 기능 수정 
Level.prototype.removeItem = function(idx) {
	var charType = hole[idx];

	if (charType > 0) {
		gCharLayer[charType-1].children[idx].cancelEvent();
		gCharLayer[charType-1].children[idx].hitFear();
		
		gCharTypeCount[charType-1] += 1;
	}
		
	gHammerLayer.children[idx].init(idx);
	gHammerLayer.children[idx].play();
		
	var cnt = correctWordList[idx].length;
	
	correctWordList[idx] = "";
		
	gScore += (100 * cnt);
		
	if (mEffectMute == false) {
		esAnsRight.play();
	}
};

// 지우개 이펙트 출력
Level.prototype.showEffEraser = function() {
	for(var i=0; i<8; i++) {
		if (hole[i] !== 0) {
			gItemEffLayer.children[i + 28].play(i);
		}
	}
};

// 새총 연출 후 타겟 이펙트
Level.prototype.showTarget = function(_target) {
	for(var i=0; i<8; i++) {
		if (i === _target[0] || i === _target[1]) {
			var charType = hole[i];
			if ( charType > 0) {
				gCharLayer[charType-1].children[i].cancelEvent();
				gCharLayer[charType-1].children[i].hitFear();
				
				gCharTypeCount[charType-1] += 1;
				
				gItemEffLayer.children[i + 38].play(i);
				
				var cnt = correctWordList[i].length;

				gScore += (100 * cnt);

				gScoreText.setText(gScore.toString());
				
				correctWordList[i] = "";
			}
		}
	}
};

// 백기 연출 후 말풍선
Level.prototype.showWFlagTalkbox = function(_target) {
	for(var i=0; i<8; i++) {
		if (i === _target) {
			var charType = hole[i];
			if ( charType > 0) {
				gCharLayer[charType-1].children[i].cancelEvent();
				gCharLayer[charType-1].children[i].hitFear();
				
				gCharTypeCount[charType-1] += 1;
				
				gItemEffLayer.children[i + 47].play(i);
			}
		}
	}
};

Level.prototype.showMinusValue = function() {
	gItemEffLayer.children[55].play();
	(gScore >= 500) ? gScore -= 500 : gScore = 0;
	gScoreText.setText(gScore.toString());
	
};

Level.prototype.hideItemToast = function(idx) {
	gItemToastMsgLayer.children[idx].visible = false;
	gItemToastMsgLayer.visible = false;
};


Level.prototype.setInfo = function() {
	gGameState = GAME_STATE.ITEM_INTRO;
	
	for(var i=0; i<MAX_CHAR_LEN; i++) {
		gCharTypeCount[i] = 0; 
	}
		
	startCnt = 0;
	endCnt = 0;
	
	// 초기화
	gIsMissionStage = false;	// 미션 스테이지 체크용.
	gStageClear = false;	// 스테이지 클리어 여부 체크용.
	
	gFlagWrong = false;
	
	gMaxScoreClear = false;
	gMaxScore = 0;
	
	gGameOverFlag = false;
	
	gNext = 0;
	
	tajaTyping.onkeydown = this.wordsCheck;
	
};

// enter check
Level.prototype.wordsCheck = function(event) {
	that = this;
	
	if (gGameState == 101) {
		if (event.keyCode == 27) {
			gNext = 1;
		}
		
		if (event.keyCode == 13 || event.keyCode == 32) {
			 if (gResultSucessM.visible == true || gResultSucess.visible == true) {
				gNext = 3;
			}
			else {
				gNext = 2;
			}
		}
	}
	
	if ((gFlagWrong == true) || (gGameState != GAME_STATE.PLAY) || ((gGameState != GAME_STATE.PLAY) && (gLife == 0)) ) {
		event.returnValue = false;
		tajaTyping.value = "";
		gTxt.setText(tajaTyping.value, true);
		return;
	}
	
	var wordAnswer = tajaTyping.value;

	// 입력중인 텍스트 지우기
	if (event.keyCode == 27) {
		tajaTyping.value = "";
		gTxt.setText(tajaTyping.value, true);
	}
	
	// 특수키 막기
	//Pgup, pgdn, END, HOME, LEFT, UP, RIGHT, DOWN 버튼 처리
	if ((event.keyCode >= 33 && event.keyCode <= 40) || event.keyCode == 18) {
		event.returnValue = false;
	    return false;
	}
	
	// 영문 막기
	if ((event.keyCode >= 65 && event.keyCode <= 90)) {
		event.returnValue = false;
		
		if (isShowKeyAlertPanel == false) {
			isShowKeyAlertPanel = true;			
			gkeyAlertPanel.visible = true;			
		}
	}
	
	// 스페이스, 엔터 입력 처리
	if (event.keyCode == 13 || event.keyCode == 32) {
		
		if (wordAnswer == "" || wordAnswer == " ") {
			tajaTyping.value = "";
			gTxt.setText(tajaTyping.value, true);
			event.returnValue = false;
		}
		
		// 190304 add: ie에서 스페이스로 입력시 틀림처리 수정(스페이스가 꼭 앞에 붙음...)
		wordAnswer = wordAnswer.trim();
		
		var idx = correctWordList.indexOf(wordAnswer);
		
		gCorrectIndex = idx;
		
		if (wordAnswer != "" && idx != -1) {
			var cnt = correctWordList[idx].length;
			var charType = hole[idx];

			if(itemSpawnTable[idx] === 0) {
				if (charType > 0) {
					gCharLayer[charType-1].children[idx].cancelEvent();
					gCharLayer[charType-1].children[idx].hitFear();
					
					gCharTypeCount[charType-1] += 1;
				}
				
				gHammerLayer.children[idx].init(idx);
				gHammerLayer.children[idx].play();
				
				correctWordList[idx] = "";

				gScore += (100 * cnt);
				
				if (mEffectMute == false) {
					esAnsRight.play();
				}
			}
			else {
				gState = 2;
			}

		}
		else {
			if (tajaTyping.value !== "") {

				tajaTyping.value = "";
				gTxt.setText(tajaTyping.value, true);

				if (mEffectMute == false) {
					esAnsWrong.play();
				}

				gEffectWrong.play();
			}

		}
		
		tajaTyping.value = "";
		gTxt.setText(tajaTyping.value, true);
		event.returnValue = false;
	}
};


Level.prototype.testBomb = function(i) {
	
	// 2019-07-08 add 
	var charType = hole[i];
	if (charType > 0) {
		// 190316 : isIdle 체크 추가
		if (gCharLayer[charType-1].children[i].isIdle == true) {					
			gCharLayer[charType-1].children[i].cancelEvent();
			gCharLayer[charType-1].children[i].hitFear();
			
			gCharTypeCount[charType-1] += 1;
		}
		
	}

	gItemEffLayer.children[i].play(i);
	
	var cnt = correctWordList[i].length;

	gScore += (100 * cnt);

	gScoreText.setText(gScore.toString());
	
	correctWordList[i] = "";
};


Level.prototype.testLaserLineCheck = function(_index) {
	switch(_index) {
	case 1:
		for(var i=0; i<3; i++) {
			this.testLaserEff(i);
		}
		break;
	case 2:
		for(var i=3; i<5; i++) {
			this.testLaserEff(i);
		}
		break;
	case 3:
		for(var i=5; i<8; i++) {
			this.testLaserEff(i);
		}
		break;
	}
	gItemLaserIndex = 0;
};

Level.prototype.testLaserEff = function(i) {
	gItemEffLayer.children[i+8].play(i);
	
	var charType = hole[i];
	if (charType > 0) {
		gCharLayer[charType-1].children[i].cancelEvent();
		gCharLayer[charType-1].children[i].hitFear();

		gCharTypeCount[charType-1] += 1;
	}
	
	var cnt = correctWordList[i].length;

	gScore += (100 * cnt);

	gScoreText.setText(gScore.toString());
	
	correctWordList[i] = "";

};

Level.prototype.wordInputEmpty = function() {
	
};

Level.prototype.tajaInit = function() {
	gLog.gameStartTime = this.getCurrentTime();
	
	this.setInfo();
};


var dt = 0;
var genTime = [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 
               800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1450,
               1500, 1550, 1600, 1650, 1700, 1750, 1800];
var _cnt = 0;

Level.prototype.gameProcess = function() {
	tajaTyping.focus();
	
	if ((gFlagWrong != true)) {
		if (typeof gTxt !== undefined) {
			// 2019-06-24 add
			if(tajaTyping.value.length > 9){
				tajaTyping.value = gTxt.text;
				return;
			}			
			gTxt.setText(tajaTyping.value, true);			
		}
	}
	
    var ctx = gTxt.canvas.getContext("2d");		
    var text = ctx.measureText(gTxt.text);	    
    gCursor.x = 170.0 + 23.0 + text.width;
	
};


Level.prototype.updateCount = function() {
	
	if (gTimerText > 0) {
		gTimerText -= 1;
		
		var txt = pad(parseInt(gTimerText/60), 2) + ":" + pad(parseInt(gTimerText%60), 2);
		gTimerPanel.setText(txt.toString());
		
		this.bmd.clear();
		if (this.gauge_px <= 0)
			this.gauge_px -= gTimeGaugeSpeed;		
		
		var srcRect = {x:this.gauge_px, y:0, width:208, height:40};
		this.bmd.alphaMask('UITimeGauge', 'UITimeGaugeMask', srcRect);

	}
	else {
		gGameState = GAME_STATE.RESULT;
	}
};

Level.prototype.judgment = function() {
	gUiLayer.ignoreChildInput = true;

	tajaTyping.value = "";
	gTxt.setText(tajaTyping.value, true);

	gTimer.pause();	

	this.game.time.events.remove(gCharSpawnEvent);
	for(var j=0; j<MAX_CHAR_LEN; j++) {
		for(var i=0; i<MAX_HOLE_LEN; i++) {
			gCharLayer[j].children[i].cancelEvent();
		}
	}
	
	// 190318 add
	for(var i=0; i<MAX_HOLE_LEN; i++) {
		if (gWordPanel.children[i].visible == true) {
			gWordPanel.children[i].hide();
			gWordPanelText.children[i].visible = false;
		}
	}

	if (gStageClear == true) {
		var _UISuccessPanel = new PrefabUISuccess(this.game, 360.0, 400.0);
		this.add.existing(_UISuccessPanel);
		
		if (mEffectMute == false) {
			esVict.play();
		}
		_UISuccessPanel.show();
	}
	else {
		var _UIFailPanel = new PrefabUIFail(this.game, 360.0, 400.0);
		this.add.existing(_UIFailPanel);
		
		if (mEffectMute == false) {
			esLose.play();
		}
		_UIFailPanel.show();
	}
	
	this.stopBGM();
 
	this.game.time.events.repeat(1000, 1, this.gameOver, this);
	
};

Level.prototype.gameOver = function() {
	
	if (gGameOverFlag == false) {
		gGameOverFlag = true;
		
		var _ResultFail = this.add.group();
		
		this.add.sprite(0.0, 0.0, 'UIResultBack', null, _ResultFail);
		
		this.add.sprite(146.0, 163.0, 'ResultPanelFail', null, _ResultFail);
		
		this.add.button(148.0, 548.0, 'ResultBtnYes', this.stageReStart, this, 1, 0, 2, 0, _ResultFail);
		
		this.add.button(362.0, 548.0, 'ResultBtnNo', this.goMenu, this, 1, 0, 2, 0, _ResultFail);
		
		this.add.text(360.0, 349.0, '재도전 하시겠습니까?', {"font":"bold 32px 나눔고딕","fill":"#ffb5b5","stroke":"#ffb5b5","strokeThickness":6}, _ResultFail);
		_ResultFail.children[4].anchor.x = 0.5;
		this.add.text(360.0, 350.0, '재도전 하시겠습니까?', {"font":"bold 32px 나눔고딕","fill":"#491d28"}, _ResultFail);
		_ResultFail.children[5].anchor.x = 0.5;
		
		gResultFail = _ResultFail;
		
		var _ResultSucessM = this.add.group();
		
		this.add.sprite(0.0, 0.0, 'UIResultBack', null, _ResultSucessM);
		
		var resultSuccessMNextStage = this.add.button(148.0, 648.0, 'ResultBtnContinue', this.nextStageStart, this, 1, 0, 2, 0, _ResultSucessM);
		resultSuccessMNextStage.visible = false;
		var resultSuccessGoMenu = this.add.button(362.0, 648.0, 'BtnSheetExit', this.goMenu, this, 1, 0, 2, 0, _ResultSucessM);
		resultSuccessGoMenu.visible = false;
	
		this.add.sprite(122.0, 98.0, 'ResultPanelSucessn', null, _ResultSucessM);
	
		// =====================================================================================
		// 190310 add SNS
		var _SharePanelM = this.add.sprite(140.0, 488.0, 'SharePanelOnly', null, _ResultSucessM);
		_SharePanelM.visible = false;
		
		// 카카오 공유하기
		var _KakaoM = this.add.button(173.0, 504.0, 'ResultBtnKakao', this.SNS_kako, this, 0, 0, 1, 0, _ResultSucessM);
		_KakaoM.visible = false;
		// 페이스북 공유하기
		var _FaceBookM = this.add.button(378.0, 504.0, 'ResultBtnFace', this.SNS_fb, this, 0, 0, 1, 0, _ResultSucessM);
		_FaceBookM.visible = false;
		// =====================================================================================
		
		this.add.sprite(162.0, 122.0, 'ResultInfoMission', null, _ResultSucessM);
		
		this.add.sprite(246.0, 387.0, 'ResultInfoBar', null, _ResultSucessM);
	
		var _style = { font: "bold 45px 나눔고딕", fill: "#ffffff", boundsAlignH: "center", boundsAlignV: "middle" };
		gScoreText = this.add.text(273.0+17, 395.0+8, gScore, _style, _ResultSucessM);
		gScoreText.setTextBounds(0, 0, 137, 37);
		
		this.add.text(196.0, 335.0, 'STAGE '+ gCurrentStage +' 획득점수', {"font":"bold 38px 나눔고딕","fill":"#77e6ff","stroke":"#77e6ff","strokeThickness":6}, _ResultSucessM);
	
		this.add.text(199.0, 334.0, 'STAGE '+ gCurrentStage +' 획득점수', {"font":"bold 38px 나눔고딕","fill":"#103d5f"}, _ResultSucessM);
		
		this.add.sprite(276.0, 28.0, 'ResultStarPanelM', null, _ResultSucessM);
		
		this.add.sprite(290.0, 30.0, 'ResultStarM', null, _ResultSucessM);
		
		gResultSucessM = _ResultSucessM;
		
		var _ResultSucess = this.add.group();
		
		this.add.sprite(0.0, 0.0, 'UIResultBack', null, _ResultSucess);
		
		var resultSuccessNextStage = this.add.button(148.0, 648.0, 'ResultBtnContinue', this.nextStageStart, this, 1, 0, 2, 0, _ResultSucess);
		resultSuccessNextStage.visible = false;		// 1
		var resultSuccessGoMenu = this.add.button(362.0, 648.0, 'BtnSheetExit', this.goMenu, this, 1, 0, 2, 0, _ResultSucess);
		resultSuccessGoMenu.visible = false;		// 2
		
		this.add.sprite(122.0, 98.0, 'ResultPanelSucessn', null, _ResultSucess);
		
		// =====================================================================================
		// 190310 add SNS
		var _SharePanel = this.add.sprite(140.0, 488.0, 'SharePanelOnly', null, _ResultSucess);
		_SharePanel.visible = false;
		
		// 카카오 공유하기
		var _Kakao = this.add.button(173.0, 504.0, 'ResultBtnKakao', this.SNS_kako, this, 0, 0, 1, 0, _ResultSucess);
		_Kakao.visible = false;
		// 페이스북 공유하기
		var _FaceBook = this.add.button(378.0, 504.0, 'ResultBtnFace', this.SNS_fb, this, 0, 0, 1, 0, _ResultSucess);
		_FaceBook.visible = false;
		// =====================================================================================
		
		this.add.sprite(198.0, 123.0, 'ResultInfoCoin', null, _ResultSucess);
		
		this.add.sprite(246.0, 387.0, 'ResultInfoBar', null, _ResultSucess);
		
		var _style2 = { font: "bold 45px 나눔고딕", fill: "#ffffff", boundsAlignH: "center", boundsAlignV: "middle" };
		gScoreText2 = this.add.text(273.0+17, 395.0+8, gScore, _style2, _ResultSucess);
		gScoreText2.setTextBounds(0, 0, 137, 37);
		
		this.add.text(196.0, 335.0, 'STAGE '+ gCurrentStage +' 획득점수', {"font":"bold 38px 나눔고딕","fill":"#77e6ff","stroke":"#77e6ff","strokeThickness":6}, _ResultSucess);
	
		this.add.text(199.0, 334.0, 'STAGE '+ gCurrentStage +' 획득점수', {"font":"bold 38px 나눔고딕","fill":"#103d5f"}, _ResultSucess);
		
		this.add.sprite(217.0, 38.0, 'ResultStarPanelN', null, _ResultSucess);
		
		gResultSucess = _ResultSucess;
		
		var _ComingSoonLayer = this.add.group();
		var _comingSoon = this.add.sprite(0.0, 400.0, 'CommingSoonAlertPanel', null, _ComingSoonLayer);
		_comingSoon.anchor.y = 0.5;
		_comingSoon.visible = false;
		gComingSoonPanel = _comingSoon;
	
		switch ( gGetStar ) {
		case 3:
			this.add.sprite(399.0, 89.0, 'UIResultPanelStar3', null, _ResultSucess);
		case 2:
			this.add.sprite(303.0, 45.0, 'UIResultPanelStar1', null, _ResultSucess);
		case 1:
			this.add.sprite(226.0, 90.0, 'UIResultPanelStar2', null, _ResultSucess);
			break;
		}
		
		if (gStageClear == true) {
			gResultFail.visible = false;
			gResultSucessM.visible = false;
			gResultSucess.visible = false;
			
			if (gSelectIdx%5 == 4) {
				gResultSucessM.visible = true;
			}
			else {
				gResultSucess.visible = true;
			}
		}
		else {
			gResultSucessM.visible = false;
			gResultSucess.visible = false;
		}
		
		this.game.time.events.repeat(700, 1, function() {
			gGameState = GAME_STATE.GAME_OVER;		
		}, this);
		
	}

};

var gGameOverFlag = false;

// 190309 add
Level.prototype.gameOverProduction = function() {

	if (gStageClear == true) {
		gResultFail.visible = false;
	
		gResultSucessM.visible = false;
		gResultSucess.visible = false;
		
		if (gSelectIdx%5 == 4) {
			gResultSucessM.visible = true;
	
			if (gMaxScoreClear == true) {
				var bonusScore = parseInt(gTimerText * gCurrentStage * 5 * gLife / 2);
				gMaxScore = parseInt(gScore + bonusScore);				
				var _tmpScore = parseInt(gScoreText.text);
				var _d = (bonusScore > 25) ? parseInt(bonusScore / 25) : 1;
				
				if (_tmpScore < gMaxScore) {
					_tmpScore += _d;
					
					if (_tmpScore > gMaxScore) { 
						_tmpScore = gMaxScore;
					}
					
					gScoreText.setText(_tmpScore, true);
				}
				else {
					gGameState = 100;
					gResultSucessM.children[1].visible = true;
					gResultSucessM.children[2].visible = true;
					
					// 190310 add SNS
					gResultSucessM.children[4].visible = true;
					gResultSucessM.children[5].visible = true;
					gResultSucessM.children[6].visible = true;

				}
			}
			else {
				gGameState = 100;
				gResultSucessM.children[1].visible = true;
				gResultSucessM.children[2].visible = true;

				// 190310 add SNS
				gResultSucessM.children[4].visible = true;
				gResultSucessM.children[5].visible = true;
				gResultSucessM.children[6].visible = true;
				
			}
		}
		else {
			gResultSucess.visible = true;

			if (gMaxScoreClear == true) {
				var bonusScore = parseInt(gTimerText * gCurrentStage * 5 * gLife / 2);
				gMaxScore = parseInt(gScore + bonusScore);
				var _tmpScore = parseInt(gScoreText2.text);
				var _d = (bonusScore > 25) ? parseInt(bonusScore / 25) : 1;
				
				if (_tmpScore < gMaxScore) {
					_tmpScore += _d;
					
					if (_tmpScore > gMaxScore) { 
						_tmpScore = gMaxScore;
					}
					
					gScoreText2.setText(_tmpScore, true);
				}
				else {
					gGameState = 100;
					gResultSucess.children[1].visible = true;
					gResultSucess.children[2].visible = true;
					
					// 190310 add SNS
					gResultSucess.children[4].visible = true;
					gResultSucess.children[5].visible = true;
					gResultSucess.children[6].visible = true;
				}
			}
			else {
				gGameState = 100;
				gResultSucess.children[1].visible = true;
				gResultSucess.children[2].visible = true;

				// 190310 add SNS
				gResultSucess.children[4].visible = true;
				gResultSucess.children[5].visible = true;
				gResultSucess.children[6].visible = true;
			}
	
		}
	
	}
	else {
		gResultSucessM.visible = false;
		gResultSucess.visible = false;
		
		gGameState = 101;
	}
	
};


function pad(n, width) {
	  n = n + '';
	  return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
};


// wordsCheck 코드와 거의 동일.
Level.prototype.inputBtn = function() {

	that = this;
	
	if ((gFlagWrong == true) || (gGameState != GAME_STATE.PLAY) || ((gGameState != GAME_STATE.PLAY) && (gLife == 0)) ) {
		tajaTyping.value = "";
		gTxt.setText(tajaTyping.value, true);
		return;
	}
		
	var wordAnswer = tajaTyping.value;

	if (wordAnswer == "" || wordAnswer == " ") {
		tajaTyping.value = "";
		gTxt.setText(tajaTyping.value, true);
		event.returnValue = false;
	}
	wordAnswer = wordAnswer.trim();

	var idx = correctWordList.indexOf(wordAnswer);
	gCorrectIndex = idx;
	
	if (correctWordList[idx]) {
		var cnt = correctWordList[idx].length;
		var charType = hole[idx];

		if(itemSpawnTable[idx] === 0) {
			if (charType > 0) {
				gCharLayer[charType-1].children[idx].cancelEvent();
				gCharLayer[charType-1].children[idx].hitFear();
				
				gCharTypeCount[charType-1] += 1;
			}
			
			gHammerLayer.children[idx].init(idx);
			gHammerLayer.children[idx].play();
			
			correctWordList[idx] = "";
			
			gScore += (100 * cnt);
			
			if (mEffectMute == false) {
				esAnsRight.play();
			}
		}
		else {
			gState = 2;
		}

	}
	else {
		if (tajaTyping.value !== "") {
			tajaTyping.value = "";
			gTxt.setText(tajaTyping.value, true);

			if (mEffectMute == false) {
				esAnsWrong.play();
			}
			gEffectWrong.play();
				
		}

	}
	
	tajaTyping.value = "";
	
};

// 결과화면 확인버튼 누르면 메뉴화면으로
Level.prototype.goMenu = function () {
	if (mEffectMute == false) {
		esClick.play();
	}
	
	// 2019-07-08 add
	gOldPage = parseInt((gCurrentStage-1)/5);
	
	if (gStageClear == true) {
		
		if (gCurrentStage < 50) {
			var _nextStage = nextStage;

			if (gCurrentStage >= _nextStage+1) {
				_nextStage = gCurrentStage;
			}

			nextStage = _nextStage;
		
		}
	}
	else {
		// 190422 add : 지라 830번
		// 스테이지 클리어 실패시 현재 스테이지에 대한 처리 수정.
		gCurrentStage -= 1;
	}
	
	// 2019-07-08 delete
//	gOldPage = parseInt((gCurrentStage-1)/5);
	
	this.game.state.start("Menu");
};

Level.prototype.nextStageStart = function() {
	if (mEffectMute == false) {
		esClick.play();
	}
	
	if (gCurrentStage < 50) {
		selectStage = gCurrentStage;
		
		this.loadStageData();
		
		this.game.state.restart();
	}
	else {
		// 190303 : coming soon
		isShowComingSoonPanel = true;
		gComingSoonPanel.visible = true;
	}
};

Level.prototype.stageReStart = function() {
	this.loadStageData();
	
	this.game.state.restart();
	
};




var gNewItemIndex = 0;

// 새 아이템 소개 팝업 표시
Level.prototype.newItemInfoPopupShow = function (_idx, _stage) {
	var _arr = [ 6, 11, 16, 21, 26, 31 ];
	var _itemIntro;

	if (gUUID.toString().indexOf("Guest") == -1) {		
		_itemIntro = localStorage.getItem("ITEM_INTRO_"+_idx);
	}
	else {
		_itemIntro = sessionStorage.getItem("ITEM_INTRO_"+_idx);
	}
	
		
	if (_itemIntro == null) {
		if (gUUID.toString().indexOf("Guest") == -1) {		
			localStorage.setItem("ITEM_INTRO_"+_idx, _arr[_idx]);
		}
		else {
			sessionStorage.setItem("ITEM_INTRO_"+_idx, _arr[_idx]);
		}
	}
	else {
		if (_itemIntro != _arr[_idx]) {
			if (gUUID.toString().indexOf("Guest") == -1) {		
				localStorage.setItem("ITEM_INTRO_"+_idx, _arr[_idx]);
			}
			else {
				sessionStorage.setItem("ITEM_INTRO_"+_idx, _arr[_idx]);
			}			
		}
		else {
			gGameState = GAME_STATE.READY;
			return;
		}
	}

	var _itemIdx = [ 3, 6, 2, 5, 1, 4 ];
	var msg = [
	           '이제부터 [새총] 아이템이\n등장합니다.\n\n[새총]\n자신과 무작위 1개 단어 제거',
	           '이제부터 [돌격기] 아이템이\n등장합니다.\n\n[돌격기]\n점수 -500점', 
	           '이제부터 [레이저] 아이템이\n등장합니다.\n\n[레이저]\n해당 가로 줄 모든 단어 제거',
	           '이제부터 [지우개] 아이템이\n등장합니다.\n\n[지우개]\n모든 단어가 가려짐',
	           '이제부터 [폭탄] 아이템이\n등장합니다.\n\n[폭탄]\n화면상 모든 단어 제거',
	           '이제부터 [새] 아이템이\n등장합니다.\n\n[새]\n화면상 모든 단어 사라짐'
	];
	
	gNewItemInfoPopup.children[2].setText(msg[_idx], true);
	gNewItemInfoPopup.children[6].loadTexture('BItemIcon'+_itemIdx[_idx], 0, false);

	if (_idx == 0 || _idx == 2 || _idx == 4) {
		gNewItemInfoPopup.children[7].visible = false;
	}
	else {
		gNewItemInfoPopup.children[7].visible = true;
	}
	
	gNewItemInfoPopup.visible = true;

};

Level.prototype.newItemInfoPopupHide = function () {
	if (mEffectMute == false) {
		esClick.play();
	}
	
	gGameState = GAME_STATE.READY;

	gNewItemInfoPopup.visible = false;

};

// add : 190221 - 게스트 유저용. (세션 스토리지 저장.)
Level.prototype.sessionStorageSave = function () {
	selectStage = gCurrentStage;
	gStageIDX = selectStage;
	
	var saveStageClearData = {
		stage : gStageIDX,
		star : gGetStar,
		score : gScore
	};
	
	// Make sure to stringify
	var jsonData = JSON.stringify(saveStageClearData);
	
	sessionStorage.setItem("SAVE_DATA_"+gStageIDX, jsonData);
	gStageIDX++;
	
	sessionStorage.setItem("LAST_STAGE", gStageIDX);
	
};


var gStageIDX = 0;

//190221 - 서버 저장으로 수정.
Level.prototype.clearDataServerSave = function () {
	that = this;
	
	selectStage = gCurrentStage;
	gStageIDX = selectStage;
	
	var saveStageClearData =
	{
			uuid : gUUID,
			nick_name : gNickName,			
			stage : gStageIDX,
			star : gGetStar,
			score : gScore,
			date : this.getCurrentTime()
	};	

	// Make sure to stringify
	var jsonData = JSON.stringify(saveStageClearData);
	
	var jsonPack = {};          
    var ciphertext = CryptoJS.AES.encrypt(jsonData, "!eogksalsrnrakstp@#");
    jsonPack.packet = "" + ciphertext; 
	
	var http = new XMLHttpRequest();

	http.open('POST', gURL + 'game/mole/end');
	
	http.setRequestHeader('Content-type', 'application/json');

	http.send(  JSON.stringify(jsonPack) );
//	http.send(jsonData);
	
	http.onreadystatechange = function() {
		if ( http.readyState == 4 ) {
			if (http.status == 200) {
				if ((nextStage > (gCurrentStage-1) && gLoadStageClearData[1][gCurrentStage-1].star < 3 && gGetStar >= 3) ||
						((nextStage+1) <= gCurrentStage && gGetStar >= 3)) {
					var _arrHcPoint = [ 0, 
					                    1, 3, 5, 8, 12, 16, 21, 26, 33, 40, 
					                    47, 55, 64, 74, 84, 95, 106, 119, 132, 145, 
					                    159, 174, 190, 206, 223, 240, 258, 277, 296, 317, 
					                    337, 359, 381, 404, 427, 451, 476, 501, 527, 554, 
					                    581, 610, 638, 668, 698, 728, 760, 792, 824, 858 ];

					//190419 : 한컴 포인트 정책 미결정으로 화면에 출력하는 포인트 획득 메세지만 지워달라는 요청 반영.
					// 190502 : 한컴 포인트 획득에 대한 테스트 요청으로 다시 보이게 수정. (아래 한줄)
					that.toastAlert(_arrHcPoint[gStageIDX]);	// 190323 add
					that.requestUpdateHCPoint(_arrHcPoint[gStageIDX]);
				}			
				that.sendLogGame();
				
				// 190319 modify 
				if (gStageIDX < 50)
					gStageIDX++;
			}
      		else {
      			console.log("Level - http.status : " + http.status);
      		}
		}
	};


};


Level.prototype.requestUpdateHCPoint = function (_point) {
  	gLog.point = _point;
  	
  	var gDate = new Date();
  	gDate = gDate.getFullYear() + "-" + 
		  	(gDate.getMonth() + 1) + "-" + 
		  	gDate.getDate() + " " +
		  	gDate.getHours() + ":" +
		  	gDate.getMinutes() + ":" +
		  	gDate.getSeconds();
  	
  	var numDate = Date.parse(gDate);
  	
	var reqData = {
			uuid : gUUID,
			nick_name : gNickName,
			point : _point,
			game_code : 10002,
			date : numDate
		};	
	
	// Make sure to stringify
  	var jsonData = JSON.stringify(reqData);
  	
  	var jsonPack = {};          
    var ciphertext = CryptoJS.AES.encrypt(jsonData, "!eogksalsrnrakstp@#");
    jsonPack.packet = "" + ciphertext; 
  	
    var http = new XMLHttpRequest();

    http.open('POST', gURL + 'game/update_point');    
    http.setRequestHeader('Content-type', 'application/json');

//    http.send(jsonData);
    http.send(  JSON.stringify(jsonPack) );

    http.onreadystatechange = function() {
    	if ( http.readyState == 4 ) {
    		if (http.status == 200) {
    			console.log("Level - response : hcpoint update complete!");    			
//    			this.toastAlert(_point);
    		}
      		else {
      			console.log("Level - http.status (point) : " + http.status);
      		}
    	}
    };
    
};

// 한컴 포인트 획득 표시
Level.prototype.toastAlert = function (_hcPoint) {

	toast = stToastMsg.getInstance(this);
	toast.showToastMsg(2000, _hcPoint);
	
	this.game.time.events.repeat(2000, 1, toast.hideToastMsg, this);

};


//PC & 모바일 접속 구분
function checkPlatform()
{

	var filter = "win16|win32|win64|mac|macintel";
	var connect;
	if ( navigator.platform ) {
		if ( filter.indexOf( navigator.platform.toLowerCase() ) < 0 ) {
			connect = 'mobile';
		} else {
			connect = 'pc';
		} 
	}
	else {
		connect = 'err';
	}

	return connect;
}


//var mPhoneHeight = 0;
Level.prototype.showKeyboard = function () {
//	mPhoneHeight = window.innerHeight;
	
//	this.scale.maxWidth = window.innerWidth;
//	this.scale.maxHeight = window.innerHeight / 2;
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;	
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = false;

	var varUA = navigator.userAgent.toLowerCase(); //userAgent 값 얻기
	if (varUA.match('android') != null) { 
	   //안드로이드 일때 처리
	} else if (varUA.indexOf("iphone")>-1||varUA.indexOf("ipad")>-1||varUA.indexOf("ipod")>-1) { 
	   //IOS 일때 처리
		this.scale.maxWidth = (window.innerHeight * 720) / (800 * 2);
		this.scale.maxHeight = window.innerHeight / 2;
	} else {
	   //아이폰, 안드로이드 외 처리
	}
	
	tajaTyping.focus();
};


// 190303
Level.prototype.hideKeyAlertToast = function() {
	gkeyAlertPanel.visible = false;
	isShowKeyAlertPanel = false;
};

//190303
Level.prototype.hideComingSoonPanel = function() {
	gComingSoonPanel.visible = false;
	isShowComingSoonPanel = false;
};

Level.prototype.SNS_kako = function () {
	this.sendLogKakao();
	sendLink();
};
Level.prototype.SNS_fb = function () {
	this.sendLogFaceBook();
	
	// 190319 modify
	var snsURL = encodeURIComponent(gHomeURL);
	window.open("http://www.facebook.com/sharer/sharer.php?u=" + snsURL);
};


// 로그작업
Level.prototype.timePadding = function(n, digits) {
    var zero = '';
    var len = n.toString();

    if (len.length < digits) {
      for (var i = 0; i < digits - len.length; i++)
        zero += '0';
    }
    return zero + len;
};

Level.prototype.getCurrentTime = function () {
	var date = new Date();
	var _time = this.timePadding(date.getFullYear(), 4) + "-" + 
	            this.timePadding((date.getMonth() + 1), 2) + "-" + 
	            this.timePadding(date.getDate(), 2) + " " +
	            this.timePadding(date.getHours(), 2) + ":" +
	            this.timePadding(date.getMinutes(), 2) + ":" +
	            this.timePadding(date.getSeconds(), 2);
	
	return _time;
};

Level.prototype.sendLogGame = function () {
	gLog.gameEndTime = this.getCurrentTime();
	
	var reqData = {
			uuid : gUUID,
			nick_name : gNickName,
			stage : gCurrentStage,
			score : gScore,
//			point : gLog.point,
			game_start_time : gLog.gameStartTime,
			game_end_time : gLog.gameEndTime
		};
	
	// Make sure to stringify
  	var jsonData = JSON.stringify(reqData);
  	
    var http = new XMLHttpRequest();
    http.open('POST', gURL + 'game/mole/start_end_game_log');    
    http.setRequestHeader('Content-type', 'application/json');

    http.send(jsonData);

    http.onreadystatechange = function() {
    	if ( http.readyState == 4 ) {
    		if (http.status == 200) {
    			console.log("Level - gameLog send complete!");    			
    		}
      		else {
      			console.log("Level - http.status (gameLog) : " + http.status);
      		}
    	}
    };
    
};

Level.prototype.sendLogKakao = function () {
	
	var reqData = {
			uuid : gUUID,
			nick_name : gNickName,
			tier_1 : "",
			tier_2 : 0,
			personal_rank : 0,
			school_rank : 0, 
			score : gScore,
			win_count : 0,
			typing_count : 0,
			acc : 0,
			pos : 3
		};	
	
	// Make sure to stringify
  	var jsonData = JSON.stringify(reqData);
  	
    var http = new XMLHttpRequest();
    http.open('POST', gURL + 'game/mole/write_share_kakao');    
    http.setRequestHeader('Content-type', 'application/json');

    http.send(jsonData);

    http.onreadystatechange = function() {
    	if ( http.readyState == 4 ) {
    		if (http.status == 200) {
    			console.log("Level - kakaoLog send complete!");    			
    		}
      		else {
      			console.log("Level - http.status (kakaoLog) : " + http.status);
      		}
    	}
    };
    
};

Level.prototype.sendLogFaceBook = function () {

	var reqData = {
			uuid : gUUID,
			nick_name : gNickName,
			tier_1 : "",
			tier_2 : 0,
			personal_rank : 0,
			school_rank : 0, 
			score : gScore,
			win_count : 0,
			typing_count : 0,
			acc : 0,
			pos : 3
		};	
	
	// Make sure to stringify
  	var jsonData = JSON.stringify(reqData);
  	
    var http = new XMLHttpRequest();
    http.open('POST', gURL + 'game/mole/write_share_facebook');    
    http.setRequestHeader('Content-type', 'application/json');

    http.send(jsonData);

    http.onreadystatechange = function() {
    	if ( http.readyState == 4 ) {
    		if (http.status == 200) {
    			console.log("Level - faceBookLog send complete!");    			
//    			console.log("response : " + http.responseText);    			
    		}
      		else {
      			console.log("Level - http.status (faceBookLog) : " + http.status);
      		}
    	}
    };
    
};



// 사운드
var inGameAudio;
Level.prototype.setBGM = function (aAudioName, volume, aIsLoop){   
	   var audioName = (aAudioName === undefined) ? null : aAudioName;
	   var isLoop = aIsLoop === undefined ? false : aIsLoop;
	   
	   if (audioName === null) return;
	   
	   inGameAudio = this.game.add.audio(audioName);
	   inGameAudio.volume = volume;
	   inGameAudio.loop = isLoop;
	   
};

Level.prototype.playBGM = function (){
	inGameAudio.play();
};

Level.prototype.stopBGM = function (){
	inGameAudio.stop();
};

