// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)

/**
 * BaseCharacterIngame
 * 
 * @param {Phaser.Game}
 *            aGame A reference to the currently running game.
 * @param {Number}
 *            aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number}
 *            aY The y coordinate (in world space) to position the Sprite at.
 * @param {any}
 *            aKey This is the image or texture used by the Sprite during
 *            rendering. It can be a string which is a reference to the Cache
 *            entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any}
 *            aFrame If this Sprite is using part of a sprite sheet or texture
 *            atlas you can specify the exact frame to use by giving a string or
 *            numeric index.
 */
function BaseCharacterIngame(aGame, aX, aY, aKey, aFrame) {
	this.beforeCreate();

	var pKey = aKey === undefined ? null : aKey;
	var pFrame = aFrame === undefined ? null : aFrame;

	Phaser.Sprite.call(this, aGame, aX, aY, pKey, pFrame);

	this.afterCreate();
}

/** @type Phaser.Sprite */
var BaseCharacterIngame_proto = Object.create(Phaser.Sprite.prototype);
BaseCharacterIngame.prototype = BaseCharacterIngame_proto;
BaseCharacterIngame.prototype.constructor = BaseCharacterIngame;

/* --- end generated code --- */
// -- user code here --
// 캐릭터 점프 트윈.
BaseCharacterIngame.prototype.beforeCreate = function() {

};

BaseCharacterIngame.prototype.afterCreate = function() {
	this.tweenA = null;
	this.tweenB = null;
};

BaseCharacterIngame.prototype.setPlay = function(aAnimaitonName, aIsTween) {
	var isTween = false;

	if (this === undefined || this.animations === undefined) {
		//console.log("BaseCharacterIngame SetPlay undefined!!!");
		return;
	}
	if (aIsTween !== undefined && aIsTween !== null) {
		isTween = aIsTween;
	}
	if (this.visible === false)
		this.visible = true;
	if (this.alpha === 0)
		this.alpha = 1;

	switch (aAnimaitonName) {
	case "IDLE":
		this.animations.play("IDLE");
		break;

	case "JUMP_IDLE":
		this.animations.play("JUMP_IDLE");

		break;
	case "JUMP":
		this.animations.play("JUMP");
		if (isTween)
			this.playTweenJump();
		break;

	case "JUMP_LANDING":
		this.animations.play("JUMP_LANDING");
		break;

	case "DROP_IDLE":
		this.animations.play("DROP_IDLE");
		break;

	case "DROP":
		this.animations.play("DROP");
		if (isTween)
			this.playTweenDrop();
		break;
	case "APPEAR_IDLE":
		if (isTween)
			this.playTweenAppearIdle();
		this.animations.play("APPEAR_IDLE");
		break;

	case "APPEAR":
		if (isTween)
			this.playTweenAppear();
		this.animations.play("APPEAR");
		break;

	case "APPEAR_LANDING":
		this.animations.play("APPEAR_LANDING");
		break;
	}

	//console.log("BaseCharacterIngame aAnimaitonName is " + aAnimaitonName);
};

BaseCharacterIngame.prototype.update = function() {
	// 기존함수테스트
	this.gameProcess();
};

BaseCharacterIngame.prototype.gameProcess = function() {
	this.processCharacter();
	this.animationOnComplete();
};

BaseCharacterIngame.prototype.processCharacter = function() {

};

BaseCharacterIngame.prototype.getCurAnimationName = function() {
	return this.animations.currentAnim.name;
};

BaseCharacterIngame.prototype.checkCurrentAnimation = function(aAnimation) {
	var returnValue = this.animations.currentAnim.name === aAnimation ? true : false;
	return returnValue;
};

BaseCharacterIngame.prototype.checkEndFrame = function(aAnimationName) {
	var returnValue = ((aAnimationName === this.animations.currentAnim.name) && this.animations.currentAnim.isFinished) ? true : false;
	return returnValue;
};

BaseCharacterIngame.prototype.checkEndTween = function(aAnimationName) {
	var returnValue = ((aAnimationName === this.animations.currentAnim.name)
			&& (this.tweenA.isRunning === false) && (this.tweenB.isRunning === false)) ? true : false;
	return returnValue;
};

BaseCharacterIngame.prototype.animationOnComplete = function() {
	if (this.animations.currentAnim.isFinished === false)
		return;

	switch (this.animations.currentAnim.name) {
	case "IDLE":
		this.setPlay("IDLE");
		break;

	case "JUMP_IDLE":
		this.setPlay("JUMP", true);

		break;
	case "JUMP":
		// this.setPlay("JUMP_LANDING");
		break;

	case "JUMP_LANDING":
		this.setPlay("IDLE");
		break;

	case "DROP_IDLE":
		this.setPlay("DROP");
		break;

	case "DROP":
		// this.setPlay("APPEAR_IDLE");
		break;

	case "APPEAR_IDLE":
		//this.setPlay("APPEAR");
		break;

	case "APPEAR":
		//this.setPlay("APPEAR_LANDING");
		break;

	case "APPEAR_LANDING":
		this.setPlay("IDLE");
		break;
	}
};

BaseCharacterIngame.prototype.setRemoveTween = function() {
	// if(this.tweenA !== null) this.game.tweens.remove(this.tweenA);
	// if(this.tweenB !== null) this.game.tweens.remove(this.tweenB);
	// this.game.tweens.removeFrom(this, true);
	if (this.tweenA !== null)
		this.tweenA.pendingDelete = true;
	if (this.tweenB !== null)
		this.tweenB.pendingDelete = true;
};

// 트윈은 있는 동작만 추가한다.
BaseCharacterIngame.prototype.playTweenJump = function() {
	this.setRemoveTween();

	this.tweenA = this.game.add.tween(this).to({
		y : this.y - 150
	}, 500, "Quart.easeOut");
	this.tweenB = this.game.add.tween(this).to({
		y : this.y
	}, 600, "Quad.easeIn", false, 100);

	this.tweenA.chain(this.tweenB).start();
	this.tweenB.onComplete.add(this.endTweenJump, this);
};

BaseCharacterIngame.prototype.endTweenJump = function() {
	this.setPlay("JUMP_LANDING");
};

BaseCharacterIngame.prototype.playTweenDrop = function() {
	this.setRemoveTween();

	//console.log("playTweenDrop!!");

	this.tweenA = this.game.add.tween(this).to({
		y : 700
	}, 700, "Quad.easeIn", false, 100);

	this.tweenA.start();
	this.tweenA.onComplete.add(this.endTweenDrop, this);
};

BaseCharacterIngame.prototype.endTweenDrop = function() {
	this.setPlay("IDLE");
};

BaseCharacterIngame.prototype.playTweenAppearIdle = function() {
	this.setRemoveTween();

	//console.log("playTweenAppearIdle!!");

	this.tweenA = this.game.add.tween(this).to({
		y : 170
	}, 350, "Linear", false);

	this.tweenA.start();
	this.tweenA.onComplete.add(this.endTweenAppearIdle, this);
};

BaseCharacterIngame.prototype.endTweenAppearIdle = function() {
	this.setPlay("APPEAR", true);
};

BaseCharacterIngame.prototype.playTweenAppear = function() {
	this.setRemoveTween();

	//console.log("playTweenAppear!!");

	this.tweenA = this.game.add.tween(this).to({
		y : 436
	}, 350, "Linear", false);

	this.tweenA.start();
	this.tweenA.onComplete.add(this.endTweenAppear, this);
};

BaseCharacterIngame.prototype.endTweenAppear = function() {
	this.setPlay("APPEAR_LANDING");
};