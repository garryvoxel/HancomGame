// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * BaseCharacterResult
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function BaseCharacterResult(aGame, aX, aY, aKey, aFrame) {
	var pKey = aKey === undefined ? null : aKey;
	var pFrame = aFrame === undefined ? null : aFrame;

	Phaser.Sprite.call(this, aGame, aX, aY, pKey, pFrame);
	
}

/** @type Phaser.Sprite */
var BaseCharacterResult_proto = Object.create(Phaser.Sprite.prototype);
BaseCharacterResult.prototype = BaseCharacterResult_proto;
BaseCharacterResult.prototype.constructor = BaseCharacterResult;

/* --- end generated code --- */
// -- user code here --
BaseCharacterResult.prototype.beforeCreate = function() {

};

BaseCharacterResult.prototype.afterCreate = function() {
	
};

BaseCharacterResult.prototype.setPlay = function(aAnimaitonName, aIsTween) {
	var isTween = false;

	if (this === undefined || this.animations === undefined) {
		//console.log("BaseCharacterResult SetPlay undefined!!!");
		return;
	}
	if (aIsTween !== undefined && aIsTween !== null) {
		isTween = aIsTween;
	}
	if (this.visible === false)
		this.visible = true;
	if (this.alpha === 0)
		this.alpha = 1;

	switch (aAnimaitonName) {
	case "RESULT_WIN":
		this.animations.play("RESULT_WIN");
		break;
		
	case "RESULT_LOSE":
		this.animations.play("RESULT_LOSE");
		break;
		
	case "RESULT_DRAW":
		this.animations.play("RESULT_DRAW");
		break;
	}
	//console.log("BaseCharacterResult aAnimaitonName is " + aAnimaitonName);
};


BaseCharacterResult.prototype.update = function() {
	// 기존함수테스트
	this.gameProcess();
};

BaseCharacterResult.prototype.gameProcess = function() {
	this.animationOnComplete();
};

BaseCharacterResult.prototype.animationOnComplete = function() {
	if (this.animations.currentAnim.isFinished === false)
		return;

	switch (this.animations.currentAnim.name) {
	case "RESULT_WIN":
		this.setPlay("RESULT_WIN");
		break;
		
	case "RESULT_LOSE":
		this.setPlay("RESULT_LOSE");
		break;

	case "RESULT_DRAW":
		this.setPlay("RESULT_DRAW");
		break;
	}
};