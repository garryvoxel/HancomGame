
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


/**
 * CoinV1
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function CoinV1(aGame, aX, aY, aKey, aFrame) {
	
	this.beforeCreate();
	
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'coin_aniSheet', aFrame == undefined || aFrame == null? 1 : aFrame);
	this.anchor.setTo(0.5, 0.4);
	this.animations.add('STAND_BY', [0], 24, true);
	this.animations.add('DROP_BASIC', [1], 24, true);
	this.animations.add('DROP_ADVENCE_LEFT_1', [1], 24, true);
	this.animations.add('DROP_ADVENCE_LEFT_2', [1], 24, true);
	this.animations.add('DROP_ADVENCE_RIGHT_1', [1], 24, true);
	this.animations.add('DROP_ADVENCE_RIGHT_2', [1], 24, true);
	this.animations.add('DROP_DIRECT', [1], 24, true);
	this.animations.add('DROP_ROLLING', [0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6], 36, true);
	this.animations.add('PILE', [1], 24, true);
	this.animations.add('PILE_DOWN', [1], 24, true);
	this.animations.add('CRUMBLE', [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], 12, true);
	var _anim_FINISH = this.animations.add('FINISH', [0], 60, false);
	_anim_FINISH.killOnComplete = true;
	
	this.afterCreate();
	
}

/** @type Phaser.Sprite */
var CoinV1_proto = Object.create(Phaser.Sprite.prototype);
CoinV1.prototype = CoinV1_proto;
CoinV1.prototype.constructor = CoinV1;

/* --- end generated code --- */
//-- user code here --
var lineY = [ -65, 100, 220, 520 ]; // basic, diagonal, drop, idleReset

//변수 셋팅함.
CoinV1.prototype.setVariable = function() {
	this.isLive = true;
	this.pileStatus = "GOOD";	//GOOD, BAD	//
	this.isEndTweenPileDown = false;

	this.dir = 1;
};

//캐릭터 점프 트윈.
CoinV1.prototype.beforeCreate = function() {	
	this.createScript();
};

CoinV1.prototype.afterCreate = function() {	
	this.setVariable();	
	
	this.tweenA = null;
};

CoinV1.prototype.createScript = function(){
	this.gameConst = GameConst.getInstance();
	this.gameData = GameData.getInstance();
};


CoinV1.prototype.setPlay = function(aAnimaitonName, aIsTween) {
	var isTween = false;
	
	if(this === undefined || this.animations === undefined) { 
		//console.log("BaseCharacterIngame SetPlay undefined!!!"); 
		return;
		}
	if(aIsTween !== undefined && aIsTween !== null) { isTween = aIsTween; }
	if(this.visible === false) this.visible = true;
	if(this.alpha === 0) this.alpha = 1;
	
	switch(aAnimaitonName)	{
		case  "STAND_BY" :
			this.pileStatus = "GOOD";				
			this.animations.play("STAND_BY");			 
			break;
			
		case  "DROP_BASIC" :			
			this.pileStatus = "GOOD";
			this.animations.play("DROP_BASIC");
			if(isTween)	{
				this.playTweenDropBasic();
			}
			break;
			
		case  "DROP_ADVENCE_LEFT_1" :
			this.pileStatus = "BAD";
			this.animations.play("DROP_ADVENCE_LEFT_1");
			if(isTween)	this.playTweenAdvenceLeft1();
			break;
			
		case  "DROP_ADVENCE_LEFT_2" :
			this.pileStatus = "BAD";
			this.animations.play("DROP_ADVENCE_LEFT_2");			
			break;
			
		case  "DROP_ADVENCE_RIGHT_1" :
			this.pileStatus = "BAD";
			this.animations.play("DROP_ADVENCE_RIGHT_1");
			if(isTween)	this.playTweenAdvenceRight1();
			break;
			
		case  "DROP_ADVENCE_RIGHT_2" :
			this.pileStatus = "BAD";
			this.animations.play("DROP_ADVENCE_RIGHT_2");
			
			break;
		case  "DROP_DIRECT" :
			if(this.y > 425)  this.y = 425;
			this.animations.play("DROP_DIRECT");
			if(isTween)	this.playTweenDropDirect();
			break;
			
		case  "DROP_ROLLING" :
			this.animations.play("DROP_ROLLING");
			if(isTween)	this.playTweenDropRolling();
			break;
			
		case  "PILE" :			
			this.animations.play("PILE");
			break;
			
		case  "PILE_DOWN" :
			this.animations.play("PILE_DOWN");
			if(isTween)	this.playTweenPileDown();
			break;
			
		case "CRUMBLE" :
			this.animations.play("CRUMBLE");
			if(isTween) this.playTweenCrumble();
			break;
			
		case  "FINISH" :
			this.animations.play("FINISH");			
			break;
	}
};

CoinV1.prototype.update = function () {
	//기존함수테스트
	this.gameProcess();	
};

CoinV1.prototype.gameProcess = function() {	
	this.processCharacter();
	this.animationOnComplete();
};

CoinV1.prototype.processCharacter = function() {	
	
};

CoinV1.prototype.getCurAnimationName = function() {
	return this.animations.currentAnim.name;
};

CoinV1.prototype.checkCurrentAnimation = function(aAnimationName) {
	if(this.animations.currentAnim === null) return false;
	
	var returnValue = this.animations.currentAnim.name === aAnimationName ? true : false;
	return returnValue;
};

CoinV1.prototype.checkEndFrame = function(aAnimationName) {
	var returnValue = ( (aAnimationName === this.animations.currentAnim.name) && this.animations.currentAnim.isFinished) ? true : false;
	return returnValue;
};

CoinV1.prototype.checkEndTween = function(aAnimationName) {	
	var returnValue = ( (aAnimationName === this.animations.currentAnim.name) && (this.tweenA.isRunning === false) ) ? true : false;
	
	return returnValue;
};


CoinV1.prototype.animationOnComplete = function(){	
	if(this.animations.currentAnim.isFinished === false) return;	

	switch(this.animations.currentAnim.name) {
		case  "STAND_BY" :
			this.setPlay("STAND_BY");
			break;
			
		case  "DROP_BASIC" :
			this.setPlay("DROP_BASIC");			
			break;
			
		case  "DROP_ADVENCE_LEFT_1" :			
			this.setPlay("DROP_ADVENCE_LEFT_1");			
			break;
			
		case  "DROP_ADVENCE_LEFT_2" :
			this.setPlay("DROP_ADVENCE_LEFT_2");
			break;
			
		case  "DROP_ADVENCE_RIGHT_1" :
			this.setPlay("DROP_ADVENCE_RIGHT_1");
			break;
			
		case  "DROP_ADVENCE_RIGHT_2" :
			this.setPlay("DROP_ADVENCE_RIGHT_2");
			
			break;
		case  "DROP_DIRECT" :
			this.setPlay("DROP_DIRECT");
			break;
			
		case  "DROP_ROLLING" :
			this.setPlay("DROP_ROLLING");
			break;
			
		case  "PILE" :
			this.setPlay("PILE");
			break;
			
		case  "PILE_DOWN" :
			this.setPlay("PILE_DOWN");
			break;
			
		case "CRUMBLE" :
			this.setPlay("CRUMBLE");
			break;
			
		case  "FINISH" :
			//this.setPlay("FINISH");
			this.destroy();
			//console.log("CoinV1 :: animationOnComplete -> FINISH");
			break;
	}
};

//현재 트위너 멈춤.
CoinV1.prototype.setDestoryTween = function(){	
	if(this.tweenA !== null)
	{		
		this.tweenA.pendingDelete = true;
	}	
};

CoinV1.prototype.setStop = function(){
	this.setDestoryTween();
	this.animations.stop(null, true);
};


//트윈은 있는 동작만 추가한다.
CoinV1.prototype.playTweenDropBasic = function(){	
	this.setDestoryTween();
	 
	var speed = this.gameData.playMode === that.gameConst.GameLevel.HARD ? 2000 : 3500;
	
	this.tweenA = this.game.add.tween(this).to({ y: 100 }, speed, "Linear");
	this.tweenA.start();	
	this.tweenA.onComplete.add(this.endTweenDropBasic, this);
};

CoinV1.prototype.setDirection = function(count){
	this.dir = (count % 2) === 0 ? 1 : -1;
};


CoinV1.prototype.endTweenDropBasic = function(){	
	if(this.dir === -1)
	{	
		this.setPlay("DROP_ADVENCE_LEFT_1", true);
		this.dir = 1;
	}
	else
	{	
		this.setPlay("DROP_ADVENCE_RIGHT_1", true);
		this.dir = -1;
	}
};


//트윈은 있는 동작만 추가한다.
CoinV1.prototype.playTweenAdvenceLeft1 = function(){	
	this.setDestoryTween();	
	
	var speed = this.gameData.playMode === that.gameConst.GameLevel.HARD ? 1000 : 1750;
	
	this.tweenA = this.game.add.tween(this).to({x: this.x - 30, y: 230 }, speed, "Linear");	
	this.tweenA.start();
	this.tweenA.onComplete.add(this.endTweenAdvenceLeft1, this);
};

CoinV1.prototype.endTweenAdvenceLeft1 = function(){
	this.setPlay("DROP_ROLLING", true);
};


//트윈은 있는 동작만 추가한다.
CoinV1.prototype.playTweenAdvenceRight1 = function(){	
	this.setDestoryTween();
	
	var speed = this.gameData.playMode === that.gameConst.GameLevel.HARD ? 1000 : 1750;
	
	this.tweenA = this.game.add.tween(this).to({x: this.x + 30, y: 230 }, speed, "Linear");
	this.tweenA.start();
	this.tweenA.onComplete.add(this.endTweenAdvenceRight1, this);
};

CoinV1.prototype.endTweenAdvenceRight1 = function(){
	this.setPlay("DROP_ROLLING", true);
};


//트윈은 있는 동작만 추가한다.
CoinV1.prototype.playTweenDropRolling = function(){	
	this.setDestoryTween(); 
	
	var speed = this.gameData.playMode === that.gameConst.GameLevel.HARD ? 650 : 1000;
	
	this.tweenA = this.game.add.tween(this).to({x: this.x - (50 * this.dir), y: 576 }, speed, "Linear");
	//this.tweenA = this.game.add.tween(this).to({x: this.x - (50 * this.dir), y: 576 }, 750, "Linear");
	this.tweenA.start();
	this.tweenA.onComplete.add(this.endTweenDropRolling, this);
};

CoinV1.prototype.endTweenDropRolling = function(){
	this.setPlay("FINISH");
};


CoinV1.prototype.playTweenCrumble = function(){	
	this.setDestoryTween();
	
	var dropX = Math.floor(Math.random() * 300) -150;	
	//this.x = (dropX < 0) ? this.x - 50 : this.x + 50;
	
	//this.tweenA = this.game.add.tween(this).to({x : this.x + dropX, y : this.y + 50 }, 500, "Expo.easeOut", false, 500);
	//this.tweenB = this.game.add.tween(this).to({y: 650 }, 500, "Linear", false);
	//this.tweenA.chain(this.tweenB);
	//this.tweenA.start();
	//this.tweenB.onComplete.add(this.endTweenCrumble, this);
	
	//setTimeout(window.close(), 3000);
	this.game.time.events.add(Phaser.Timer.SECOND * 0.4, function() {
//		this.x = (dropX < 0) ? this.x - 50 : this.x + 50;
//		
//		//this.tweenA = this.game.add.tween(this).to({x : this.x + dropX, y : 700 }, 1000, "Expo.easeIn", false, 10);
//		//this.tweenA.start();
//		//this.tweenA.onComplete.add(this.endTweenCrumble, this);
//		
//		this.tweenA = this.game.add.tween(this).to({x : this.x + (dropX / 2), y : this.y - 100 }, 500, "Expo.easeOut", false, 10);
//		this.tweenB = this.game.add.tween(this).to({x : this.x + dropX, y: 650 }, 1000, "Expo.easeOut", false);
//		this.tweenA.chain(this.tweenB);
//		this.tweenA.start();
//		this.tweenB.onComplete.add(this.endTweenCrumble, this);
		
		this.setBezier();
	}, this);
};

CoinV1.prototype.endTweenCrumble = function(){
	this.setPlay("FINISH");
};


//트윈은 있는 동작만 추가한다.
CoinV1.prototype.playTweenDropDirect = function(){
	this.setDestoryTween();
	this.tweenA = this.game.add.tween(this).to({ y: 425 }, 1000, "Linear");
	this.tweenA.start();	
	this.tweenA.onComplete.add(this.endTweenDropDirect, this);
};

CoinV1.prototype.endTweenDropDirect = function(){
	this.setPlay("PILE");	
};


//트윈은 있는 동작만 추가한다.
CoinV1.prototype.playTweenPileDown = function(){	
	this.setDestoryTween();
	this.tweenA = this.game.add.tween(this).to({ y: this.y + 15 }, 200, "Quart.easeOut");	
	this.tweenA.start();
	this.tweenA.onComplete.add(this.endTweenPileDown, this);
};

CoinV1.prototype.endTweenPileDown = function(){
	this.isEndTweenPileDown = true;
	this.setPlay("PILE");
};

CoinV1.prototype.getEndTweenPileDown = function(){
	return this.isEndTweenPileDown;
};

CoinV1.prototype.setBezier = function(){	
	this.pointsArrayY = [this.y, this.y - 200, this.y - 200, 710];
	
	this.dropX = Math.floor(Math.random() * 300) - 150;	
	this.randomDelay = Math.floor(Math.random() * 300) + 600;
	var tween = this.game.add.tween(this).to({
        x: [this.x, this.x + (this.dropX * 0.1), this.x + this.dropX, this.x + (this.dropX * 1.1)],
        y: [this.pointsArrayY[0], this.pointsArrayY[1], this.pointsArrayY[2], this.pointsArrayY[3]],
   }, this.randomDelay,Phaser.Easing.Quadratic.InOut, true).interpolation(function(v, k){	   
        return Phaser.Math.bezierInterpolation(v, k);	   
   }).onComplete.add(this.endTweenCrumble, this); 
};
