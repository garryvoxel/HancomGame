// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * MenuV2.
 */
function MenuV2() {
	
	Phaser.State.call(this);
	this.beforeConstruct();
	this.afterConstruct();
	
}

/** @type Phaser.State */
var MenuV2_proto = Object.create(Phaser.State.prototype);
MenuV2.prototype = MenuV2_proto;
MenuV2.prototype.constructor = MenuV2;

MenuV2.prototype.init = function () {
	
	this.beforeInit();
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	
	this.afterInit();
	
};

MenuV2.prototype.preload = function () {
	
	this.beforePreload();
	
	this.afterPreload();
	
};

MenuV2.prototype.create = function () {
	
	this.beforeCreate();
	
	var _roomListGroup = this.add.group();
	
	this.add.sprite(0.0, 0.0, 'RoomListBack', null, _roomListGroup);
	
	this.add.sprite(178.0, 61.0, 'RoomListPanel', null, _roomListGroup);
	
	var _ListBar1 = this.add.group(_roomListGroup);
	_ListBar1.position.setTo(234.0, 131.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar1);
	
	var _RoomListIconLock1 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar1);
	_RoomListIconLock1.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum1 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar1);
	
	var _RoomName1 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar1);
	
	var _RoomPlayTime1 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar1);
	
	var _RoomListBtnGo1 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar1);
	
	var _ListBar2 = this.add.group(_roomListGroup);
	_ListBar2.position.setTo(234.0, 171.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar2);
	
	var _RoomListIconLock2 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar2);
	_RoomListIconLock2.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum2 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar2);
	
	var _RoomName2 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar2);
	
	var _RoomPlayTime2 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar2);
	
	var _RoomListBtnGo2 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar2);
	
	var _ListBar3 = this.add.group(_roomListGroup);
	_ListBar3.position.setTo(234.0, 211.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar3);
	
	var _RoomListIconLock3 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar3);
	_RoomListIconLock3.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum3 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar3);
	
	var _RoomName3 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar3);
	
	var _RoomPlayTime3 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar3);
	
	var _RoomListBtnGo3 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar3);
	
	var _ListBar4 = this.add.group(_roomListGroup);
	_ListBar4.position.setTo(234.0, 251.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar4);
	
	var _RoomListIconLock4 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar4);
	_RoomListIconLock4.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum4 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar4);
	
	var _RoomName4 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar4);
	
	var _RoomPlayTime4 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar4);
	
	var _RoomListBtnGo4 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar4);
	
	var _ListBar5 = this.add.group(_roomListGroup);
	_ListBar5.position.setTo(234.0, 291.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar5);
	
	var _RoomListIconLock5 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar5);
	_RoomListIconLock5.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum5 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar5);
	
	var _RoomName5 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar5);
	
	var _RoomPlayTime5 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar5);
	
	var _RoomListBtnGo5 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar5);
	
	var _ListBar6 = this.add.group(_roomListGroup);
	_ListBar6.position.setTo(234.0, 331.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar6);
	
	var _RoomListIconLock6 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar6);
	_RoomListIconLock6.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum6 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar6);
	
	var _RoomName6 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar6);
	
	var _RoomPlayTime6 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar6);
	
	var _RoomListBtnGo6 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar6);
	
	var _ListBar7 = this.add.group(_roomListGroup);
	_ListBar7.position.setTo(234.0, 371.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar7);
	
	var _RoomListIconLock7 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar7);
	_RoomListIconLock7.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum7 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar7);
	
	var _RoomName7 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar7);
	
	var _RoomPlayTime7 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar7);
	
	var _RoomListBtnGo7 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar7);
	
	var _ListBar8 = this.add.group(_roomListGroup);
	_ListBar8.position.setTo(234.0, 411.0);
	
	this.add.sprite(0.0, 0.0, 'RoomListBar', null, _ListBar8);
	
	var _RoomListIconLock8 = this.add.sprite(331.0, 7.0, 'RoomListIconLock', 0, _ListBar8);
	_RoomListIconLock8.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomNum8 = this.add.text(59.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar8);
	
	var _RoomName8 = this.add.text(122.0, 7.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#353535"}, _ListBar8);
	
	var _RoomPlayTime8 = this.add.text(433.0, 8.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ListBar8);
	
	var _RoomListBtnGo8 = this.add.button(475.0, 0.0, 'RoomListBtnGo', this.roomListButton, this, 1, 0, 2, 0, _ListBar8);
	
	var _RoomListBtnL = this.add.button(128.0, 225.0, 'RoomListBtnLR', this.roomPageMoveLeft, this, 1, 0, 2, 0, _roomListGroup);
	
	var _RoomListBtnR = this.add.button(799.0, 225.0, 'RoomListBtnLR', this.roomPageMoveRight, this, 4, 3, 5, 3, _roomListGroup);
	
	var _ListGroupNum = this.add.text(512.0, 460.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff","align":"center"}, _roomListGroup);
	
	var _RoomListTitleN = this.add.sprite(303.0, 5.0, 'RoomListTitleN', null, _roomListGroup);
	
	var _RoomListTitleG = this.add.sprite(300.0, 3.0, 'RoomListTitleG', null, _roomListGroup);
	
	var _RoomListBtnOpinion = this.add.button(939.0, 104.0, 'BtnOpinion', this.roomOpinion, this, 1, 0, 2, 0, _roomListGroup);
	
	this.add.button(4.0, 4.0, 'RoomListBtnVolume', this.roomVolume, this, 1, 0, 2, 0, _roomListGroup);
	
	var _RoomListBtnFullScreenSmall = this.add.button(93.0, 4.0, 'BtnWinsizeS', this.roomFullScreen, this, 1, 0, 2, 0, _roomListGroup);
	
	var _RoomListBtnFullScreenBig = this.add.button(93.0, 4.0, 'BtnWinsizeB', this.roomFullScreen, this, 1, 0, 2, 0, _roomListGroup);
	
	this.add.button(850.0, 4.0, 'RoomListBtnHelp', this.roomHelp, this, 1, 0, 2, 0, _roomListGroup);
	
	this.add.button(939.0, 4.0, 'RoomListBtnExit', this.roomExit, this, 1, 0, 2, 0, _roomListGroup);
	
	this.add.button(44.0, 486.0, 'RoomListBtnRoomThing', this.roomSearch, this, 2, 0, 4, 0, _roomListGroup);
	
	this.add.button(271.0, 486.0, 'RoomListBtnRoomThing', this.roomCreate, this, 3, 1, 5, 1, _roomListGroup);
	
	this.add.button(584.0, 486.0, 'RoomListBtnPlayThing', this.roomPlaySingle, this, 2, 0, 4, 0, _roomListGroup);
	
	this.add.button(811.0, 486.0, 'RoomListBtnPlayThing', this.roomPlayPaster, this, 3, 1, 5, 1, _roomListGroup);
	
	var _standByRoomGroup = this.add.group();
	
	var _RoomBack = this.add.sprite(0.0, 0.0, 'RoomBack', null, _standByRoomGroup);
	
	this.add.button(4.0, 4.0, 'RoomListBtnVolume', this.standByVolume, this, 1, 0, 2, 0, _standByRoomGroup);
	
	var _RoomBtnFullScreenSmall = this.add.button(93.0, 4.0, 'BtnWinsizeS', this.standByFullScreen, this, 1, 0, 2, 0, _standByRoomGroup);
	
	var _RoomBtnFullScreenBig = this.add.button(93.0, 4.0, 'BtnWinsizeB', this.standByFullScreen, this, 1, 0, 2, 0, _standByRoomGroup);
	
	this.add.button(850.0, 4.0, 'RoomListBtnHelp', this.standByHelp, this, 1, 0, 2, 0, _standByRoomGroup);
	
	this.add.button(939.0, 4.0, 'RoomListBtnExit', this.standByExit, this, 1, 0, 2, 0, _standByRoomGroup);
	
	this.add.sprite(30.0, 73.0, 'RoomInfoPanel', null, _standByRoomGroup);
	
	var _SelectRoomNum = this.add.text(147.0, 146.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff"}, _standByRoomGroup);
	
	var _SelectRoom = this.add.text(370.0, 146.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff"}, _standByRoomGroup);
	
	var _SelectRoomTime = this.add.text(692.0, 146.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff"}, _standByRoomGroup);
	
	var _SelectBackImage = this.add.text(858.0, 146.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffffff"}, _standByRoomGroup);
	
	var _UserNickname = this.add.text(322.0, 472.0, '', {"font":"bold 20px 나눔바른고딕","fill":"#ffffff"}, _standByRoomGroup);
	
	var _OtherNickname = this.add.text(707.0, 472.0, '', {"font":"bold 20px 나눔바른고딕","fill":"#ffffff"}, _standByRoomGroup);
	
	var _RoomListIconLock = this.add.sprite(556.0, 146.0, 'RoomListIconLock', 0, _standByRoomGroup);
	_RoomListIconLock.animations.add('LOCK', [0, 1], 10, false);
	
	var _RoomOtherWait = this.add.sprite(573.0, 282.0, 'RoomOtherWait', null, _standByRoomGroup);
	
	
	var _RoomTitleN = this.add.sprite(348.0, 13.0, 'RoomTitleN', null, _standByRoomGroup);
	
	var _RoomTitleG = this.add.sprite(345.0, 13.0, 'RoomTitleG', null, _standByRoomGroup);
	
	var _RoomBtnSetting = this.add.button(44.0, 486.0, 'RoomBtnSetting', this.standBySetting, this, 1, 0, 2, 0, _standByRoomGroup);
	
	var _RoomBtnInvite = this.add.button(811.0, 486.0, 'RoomBtnInvite', this.standByInvite, this, 1, 0, 2, 0, _standByRoomGroup);
	
	
	var _roomCreate = this.add.group();
	
	var _transImg70 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _roomCreate);
	
	this.add.sprite(246.0, 88.0, 'PopupCreateRoom', null, _roomCreate);
	
	var _PopupCreateBtnCreate = this.add.button(429.0, 420.0, 'PopupCreateBtnCreate', this.roomCreateCreate, this, 1, 0, 2, 0, _roomCreate);
	
	var _InputField = this.add.group(_roomCreate);
	_InputField.position.setTo(330.0, 269.0);
	
	var _InputType = this.add.sprite(38.0, 34.0, 'InputType2', null, _InputField);
	
	var _textSelected = this.add.text(185.0, 51.0, '', {"font":"19px 나눔바른고딕","fill":"#ffffff"}, _InputField);
	
	this.add.sprite(148.0, 0.0, 'SmallTitleRoom', null, _InputField);
	
	var _Dropdown3 = this.add.group(_roomCreate);
	_Dropdown3.position.setTo(624.0, 179.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel2', null, _Dropdown3);
	
	var _DownMenu3 = this.add.group(_Dropdown3);
	_DownMenu3.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel2Dw', null, _DownMenu3);
	
	var _ListBar34 = this.add.button(12.0, 162.0, 'DropdownPanel2DwList', this.roomCreateTime, this, null, null, null, null, _DownMenu3);
	
	var _ListBar33 = this.add.button(12.0, 131.0, 'DropdownPanel2DwList', this.roomCreateTime, this, null, null, null, null, _DownMenu3);
	
	var _ListBar32 = this.add.button(12.0, 100.0, 'DropdownPanel2DwList', this.roomCreateTime, this, null, null, null, null, _DownMenu3);
	
	var _ListBar31 = this.add.button(12.0, 69.0, 'DropdownPanel2DwList', this.roomCreateTime, this, null, null, null, null, _DownMenu3);
	
	var _ListBar30 = this.add.button(12.0, 38.0, 'DropdownPanel2DwList', this.roomCreateTime, this, null, null, null, null, _DownMenu3);
	
	this.add.text(41.0, 167.0, '5분', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu3);
	
	this.add.text(41.0, 136.0, '4분', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu3);
	
	this.add.text(41.0, 104.0, '3분', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu3);
	
	this.add.text(41.0, 73.0, '2분', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu3);
	
	this.add.text(41.0, 43.0, '1분', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu3);
	
	var _textSelected3 = this.add.text(42.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _Dropdown3);
	
	var _BtnArea3 = this.add.tileSprite(3.0, 38.0, 67.50274658203125, 33.0, 'PublicPanel1', null, _Dropdown3);
	_BtnArea3.alpha = 0.0;
	
	var _DropdownBtn32 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomCreateDropDown3, this, 2, 2, 3, 2, _Dropdown3);
	
	var _DropdownBtn31 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomCreateDropDown3, this, 0, 0, 1, 0, _Dropdown3);
	
	this.add.sprite(31.0, 0.0, 'SmallTitlePlaytime', null, _Dropdown3);
	
	var _Dropdown2 = this.add.group(_roomCreate);
	_Dropdown2.position.setTo(426.0, 179.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel1', null, _Dropdown2);
	
	var _DownMenu2 = this.add.group(_Dropdown2);
	_DownMenu2.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel1Dw', null, _DownMenu2);
	
	var _ListBar28 = this.add.button(12.0, 286.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar27 = this.add.button(12.0, 255.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar26 = this.add.button(12.0, 224.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar25 = this.add.button(12.0, 193.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar24 = this.add.button(12.0, 162.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar23 = this.add.button(12.0, 131.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar22 = this.add.button(12.0, 100.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar21 = this.add.button(12.0, 69.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	var _ListBar20 = this.add.button(12.0, 38.0, 'DropdownPanel1DwList', this.roomCreateBack, this, null, null, null, null, _DownMenu2);
	
	this.add.text(25.0, 292.0, '동굴', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu2);
	
	this.add.text(25.0, 261.0, '노을 지는 산', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu2);

	this.add.text(25.0, 230.0, '고목나무', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu2);
	
	this.add.text(25.0, 199.0, '빌딩', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu2);
	
	this.add.text(25.0, 168.0, '바다 속', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu2);
	
	this.add.text(25.0, 137.0, '눈 덮인 산', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu2);
	
	this.add.text(25.0, 106.0, '우주', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu2);
	
	this.add.text(25.0, 75.0, '산', {"font":"20px 나눔고딕","fill":"#ffffff","align":"center"}, _DownMenu2);
	
	this.add.text(25.0, 44.0, '랜덤', {"font":"20px 나눔고딕","fill":"#ffffff","align":"center"}, _DownMenu2);
	
	var _textSelected2 = this.add.text(73.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _Dropdown2);
	
	var _BtnArea2 = this.add.tileSprite(3.0, 38.0, 132.0, 33.0, 'PublicPanel1', null, _Dropdown2);
	_BtnArea2.alpha = 0.0;
	
	var _DropdownBtn22 = this.add.button(137.0, 40.0, 'DropdownBtn', this.roomCreateDropDown2, this, 2, 2, 3, 2, _Dropdown2);
	
	var _DropdownBtn21 = this.add.button(137.0, 40.0, 'DropdownBtn', this.roomCreateDropDown2, this, 0, 0, 1, 0, _Dropdown2);
	
	this.add.sprite(66.0, 0.0, 'SmallTitleBack', null, _Dropdown2);
	
	var _Dropdown1 = this.add.group(_roomCreate);
	_Dropdown1.position.setTo(294.0, 179.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel2', null, _Dropdown1);
	
	var _DownMenu1 = this.add.group(_Dropdown1);
	_DownMenu1.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel3Dw', null, _DownMenu1);
	
	var _ListBar11 = this.add.button(12.0, 67.0, 'DropdownPanel2DwList', this.roomCreateAttribute, this, null, null, null, null, _DownMenu1);
	
	var _ListBar10 = this.add.button(12.0, 38.0, 'DropdownPanel2DwList', this.roomCreateAttribute, this, null, null, null, null, _DownMenu1);
	
	this.add.text(34.0, 73.0, '비밀', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu1);
	
	this.add.text(34.0, 44.0, '공개', {"font":"20px 나눔고딕","fill":"#ffffff"}, _DownMenu1);
	
	var _textSelected1 = this.add.text(43.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _Dropdown1);
	
	var _BtnArea1 = this.add.tileSprite(3.0, 38.0, 67.50274658203125, 33.0, 'PublicPanel1', null, _Dropdown1);
	_BtnArea1.alpha = 0.0;
	
	var _DropdownBtn12 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomCreateDropDown1, this, 2, 2, 3, 2, _Dropdown1);
	
	var _DropdownBtn11 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomCreateDropDown1, this, 0, 0, 1, 0, _Dropdown1);
	
	this.add.sprite(33.0, 0.0, 'SmallTitleAttribute', null, _Dropdown1);
	
	this.add.sprite(455.0, 117.0, 'TitleRoomCreate', null, _roomCreate);
	
	var _InputCursorRoomCreateSheet = new InputCursor(this.game, 513.0, 322.0);
	_roomCreate.add(_InputCursorRoomCreateSheet);
	
	var _RoomCreateBtnExit = this.add.button(672.0, 72.0, 'RoomListBtnExit', this.roomCreateExit, this, 1, 0, 2, 0, _roomCreate);
	
	var _roomResetCreate = this.add.group();
	
	var _ResetTransImg70 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _roomResetCreate);
	
	this.add.button(329.0, 420.0, 'PopupBtnChange', this.roomResetChange, this, 1, 0, 2, 0, _roomResetCreate);
	
	this.add.button(529.0, 420.0, 'PopupBtnCancel', this.roomResetExit, this, 1, 0, 2, 0, _roomResetCreate);
	
	this.add.sprite(246.0, 88.0, 'PopupCreateRoom', null, _roomResetCreate);
	
	var _RoomNameResetPanel = this.add.group(_roomResetCreate);
	_RoomNameResetPanel.position.setTo(330.0, 269.0);
	
	var _ResetPopupInfoNormalBar = this.add.sprite(59.0, 42.0, 'PopupInfoBar1', null, _RoomNameResetPanel);
	
	var _Reset1textSelected = this.add.text(185.0, 51.0, '', {"font":"19px 나눔바른고딕","fill":"#ffffff"}, _RoomNameResetPanel);
	
	this.add.sprite(148.0, 0.0, 'SmallTitleRoom', null, _RoomNameResetPanel);
	
	var _ResetDropdown3 = this.add.group(_roomResetCreate);
	_ResetDropdown3.position.setTo(624.0, 179.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel2', null, _ResetDropdown3);
	
	var _RsDownMenu3 = this.add.group(_ResetDropdown3);
	_RsDownMenu3.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel2Dw', null, _RsDownMenu3);
	
	var _RsListBar34 = this.add.button(12.0, 162.0, 'DropdownPanel2DwList', this.roomResetTime, this, null, null, null, null, _RsDownMenu3);
	
	var _RsListBar33 = this.add.button(12.0, 131.0, 'DropdownPanel2DwList', this.roomResetTime, this, null, null, null, null, _RsDownMenu3);
	
	var _RsListBar32 = this.add.button(12.0, 100.0, 'DropdownPanel2DwList', this.roomResetTime, this, null, null, null, null, _RsDownMenu3);
	
	var _RsListBar31 = this.add.button(12.0, 69.0, 'DropdownPanel2DwList', this.roomResetTime, this, null, null, null, null, _RsDownMenu3);
	
	var _RsListBar30 = this.add.button(12.0, 38.0, 'DropdownPanel2DwList', this.roomResetTime, this, null, null, null, null, _RsDownMenu3);
	
	this.add.text(23.0, 164.0, '5분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu3);
	
	this.add.text(23.0, 133.0, '4분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu3);
	
	this.add.text(23.0, 102.0, '3분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu3);
	
	this.add.text(23.0, 71.0, '2분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu3);
	
	this.add.text(23.0, 40.0, '1분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu3);
	
	var _RstextSelected3 = this.add.text(42.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _ResetDropdown3);
	
	var _RsBtnArea3 = this.add.tileSprite(3.0, 38.0, 67.50274658203125, 33.0, 'PublicPanel1', null, _ResetDropdown3);
	_RsBtnArea3.alpha = 0.0;
	
	var _RsDropdownBtn32 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomResetDropDown3, this, 2, 2, 3, 2, _ResetDropdown3);
	
	var _RsDropdownBtn31 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomResetDropDown3, this, 0, 0, 1, 0, _ResetDropdown3);
	
	this.add.sprite(31.0, 0.0, 'SmallTitlePlaytime', null, _ResetDropdown3);
	
	var _ResetDropdown2 = this.add.group(_roomResetCreate);
	_ResetDropdown2.position.setTo(426.0, 179.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel1', null, _ResetDropdown2);
	
	var _RsDownMenu2 = this.add.group(_ResetDropdown2);
	_RsDownMenu2.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel1Dw', null, _RsDownMenu2);
	
	var _RsListBar28 = this.add.button(12.0, 286.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar27 = this.add.button(12.0, 255.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar26 = this.add.button(12.0, 224.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar25 = this.add.button(12.0, 193.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar24 = this.add.button(12.0, 162.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar23 = this.add.button(12.0, 131.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar22 = this.add.button(12.0, 100.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar21 = this.add.button(12.0, 69.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	var _RsListBar20 = this.add.button(12.0, 38.0, 'DropdownPanel1DwList', this.roomResetBack, this, null, null, null, null, _RsDownMenu2);
	
	this.add.text(23.0, 288.0, '동굴', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 257.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 226.0, '고목나무', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 195.0, '빌딩', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 164.0, '바다 속', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 133.0, '눈 덮인 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 102.0, '우주', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 71.0, '산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	this.add.text(23.0, 40.0, '랜덤', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu2);
	
	var _RstextSelected2 = this.add.text(73.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _ResetDropdown2);
	
	var _RsBtnArea2 = this.add.tileSprite(3.0, 38.0, 132.0, 33.0, 'PublicPanel1', null, _ResetDropdown2);
	_RsBtnArea2.alpha = 0.0;
	
	var _RsDropdownBtn22 = this.add.button(137.0, 40.0, 'DropdownBtn', this.roomResetDropDown2, this, 2, 2, 3, 2, _ResetDropdown2);
	
	var _RsDropdownBtn21 = this.add.button(137.0, 40.0, 'DropdownBtn', this.roomResetDropDown2, this, 0, 0, 1, 0, _ResetDropdown2);
	
	this.add.sprite(66.0, 0.0, 'SmallTitleBack', null, _ResetDropdown2);
	
	var _ResetDropdown1 = this.add.group(_roomResetCreate);
	_ResetDropdown1.position.setTo(294.0, 179.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel2', null, _ResetDropdown1);
	
	var _RsDownMenu1 = this.add.group(_ResetDropdown1);
	_RsDownMenu1.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel3Dw', null, _RsDownMenu1);
	
	var _RsListBar11 = this.add.button(12.0, 67.0, 'DropdownPanel2DwList', this.roomResetAttribute, this, null, null, null, null, _RsDownMenu1);
	
	var _RsListBar10 = this.add.button(12.0, 38.0, 'DropdownPanel2DwList', this.roomResetAttribute, this, null, null, null, null, _RsDownMenu1);
	
	this.add.text(23.0, 71.0, '비밀', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu1);
	
	this.add.text(23.0, 40.0, '공개', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _RsDownMenu1);
	
	var _ResettextSelected1 = this.add.text(43.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _ResetDropdown1);
	
	var _ResetBtnArea1 = this.add.tileSprite(3.0, 38.0, 67.50274658203125, 33.0, 'PublicPanel1', null, _ResetDropdown1);
	_ResetBtnArea1.alpha = 0.0;
	
	var _ResetDropdownBtn12 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomResetDropDown1, this, 2, 2, 3, 2, _ResetDropdown1);
	
	var _ResetDropdownBtn11 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomResetDropDown1, this, 0, 0, 1, 0, _ResetDropdown1);
	
	this.add.sprite(33.0, 0.0, 'SmallTitleAttribute', null, _ResetDropdown1);
	
	this.add.sprite(438.0, 117.0, 'TitleRoomReset', null, _roomResetCreate);
	
	var _InputCursorResetCreateSheet = new InputCursor(this.game, 513.0, 322.0);
	_roomResetCreate.add(_InputCursorResetCreateSheet);
	
	var _RoomResetCreateBtnExit = this.add.button(672.0, 72.0, 'RoomListBtnExit', this.roomResetExit, this, 1, 0, 2, 0, _roomResetCreate);
	
	var _PopupRoomSearch = this.add.group();
	
	var _transImg701 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupRoomSearch);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupRoomSearch);
	
	var _RoomSearchInput = this.add.sprite(277.0, 276.0, 'InputType2', null, _PopupRoomSearch);
	
	var _RoomSearchBtnGo = this.add.button(668.0, 285.0, 'RoomListBtnGo', this.roomSearchGo, this, 1, 0, 2, 0, _PopupRoomSearch);
	
	var _RoomSearchBtnSearch = this.add.button(580.0, 285.0, 'RoomSearchBtnSearch', this.roomSearchSearch, this, 1, 0, 2, 0, _PopupRoomSearch);
	
	var _PlaceHolder1 = this.add.text(422.0, 293.0, '', {"font":"16px 나눔고딕","fill":"#ffffff","stroke":"#ffffff","align":"center"}, _PopupRoomSearch);
	
	var _InputCursorRoomSearchSheet = new InputCursor(this.game, 420.0, 295.0);
	_PopupRoomSearch.add(_InputCursorRoomSearchSheet);
	
	this.add.button(669.0, 94.0, 'RoomListBtnExit', this.roomSearchExit, this, 1, 0, 2, 0, _PopupRoomSearch);
	
	this.add.sprite(451.0, 139.0, 'TitleRoomSearch', null, _PopupRoomSearch);
	
	var _TapSelectNickname = this.add.group(_PopupRoomSearch);
	_TapSelectNickname.position.setTo(242.0, 109.0);
	
	var _TapBtnRoomNum = this.add.button(288.0, 87.0, 'TapBtnRoomNum', this.RoomSearchTab, this, 3, 3, 2, 3, _TapSelectNickname);
	
	var _TapBtnNicknameOn = this.add.button(122.0, 87.0, 'TapBtnNickname', this.RoomSearchTab, this, 1, 0, 2, 0, _TapSelectNickname);
	
	var _TapSelectRoomNum = this.add.group(_PopupRoomSearch);
	_TapSelectRoomNum.position.setTo(242.0, 109.0);
	
	var _TapBtnRoomNumOn = this.add.button(288.0, 87.0, 'TapBtnRoomNum', this.RoomSearchTab, this, 1, 0, 2, 0, _TapSelectRoomNum);
	
	var _TapBtnNickname = this.add.button(122.0, 87.0, 'TapBtnNickname', this.RoomSearchTab, this, 3, 3, 2, 3, _TapSelectRoomNum);
	
	var _PopupPasswordSet = this.add.group();
	
	var _transImg702 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPasswordSet);
	
	this.add.button(426.0, 396.0, 'PopupBtnCheck', this.roomPasswordConfirm, this, 1, 0, 2, 0, _PopupPasswordSet);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupPasswordSet);
	
	var _PasswordSetInput = this.add.sprite(365.0, 276.0, 'InputType2', null, _PopupPasswordSet);
	
	var _PlaceHolder2 = this.add.text(510.0, 293.0, '', {"font":"16px 나눔고딕","fill":"#608eb8","align":"center"}, _PopupPasswordSet);
	
	this.add.sprite(306.0, 214.0, 'PasswordSetInfoText', null, _PopupPasswordSet);
	
	var _InputCursorPasswordSetSheet = new InputCursor(this.game, 507.0, 295.0);
	_PopupPasswordSet.add(_InputCursorPasswordSetSheet);
	
	this.add.button(669.0, 94.0, 'RoomListBtnExit', this.roomPasswordExit, this, 1, 0, 2, 0, _PopupPasswordSet);
	
	this.add.sprite(399.0, 140.0, 'TitlePasswordInput', null, _PopupPasswordSet);
	
	var _PopupFriendInvite = this.add.group();
	
	var _transImg705 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupFriendInvite);
	
	this.add.sprite(273.0, 50.0, 'PopupFriendInvitePanel', null, _PopupFriendInvite);
	
	var _PopupListNumPanel = this.add.sprite(461.0, 405.0, 'PopupListNumPanel', null, _PopupFriendInvite);
	
	var _ListNum = this.add.text(510.0, 413.0, '', {"font":"18px 나눔고딕","fill":"#ffffff","align":"center"}, _PopupFriendInvite);
	
	this.add.sprite(338.0, 176.0, 'PopupInfoBar1', null, _PopupFriendInvite);
	
	this.add.sprite(338.0, 218.0, 'PopupInfoBar1', null, _PopupFriendInvite);
	
	this.add.sprite(338.0, 259.0, 'PopupInfoBar1', null, _PopupFriendInvite);
	
	this.add.sprite(338.0, 301.0, 'PopupInfoBar1', null, _PopupFriendInvite);
	
	this.add.sprite(338.0, 342.0, 'PopupInfoBar1', null, _PopupFriendInvite);
	
	var _Nicknametext1 = this.add.text(462.0, 182.0, '', {"font":"19px 나눔고딕","fill":"#ffffff"}, _PopupFriendInvite);
	
	var _Nicknametext2 = this.add.text(462.0, 224.0, '', {"font":"19px 나눔고딕","fill":"#ffffff"}, _PopupFriendInvite);
	
	var _Nicknametext3 = this.add.text(462.0, 265.0, '', {"font":"19px 나눔고딕","fill":"#ffffff"}, _PopupFriendInvite);
	
	var _Nicknametext4 = this.add.text(462.0, 307.0, '', {"font":"19px 나눔고딕","fill":"#ffffff"}, _PopupFriendInvite);
	
	var _Nicknametext5 = this.add.text(462.0, 348.0, '', {"font":"19px 나눔고딕","fill":"#ffffff"}, _PopupFriendInvite);
	
	
	
	
	
	
	var _BtnInvite1 = this.add.button(614.0, 176.0, 'RoomListBtnSelect', null, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	var _BtnInvite2 = this.add.button(614.0, 218.0, 'RoomListBtnSelect', null, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	var _BtnInvite3 = this.add.button(614.0, 259.0, 'RoomListBtnSelect', null, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	var _BtnInvite4 = this.add.button(614.0, 301.0, 'RoomListBtnSelect', null, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	var _BtnInvite5 = this.add.button(614.0, 342.0, 'RoomListBtnSelect', null, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	this.add.sprite(629.0, 139.0, 'SmallTitleInvite', null, _PopupFriendInvite);
	
	this.add.sprite(405.0, 141.0, 'SmallTitleNickname', null, _PopupFriendInvite);
	
	this.add.sprite(435.0, 76.0, 'TitleFriendInvite', null, _PopupFriendInvite);
	
	var _FriendListBtnLR1 = this.add.button(709.0, 205.0, 'RoomListBtnLR', this.roomFriendInvitePageMoveRight, this, 4, 3, 5, 3, _PopupFriendInvite);
	
	var _FriendListBtnLR = this.add.button(218.0, 205.0, 'RoomListBtnLR', this.roomFriendInvitePageMoveLeft, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	var _FriendListBtnExit = this.add.button(629.0, 34.0, 'RoomListBtnExit', this.roomFriendInviteExit, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	var _PopupBtnInvite = this.add.button(428.0, 469.0, 'PopupBtnInvite', this.roomFriendInviteAll, this, 1, 0, 2, 0, _PopupFriendInvite);
	
	var _PopupPlayAlone = this.add.group();
	
	var _transImg706 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPlayAlone);
	
	var _PopupBtnGameStart = this.add.button(426.0, 396.0, 'PopupBtnGameStart', this.roomPlayAloneConfirm, this, 1, 0, 2, 0, _PopupPlayAlone);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupPlayAlone);
	
	var _Dropdown5 = this.add.group(_PopupPlayAlone);
	_Dropdown5.position.setTo(565.0, 214.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel2', null, _Dropdown5);
	
	var _DownMenu5 = this.add.group(_Dropdown5);
	_DownMenu5.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel2Dw', null, _DownMenu5);
	
	var _ListBar54 = this.add.button(12.0, 162.0, 'DropdownPanel2DwList', this.roomPlayAloneTime, this, null, null, null, null, _DownMenu5);
	
	var _ListBar53 = this.add.button(12.0, 131.0, 'DropdownPanel2DwList', this.roomPlayAloneTime, this, null, null, null, null, _DownMenu5);
	
	var _ListBar52 = this.add.button(12.0, 100.0, 'DropdownPanel2DwList', this.roomPlayAloneTime, this, null, null, null, null, _DownMenu5);
	
	var _ListBar51 = this.add.button(12.0, 69.0, 'DropdownPanel2DwList', this.roomPlayAloneTime, this, null, null, null, null, _DownMenu5);
	
	var _ListBar50 = this.add.button(12.0, 38.0, 'DropdownPanel2DwList', this.roomPlayAloneTime, this, null, null, null, null, _DownMenu5);
	
	this.add.text(23.0, 164.0, '5분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu5);
	
	this.add.text(23.0, 133.0, '4분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu5);
	
	this.add.text(23.0, 102.0, '3분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu5);
	
	this.add.text(23.0, 71.0, '2분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu5);
	
	this.add.text(23.0, 40.0, '1분', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu5);
	
	var _textSelected5 = this.add.text(42.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _Dropdown5);
	
	var _BtnArea5 = this.add.tileSprite(3.0, 38.0, 67.50274658203125, 33.0, 'PublicPanel1', null, _Dropdown5);
	_BtnArea5.alpha = 0.0;
	
	var _DropdownBtn52 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomPlayAloneDropDown5, this, 2, 2, 3, 2, _Dropdown5);
	
	var _DropdownBtn51 = this.add.button(71.0, 40.0, 'DropdownBtn', this.roomPlayAloneDropDown5, this, 0, 0, 1, 0, _Dropdown5);
	
	this.add.sprite(31.0, 0.0, 'SmallTitlePlaytime', null, _Dropdown5);
	
	var _Dropdown4 = this.add.physicsGroup(Phaser.Physics.ARCADE, _PopupPlayAlone);
	_Dropdown4.position.setTo(347.0, 214.0);
	
	this.add.sprite(0.0, 35.0, 'DropdownPanel1', null, _Dropdown4);
	
	var _DownMenu4 = this.add.group(_Dropdown4);
	_DownMenu4.position.setTo(0.0, 38.0);
	
	this.add.sprite(3.0, 0.0, 'DropdownPanel1Dw', null, _DownMenu4);
	
	var _ListBar48 = this.add.button(12.0, 286.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar47 = this.add.button(12.0, 255.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar46 = this.add.button(12.0, 224.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar45 = this.add.button(12.0, 193.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar44 = this.add.button(12.0, 162.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar43 = this.add.button(12.0, 131.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar42 = this.add.button(12.0, 100.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar41 = this.add.button(12.0, 69.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	var _ListBar40 = this.add.button(12.0, 38.0, 'DropdownPanel1DwList', this.roomPlayAloneBack, this, null, null, null, null, _DownMenu4);
	
	this.add.text(23.0, 288.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 257.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 226.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 195.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 164.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 133.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 102.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 71.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	this.add.text(23.0, 40.0, '노을 지는 산', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _DownMenu4);
	
	var _textSelected4 = this.add.text(73.0, 41.0, '', {"font":"20px 나눔바른고딕","fill":"#ffffff"}, _Dropdown4);
	
	var _BtnArea4 = this.add.tileSprite(3.0, 38.0, 132.0, 33.0, 'PublicPanel1', null, _Dropdown4);
	_BtnArea4.alpha = 0.0;
	
	var _DropdownBtn42 = this.add.button(137.0, 40.0, 'DropdownBtn', this.roomPlayAloneDropDown4, this, 2, 2, 3, 2, _Dropdown4);
	
	var _DropdownBtn41 = this.add.button(137.0, 40.0, 'DropdownBtn', this.roomPlayAloneDropDown4, this, 0, 0, 1, 0, _Dropdown4);
	
	this.add.sprite(66.0, 0.0, 'SmallTitleBack', null, _Dropdown4);
	
	var _PlayAloneBtnExit = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.roomPlayAloneExit, this, 1, 0, 2, 0, _PopupPlayAlone);
	
	this.add.sprite(432.0, 137.0, 'TitleSinglePlay', null, _PopupPlayAlone);
	
	var _InviteRequestgroup = this.add.group();
	
	this.add.sprite(270.0, 452.0, 'InviteMessagePanel', null, _InviteRequestgroup);
	
	this.add.button(382.0, 519.0, 'InvitePanelBtnAccept', this.InviteRequestAccept, this, 1, 0, 2, 0, _InviteRequestgroup);
	
	this.add.button(542.0, 519.0, 'InvitePanelBtnDeny', this.InviteRequestDeny, this, 1, 0, 2, 0, _InviteRequestgroup);
	
	var _PanelInContents = this.add.text(504.0, 469.0, '', {"font":"17px 나눔바른고딕","fill":"#ffffff"}, _InviteRequestgroup);
	
	var _ViewPasswordText = this.add.text(504.0, 492.0, '', {"font":"bold 17px 나눔바른고딕","fill":"#ffd24d","align":"center"}, _InviteRequestgroup);
	
	var _AllowTimeText = this.add.text(745.0, 489.0, '9', {"font":"bold 34px 나눔바른고딕","fill":"#ffd24d","align":"center"}, _InviteRequestgroup);
	
	var _DenyInviteMessagePanel = this.add.group();
	
	this.add.sprite(805.0, 388.0, 'WaitingRoomInvitecancel', null, _DenyInviteMessagePanel);
	
	var _DenyUserNickname = this.add.text(894.0, 445.0, '\"\"', {"font":"bold 19px 나눔고딕","align":"center"}, _DenyInviteMessagePanel);
	_DenyUserNickname.renderable = false;
	_DenyUserNickname.fixedToCamera = true;
	
	var _OtherContentsText = this.add.text(845.0, 478.0, '님이 초대를\n거부했습니다', {"font":"19px 나눔고딕","align":"center"}, _DenyInviteMessagePanel);
	_OtherContentsText.fixedToCamera = true;
	
	var _PopupHelp = this.add.group();
	
	var _HelpTransImg703 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupHelp);
	
	this.add.sprite(173.0, 30.0, 'PopupHelpPanel', null, _PopupHelp);
	
	this.add.sprite(450.0, 501.0, 'PopupHelpPagePanel', null, _PopupHelp);
	
	var _helpPageText1 = this.add.text(512.0, 512.0, '9 / 11', {"font":"bold 20px 나눔고딕","fill":"#ffffff","align":"center"}, _PopupHelp);
	_helpPageText1.anchor.setTo(0.5, 0.0);
	
	var _PopupHelpDontAgain = this.add.button(424.0, 468.0, 'PopupHelpDontAgain', this.RoomHelpListener, this, null, null, null, null, _PopupHelp);
	
	var _PopupHelpDontAgainCheck = this.add.sprite(423.0, 459.0, 'PopupHelpDontAgainCheck', null, _PopupHelp);
	
	this.add.sprite(238.0, 120.0, 'PopupHelpContentPanel', null, _PopupHelp);
	
	
	var _PopupHelpContentGroup = this.add.group(_PopupHelp);
	
	var _HelpListBtnLR3 = this.add.button(809.0, 223.0, 'RoomListBtnLR', this.roomHelpPageMoveRight, this, 4, 3, 5, 3, _PopupHelp);
	
	var _HelpListBtnLR2 = this.add.button(118.0, 223.0, 'RoomListBtnLR', this.roomHelpPageMoveLeft, this, 1, 0, 2, 0, _PopupHelp);
	
	this.add.sprite(393.0, 58.0, 'PopupHelpTitleTxt', null, _PopupHelp);
	
	var _HelpBtnExit = this.add.button(715.0, 14.0, 'RoomListBtnExit', this.roomGameHelpExit, this, 1, 0, 2, 0, _PopupHelp);
	
	var _PopupVolControl = this.add.group();
	
	var _VolControlTransImg70 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupVolControl);
	
	var _PopPanelCreateSet = this.add.sprite(213.0, 112.0, 'PopPanelCreateSet', null, _PopupVolControl);
	
	var _VolGroupES = this.add.group(_PopupVolControl);
	_VolGroupES.position.setTo(0.0, 98.0);
	
	this.add.sprite(459.0, 249.0, 'BarSetGaugeBack', null, _VolGroupES);
	
	var _BtnSetGaugePointerES = this.add.button(494.0, 232.0, 'BtnSetGaugePointer', this.SetEffectParameter, this, 0, 0, 1, 0, _VolGroupES);
	
	var _BtnArrowSetLES = this.add.button(414.0, 232.0, 'BtnArrowSetL', this.roomEffectLeft, this, 0, 0, 1, 0, _VolGroupES);
	
	var _BtnArrowSetRES = this.add.button(675.0, 232.0, 'BtnArrowSetR', this.roomEffectRight, this, 0, 0, 1, 0, _VolGroupES);
	
	var _PanelMuteCheckES = this.add.button(327.0, 237.0, 'PanelMuteCheck', this.roomEffectMute, this, null, null, null, null, _VolGroupES);
	
	var _MuteCheckES = this.add.sprite(322.0, 234.0, 'MuteCheck', null, _VolGroupES);
	
	this.add.sprite(311.0, 202.0, 'STitleSoundMute', null, _VolGroupES);
	
	this.add.sprite(527.0, 201.0, 'STitleEffSound', null, _VolGroupES);
	
	var _VolGroupBG = this.add.group(_PopupVolControl);
	
	this.add.sprite(459.0, 249.0, 'BarSetGaugeBack', null, _VolGroupBG);
	
	var _BtnSetGaugePointerBG = this.add.button(494.0, 232.0, 'BtnSetGaugePointer', this.SetBackgroundParameter, this, 0, 0, 1, 0, _VolGroupBG);
	
	var _BtnArrowSetLBG = this.add.button(414.0, 232.0, 'BtnArrowSetL', this.roomBackgroundLeft, this, 0, 0, 1, 0, _VolGroupBG);
	
	var _BtnArrowSetRBG = this.add.button(675.0, 232.0, 'BtnArrowSetR', this.roomBackgroundRight, this, 0, 0, 1, 0, _VolGroupBG);
	
	var _PanelMuteCheckBG = this.add.button(327.0, 237.0, 'PanelMuteCheck', this.roomBackgroundMute, this, null, null, null, null, _VolGroupBG);
	
	var _MuteCheckBG = this.add.sprite(322.0, 234.0, 'MuteCheck', null, _VolGroupBG);
	
	this.add.sprite(311.0, 202.0, 'STitleSoundMute', null, _VolGroupBG);
	
	this.add.sprite(517.0, 202.0, 'STitleBGM', null, _VolGroupBG);
	
	this.add.sprite(438.0, 140.0, 'TitleVolControl', null, _PopupVolControl);
	
	var _VolControlBtnExit = this.add.button(669.0, 96.0, 'RoomListBtnExit', this.roomVolumeExit, this, 1, 0, 2, 0, _PopupVolControl);
	
	var _PopupPublicB = this.add.group();
	
	var _transImg703 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicB);
	
	var _PopupBtnCheck3 = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicB);
	
	var _YesNoGroup = this.add.group(_PopupPublicB);
	_YesNoGroup.position.setTo(322.0, 402.0);
	
	var _PopupBtnNo = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroup);
	
	var _PopupBtnYes = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroup);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupPublicB);
	
	var _ContentsText = this.add.text(512.0, 250.0, '', {"font":"25px 나눔바른고딕","fill":"#2a2a2a","align":"center"}, _PopupPublicB);
	
	this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelBlueListener, this, 1, 0, 2, 0, _PopupPublicB);
	
	this.add.sprite(476.0, 140.0, 'TitleTalk', null, _PopupPublicB);
	
	var _PopupPublicR = this.add.group();
	
	var _transImg704 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicR);
	
	var _PopupBtnCheck4 = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicR);
	
	var _YesNoGroupR = this.add.group(_PopupPublicR);
	_YesNoGroupR.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR);
	
	var _PopupBtnYesR = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR);
	
	this.add.sprite(243.0, 110.0, 'PopupPublicNotice', null, _PopupPublicR);
	
	var _ContentsText2 = this.add.text(512.0, 250.0, '', {"font":"25px 나눔바른고딕","fill":"#2a2a2a","align":"center"}, _PopupPublicR);
	
	var _PublicBtnExit2 = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelRedListener, this, 1, 0, 2, 0, _PopupPublicR);
	
	this.add.sprite(473.0, 140.0, 'TitleNotice', null, _PopupPublicR);
	
	var _PopupPublicRExit = this.add.group();
	
	var _transImg704_Exit = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicRExit);
	
	var _PopupBtnCheck4_Exit = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicRExit);
	
	var _YesNoGroupR_BR_Exit = this.add.group(_PopupPublicRExit);
	_YesNoGroupR_BR_Exit.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR_Exit = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_Exit);
	
	var _PopupBtnYesR_Exit = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_Exit);
	
	this.add.sprite(243.0, 110.0, 'PopupPublicNotice', null, _PopupPublicRExit);
	
	var _ContentsText2_Exit = this.add.text(512.0, 250.0, '', {"font":"25px 나눔고딕","fill":"#2a2a2a","align":"center"}, _PopupPublicRExit);
	
	var _PublicBtnExit2_Exit = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelRedExitListener, this, 1, 0, 2, 0, _PopupPublicRExit);
	
	this.add.sprite(473.0, 140.0, 'TitleNotice', null, _PopupPublicRExit);
	
	var _PopupPublicBExit = this.add.group();
	
	var _transImg704_BExit = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicBExit);
	
	var _PopupBtnCheck4_BExit = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicBExit);
	
	var _YesNoGroupR_BR_BExit = this.add.group(_PopupPublicBExit);
	_YesNoGroupR_BR_BExit.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR_BExit = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_BExit);
	
	var _PopupBtnYesR_BExit = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_BExit);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupPublicBExit);
	
	var _ContentsText2_BExit = this.add.text(512.0, 250.0, '', {"font":"25px 나눔고딕","fill":"#2a2a2a","align":"center"}, _PopupPublicBExit);
	
	var _PublicBtnExit2_BExit = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelBlueExitListener, this, 1, 0, 2, 0, _PopupPublicBExit);
	
	this.add.sprite(473.0, 140.0, 'TitleTalk', null, _PopupPublicBExit);
	
	var _ToastMessageGroup = this.add.group();
	
	this.add.sprite(0.0, 238.0, 'UIToaster', null, _ToastMessageGroup);
	
	var _ToastMessageText = this.add.text(512.0, 250.0, '토스트 메세지', {"font":"20px 나눔고딕","fill":"#ffffff","align":"center"}, _ToastMessageGroup);
	
	var _notRayCast1 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _ToastMessageGroup);
	_notRayCast1.alpha = 0.0;
	
	var _NetworkLoadingGroup = this.add.group();
	
	var _notRayCast3 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _NetworkLoadingGroup);
	_notRayCast3.alpha = 0.3;
	
	var _LoadingIndicator = this.add.sprite(511.0, 245.0, 'LoadingIndicator', null, _NetworkLoadingGroup);
	_LoadingIndicator.pivot.setTo(0.5, 0.5);
	_LoadingIndicator.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fRoomListGroup = _roomListGroup;
	this.fRoomListIconLock1 = _RoomListIconLock1;
	this.fRoomNum1 = _RoomNum1;
	this.fRoomName1 = _RoomName1;
	this.fRoomPlayTime1 = _RoomPlayTime1;
	this.fRoomListBtnGo1 = _RoomListBtnGo1;
	this.fRoomListIconLock2 = _RoomListIconLock2;
	this.fRoomNum2 = _RoomNum2;
	this.fRoomName2 = _RoomName2;
	this.fRoomPlayTime2 = _RoomPlayTime2;
	this.fRoomListBtnGo2 = _RoomListBtnGo2;
	this.fRoomListIconLock3 = _RoomListIconLock3;
	this.fRoomNum3 = _RoomNum3;
	this.fRoomName3 = _RoomName3;
	this.fRoomPlayTime3 = _RoomPlayTime3;
	this.fRoomListBtnGo3 = _RoomListBtnGo3;
	this.fRoomListIconLock4 = _RoomListIconLock4;
	this.fRoomNum4 = _RoomNum4;
	this.fRoomName4 = _RoomName4;
	this.fRoomPlayTime4 = _RoomPlayTime4;
	this.fRoomListBtnGo4 = _RoomListBtnGo4;
	this.fRoomListIconLock5 = _RoomListIconLock5;
	this.fRoomNum5 = _RoomNum5;
	this.fRoomName5 = _RoomName5;
	this.fRoomPlayTime5 = _RoomPlayTime5;
	this.fRoomListBtnGo5 = _RoomListBtnGo5;
	this.fRoomListIconLock6 = _RoomListIconLock6;
	this.fRoomNum6 = _RoomNum6;
	this.fRoomName6 = _RoomName6;
	this.fRoomPlayTime6 = _RoomPlayTime6;
	this.fRoomListBtnGo6 = _RoomListBtnGo6;
	this.fRoomListIconLock7 = _RoomListIconLock7;
	this.fRoomNum7 = _RoomNum7;
	this.fRoomName7 = _RoomName7;
	this.fRoomPlayTime7 = _RoomPlayTime7;
	this.fRoomListBtnGo7 = _RoomListBtnGo7;
	this.fRoomListIconLock8 = _RoomListIconLock8;
	this.fRoomNum8 = _RoomNum8;
	this.fRoomName8 = _RoomName8;
	this.fRoomPlayTime8 = _RoomPlayTime8;
	this.fRoomListBtnGo8 = _RoomListBtnGo8;
	this.fRoomListBtnL = _RoomListBtnL;
	this.fRoomListBtnR = _RoomListBtnR;
	this.fListGroupNum = _ListGroupNum;
	this.fRoomListTitleN = _RoomListTitleN;
	this.fRoomListTitleG = _RoomListTitleG;
	this.fRoomListBtnOpinion = _RoomListBtnOpinion;
	this.fRoomListBtnFullScreenSmall = _RoomListBtnFullScreenSmall;
	this.fRoomListBtnFullScreenBig = _RoomListBtnFullScreenBig;
	this.fStandByRoomGroup = _standByRoomGroup;
	this.fRoomBack = _RoomBack;
	this.fRoomBtnFullScreenSmall = _RoomBtnFullScreenSmall;
	this.fRoomBtnFullScreenBig = _RoomBtnFullScreenBig;
	this.fSelectRoomNum = _SelectRoomNum;
	this.fSelectRoom = _SelectRoom;
	this.fSelectRoomTime = _SelectRoomTime;
	this.fSelectBackImage = _SelectBackImage;
	this.fUserNickname = _UserNickname;
	this.fOtherNickname = _OtherNickname;
	this.fRoomListIconLock = _RoomListIconLock;
	this.fRoomOtherWait = _RoomOtherWait;
	this.fRoomTitleN = _RoomTitleN;
	this.fRoomTitleG = _RoomTitleG;
	this.fRoomBtnSetting = _RoomBtnSetting;
	this.fRoomBtnInvite = _RoomBtnInvite;
	this.fRoomCreate = _roomCreate;
	this.fTransImg70 = _transImg70;
	this.fPopupCreateBtnCreate = _PopupCreateBtnCreate;
	this.fInputType = _InputType;
	this.fTextSelected = _textSelected;
	this.fDownMenu3 = _DownMenu3;
	this.fListBar34 = _ListBar34;
	this.fListBar33 = _ListBar33;
	this.fListBar32 = _ListBar32;
	this.fListBar31 = _ListBar31;
	this.fListBar30 = _ListBar30;
	this.fTextSelected3 = _textSelected3;
	this.fBtnArea3 = _BtnArea3;
	this.fDropdownBtn32 = _DropdownBtn32;
	this.fDropdownBtn31 = _DropdownBtn31;
	this.fDownMenu2 = _DownMenu2;
	this.fListBar28 = _ListBar28;
	this.fListBar27 = _ListBar27;
	this.fListBar26 = _ListBar26;
	this.fListBar25 = _ListBar25;
	this.fListBar24 = _ListBar24;
	this.fListBar23 = _ListBar23;
	this.fListBar22 = _ListBar22;
	this.fListBar21 = _ListBar21;
	this.fListBar20 = _ListBar20;
	this.fTextSelected2 = _textSelected2;
	this.fBtnArea2 = _BtnArea2;
	this.fDropdownBtn22 = _DropdownBtn22;
	this.fDropdownBtn21 = _DropdownBtn21;
	this.fDownMenu1 = _DownMenu1;
	this.fListBar11 = _ListBar11;
	this.fListBar10 = _ListBar10;
	this.fTextSelected1 = _textSelected1;
	this.fBtnArea1 = _BtnArea1;
	this.fDropdownBtn12 = _DropdownBtn12;
	this.fDropdownBtn11 = _DropdownBtn11;
	this.fInputCursorRoomCreateSheet = _InputCursorRoomCreateSheet;
	this.fRoomCreateBtnExit = _RoomCreateBtnExit;
	this.fRoomResetCreate = _roomResetCreate;
	this.fResetTransImg70 = _ResetTransImg70;
	this.fResetPopupInfoNormalBar = _ResetPopupInfoNormalBar;
	this.fReset1textSelected = _Reset1textSelected;
	this.fRsDownMenu3 = _RsDownMenu3;
	this.fRsListBar34 = _RsListBar34;
	this.fRsListBar33 = _RsListBar33;
	this.fRsListBar32 = _RsListBar32;
	this.fRsListBar31 = _RsListBar31;
	this.fRsListBar30 = _RsListBar30;
	this.fRstextSelected3 = _RstextSelected3;
	this.fRsBtnArea3 = _RsBtnArea3;
	this.fRsDropdownBtn32 = _RsDropdownBtn32;
	this.fRsDropdownBtn31 = _RsDropdownBtn31;
	this.fRsDownMenu2 = _RsDownMenu2;
	this.fRsListBar28 = _RsListBar28;
	this.fRsListBar27 = _RsListBar27;
	this.fRsListBar26 = _RsListBar26;
	this.fRsListBar25 = _RsListBar25;
	this.fRsListBar24 = _RsListBar24;
	this.fRsListBar23 = _RsListBar23;
	this.fRsListBar22 = _RsListBar22;
	this.fRsListBar21 = _RsListBar21;
	this.fRsListBar20 = _RsListBar20;
	this.fRstextSelected2 = _RstextSelected2;
	this.fRsBtnArea2 = _RsBtnArea2;
	this.fRsDropdownBtn22 = _RsDropdownBtn22;
	this.fRsDropdownBtn21 = _RsDropdownBtn21;
	this.fRsDownMenu1 = _RsDownMenu1;
	this.fRsListBar11 = _RsListBar11;
	this.fRsListBar10 = _RsListBar10;
	this.fResettextSelected1 = _ResettextSelected1;
	this.fResetBtnArea1 = _ResetBtnArea1;
	this.fResetDropdownBtn12 = _ResetDropdownBtn12;
	this.fResetDropdownBtn11 = _ResetDropdownBtn11;
	this.fInputCursorResetCreateSheet = _InputCursorResetCreateSheet;
	this.fRoomResetCreateBtnExit = _RoomResetCreateBtnExit;
	this.fPopupRoomSearch = _PopupRoomSearch;
	this.fTransImg701 = _transImg701;
	this.fRoomSearchInput = _RoomSearchInput;
	this.fRoomSearchBtnGo = _RoomSearchBtnGo;
	this.fRoomSearchBtnSearch = _RoomSearchBtnSearch;
	this.fPlaceHolder1 = _PlaceHolder1;
	this.fInputCursorRoomSearchSheet = _InputCursorRoomSearchSheet;
	this.fTapSelectNickname = _TapSelectNickname;
	this.fTapBtnRoomNum = _TapBtnRoomNum;
	this.fTapBtnNicknameOn = _TapBtnNicknameOn;
	this.fTapSelectRoomNum = _TapSelectRoomNum;
	this.fTapBtnRoomNumOn = _TapBtnRoomNumOn;
	this.fTapBtnNickname = _TapBtnNickname;
	this.fPopupPasswordSet = _PopupPasswordSet;
	this.fTransImg702 = _transImg702;
	this.fPasswordSetInput = _PasswordSetInput;
	this.fPlaceHolder2 = _PlaceHolder2;
	this.fInputCursorPasswordSetSheet = _InputCursorPasswordSetSheet;
	this.fPopupFriendInvite = _PopupFriendInvite;
	this.fTransImg705 = _transImg705;
	this.fPopupListNumPanel = _PopupListNumPanel;
	this.fListNum = _ListNum;
	this.fNicknametext1 = _Nicknametext1;
	this.fNicknametext2 = _Nicknametext2;
	this.fNicknametext3 = _Nicknametext3;
	this.fNicknametext4 = _Nicknametext4;
	this.fNicknametext5 = _Nicknametext5;
	this.fBtnInvite1 = _BtnInvite1;
	this.fBtnInvite2 = _BtnInvite2;
	this.fBtnInvite3 = _BtnInvite3;
	this.fBtnInvite4 = _BtnInvite4;
	this.fBtnInvite5 = _BtnInvite5;
	this.fFriendListBtnLR1 = _FriendListBtnLR1;
	this.fFriendListBtnLR = _FriendListBtnLR;
	this.fFriendListBtnExit = _FriendListBtnExit;
	this.fPopupBtnInvite = _PopupBtnInvite;
	this.fPopupPlayAlone = _PopupPlayAlone;
	this.fTransImg706 = _transImg706;
	this.fPopupBtnGameStart = _PopupBtnGameStart;
	this.fDownMenu5 = _DownMenu5;
	this.fListBar54 = _ListBar54;
	this.fListBar53 = _ListBar53;
	this.fListBar52 = _ListBar52;
	this.fListBar51 = _ListBar51;
	this.fListBar50 = _ListBar50;
	this.fTextSelected5 = _textSelected5;
	this.fBtnArea5 = _BtnArea5;
	this.fDropdownBtn52 = _DropdownBtn52;
	this.fDropdownBtn51 = _DropdownBtn51;
	this.fDownMenu4 = _DownMenu4;
	this.fListBar48 = _ListBar48;
	this.fListBar47 = _ListBar47;
	this.fListBar46 = _ListBar46;
	this.fListBar45 = _ListBar45;
	this.fListBar44 = _ListBar44;
	this.fListBar43 = _ListBar43;
	this.fListBar42 = _ListBar42;
	this.fListBar41 = _ListBar41;
	this.fListBar40 = _ListBar40;
	this.fTextSelected4 = _textSelected4;
	this.fBtnArea4 = _BtnArea4;
	this.fDropdownBtn42 = _DropdownBtn42;
	this.fDropdownBtn41 = _DropdownBtn41;
	this.fPlayAloneBtnExit = _PlayAloneBtnExit;
	this.fInviteRequestgroup = _InviteRequestgroup;
	this.fPanelInContents = _PanelInContents;
	this.fViewPasswordText = _ViewPasswordText;
	this.fAllowTimeText = _AllowTimeText;
	this.fDenyInviteMessagePanel = _DenyInviteMessagePanel;
	this.fDenyUserNickname = _DenyUserNickname;
	this.fPopupHelp = _PopupHelp;
	this.fHelpTransImg703 = _HelpTransImg703;
	this.fHelpPageText1 = _helpPageText1;
	this.fPopupHelpDontAgain = _PopupHelpDontAgain;
	this.fPopupHelpDontAgainCheck = _PopupHelpDontAgainCheck;
	this.fPopupHelpContentGroup = _PopupHelpContentGroup;
	this.fHelpListBtnLR3 = _HelpListBtnLR3;
	this.fHelpListBtnLR2 = _HelpListBtnLR2;
	this.fHelpBtnExit = _HelpBtnExit;
	this.fPopupVolControl = _PopupVolControl;
	this.fVolControlTransImg70 = _VolControlTransImg70;
	this.fPopPanelCreateSet = _PopPanelCreateSet;
	this.fVolGroupES = _VolGroupES;
	this.fBtnSetGaugePointerES = _BtnSetGaugePointerES;
	this.fBtnArrowSetLES = _BtnArrowSetLES;
	this.fBtnArrowSetRES = _BtnArrowSetRES;
	this.fPanelMuteCheckES = _PanelMuteCheckES;
	this.fMuteCheckES = _MuteCheckES;
	this.fVolGroupBG = _VolGroupBG;
	this.fBtnSetGaugePointerBG = _BtnSetGaugePointerBG;
	this.fBtnArrowSetLBG = _BtnArrowSetLBG;
	this.fBtnArrowSetRBG = _BtnArrowSetRBG;
	this.fPanelMuteCheckBG = _PanelMuteCheckBG;
	this.fMuteCheckBG = _MuteCheckBG;
	this.fVolControlBtnExit = _VolControlBtnExit;
	this.fPopupPublicB = _PopupPublicB;
	this.fTransImg703 = _transImg703;
	this.fPopupBtnCheck3 = _PopupBtnCheck3;
	this.fPopupBtnNo = _PopupBtnNo;
	this.fPopupBtnYes = _PopupBtnYes;
	this.fContentsText = _ContentsText;
	this.fPopupPublicR = _PopupPublicR;
	this.fTransImg704 = _transImg704;
	this.fPopupBtnCheck4 = _PopupBtnCheck4;
	this.fPopupBtnNoR = _PopupBtnNoR;
	this.fPopupBtnYesR = _PopupBtnYesR;
	this.fContentsText2 = _ContentsText2;
	this.fPublicBtnExit2 = _PublicBtnExit2;
	this.fPopupPublicRExit = _PopupPublicRExit;
	this.fTransImg704_Exit = _transImg704_Exit;
	this.fPopupBtnCheck4_Exit = _PopupBtnCheck4_Exit;
	this.fPopupBtnNoR_Exit = _PopupBtnNoR_Exit;
	this.fPopupBtnYesR_Exit = _PopupBtnYesR_Exit;
	this.fContentsText2_Exit = _ContentsText2_Exit;
	this.fPublicBtnExit2_Exit = _PublicBtnExit2_Exit;
	this.fPopupPublicBExit = _PopupPublicBExit;
	this.fTransImg704_BExit = _transImg704_BExit;
	this.fPopupBtnCheck4_BExit = _PopupBtnCheck4_BExit;
	this.fPopupBtnNoR_BExit = _PopupBtnNoR_BExit;
	this.fPopupBtnYesR_BExit = _PopupBtnYesR_BExit;
	this.fContentsText2_BExit = _ContentsText2_BExit;
	this.fPublicBtnExit2_BExit = _PublicBtnExit2_BExit;
	this.fToastMessageGroup = _ToastMessageGroup;
	this.fToastMessageText = _ToastMessageText;
	this.fNotRayCast1 = _notRayCast1;
	this.fNetworkLoadingGroup = _NetworkLoadingGroup;
	this.fNotRayCast3 = _notRayCast3;
	this.fLoadingIndicator = _LoadingIndicator;
	this.afterCreate();
	
};

/* --- end generated code --- */
// -- user code here --
//generated construct 전 구현부.
MenuV2.prototype.beforeConstruct = function() {
	
};
//generated construct 후 구현부.
MenuV2.prototype.afterConstruct = function() {
	
};
//generated init 전 구현부
MenuV2.prototype.beforeInit = function() {
	
};
//generated init 후 구현부
MenuV2.prototype.afterInit = function() {	
	this.initRoomCreateField();
	this.initRoomPasswordField();
	//SetFriendVisitePopup();
};
//generated preload 전 구현부
MenuV2.prototype.beforePreload = function() {
	console.log("MenuV2::beforePreload");
	this.game.stage.disableVisibilityChange = true;

	this.add.sprite(0.0, 0.0, 'LoadingBackImg');
	this.add.sprite(0.0, 0.0, 'GamesRated2');

	this.loadingTxtAni = new LoadingTxtV1(this.game, 512.0, 490.0);
	this.add.existing(this.loadingTxtAni);

};
//generated preload 후 구현부
MenuV2.prototype.afterPreload = function() {
	// this.loadingTxtAni.animations.play("PLAY");
};
//generate beforeCreate 전 구현부
MenuV2.prototype.beforeCreate = function() {
	that = this;
	this.createScript();
	// //채널 등록 이벤트.
	//setWindowEvent();
	// //채널 포스트 메세지.
	// setWindowPostMessage();
	// this.socketManager.setConnect();
	// this.socketManager.netResSetting();
	// this.socketManager.netReqEnterRoom2("req_enter_room2", "41", "닉네임테스트121",
	// "0", "null");
	//getUserChannels();
	checkInviteLogin();		
};
//generate afterCreate 후 구현부
MenuV2.prototype.afterCreate = function() {
	this.fRoomListGroup.visible = true; // 대기방 목록
	this.fStandByRoomGroup.visible = false; // 대기방
	this.fRoomCreate.visible = false; // 방만들기 팝업창
	this.fPopupRoomSearch.visible = false; // 방 검색 팝업창
	this.fPopupPasswordSet.visible = false; // 비밀번호 팝업창
	this.fPopupPublicRExit.visible = false; // 경고 팝업창
	this.fPopupPublicBExit.visible = false; // 경고 팝업창
	this.fPopupPublicR.visible = false; // 레드 공통 팝업창
	this.fPopupPublicB.visible = false; // 블루 공통 팝업창
	this.fPopupFriendInvite.visible = false; // 친구초대
	this.fPopupPlayAlone.visible = false; // 혼자놀기
	this.fDenyInviteMessagePanel.visible = false; // 친구 초대 거절
	this.fInviteRequestgroup.visible = false; // 친구 초대 메시지
	this.fRoomResetCreate.visible = false; // 방 설정 변경 팝업창
	this.fPopupHelp.visible = false; // 게임 설명
	this.fPopupVolControl.visible = false; // 볼륨 설정
	this.gameData.isFriendVisitePopup = true;	//초대 팝업 여부
	
	this.fRoomListBtnL.visible = false; // 대기방 왼쪽 버튼

	this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;

	// 방만들기 초기화
	mRoomCreateInputFocus = true;
	this.fDownMenu1.visible = false;
	this.fDownMenu2.visible = false;
	this.fDownMenu3.visible = false;

	// 방새로설정 초기화
	mRoomResetInputFocus = true;
	this.fRsDownMenu1.visible = false;
	this.fRsDownMenu2.visible = false;
	this.fRsDownMenu3.visible = false;

	this.fToastMessageGroup.visible = false;
	this.fNetworkLoadingGroup.visible = false;
	this.fNotRayCast3.inputEnabled = false;
	
	// 페이지 이동 버튼
	this.fRoomListBtnL.visible = false;
	this.fRoomListBtnR.visible = false;	

	this.fTransImg701.inputEnabled = true; // 방 검색
	this.fTransImg702.inputEnabled = true; // 비밀번호 
	
	if(that.gameData.playMode === that.gameConst.GameLevel.HARD){
		that.fRoomListTitleG.visible = true;
		that.fRoomListTitleN.visible = false;
		
		that.fRoomTitleG.visible = true;
		that.fRoomTitleN.visible = false;
	} else {
		that.fRoomListTitleG.visible = false;
		that.fRoomListTitleN.visible = true;
	
		that.fRoomTitleG.visible = false;
		that.fRoomTitleN.visible = true;
	}
	
	//roomPasswordTyping.onkeydown = that.removeChar;
	roomPasswordTyping.onkeydown = that.userWordsCheck;
	
	userTajaTyping.onkeydown = that.userWordsCheck;	
	
	//세션 아이디로 게임 로그인 처리
	setSessionIDLogin();	
	that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Lob);
};

//테스트...
//var mPhoneHeight = 0;
//키보드 아이콘을 보여주고 설정해주는 것으로 모받일 전용으로 사용하기 위한 것.
MenuV2.prototype.showKeyboard = function () {
	var varUA = navigator.userAgent.toLowerCase(); //userAgent 값 얻기
	if (varUA.match('android') != null) { 
	   //안드로이드 일때 처리
	} else if (varUA.indexOf("iphone")>-1||varUA.indexOf("ipad")>-1||varUA.indexOf("ipod")>-1) { 
	   //IOS 일때 처리
		userTajaTyping.focus();
	} else {
	   //아이폰, 안드로이드 외 처리
	}
};

// 세션 아이디로 게임 로그인 처리
function setSessionIDLogin() {
	var sessionID = that.gameUtil.getCookie('session_id');
	
	var configUrlType = that.config.getURLType();		
	//테스트용 데이터
	if (configUrlType === that.config.URL_TYPE.SET_3) {
		sessionID = "36367531-d980-4549-b947-3320d62d0e9c";
		that.gameData.userNickName = "하하호호";	
//		sessionID = "94e7e038-eed4-44f6-9716-eb0ea92aa3fe";
//		that.gameData.userNickName = "구수짱";
	}
	//console.log("setSessionIDLogin -> that.gameUtil.getCookie : " + sessionID);
	// sessionID = "d0f47848-bf8b-4f6d-8282-98a2eb2998db";
	// var sessionID = that.gameData.sessionID;
	//세션아이디 값이 존재하는 경우
	if (sessionID !== undefined && sessionID !== null && sessionID !== "") {
		// that.setToastMessage("로그인중입니다. 잠시 기다려 주세요...");
		that.setNetworkLoading();
		//동전쌓기 게임데이터에 세션아이디 설정
		that.gameData.sessionID = sessionID;
		// web/v1/login에 session_id 로그인 여부 체크
		that.ajaxManager.netReqSessionIDLogin(that.gameData.sessionID,
				netResSessionIDLoginSuccess, netResSessionIDLoginFail);
		//console.log("session_id is " + that.gameData.sessionID);
	} else {
		// 게임이 실행되지 않게 함....
		// that.setToastMessage("말랑말랑 로그인이 필요합니다. 다시 접속해주세요");
		// that.disableNetworkLoading();
		// that.setOneRedExitPopup("말랑말랑 로그인이 필요합니다.", confirmRedExitListener);
		if (configUrlType === that.config.URL_TYPE.DEV
				|| configUrlType === that.config.URL_TYPE.MY_COM
				|| configUrlType === that.config.URL_TYPE.LIVE
				|| configUrlType === that.config.URL_TYPE.STG) {
			//게스트 세션 아이디로 게임 로그인 진행
			sessionID = that.gameUtil.getCookie('guest_id');
			//console.log("guest_id -> that.gameUtil.getCookie : " + sessionID);

			if (sessionID !== undefined && sessionID !== null
					&& sessionID !== "") {
				that.gameData.sessionID = sessionID;
			} else {
				//console.log("DEV & LIVE & STG is sessionID null~~~");
			}
		} else {
			sessionID = that.gameData.sessionID;
			netResGuestLoginSuccess(sessionID);
			//console.log("sessionID -> sessionID : " + sessionID);
		}

		if (sessionID.indexOf("Guest") !== -1) {
			// that.gameData.sessionID = sessionID;
			netResGuestLoginSuccess(sessionID);
		} else {
			that.setOneRedExitPopup("잘못된 정보로 종료됩니다.", confirmRedExitListener);
		}
	}
}

// 세션아이디 로그인 성공시...
function netResSessionIDLoginSuccess(aData) {
	// 정보들 저장
	// that.gameData.uuid = aData.uuid; //사용안함...
	that.gameData.userNickName = aData.user.nickname;
	that.gameData.userCharacterType = aData.user.avatar;

	//console.log("that.gameData.userNickName is " + that.gameData.userNickName);
	//console.log("that.gameData.userCharacterType is "	+ that.gameData.userCharacterType);

	// that.setCharacterAni(true, that.gameData.userCharacterType);
	// that.setCharacterAni(false, that.gameData.otherCharacterType);

	// 방 토탈 갯수.
	that.roomListArray();	
	for (var i = 0; i < 8; i++) {
		// 화면에 출력할 리스트가 8개 보다 작을 경우 빈 공간으로 채운다.
			roomButtonArray[i].frame = 3;
			roomButtonArray[i].inputEnabled = false;
	}		
	// that.game.time.events.loop(Phaser.Timer.SECOND * 5, netRoomCount, this);

	that.disableNetworkLoading();
	checkInviteRoom();
	that.CheckHelpRoom();
	that.socketManager.netReqRoomList('req_room_list');
}

// 세션아이디 로그인 실패시..
function netResSessionIDLoginFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	// 실패 하였습니다.
	that.disableNetworkLoading();
	that.setOneRedExitPopup("로그인에 문제가 발생했습니다.", this.confirmRedExitListener);
}

// 게스트 로그인 성공시...
function netResGuestLoginSuccess(aGusetSessionID) {

	// 게임 데이터에 게스트 세션아이디와 닉네임 설정
	that.gameData.uuid = 9999;
	that.gameData.userNickName = aGusetSessionID;
	that.gameData.sessionID = aGusetSessionID;
	that.gameData.userCharacterType = Math.floor(Math.random() * 6);	

	//console.log("that.gameData.uuid is " + that.gameData.uuid);
	//console.log("that.gameData.userNickName is " + that.gameData.userNickName);
	//console.log("that.gameData.userCharacterType is "	+ that.gameData.userCharacterType);

	// that.setCharacterAni(true, that.gameData.userCharacterType);
	// that.setCharacterAni(false, that.gameData.otherCharacterType);

	that.roomListArray();
	for (var i = 0; i < 8; i++) {		
		roomButtonArray[i].frame = 3;
		roomButtonArray[i].inputEnabled = false;
	}

	that.disableNetworkLoading();
	that.CheckHelpRoom();
	that.socketManager.netReqRoomList('req_room_list');
}

// CHARACTER_TYPE : {"AMOGAE":0, "GIGI":1, "MOA":2, "MAMANG":3, "YUKBEE":4,
// "YAYA":5},
// 웹에서 설정한 캐릭터의 프리팹을 셋팅한다.
MenuV2.prototype.setCharacterAni = function(aIsHost, aCharacterType) {
	var characterAni;

	switch (aCharacterType) {
	case that.gameConst.CHARACTER_TYPE.AMOGAE:
		characterAni = new CharAmogeaIngameV3(this.game, 706.0, 373.0);
		break;

	case that.gameConst.CHARACTER_TYPE.GIGI:
		characterAni = new CharJijiIngameV1(this.game, 706.0, 373.0);
		break;

	case that.gameConst.CHARACTER_TYPE.MOA:
		characterAni = new CharMoaIngameV1(this.game, 706.0, 373.0);
		break;

	case that.gameConst.CHARACTER_TYPE.MAMANG:
		characterAni = new CharMamangIngameV2(this.game, 706.0, 373.0);
		break;

	case that.gameConst.CHARACTER_TYPE.YUKBEE:
		characterAni = new Char6bIngameV1(this.game, 706.0, 373.0);
		break;

	case that.gameConst.CHARACTER_TYPE.YAYA:
		characterAni = new CharYayaIngameV1(this.game, 706.0, 373.0);
		break;

	default:
		characterAni = new CharAmogeaIngameV3(this.game, 706.0, 373.0);
		break;
	}

	if (aIsHost === true) {
		characterAni.x = 322.0;
		this.fChar_aniSheet_standByRoom_user = characterAni;
		this.fStandByRoomGroup.add(this.fChar_aniSheet_standByRoom_user);
	} else {
		this.fChar_aniSheet_standByRoom_other = characterAni;
		this.fStandByRoomGroup.add(this.fChar_aniSheet_standByRoom_other);
	}
};

//로비 매 프레임 체크 부분.
MenuV2.prototype.update = function() {
	// if (this.input.activePointer.isDown) {
	// this.game.state.start("Level1");
	// }
	
	/*
	if(this.socketManager !== undefined){
		if(this.socketManager.getSocketOnCommon() === false && this.fStandByRoomGroup.visible === true){
			that.fRoomListGroup.visible = true; // 대기방 목록			
			that.fStandByRoomGroup.visible = false; // 대기방
			that.gameData.isFriendVisitePopup = true;	//초대 팝업 여부
			console.log("MenuV2::update -> disconnect and standByRoomVisibleFalse!!!");
		}
	} */

	if (this.fRoomCreate.visible === true) {
		
		//this.roomCreateInputCheck();		
		if(userTajaTyping.value.length > 10){
			that.setToastMessage("입력 범위가 벗어났습니다.", 2);
			//console.log("userTajaTyping.value is " + userTajaTyping.value);
			userTajaTyping.value = this.fTextSelected.text;						
			return;
		}
			
		
		this.roomCreateInputCheck();
		this.roomCreateNameText(userTajaTyping.value);
		
		//console.log("userTajaTyping.value.length is " + userTajaTyping.value.length);
		
		var roomCreateCtx = this.fTextSelected.canvas.getContext("2d");		
		roomCreateCtx.font = "19px 나눔고딕";
	    var roomCreateText = roomCreateCtx.measureText(this.fTextSelected.text);
		this.fInputCursorRoomCreateSheet.x = 515 + (roomCreateText.width / 2);
	}

	if (this.fRoomResetCreate.visible === true) {
		
		if(userTajaTyping.value.length > 10){
			that.setToastMessage("입력 범위가 벗어났습니다.", 2);
			userTajaTyping.value = this.fReset1textSelected.text;						
			return;
		}
		
		this.roomResetInputCheck();
		this.roomResetNameText(userTajaTyping.value);
		
		var roomResetCreateCtx = this.fReset1textSelected.canvas.getContext("2d");		
		roomResetCreateCtx.font = "19px 나눔고딕";
	    var roomResetCreateText = roomResetCreateCtx.measureText(this.fReset1textSelected.text);
		this.fInputCursorResetCreateSheet.x = 515 + (roomResetCreateText.width / 2);
	}

	if (this.fPopupRoomSearch.visible === true) {
		
		if(userTajaTyping.value.length > 10){
			that.setToastMessage("입력 범위가 벗어났습니다.", 2);
			//console.log("userTajaTyping.value is " + userTajaTyping.value);
			userTajaTyping.value = this.fPlaceHolder1.text;						
			return;
		}
		
		this.roomSearchInputCheck();
		this.roomSearchText(userTajaTyping.value);
		
		//this.fGuideText1.visible = (userTajaTyping.value === "") ? true : false;
		
		var roomSearchCtx = this.fPlaceHolder1.canvas.getContext("2d");		
		roomSearchCtx.font = "16px 나눔고딕";
	    var roomSearchText = roomSearchCtx.measureText(this.fPlaceHolder1.text);
		this.fInputCursorRoomSearchSheet.x = 423 + (roomSearchText.width / 2);
	}

	if (this.fPopupPasswordSet.visible === true) {
		roomPasswordTyping.value = roomPasswordTyping.value.replace(/[^0-9]/g, "");
		if(roomPasswordTyping.value.length > 4){
			that.setToastMessage("입력 범위가 벗어났습니다.", 2);
			//console.log("userTajaTyping.value is " + userTajaTyping.value);			
			roomPasswordTyping.value = this.fPlaceHolder2.text;			
			return;
		}
		this.roomPasswordInputCheck();
		this.roomPasswordText(roomPasswordTyping.value);
		
		var roomPasswordSetCtx = this.fPlaceHolder2.canvas.getContext("2d");		
		roomPasswordSetCtx.font = "16px 나눔고딕";
	    var roomPasswordSetText = roomPasswordSetCtx.measureText(this.fPlaceHolder2.text);
		this.fInputCursorPasswordSetSheet.x = 510 + (roomPasswordSetText.width / 2);
	}

	if (this.fNetworkLoadingGroup.visible === true) {
		this.fLoadingIndicator.angle += 10;
	}
	this.updateDenyInviteMessage(); // 초대 거절 메시지 창
	this.updateInviteRequest(); // 초대 받은 경우 팝업창
	this.updateFriendInvite(); // 친구 초대 팝업창 초대 버튼 처리
};

var resLoadRoomListArray = [];

// 룸 선택시 데이터를 임시로 받아둔다.
var roomSelectData = {
	"room_number" : 1,
	"room_title" : '다함께 한판',
	"host_name" : '헌트',
	"is_lock" : '0',
	"room_owner" : '1',

	"play_time" : '1',
	"back_ground" : '4',
	"password" : "",
	"ip" : '218.235.226.242',
	"room_sever_idx" : "1"
};

var roomListNameData = [ "방이름 좋아요1", "방이름 좋아요2", "방이름 좋아요3", "방이름 좋아요4",
		"방이름 좋아요5", "방이름 좋아요6", "방이름 좋아요7", "방이름 좋아요8" ];
var roomListLockData = [ "0", "1", "1", "1", "0", "0", "0", "0" ];
var roomListPasswordData = [ "", "", "", "", "", "", "", "" ];
var roomListTimeData = [ 1, 3, 1, 5, 1, 5, 5, 5 ];
var roomListNumData = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
var roomListserverIndexData = [ "1", "1", "1", "1", "1", "1", "1", "1" ];

var roomNumArray = [];
var roomNameArray = [];
var roomTimeArray = [];
var roomLockArray = [];
var roomButtonArray = [];

var roomMaxListBar = 8; // 한 페이지에 들어갈 리스트 갯수 정의
var roomSelectIdx = 0; // 내가 선택한 룸 리스트 번호

var roomTotalCount = 31; // 방 리스트 테스트 갯수
var roomTotalPage = 0; // 방 리스트 전체 페이지
var roomPage = 1; // 방 리스트 현재 페이지

var logintype = 0;

var that = null;
var intervalTimerID = null;
//텍스트 인풋 설정.
MenuV2.prototype.initRoomPasswordField = function() {
	onPasswordTextField = "<DIV id=" + "TajaControlPassword" + " style="
			+ "position:absolute;left:" + "350" + "px;top:" + "-200"
			+ "px;width:380px;height:30px;" + "focus" + ">";

	onPasswordTextFieldInput = "<input type="
			+ "text"
			+ " id="
			+ "roomPasswordTyping"
			+ " maxlength="
			+ "4"
			+ " style='border:0px; border-style : none; background-color:transparent; color : white; outline-style:none;'"
			+ " autofocus><br>" + "</div>";

	passwordTajaBackground.innerHTML = onPasswordTextField
			+ onPasswordTextFieldInput;
};
//타 스크립트 싱글톤 연결함
MenuV2.prototype.createScript = function() {
	this.config = Config.getInstance();
	this.gameConst = GameConst.getInstance();
	that.gameData = GameData.getInstance();
	this.gameUtil = GameUtil.getInstance();
	// 소켓 커넥트...
	this.ajaxManager = AjaxManager.getInstance();
	this.socketManager = SocketManager.getInstance();
	this.soundManager = SoundManager.getInstance(this);
	this.socketManager.isRoomList = true;

	this.socketManager.setEventDefine(netSocketLobbyResponseAll);
};

/**
 * 대기방 목록
 */

// 방 번호, 방 이름, 방 시간, 방 락 유무 리스트로 저장
MenuV2.prototype.roomListArray = function() {
	roomNumArray = [ this.fRoomNum1, this.fRoomNum2, this.fRoomNum3,
			this.fRoomNum4, this.fRoomNum5, this.fRoomNum6, this.fRoomNum7,
			this.fRoomNum8 ];
	roomNameArray = [ this.fRoomName1, this.fRoomName2, this.fRoomName3,
			this.fRoomName4, this.fRoomName5, this.fRoomName6, this.fRoomName7,
			this.fRoomName8 ];
	roomTimeArray = [ this.fRoomPlayTime1, this.fRoomPlayTime2,
			this.fRoomPlayTime3, this.fRoomPlayTime4, this.fRoomPlayTime5,
			this.fRoomPlayTime6, this.fRoomPlayTime7, this.fRoomPlayTime8 ];
	roomLockArray = [ this.fRoomListIconLock1, this.fRoomListIconLock2,
			this.fRoomListIconLock3, this.fRoomListIconLock4,
			this.fRoomListIconLock5, this.fRoomListIconLock6,
			this.fRoomListIconLock7, this.fRoomListIconLock8 ];
	roomButtonArray = [ this.fRoomListBtnGo1, this.fRoomListBtnGo2,
			this.fRoomListBtnGo3, this.fRoomListBtnGo4, this.fRoomListBtnGo5,
			this.fRoomListBtnGo6, this.fRoomListBtnGo7, this.fRoomListBtnGo8 ];
};
//방 리스트 페이지 수를 구한다.
MenuV2.prototype.roomListPage = function() {
	roomTotalPage = Math.ceil(roomTotalCount / roomMaxListBar); // 전체 페이지 수

	if (roomPage <= 0)
		roomPage = 1;

	if(Math.ceil(roomTotalCount / roomMaxListBar) < roomPage && Math.ceil(roomTotalCount / roomMaxListBar) > 0)
		roomPage = Math.ceil(roomTotalCount / roomMaxListBar);
	
	if (roomTotalPage <= 0)
		roomTotalPage = 1;

	this.gameUtil.setText(this.fListGroupNum, 0, 24, "center", "middle",
			roomPage.toString() + "/" + roomTotalPage.toString()); // 페이지

	// 페이지 이동 왼쪽 버튼
	this.fRoomListBtnL.visible = true;
	if (roomPage === 1) {
		this.fRoomListBtnL.visible = false;
	}

	// 페이지 이동 오른쪽 버튼
	this.fRoomListBtnR.visible = true;
	if (roomPage === roomTotalPage) {
		this.fRoomListBtnR.visible = false;
	}
};
//한 페이지에 나오는 방 리스트 그룹의 객체 체크함.
MenuV2.prototype.roomListBarGroup = function() {

	if (roomPage <= 0)
		roomPage = 1;
	if (roomTotalPage <= 0)
		roomTotalPage = 1;

	if(Math.ceil(roomTotalCount / roomMaxListBar) < roomPage && Math.ceil(roomTotalCount / roomMaxListBar) > 0)
		roomPage = Math.ceil(roomTotalCount / roomMaxListBar);

	var pageIndex = (roomPage - 1) * roomMaxListBar; // 현재 페이지 시작 인덱스
	var pageTotal = roomMaxListBar; // 화면에 출력하는 리스트 갯수

	// 화면에 출력하는 리스트가 8개 보다 작을 경우 몇개 출력해야하는지 계산한다.
	if (roomTotalCount - pageIndex < roomMaxListBar) {
		pageTotal = roomTotalCount - pageIndex;
	}

	var lockIdx = 0;
	// 화면에 출력한 리스트

	for (var i = 0; i < roomMaxListBar; i++) {
		// 화면에 출력할 리스트가 8개 보다 작을 경우 빈 공간으로 채운다.
		if ((pageTotal - 1) >= i) {
			this.roomListBar(roomNumArray[i], roomNameArray[i],
					roomTimeArray[i], roomListNumData[i], roomListNameData[i],
					roomListTimeData[i].toString() + "분");
			if (roomListLockData[i] === "1"
					|| roomListLockData[i] === 1) {
				roomLockArray[i].frame = 1;
			} else {
				roomLockArray[i].frame = 0;
			}
			// roomLockArray[i].frame = 1;
			roomButtonArray[i].index = pageIndex + i;
			roomButtonArray[i].frame = 0;
			roomButtonArray[i].inputEnabled = true;
		} else {
			this.roomListBar(roomNumArray[i], roomNameArray[i],
					roomTimeArray[i], "", "", "");
			roomLockArray[i].frame = 0;
			roomButtonArray[i].frame = 3;
			roomButtonArray[i].inputEnabled = false;
		}

//		// 임시 리스트 처리...
//		if (roomListserverIndexData[i] === that.gameData.channelIndex
//				|| roomListserverIndexData[i] === that.gameData.channelIndex.toString()) {
//
//		} else {
//			roomButtonArray[i].frame = 3;
//			roomButtonArray[i].inputEnabled = false;
//		}
	}
};
//룸 리스트의 각 객체를 셋팅한다.
MenuV2.prototype.roomListBar = function(aNumber, aName, aTime, numText,
		nameText, timeText) {
	this.gameUtil.setText(aNumber, 0, 28, "center", "middle", numText); // 방 번호
	this.gameUtil.setText(aName, 0, 28, "left", "middle", nameText); // 방 이름
	this.gameUtil.setText(aTime, 0, 28, "center", "middle", timeText); // 방 시간
};

// 초대 정보 가지고 오기
// 룸에서 초대 받았는지 웹에서 정보를 가지고 온다.
MenuV2.prototype.setInviteInfo = function(aData) {
	setRoomSelectData(aData.room_number, aData.room_title, 0, aData.is_lock,
			aData.play_time, aData.back_ground, aData.password,
			aData.host_name, aData.ip, aData.server_idx);
};

// 초대 받은 유저가 바로 대기룸까지 간다.
MenuV2.prototype.inviteStandbyRoom = function() {
	//초대받은 유저 소켓 연결
	netSocketLogin(that.gameConst.NextLoginType.ROOM_INVITE);
};

// 왼쪽으로 페이지 이동 버튼
MenuV2.prototype.roomPageMoveLeft = function() {
	roomPage--;
	if (roomPage < 1) {
		roomPage = 1;
	}
	this.setNetworkLoading();
	this.socketManager.netReqRoomList('req_room_list');
};

// 오른쪽으로 페이지 이동 버튼
MenuV2.prototype.roomPageMoveRight = function() {
	roomPage++;
	if (roomPage > roomTotalPage) {
		roomPage = roomTotalPage;
	}
	this.setNetworkLoading();	
	this.socketManager.netReqRoomList('req_room_list');
};

// 룸 리스트에서 입장 버튼
MenuV2.prototype.roomListButton = function(target) {
	roomSelectIdx = target.index%roomMaxListBar;

	if (roomListLockData[target.index] === "1"
			|| roomListLockData[target.index] === 1) { // 비밀 방
		this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
		this.enterRoomSetting(roomSelectIdx);
		this.roomPasswordInit(that.gameConst.RoomPasswordSateType.ROOM_LIST,
				roomListPasswordData[target.index]);
	} else {
		//this.fRoomListGroup.visible = false; // 대기리스트
		// 대기방 입장
		this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
		this.enterRoomSetting(roomSelectIdx);
		that.gameData.roomPassword = "";
		//대기방 입장시 소켓연결
		netSocketLogin(that.gameConst.NextLoginType.ROOM_ENTER_ROOM_LIST);
	}
};
//방 입장시 셋팅
MenuV2.prototype.enterRoomSetting = function(index) {
	var roomInfo = ((resLoadRoomListArray === undefined || resLoadRoomListArray[index] === undefined) ? '' : resLoadRoomListArray[index]);
	setRoomSelectData(roomInfo.room_number, roomInfo.room_title, 0,
			roomInfo.is_lock, roomInfo.play_time, roomInfo.back_ground,
			roomInfo.password, roomInfo.host_name, roomInfo.ip,
			roomInfo.server_idx);
	//console.log("enterRoomSetting roomInfo.room_number is "+ roomInfo.room_number);
};

/**
 * 로비 소켓 이벤트 처리
 * new added
 */
function netSocketLobbyResponseAll() {
	// 게임방 목록 변경에 대한 소켓 처리 new added 
	that.socketManager.netResRoomList(netResRoomListSuccess, netResRoomListFail);
	that.socketManager.netResRoomChangeInfo(netResRoomChangeInfoSuccess, netResRoomChangeInfoFail);
	that.socketManager.netResSearchRoomByHost(netResSearchRoomByHostSuccess, netResSearchRoomByHostFail);
	that.socketManager.netResSearchRoomByRoomNum(netResSearchRoomByHostSuccess, netResSearchRoomByHostFail);
	that.socketManager.netResAutoEnterRoom(netResAutoEnterRoomSuccess, netResAutoEnterRoomFail);
}

// 방 선택이나 검색시 임시로 들어가 있는 데이터...
function setRoomSelectData(aRoomNumber, aRoomTitle, aRoomOwner, aIsLock,
		aPlayTime, aBackGround, aPassword, aHostName, aIP, aServerIndex) {

	roomSelectData.room_number = aRoomNumber;
	//console.log("setRoomSelectData roomSelectData.room_number is " + roomSelectData.room_number);

	roomSelectData.room_title = aRoomTitle;
	roomSelectData.host_name = aHostName;
	roomSelectData.is_lock = aIsLock;
	roomSelectData.room_owner = aRoomOwner;

	roomSelectData.play_time = aPlayTime;
	roomSelectData.back_ground = aBackGround;
	roomSelectData.password = aPassword;
	roomSelectData.ip = aIP;
	roomSelectData.server_idx = aServerIndex;
}

// 해당 룸을 선택하여 임시로 저장해 놓은 값들을 게임데이터로 옮긴다.
function setRoomGameData() {
	that.gameData.roomNumber = roomSelectData.room_number;
	//console.log("setRoomGameData that.gameData.room_number is " + roomSelectData.room_number);
	//console.log("setRoomGameData that.gameData.room_number is " + that.gameData.room_number);

	that.gameData.roomTitle = roomSelectData.room_title;
	that.gameData.roomIsLock = roomSelectData.is_lock;

	that.gameData.roomOwner = roomSelectData.room_owner;
	that.gameData.roomPlayTime = roomSelectData.play_time;
	that.gameData.backGround = roomSelectData.back_ground;
	that.gameData.password = roomSelectData.password;
	that.gameData.gameSocketIP = roomSelectData.ip;

	if (roomSelectData.room_owner === 0) {
		that.gameData.otherNickName = roomSelectData.host_name;
	} else {
		// that.gameData.userNickName = roomSelectData.host_name;
	}
}

// 풀 스크린 화면
MenuV2.prototype.toggleFullScreen = function(elem) {
//	if (this.game.scale.isFullScreen) {
//		this.game.scale.stopFullScreen();
//
//		this.fRoomListBtnFullScreenBig.visible = true;
//		this.fRoomListBtnFullScreenSmall.visible = false;
//		this.fRoomBtnFullScreenSmall.visible = false;
//		this.fRoomBtnFullScreenBig.visible = true;
//	} else {
//		this.game.scale.startFullScreen(false);
//
//		this.fRoomListBtnFullScreenBig.visible = false;
//		this.fRoomListBtnFullScreenSmall.visible = true;
//		this.fRoomBtnFullScreenSmall.visible = true;
//		this.fRoomBtnFullScreenBig.visible = false;
//	}
	
	// ## The below if statement seems to work better ## if ((document.fullScreenElement && document.fullScreenElement !== null) || (document.msfullscreenElement && document.msfullscreenElement !== null) || (!document.mozFullScreen && !document.webkitIsFullScreen)) {
    if ((document.fullScreenElement !== undefined && document.fullScreenElement === null) || (document.msFullscreenElement !== undefined && document.msFullscreenElement === null) || (document.mozFullScreen !== undefined && !document.mozFullScreen) || (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) {
        if (elem.requestFullScreen) {
            elem.requestFullScreen();
        } else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullScreen) {
            elem.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
        } else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
    } else {
        if (document.cancelFullScreen) {
            document.cancelFullScreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitCancelFullScreen) {
            document.webkitCancelFullScreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    }
};

// // 볼륨 버튼
// MenuV2.prototype.roomVolume = function(){
// //this.setTwoRedPopup("감사합니다. 우리 모두 열심히 합시다.\n감사합니다. 우리 모두 열심히 합시다.\n감사합니다.
// 우리 모두 열심히 합시다.\n감사합니다. 우리 모두 열심히 합시다.", this.confirmRedListener,
// this.cancelRedListener);
// this.setOneBluePopup("준비중입니다.", confirmBlueListener);
// };
// 전체 화면시 처리할 부분.
MenuV2.prototype.roomFullScreen = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Tog_sound);
	this.toggleFullScreen(document.body);
};

// 도움말 버튼
MenuV2.prototype.roomHelp = function() {
	// this.setOneBluePopup("준비중입니다.", this.confirmBlueListener);
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	//this.fPopupHelp.visible = true;
	this.roomHelpDataLoad();
	this.roomHelpInit();
	// setSessionIDLogin();
};

// 종료 버튼
MenuV2.prototype.roomExit = function() {
	this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Rm);
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	self.close(); // 윈도우창 종료
};

//// 별명 검색.
//function netResNickNameRoomSearchSuccess(aData) {
//	//console.log("MenuV2::netResRoomNameSearch -> netResRoomNameSearch data.."	+ JSON.stringify(aData));
//	// that.fPopupRoomSearch.visible = false;
//	that.fRoomSearchBtnGo.visible = true;
//	setRoomSelectData(aData.room_number, aData.room_title, 0, aData.is_lock,
//			aData.play_time, aData.back_ground, aData.password,
//			aData.host_name, aData.ip, aData.server_idx);
//
//	that.disableNetworkLoading();
//}
//
//function netResNickNameRoomSearchFail(aResult) {
//	that.fRoomSearchBtnGo.visible = false;
//	that.disableNetworkLoading();
//	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
//	// that.gameConst.getPopupServerMessage(aResult));
//}

// 방 검색 버튼
MenuV2.prototype.roomSearch = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupRoomSearch.visible = true;
	this.roomSearchInit();
};

// 방 생성 버튼
MenuV2.prototype.roomCreate = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fRoomCreate.visible = true;
	this.roomCreateInit();
};

// 혼자하기 버튼
MenuV2.prototype.roomPlaySingle = function() {
	// this.game.state.start("Level1");
	// this.roomPlayAloneInit();
	// this.setOneBluePopup("준비중입니다.", confirmBlueListener);
	// that.game.time.events.stop();
	this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Lob);
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	
	if(intervalTimerID !== null){
		clearInterval(intervalTimerID);
		intervalTimerID = null;
	}	

	this.gameData.isFriendVisitePopup = false;	//초대 팝업 여부
	if (roomFriendInvitingSave.length !== 0)
		that.roomFriendInviteSpliceAll();
	
	that.socketManager.isRoomList = false;

	this.game.state.start("SingleLevel1");	
};

// 빠른 실행 버튼
MenuV2.prototype.roomPlayPaster = function() {
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	/* that.ajaxManager.netReqAutoEnter(that.gameData.channelIndex, netResAutoEnterSuccess,
			netResAutoEnterFail); */

	that.socketManager.netReqAutoEnterRoom("req_auto_enter_room");

	// this.setOneBluePopup("준비중입니다.", confirmBlueListener);
};

// 빠른 실행 실패시...
function netResAutoEnterFail(aResult) {
	that.disableNetworkLoading();
	
	if(checkSetLobbyDisconnect(aResult) === true){
		//that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmRedExitListener);
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		setTimeout(window.close(), 3000);
	} else {	
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2);
		/* new added
		netRoomPageRefresh();
		*/
	}
	//that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),	confirmBlueListener);
}

function netResAutoEnterRoomFail(aResult) {
	that.disableNetworkLoading();

	if(checkSetLobbyDisconnect(aResult) === true){
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		setTimeout(window.close(), 3000);
	} else {	
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2);
	}
}

// 빠른 실행 성공시...
function netResAutoEnterSuccess(aData) {
	//console.log("MenuV2::netResRoomNameSearch -> netResRoomNameSearch data.."	+ JSON.stringify(aData));

	that.disableNetworkLoading();
	setRoomSelectData(aData.room_number, aData.room_title, 0, aData.is_lock,
			aData.play_time, aData.back_ground, aData.password,
			aData.host_name, aData.ip, aData.server_idx);

	//자동입장(친구초대 , 비밀방 입장...)시 소켓연결
	if (roomSelectData.is_lock === "1" || roomSelectData.is_lock === 1) {
		that.roomPasswordInit(that.gameConst.RoomPasswordSateType.ROOM_FASTER,
				roomSelectData.password);
	} else {
		netSocketLogin(that.gameConst.NextLoginType.ROOM_ENTER_FASTER);
	}
}

function netResAutoEnterRoomSuccess(aData) {
	that.disableNetworkLoading();
	setRoomSelectData(aData.data.room_number, aData.data.room_title, 0, aData.data.is_lock,
		aData.data.play_time, aData.data.back_ground, aData.data.password,
		aData.data.host_name, aData.data.ip, aData.data.server_idx);

	//자동입장(친구초대 , 비밀방 입장...)시 소켓연결
	if (roomSelectData.is_lock === "1" || roomSelectData.is_lock === 1) {
		that.roomPasswordInit(that.gameConst.RoomPasswordSateType.ROOM_FASTER,
				roomSelectData.password);
	} else {
		netSocketLogin(that.gameConst.NextLoginType.ROOM_ENTER_FASTER);
	}
}


//방 입장 네트웍 성공시 입장 처리함.
function netSocketEnterRoom() {

	isStandBySuccessHost = false;
	isStandBySuccessPerson = false;
	isStandBySuccessOkay = false;

	// that.socketManager.netResPersonEnterRoom(netResPersonStandByRoomEnterSuccess,
	// netResPersonStandByRoomEnterFail);
	// that.setToastMessage("방 입장 대기중입니다. 잠시 기다려 주세요...");
	that.setNetworkLoading();

	console.log("netSocketEnterRoom-----", roomSelectData);

	that.socketManager.netReqEnterRoom('req_enter_room',
			that.gameData.sessionID, roomSelectData.room_number,
			that.gameData.userNickName, roomSelectData.password);
}
function socketEventDefine() {
	//로그인 요청 소켓에 대한 response처리  new added
	that.socketManager.netResLogin(netResLoginSuccess, netResloginFail);
	//게임방 입장 대기중 소켓에 대한 response처리
	that.socketManager.netResHostEnterRoom(netResHostStandByRoomEnterSuccess,
			netResHostStandByRoomEnterFail);
	//게임방 생성 소켓에 대한 response처리
	that.socketManager.netResCreateRoom(netResCreateRoomSuccess,
			netResCreateRoomFail);
	//게임방 입장 소켓에 대한 response 처리
	that.socketManager.netResPersonEnterRoom(
			netResPersonStandByRoomEnterSuccess,
			netResPersonStandByRoomEnterFail);
	that.socketManager.netResInvitedReject(netResInvitedRejectSuccess,
			netResInvitedRejectFail);
	that.socketManager.netResUserLeaveRoom(netResUserLeaveRoomSuccess,
			netResUserLeaveRoomFail);
	that.socketManager.netResOtherLeaveRoom(netResOtherLeaveRoomSuccess,
			netResOtherLeaveRoomFail);
	// 방 설정변경 소켓에 대한 response처리
	that.socketManager.netResChangeRoomOption(netResChangeRoomOptionSuccess,
			netResChangeRoomOptionFail);

	that.socketManager.netResFire(netResFireSuccess, netResFireFail);
}

function reqJoinGame() {
	that.socketManager.netReqJoinGame("req_join_game", that.gameData.userNickName, that.gameData.sessionID, that.gameData.roomNumber);
}

function disconnectToastMessage() {
	that.setToastMessage("웹브라우저를 최소화 하는 경우 서버와의 연결이 해제됩니다. 다시 접속해 주세요.");	
}

function netResFireSuccess(aData) {
	that.fRoomListGroup.visible = true; // 대기방 목록
	that.fStandByRoomGroup.visible = false; // 대기방
	that.gameData.isFriendVisitePopup = true;	//초대팝업여부

	that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Rm);
	that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Lob);	
}

function netResFireFail(aResult) {
}

/**
 * LoginType에 따르는 소켓 연결 (Scene이 전환될때마다 호출)
 * 이전에 이미 세션아이디 , 닉네임이 설정되었음 & Api Server에 세션아이디 검수 통과
 * @param {*} aLoginType 
 */
function netSocketLogin(aLoginType) {
	loginType = aLoginType;
	that.socketManager.setConnect(that.gameUtil.getQuery('channel'), reqJoinGame, disconnectToastMessage);
	socketEventDefine();
	that.setNetworkLoading();	
	that.socketManager.netReqLogin('req_login', that.gameData.userNickName,
				that.gameData.sessionID, that.gameData.userCharacterType,
				that.gameData.uuid);
}

// function setWindowPostMessage(){
//	 //event message Listener...
//	 //var parentHomeDomain = that.config.getGameAPIURL().replace("com/game/","com");
//	 var configUrlType = that.config.getURLType();
//	 if(configUrlType === that.config.URL_TYPE.DEV || configUrlType === that.config.URL_TYPE.LIVE || configUrlType === that.config.URL_TYPE.STG){
//	 var parentHomeDomain = that.config.getParentsURL();
//		 if(that.gameData.gameURL === undefined || that.gameData.gameURL === null ||	 that.gameData.gameURL === ""){
//			 window.opener.postMessage({ message: 'getSelectedChannel' }, parentHomeDomain);
//			 console.log("MenuV2::setWindowPostMessage");
//	 	}
//	 }
// }
// 
//		
// // window.addEventListener('message', function (event) {
// // console.log("MenuV2 :: setWindowEvent -> event.data " + event.data);
// // if (event.origin === 'https://dev-typing.malangmalang.com') {
// // if (event.data.message && event.data.message === 'returnSelectedChannel')
// {
// // that.gameData.gameURL = event.data.channel_dns;
// // console.log("MenuV2 :: setWindowEvent -> that.gameData.gameURL " +
// that.gameData.gameURL);
// // }
// // }
// // });
// }
// };
//쿼리를 통해 웹에서 설정한 채널 정보를 가지고 온다.
function getUserChannels() {
	var configUrlType = that.config.getURLType();
	if (configUrlType === that.config.URL_TYPE.DEV
			|| configUrlType === that.config.URL_TYPE.LIVE
			|| configUrlType === that.config.URL_TYPE.MY_COM
			|| configUrlType === that.config.URL_TYPE.STG) {
		that.gameData.channelIndex = that.gameUtil.getQuery('channel');
	} else {
		that.gameData.channelIndex = 1;
	}
	
	if(that.gameData.channelIndex === null){		
		that.setOneRedExitPopup("채널 정보를 가지고 오지 못했습니다.\n 다시 로그인 해주세요.", confirmRedExitListener);
	}
	
	console.log("getUserChannels - CH : " + that.gameData.channelIndex);
	that.ajaxManager.netReqChannelUrl(that.gameData.channelIndex, netUserGameUrlSuccess,
			netUserGameUrlFail);
}

//내 url정보를 
function netUserGameUrlSuccess(aData) {
	
	var configUrlType = that.config.getURLType();
	if (configUrlType === that.config.URL_TYPE.DEV
			|| configUrlType === that.config.URL_TYPE.LIVE
			|| configUrlType === that.config.URL_TYPE.MY_COM
			|| configUrlType === that.config.URL_TYPE.STG) {
		console.log("netUserGameUrlSuccess - URL from DB : " + aData.channel.channel_dns)
		var ch = WebConfig.extractChFromDns(aData.channel.channel_dns);
		that.gameData.gameURL = that.config.getGameSocketURL(that.gameUtil.getQuery('channel'));
	} else {
		that.gameData.gameURL = that.config.getGameSocketURL(that.gameUtil.getQuery('channel'));
	}
	
	console.log("netUserGameUrlSuccess - URL : " + that.gameData.gameURL);

	// that.socketManager.setRobbyConnect(netSocketLobbyResponseAll);
	// netSocketLobbyResponseAll();
	// that.socketManager.setEventDefine(netSocketLobbyResponseAll);
}

function netUserGameUrlFail() {
	that.setOneRedExitPopup("채널 정보가 틀립니다.\n 다시 로그인 해주세요.",
			confirmRedExitListener);
}

// 대기방...
function netResLoginSuccess(aData) {
	that.disableNetworkLoading();

	switch (loginType) {
	// 방생성.
	case that.gameConst.NextLoginType.ROOM_CREATE:
		netSocketCreateRoom();
		break;

	// 방입장.
	case that.gameConst.NextLoginType.ROOM_ENTER_ROOM_LIST:
		netSocketEnterRoom();
		break;

	case that.gameConst.NextLoginType.ROOM_ENTER_FASTER:
		netSocketEnterRoom();
		break;

	case that.gameConst.NextLoginType.ROOM_ENTER_ROOM_SEARCH:
		// that.fPopupRoomSearch.visible = false;
		netSocketEnterRoom();
		break;

	case that.gameConst.NextLoginType.ROOM_INVITE:
		netSocketEnterRoom();
		break;
	}
}

function netResloginFail(aResult) {
	// that.socketManager.setDisConnect();
	that.disableNetworkLoading();
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
//	that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
//			confirmBlueListener);
	that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmBlueExitListener);
}

var isStandBySuccessHost = false;
var isStandBySuccessPerson = false;
var isStandBySuccessOkay = false;

// 대기방... //방장입장 Success
function netResHostStandByRoomEnterSuccess(aData) {
	// console.log("MenuV2::netResHostStandByRoomEnterSuccess ->
	// netResHostStandByRoomEnterSuccess data.." + JSON.stringify(aData));

	// that.gameData.roomTitle = aData.room_title;
	// that.gameData.roomPlayTime = aData.play_time;
	// that.gameData.backGround = aData.back_ground;
	// //that.gameData.userCharacterType = aData.userCharacterType; //말랑말랑에서
	// 받아옴...
	// that.gameData.otherNickName = aData.host_user_nick_name;
	// that.gameData.otherCharacterType = aData.host_user_character_type;

	// if(isStandBySuccessPerson === false){
	// isStandBySuccessPerson = true;
	// that.standByAlone(true);
	// setRoomGameData();
	that.fRoomListGroup.visible = false; // 대기방 목록
	that.gameData.isFriendVisitePopup = false;	//초대 팝업 여부

	that.gameData.otherCharacterType = aData.enter_user_character_type;
	that.gameData.otherNickName = aData.enter_user_nick_name;

	that.setCharacterAni(false, that.gameData.otherCharacterType);

//	console.log("MenuV2::netResHostStandByRoomEnterSuccess -> that.gameData.otherCharacterType is " + that.gameData.otherCharacterType);
//	console.log("MenuV2::netResHostStandByRoomEnterSuccess -> that.gameData.otherNickName is " + that.gameData.otherNickName);

	that.fOtherNickname.text = that.gameData.otherNickName;

	that.fRoomOtherWait.visible = false; // 기다리는 팻말
	that.fChar_aniSheet_standByRoom_other.visible = true;

	that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Rm);
	that.setToastMessage("잠시 후 게임이 시작됩니다...");
	that.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
		that.disableToastMessage();		
		if (roomFriendInvitingSave.length !== 0)
			that.roomFriendInviteSpliceAll();

		that.socketManager.isRoomList = false;
		
		that.game.state.start("Level1");
		// that.game.time.events.stop();
	}, that);
	// that.standByInit(false);
	// }
}
//방장 입장 Fail.
function netResHostStandByRoomEnterFail(aResult) {
	that.disableNetworkLoading();
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
	// confirmBlueListener);	
	if(checkSetLobbyDisconnect(aResult) === true){
		//that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmBlueExitListener);
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		setTimeout(window.close(), 3000);
	} else {	
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		that.socketManager.setDisConnect();
		/* new added
		netRoomPageRefresh();
		*/
	}
}

// 방원 입장 성공
function netResPersonStandByRoomEnterSuccess(aData) {
	
	that.socketManager.isRoomList = false;

	// console.log("MenuV2::netResPersonStandByRoomEnterSuccess ->
	// netResPersonStandByRoomEnterSuccess data.." + JSON.stringify(aData));
	
	that.fPopupHelp.visible = false;
	
	that.fRoomListGroup.visible = false;
	that.gameData.isFriendVisitePopup = false;	//초대 팝업 여부
	setRoomGameData();

	that.gameData.roomTitle = aData.room_title;
	that.gameData.roomPlayTime = aData.play_time;
	that.gameData.backGround = aData.back_ground;
	// //that.gameData.userCharacterType = aData.userCharacterType; //말랑말랑에서
	// 받아옴...
	that.gameData.otherNickName = aData.host_user_nick_name;
	that.gameData.otherCharacterType = aData.host_user_character_type;
	// if(isStandBySuccessHost === false){
	// isStandBySuccessHost = true;
	that.gameData.roomOwner = 0;
	that.disableNetworkLoading();

	that.setCharacterAni(true, that.gameData.otherCharacterType);

	that.setCharacterAni(false, that.gameData.userCharacterType);
	that.fPopupRoomSearch.visible = false;
	that.standByInit(false);
	// }

	if (isStandBySuccessHost === true && isStandBySuccessPerson === true
			&& isStandBySuccessOkay === false) {
		isStandBySuccessOkay = true;
		// that.standByInit(false);
	}

	// if(isStandBySuccessPerson === true && isStandBySuccessPerson === true &&
	// isStandBySuccessOkay === false)
	// {that.gameConst.PopupType.RED_ONE_BUTTON
	// isStandBySuccessOkay = true;
	// that.standByInit(false);
	// }
}
//방원 입장 실패..
function netResPersonStandByRoomEnterFail(aResult) {
	that.disableNetworkLoading();
	
	//that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),	confirmBlueListener);
	if(checkSetLobbyDisconnect(aResult) === true){
		//that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmBlueExitListener);
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		setTimeout(window.close(), 3000);
	} else {	
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);	
		/* new added
		netRoomPageRefresh();	
		*/
		that.fRoomListGroup.visible = true; // 대기리스트
		that.gameData.isFriendVisitePopup = true;	//초대 팝업 여부
		that.socketManager.setDisConnect();
	}
}

/**
 * 대기방
 */
// 초기 대기방 초기화
MenuV2.prototype.standByInit = function(aIsCreate) {

	that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Lob);
	that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Rm);

	that.fRoomListGroup.visible = false; // 대기방 목록
	that.gameData.isFriendVisitePopup = false;	//초대 팝업 여부
	if(intervalTimerID !== null){
		clearInterval(intervalTimerID);
		intervalTimerID = null;
	}
	
	this.fStandByRoomGroup.visible = true;
	this.fRoomBack.inputEnabled = true;

	this.setRoomInfo();

	var hostName = (aIsCreate === true) ? that.gameData.userNickName : that.gameData.otherNickName;
	var enterPersonName = (aIsCreate === true) ? that.gameData.otherNickName : that.gameData.userNickName;

	this.gameUtil.setText(this.fUserNickname, 0, 35, "center", "middle",
			hostName); // 내 닉네임
	this.gameUtil.setText(this.fOtherNickname, 0, 35, "center", "middle",
			enterPersonName); // 상대방 닉네임

	if (this.fChar_aniSheet_standByRoom_user !== undefined)
		this.fChar_aniSheet_standByRoom_user.setPlay("IDLE");
	if (this.fChar_aniSheet_standByRoom_other !== undefined)
		this.fChar_aniSheet_standByRoom_other.setPlay("IDLE");

	// 혼자하기 시 false, 아니면 true
	this.standByAlone(true);

	if (that.gameData.roomOwner === 1) {
		// userName = that.gameData.otherNickName;
		// otherName = that.gameData.userNickName;
		this.fRoomOtherWait.visible = true; // 기다리는 팻말
		if (this.fChar_aniSheet_standByRoom_other !== undefined)
			this.fChar_aniSheet_standByRoom_other.visible = false;
	} else {
		this.fRoomOtherWait.visible = false; // 기다리는 팻말
		if (this.fChar_aniSheet_standByRoom_user !== undefined)
			this.fChar_aniSheet_standByRoom_user.visible = true;
	}

	if (aIsCreate === false) {
		// 방 토탈 갯수.
		this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Rm);
		this.setToastMessage("잠시후 게임이 시작됩니다...");
		this.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
			this.disableNetworkLoading();
			if(intervalTimerID !== null){
				clearInterval(intervalTimerID);
				intervalTimerID = null;
			}
			this.gameData.isFriendVisitePopup = false;	//초대 팝업 여부
			if (roomFriendInvitingSave.length !== 0)
				that.roomFriendInviteSpliceAll();

			that.socketManager.isRoomList = false;

			this.game.state.start("Level1");
			// that.game.time.events.stop();
		}, this);
	}
};

// 방 정보 설정
MenuV2.prototype.setRoomInfo = function() {
	// var resRoomData = this.socketManager.getResCreateRoom();
	this.gameUtil.setText(this.fSelectRoomNum, 0, 28, "center", "middle",
			that.gameData.roomNumber); // 방 번호

	//console.log("standByInit that.gameData.roomNumber is " + that.gameData.roomNumber);
	this.gameUtil.setText(this.fSelectRoom, 0, 28, "center", "middle",
			that.gameData.roomTitle); // 방 이름

	var backName = that.gameConst.BackGround[that.gameData.backGround];
	this.gameUtil.setText(this.fSelectBackImage, 0, 28, "center", "middle",
			backName); // 게임배경 이름
	this.gameUtil.setText(this.fSelectRoomTime, 0, 28, "center", "middle",
			that.gameData.roomPlayTime + "분"); // 게임 시간

	// if(roomSelectData.is_lock === "1"){
	// this.fRoomListIconLock.frame = 1; // 방 락 유무(0 : 자유방, 1: 비밀번호 방)
	// } else {
	// this.fRoomListIconLock.frame = 0; // 방 락 유무(0 : 자유방, 1: 비밀번호 방)
	// }

	if (this.gameData.roomIsLock === "1" || this.gameData.roomIsLock === 1) {
		this.fRoomListIconLock.frame = 1; // 방 락 유무(0 : 자유방, 1: 비밀번호 방)
	} else {
		this.fRoomListIconLock.frame = 0; // 방 락 유무(0 : 자유방, 1: 비밀번호 방)
	}
};

// 혼자 하기 유무 설정
MenuV2.prototype.standByAlone = function(isAlone) {
	this.fRoomBtnSetting.visible = isAlone; // 설정 변경 버튼
	this.fRoomBtnInvite.visible = isAlone; // 친구 초대 버튼
	this.fRoomOtherWait.visible = isAlone; // 기다리는 팻말
};

// 볼륨 버튼
MenuV2.prototype.standByVolume = function() {	
	this.roomVolume();	
};

// 도움말 버튼
MenuV2.prototype.standByHelp = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	//this.fPopupHelp.visible = true;
	this.roomHelpDataLoad();
	this.roomHelpInit();
};
//대기방에서 전체화면
MenuV2.prototype.standByFullScreen = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Tog_sound);
	this.toggleFullScreen(document.body);
};
//의견 보내기
MenuV2.prototype.roomOpinion = function(){
	//test
	//this.showKeyboard();
	
//	//console.log("!eogksalsrnrakstp@#"); // 'my message'
//	
	window.open("https://goo.gl/forms/3CjpoXrh065djw1C2", "_blank");
};

// 종료 버튼
MenuV2.prototype.standByExit = function() {
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	that.socketManager.netReqLeaveRoom('req_leave_room',
			that.gameData.sessionID, that.gameData.roomNumber,
			that.gameData.userNickName);
	that.socketManager.isRoomList = true;
	// that.socketManager.setDisConnect();
};

// 방 유저 나가기 성공.
function netResUserLeaveRoomSuccess(aData) {
	//console.log("MenuV2::netResUserLeaveRoomSuccess -> netResUserLeaveRoomSuccess data.." + JSON.stringify(aData));	
	that.socketManager.setDisConnect();
	that.disableNetworkLoading();
	that.fStandByRoomGroup.remove(that.fChar_aniSheet_standByRoom_user);

	that.fRoomListGroup.visible = true; // 대기방 목록
	that.fStandByRoomGroup.visible = false; // 대기방
	that.gameData.isFriendVisitePopup = true;	//초대팝업여부

	that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Rm);
	that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Lob);
	//this.socketManager.netReqRoomList('req_room_list');
}

// 방 유저 나가기 실패.
function netResUserLeaveRoomFail(aResult) {
	that.disableNetworkLoading();
	
	if(checkSetLobbyDisconnect(aResult) === true){
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmBlueExitListener);
	} else {	
		that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueListener);
	}
}

// 방 인원 나가기 성공.
function netResOtherLeaveRoomSuccess(aData) {
	//console.log("MenuV2::netResOtherLeaveRoomSuccess -> netResOtherLeaveRoomSuccess data.."	+ JSON.stringify(aData));
	that.disableNetworkLoading();
}

// 방 인원 나가기 실패.
function netResOtherLeaveRoomFail(aResult) {
	that.disableNetworkLoading();
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	
	if(checkSetLobbyDisconnect(aResult) === true){
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmBlueExitListener);
	} else {	
		that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueListener);
	}
	// that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
	// that.socketManager.setDisConnect();
}

var testSocketNum = 0;
// 설정 변경 버튼
MenuV2.prototype.standBySetting = function() {

	// 방장만 바꿀수 있다.
	if (that.gameData.roomOwner === 1){
		that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
		that.roomResetInit();
	}	
};

var push = 0; // 친구 초대 테스트 용 나중에 삭제
// 친구 초대 버튼
MenuV2.prototype.standByInvite = function() {
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	that.roomFriendInviteInit();

	// this.setDenyInviteMessage("이무기");
	// this.setInviteRequest("이무기", 0);
	// push++;
	// this.pushInviteRequest("이무기" + push.toString(), 0);
};

/**
 * 방 생성
 */

var mRoomCreateInputFocus = false; // 방 이름 입력창 포커스 처리
var mRoomCreateAttribute = 0; // 속성
var mRoomCreateTitleBack = 0; // 배경
var mRoomCreateFixedTitleBack = 0; // 랜덤 선택된 배경
var mRoomCreateTime = 0; // 시간
var mRoomCreateAttributeArray = [ "공개", "비밀" ];
// var mRoomCreateTitleBackArray = ["노을 지는 산0", "노을 지는 산1", "노을 지는 산2", "노을 지는
// 산3", "노을 지는 산4", "노을 지는 산5", "노을 지는 산6", "노을 지는 산7", "노을 지는 산8"];
var mRoomCreateTimeArray = [ "1분", "2분", "3분", "4분", "5분" ];
var mRoomCreateNameArray = [ "누가 높이 쌓나~", "동전을 쌓아볼까?", "한번 올라와 봐", "동전탑이 무너지랴", "동전 쌓아 태산", "반듯 반듯하게", "동전이 떨어진다",
		"이 동전에 운명을", "동전 쌓기 짱이야" ];
var mRoomCreateInitName = "";

// 방 생성 초기화
MenuV2.prototype.roomCreateInit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.roomCreateAttributeDropDisEnable();
	this.roomCreateBackDropDisEnable();
	this.roomCreateTimeDropDisEnable();

	mRoomCreateAttribute = 0; // 속성
	mRoomCreateTitleBack = 0; // 배경
	mRoomCreateFixedTitleBack = 0; // 랜덤으로 선택된 배경
	mRoomCreateTime = 2; // 시간

	this.otherNickName = "";

	this.roomCreateDropText();

	mRoomCreateInputFocus = false;
	userTajaTyping.value = mRoomCreateNameArray[Math.floor(Math.random() * 9)];
	mRoomCreateInitName = userTajaTyping.value; 
	
	this.fInputCursorRoomCreateSheet.visible = false;	//방생성커서

	this.fDropdownBtn11.index = 0;
	this.fDropdownBtn12.index = 1;

	this.fDropdownBtn21.index = 0;
	this.fDropdownBtn22.index = 1;

	this.fDropdownBtn31.index = 0;
	this.fDropdownBtn32.index = 1;

	this.fListBar10.index = 0;
	this.fListBar11.index = 1;

	this.fListBar20.index = 0;
	this.fListBar21.index = 1;
	this.fListBar22.index = 2;
	this.fListBar23.index = 3;
	this.fListBar24.index = 4;
	this.fListBar25.index = 5;
	this.fListBar26.index = 6;
	this.fListBar27.index = 7;
	this.fListBar28.index = 8;

	this.fListBar30.index = 0;
	this.fListBar31.index = 1;
	this.fListBar32.index = 2;
	this.fListBar33.index = 3;
	this.fListBar34.index = 4;

	this.fBtnInvite1.index = 0;
	this.fBtnInvite2.index = 1;
	this.fBtnInvite3.index = 2;
	this.fBtnInvite4.index = 3;
	this.fBtnInvite5.index = 4;

	this.fBtnArea1.index = 0;
	this.fBtnArea1.inputEnabled = true;
	this.fBtnArea1.events.onInputDown.add(this.roomCreateDropDown1, this);

	this.fBtnArea2.index = 0;
	this.fBtnArea2.inputEnabled = true;
	this.fBtnArea2.events.onInputDown.add(this.roomCreateDropDown2, this);

	this.fBtnArea3.index = 0;
	this.fBtnArea3.inputEnabled = true;
	this.fBtnArea3.events.onInputDown.add(this.roomCreateDropDown3, this);

	this.fTransImg70.inputEnabled = true; // 방 만들기
	
	// roomPasswordTyping.onkeydown = this.onlyNumber;
	// roomPasswordTyping.onkeyup = this.removeChar;
	//roomPasswordTyping.onkeypress = this.userWordsCheck;
	this.fInputType.inputEnabled = true;
	this.fInputType.events.onInputDown.add(this.roomCreateNameLisner, this);
	
	//userTajaTyping.onkeydown = this.userWordsCheck;
};

// 속성 드롭 다운 버튼
MenuV2.prototype.roomCreateDropDown1 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (target.index === 0) {
		this.roomCreateAttributeDropEnable();
		this.roomCreateBackDropDisEnable();
		this.roomCreateTimeDropDisEnable();
	} else {
		this.roomCreateAttributeDropDisEnable();
	}

	if (this.fBtnArea1.index === 0)
		this.fBtnArea1.index = 1;
	else
		this.fBtnArea1.index = 0;
};

// 배경 드롭 다운 버튼
MenuV2.prototype.roomCreateDropDown2 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (target.index === 0) {
		this.roomCreateAttributeDropDisEnable();
		this.roomCreateBackDropEnable();
		this.roomCreateTimeDropDisEnable();
	} else {
		this.roomCreateBackDropDisEnable();
	}

	if (this.fBtnArea2.index === 0)
		this.fBtnArea2.index = 1;
	else
		this.fBtnArea2.index = 0;
};

// 시간 드롭 다운 버튼
MenuV2.prototype.roomCreateDropDown3 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (target.index === 0) {
		this.roomCreateAttributeDropDisEnable();
		this.roomCreateBackDropDisEnable();
		this.roomCreateTimeDropEnable();
	} else {
		this.roomCreateTimeDropDisEnable();
	}

	if (this.fBtnArea3.index === 0)
		this.fBtnArea3.index = 1;
	else
		this.fBtnArea3.index = 0;
};

//속성, 배경, 시간 드롭다운 전부 닫는다.
MenuV2.prototype.roomCreateDropDownAllClose = function() {
	this.roomCreateAttributeDropDisEnable();
	this.roomCreateBackDropDisEnable();
	this.roomCreateTimeDropDisEnable();
	
	this.fBtnArea1.index = 0;
	this.fBtnArea2.index = 0;
	this.fBtnArea3.index = 0;
};

// 속성 드롭다운 선택 버튼
MenuV2.prototype.roomCreateAttribute = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateAttribute = target.index;

	this.roomCreateAttributeDropDisEnable();
	this.roomCreateDropText();
};

// 배경 드롭다운 선택 버튼
MenuV2.prototype.roomCreateBack = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateTitleBack = target.index;

	this.roomCreateBackDropDisEnable();
	this.roomCreateDropText();
};

// 시간 드롭다운 선택 버튼
MenuV2.prototype.roomCreateTime = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateTime = target.index;

	this.roomCreateTimeDropDisEnable();
	this.roomCreateDropText();
};

// 종료 버튼
MenuV2.prototype.roomCreateExit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fRoomCreate.visible = false;
};

// 만들기 버튼
MenuV2.prototype.roomCreateCreate = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (userTajaTyping.value === "") {
		that.setOneBluePopup("방 제목을 입력해주세요.", confirmBlueListener);
		return;
	}

	this.fRoomCreate.visible = false;
	this.fInputCursorRoomCreateSheet.visible = false;	//방생성커서
	
	if (mRoomCreateAttribute == 1) { // 비밀번호 설정 팝업창
		this.roomPasswordInit(that.gameConst.RoomPasswordSateType.ROOM_CREATE,
				"");
	} else { // 대기방
		// this.standByInit();
		// 방 생성시 소켓 연결
		netSocketLogin(that.gameConst.NextLoginType.ROOM_CREATE);
	}
};
//방 생성시 요청
function netSocketCreateRoom() {
	// that.socketManager.setConnect();
	// that.socketManager.netResCreateRoom(netResCreateRoomSuccess,
	// netResCreateRoomFail);
	mRoomCreateFixedTitleBack = mRoomCreateTitleBack === 0 ? (Math.floor(Math
			.random() * 8) + 1) : mRoomCreateTitleBack;

	// that.setToastMessage("방 생성 중입니다.");
	that.setNetworkLoading();

	that.socketManager.netReqCreateRoom('req_create_room',
			userTajaTyping.value, that.gameData.userNickName,
			mRoomCreateAttribute, that.gameData.sessionID, 0,
			that.gameData.userCharacterType, mRoomCreateFixedTitleBack,
			(mRoomCreateTime + 1), roomPasswordTyping.value);
}

// 방 생성 성공시 처리부분
function netResCreateRoomSuccess(aData) {
	//console.log("MenuV2::netResCreateRoomSuccess -> netResCreateRoomSuccess data.."
	//				+ JSON.stringify(aData));

	// setRoomGameData();

	that.socketManager.isRoomList = false;

	that.gameData.roomNumber = aData.room_number;
	that.gameData.roomTitle = aData.room_title;
	that.gameData.roomIsLock = aData.is_lock;
	that.gameData.roomPlayTime = aData.play_time;
	that.gameData.roomPassword = roomPasswordTyping.value;
	that.gameData.roomOwner = 1;
	that.gameData.backGround = aData.back_ground;

	that.gameData.otherNickName = "";
	// 방 토탈 갯수.
	that.disableNetworkLoading();
	that.setCharacterAni(true, that.gameData.userCharacterType);

	that.standByInit(true);
	that.disableNetworkLoading();
}
//방 생성 처리시 실패부분
function netResCreateRoomFail(aResult) {
	that.disableNetworkLoading();
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if(checkSetLobbyDisconnect(aResult) === true){
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmBlueExitListener);
	} else {	
		that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueListener);
		// that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		that.socketManager.setDisConnect();
	}
}

// 드롭 다운 속성, 배경, 시간 이름
MenuV2.prototype.roomCreateDropText = function() {
	this.gameUtil.setText(this.fTextSelected1, 0, 32, "center", "middle",
			mRoomCreateAttributeArray[mRoomCreateAttribute]); // 속성
	// this.gameUtil.setText(this.fTextSelected2, 0, 32, "center", "middle",
	// mRoomCreateTitleBackArray[mRoomCreateTitleBack]); // 배경
	this.gameUtil.setText(this.fTextSelected2, 0, 32, "center", "middle",
			that.gameConst.BackGround[mRoomCreateTitleBack]); // 배경

	this.gameUtil.setText(this.fTextSelected3, 0, 32, "center", "middle",
			mRoomCreateTimeArray[mRoomCreateTime]); // 시간
};

// 방 이름
MenuV2.prototype.roomCreateNameText = function(text) {
	this.gameUtil.setText(this.fTextSelected, 0, 28, "center", "middle", text);
};
//방생성시 인풋 필드 설정
MenuV2.prototype.initRoomCreateField = function() {
	onUserTextField = "<DIV id=" + "TajaControlUser" + " style="
			+ "position:absolute;left:" + "375" + "px;top:" + "-100"
			+ "px;width:300px;height:30px;" + "focus" + ">";

	onUserTextFieldInput = "<input type="
			+ "text"
			+ " id="
			+ "userTajaTyping"
			+ " maxlength="
			+ "10"
			+ " style='border:0px; border-style : none; background-color:transparent; color : white; outline-style:none;'"
			+ " autofocus><br>" + "</div>";

	userTajaBackground.innerHTML = onUserTextField + onUserTextFieldInput;
};
//인풋 글자 key Code Check
MenuV2.prototype.userWordsCheck = function(evt) {
	event = evt || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;
	
//	if(that.fPopupPasswordSet.visible === true)	{
//		event.target.value = event.target.value.replace(/[^0-9]/g, "");
//		//roomPasswordTyping.value = that.fPlaceHolder2.text;
//	}
//	
//	if(that.fPopupPasswordSet.visible === true){
//		roomPasswordTyping.value = roomPasswordTyping.value.replace(/[^0-9]/g, "");
//	}
	
	//if (keyID === 27 || keyID === 32 || (keyID >= 33 && keyID <= 40 ) )	{
	if (keyID === 27 || (keyID >= 33 && keyID <= 40 ) )	{
		evt.returnValue = false;
		return false;
	}
	else if(keyID === 13){
		if(that.fPopupPasswordSet.visible === true)	{
			that.roomPasswordConfirm();
		} else {
			return;
		}
	}
	else {
			return;
		}
};
//텍스트 인풋 숫자만 가능하게 처리함
MenuV2.prototype.onlyNumber = function(evt) {
	event = evt || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;
	
	if ((keyID >= 48 && keyID <= 57) || (keyID >= 96 && keyID <= 105)
			|| keyID == 8 || keyID == 46 || (keyID >= 33 && keyID <= 40 ))
		return;
	else if(keyID === 13){
		that.roomPasswordConfirm();
	}
	else{
		return false;
	}
};
//텍스트 인풋 문자 삭제함.
MenuV2.prototype.removeChar = function(evt) {
	event = event || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;	

//	console.log("1111 11 1 removeChar is " + event.target.value);
//	event.target.value = event.target.value.replace(/[^0-9]/g, "");
//	console.log("2222 22 21 removeChar is " + event.target.value);
//	roomPasswordTyping.value = roomPasswordTyping.value.replace(/[^0-9]/g, "");
//	console.log("3333 31 1 removeChar is " + event.target.value);
};
//방 생성시 이름 리스너 처리함
MenuV2.prototype.roomCreateNameLisner = function(evt) {
	
	if (mRoomCreateInputFocus === false) {
		mRoomCreateInputFocus = true;
		this.fTextSelected.text = "";
		userTajaTyping.value = "";
		mRoomCreateInitName = "";
		this.fInputCursorRoomCreateSheet.visible = true;	//방생성커서
		this.roomCreateDropDownAllClose();
	}
};

// 속성 드롭다운 활성화
MenuV2.prototype.roomCreateAttributeDropEnable = function() {
	this.fDropdownBtn11.visible = false;
	this.fDropdownBtn12.visible = true;
	this.fDownMenu1.visible = true;

	mRoomCreateInputFocus = false;
	this.fInputCursorRoomCreateSheet.visible = false;	//방생성커서
};

// 속성 드롭다운 비활성화
MenuV2.prototype.roomCreateAttributeDropDisEnable = function() {
	this.fDropdownBtn11.visible = true;
	this.fDropdownBtn12.visible = false;
	this.fDownMenu1.visible = false;
};

// 배경 드롭다운 활성화
MenuV2.prototype.roomCreateBackDropEnable = function() {
	this.fDropdownBtn21.visible = false;
	this.fDropdownBtn22.visible = true;
	this.fDownMenu2.visible = true;

	mRoomCreateInputFocus = false;
	this.fInputCursorRoomCreateSheet.visible = false;	//방생성커서
};

// 배경 드롭다운 비활성화
MenuV2.prototype.roomCreateBackDropDisEnable = function() {
	this.fDropdownBtn21.visible = true;
	this.fDropdownBtn22.visible = false;
	this.fDownMenu2.visible = false;
};

// 시간 드롭다운 활성화
MenuV2.prototype.roomCreateTimeDropEnable = function() {
	this.fDropdownBtn31.visible = false;
	this.fDropdownBtn32.visible = true;
	this.fDownMenu3.visible = true;

	mRoomCreateInputFocus = false;
	this.fInputCursorRoomCreateSheet.visible = false;	//방생성커서
};

// 시간 드롭다운 비활성화
MenuV2.prototype.roomCreateTimeDropDisEnable = function() {
	this.fDropdownBtn31.visible = true;
	this.fDropdownBtn32.visible = false;
	this.fDownMenu3.visible = false;
};

// 방 생성 시 방 이름 드롭 다운이 켜 있을 경우 입력 못함
MenuV2.prototype.roomCreateInputCheck = function() {
	if (mRoomCreateInputFocus === true && this.fDownMenu1.visible === false
			&& this.fDownMenu2.visible === false
			&& this.fDownMenu3.visible === false) {
		userTajaTyping.focus();
	} else {
		userTajaTyping.blur();
	}
};

/**
 * 방 검색 팝업창
 */

var mRoomSearchInputFocus = false; // 별명, 방 이름 입쳑창 클릭 시 활성화 유무
var mRoomSearchTab = 0; // 별명, 방 번호 구분 (0 : 별명, 1 : 방 번호)

// 방 검색 초기화
MenuV2.prototype.roomSearchInit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fTapSelectNickname.visible = true;
	this.fTapSelectRoomNum.visible = false;

	mRoomSearchInputFocus = false;
	mRoomSearchTab = 0;

	this.fRoomSearchBtnGo.visible = false; // 입장 버튼
	
	this.fInputCursorRoomSearchSheet.visible = false;	//방검색커서

	this.fTapBtnRoomNum.index = 1;
	this.fTapBtnRoomNumOn.index = 1;
	this.fTapBtnNickname.index = 0;
	this.fTapBtnNicknameOn.index = 0;

	this.fRoomSearchInput.inputEnabled = true;
	this.fRoomSearchInput.events.onInputDown.add(this.roomSearchInput, this);

	userTajaTyping.value = "입력해주세요";	
	this.fPlaceHolder1.fill = '#608eb8';
};

// 별명/방 번호 탭 버튼
MenuV2.prototype.RoomSearchTab = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	if (target.index == 0) {
		this.fTapSelectNickname.visible = true;
		this.fTapSelectRoomNum.visible = false;
	} else {
		this.fTapSelectNickname.visible = false;
		this.fTapSelectRoomNum.visible = true;
	}

	//if (mRoomSearchInputFocus === true) {

		if (mRoomSearchTab !== target.index) {
			that.fRoomSearchBtnGo.visible = false;
		}

		mRoomSearchTab = target.index;
		this.fPlaceHolder1.text = "";
		userTajaTyping.value = "";
	//}
};

// 검색 텍스트 입력창
MenuV2.prototype.roomSearchInput = function() {
	if (mRoomSearchInputFocus === false) {
		mRoomSearchInputFocus = true;
		this.fPlaceHolder1.text = "";
		userTajaTyping.value = "";
		this.fPlaceHolder1.fill = '#ffffff';
		this.fInputCursorRoomSearchSheet.visible = true;
	}
};

// 방 검색 시
MenuV2.prototype.roomSearchInputCheck = function() {
	if (mRoomSearchInputFocus === true) {
		userTajaTyping.focus();
	} else {
		userTajaTyping.blur();
	}
};

// 검색 입력창
MenuV2.prototype.roomSearchText = function(text) {
	this.gameUtil.setText(this.fPlaceHolder1, 0, 28, "center", "middle", text);
};

// 검색시 입장 버튼
MenuV2.prototype.roomSearchGo = function() {
	if (this.fRoomSearchBtnGo.visible === false)
		return;
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (roomSelectData.is_lock === "1" || roomSelectData.is_lock === 1) { // 비밀 방
		this.roomPasswordInit(that.gameConst.RoomPasswordSateType.ROOM_SEARCH,
				roomSelectData.password);
	} else {
		// 방 검색시 입장 버튼을 클릭하여 소켓 연결
		netSocketLogin(that.gameConst.NextLoginType.ROOM_ENTER_ROOM_LIST);
	}
};

// 검색 버튼
MenuV2.prototype.roomSearchSearch = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (mRoomSearchTab === 0) { // 별명 방 검색일 경우...
		// that.setToastMessage("별명 검색중입니다. 잠시 기다려 주세요...");
		that.setNetworkLoading();
		/* that.ajaxManager.netReqNicknameRoomSearch(userTajaTyping.value, that.gameData.channelIndex,
				netResNickNameRoomSearchSuccess, netResNickNameRoomSearchFail); */
		that.socketManager.netReqSearchRoomByHost("req_search_room_by_host", userTajaTyping.value);
	} else if (mRoomSearchTab === 1) { // 방 번호 방 검색일 경우...
		// that.setToastMessage("방 번호 검색중입니다. 잠시 기다려 주세요...");
		that.setNetworkLoading();
		/* that.ajaxManager.netReqRoomNumberRoomSearch(userTajaTyping.value, that.gameData.channelIndex,
				netResRoomNameRoomSearchSuccess, netResRoomNameRoomSearchFail); */
		that.socketManager.netReqSearchRoomByRoomNum("req_search_room_by_roomnum", userTajaTyping.value);
	}
};

function netResSearchRoomByHostSuccess(aData) { 
	that.fRoomSearchBtnGo.visible = true;
	that.disableNetworkLoading();	

	console.log(aData);

	setRoomSelectData(aData.data.room_number, aData.data.room_title, 0, aData.data.is_lock,
		aData.data.play_time, aData.data.back_ground, aData.data.password,
		aData.data.host_name, aData.data.ip, aData.data.server_idx);
}

function netResSearchRoomByHostFail(aResult) {
	// console.log("[netResSearchRoomByHostFail]", aResult);
	that.fRoomSearchBtnGo.visible = false;
	that.disableNetworkLoading();
	
	if(checkSetLobbyDisconnect(aResult) === true){
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		setTimeout(window.close(), 3000);
	} else {	
		that.setToastMessage("생성된 방이 없습니다.", 2);
	}
}

// 별명 검색 성공함
function netResNickNameRoomSearchSuccess(aData) {
	//console.log("MenuV2::netResRoomNameSearch -> netResRoomNameSearch data.." + JSON.stringify(aData));
	// that.fPopupRoomSearch.visible = false;
	that.fRoomSearchBtnGo.visible = true;
	that.disableNetworkLoading();	
	
	setRoomSelectData(aData.room_number, aData.room_title, 0, aData.is_lock,
			aData.play_time, aData.back_ground, aData.password,
			aData.host_name, aData.ip, aData.server_idx);
}
// 별명 검색 실패함
function netResNickNameRoomSearchFail(aResult) {
	that.fRoomSearchBtnGo.visible = false;
	that.disableNetworkLoading();
	
	if(checkSetLobbyDisconnect(aResult) === true){
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		setTimeout(window.close(), 3000);
	} else {	
		that.setToastMessage("생성된 방이 없습니다.", 2);
	}
	
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
}

//// 방번호 검색.
//function netResRoomNameRoomSearchSuccess(aData) {
//	//console.log("MenuV2::netResRoomNameSearch -> netResRoomNameSearch data.." + JSON.stringify(aData));
//	// that.fPopupRoomSearch.visible = false;
//	that.fRoomSearchBtnGo.visible = true;
//
//	setRoomSelectData(aData.room_number, aData.room_title, 0, aData.is_lock,
//			aData.play_time, aData.back_ground, aData.password,
//			aData.host_name, aData.ip, aData.server_idx);
//}

//방번호 검색.
function netResRoomNameRoomSearchSuccess(aData) {
	//console.log("MenuV2::netResRoomNameSearch -> netResRoomNameSearch data.." + JSON.stringify(aData));
	// that.fPopupRoomSearch.visible = false;
	that.fRoomSearchBtnGo.visible = true;
	that.disableNetworkLoading();
	
//	setRoomSelectData(aData.room_number, aData.room_title, 0, aData.is_lock,
//			aData.play_time, aData.back_ground, aData.password,
//			aData.host_name, aData.ip, aData.server_idx);
	
	setRoomSelectData(aData.room_number, aData.room_title, 0, aData.is_lock,
			aData.play_time, aData.back_ground, aData.password,
			aData.host_name, aData.ip, aData.server_idx);
}


//초대유저로그인 체크한다.
var mInvitation = null; 
function checkInviteLogin(){
	var configUrlType = that.config.getURLType();
	if (configUrlType === that.config.URL_TYPE.DEV
			|| configUrlType === that.config.URL_TYPE.MY_COM
			|| configUrlType === that.config.URL_TYPE.LIVE
			|| configUrlType === that.config.URL_TYPE.STG) {
		
		//console.log("초대 유저 로그인체크");	
		if (ttsdk) {
			mInvitation = ttsdk.takeAcceptedInvitation();
			//mInvitation = ttsdk.getAcceptedInvitation();
		} else {
			console.error("Cannot find ttsdk!");
		}
		
		if(mInvitation !== null){
			if (mInvitation.server_dns.indexOf("https://") == 0) {
				that.gameData.gameURL = "wss://" + mInvitation.server_dns.substring(8);
			}
			else if (mInvitation.server_dns.indexOf("http://") == 0) {
				that.gameData.gameURL = "ws://" + mInvitation.server_dns.substring(7);
			}
			else if (mInvitation.server_dns.indexOf("wss://") == 0) {
			}
			else if (mInvitation.server_dns.indexOf("ws://") == 0) {
			}
			else {
				that.gameData.gameURL = "wss://" + mInvitation.server_dns;
			}
			that.gameData.channelIndex = mInvitation.server_idx;
			console.log("MenuV2::checkInviteLogin -> invitation SERVER DNS : " + mInvitation.server_dns + ", IDX : " + mInvitation.server_idx);
			// that.socketManager.setRobbyConnect(netSocketLobbyResponseAll);
			// netSocketLobbyResponseAll();
			// that.socketManager.setEventDefine(netSocketLobbyResponseAll);
		}
		else {
			getUserChannels();
		}		
	} else {
		that.gameData.gameURL = that.config.getGameSocketURL(1);
		that.gameData.channelIndex = 1;
		// that.socketManager.setRobbyConnect(netSocketLobbyResponseAll);
		// netSocketLobbyResponseAll();
		// that.socketManager.setEventDefine(netSocketLobbyResponseAll);
	}
	console.log("checkInviteLogin - URL: "+ that.gameData.gameURL+ ", CH: " + that.gameData.channelIndex);
	//치트
	//that.gameData.channelIndex = 1001;	
	setPlayMode();	//일반, 고수 모드 판단함.
}
//채널에 따른 게임 모드 셋팅함
function setPlayMode(){	
	//console.log("MenuV2::setPlayMode -> that.gameData.channelIndex : " + that.gameData.channelIndex);
	
	if(that.gameData.channelIndex > 1000){
		that.gameData.playMode = that.gameConst.GameLevel.HARD;
	} else {
		that.gameData.playMode = that.gameConst.GameLevel.NORMAL;
	}
	console.log("setPlayMode - playMode : "+that.gameData.playMode);
}
//초대 정보가 있을시 방 정보 셋팅함
function checkInviteRoom(){
	if(mInvitation !== null){
		setRoomSelectData(mInvitation.room_number, mInvitation.room_title, 0, mInvitation.is_lock,
		Math.floor(mInvitation.play_time / 60), mInvitation.back_ground, mInvitation.password,
		mInvitation.host_name, mInvitation.ip, 1);
		
		netSocketLogin(that.gameConst.NextLoginType.ROOM_INVITE);
		//that.gameUtil.delCookie("accepted_invitation", ".malangmalang.com");
//		document.cookie = "accepted_invitation=; expires=Thu, 01 Jan 1970 00:00:00 UTC; domain=.malangmalang.com; path=/";		
		
		mInvitation = null;
		
		//console.log("MenuV2::checkInviteRoom -> invitation : " + mInvitation);
	}	
} 


function netResRoomNameRoomSearchFail(aResult) {
	that.fRoomSearchBtnGo.visible = false;
	that.disableNetworkLoading();
	
	if(checkSetLobbyDisconnect(aResult) === true){
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
		setTimeout(window.close(), 3000);
	} else {	
		that.setToastMessage("생성된 방이 없습니다.", 2);
	}
	
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
}

// 종료 버튼
MenuV2.prototype.roomSearchExit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupRoomSearch.visible = false;
	mRoomSearchInputFocus = false;
};

//// 확인 버튼
//MenuV2.prototype.roomSearchConfirm = function() {
//	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
//	this.fPopupRoomSearch.visible = false;
//	mRoomSearchInputFocus = false;
//};

// 별명 검색
MenuV2.prototype.netResNameSearch = function(data) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 친구 리스트 검색 성공처리함.
// MenuV2.prototype.netResFriendListSuccess = function(aData){
function netResFriendListSuccess(aData) {
	
	if(aData === undefined || aData === null) return;
	// var useCount = 0;

	roomFriendTotalCount = aData.totalItemCount;

	// var friendList = aData.items;
	if(aData.items === undefined || aData.items === null) return;

	for (var i = 0; i < aData.items.length; i++) {
		roomFriendNameData[i] = aData.items[i].nickname;
	}

	that.roomFriendInvitePage();
	that.roomFriendInviteBarGroup();
	that.disableNetworkLoading();
	// }
}
//친구리스트 검색 실패처리함.
function netResFriendListFail(aResult) {

	that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
			confirmBlueListener);
}

/**
 * 비밀번호 팝업창
 */

var mRoomPasswordState; // 방만들기에서 들어왔는지 방 리스트에서 들어왔는지 구분
var mRoomPassword; // 방 패스워드
var mRoomPasswordInputFocus = false; // 텍스트 입력창을 눌렀는지 확인

// 비밀번호 입력 초기화
MenuV2.prototype.roomPasswordInit = function(state, password) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPasswordSet.visible = true; // 비밀번호 팝업창
	this.fPasswordSetInput.inputEnabled = true;
	this.fPasswordSetInput.events.onInputDown.add(this.roomPasswordInput, this);

	mRoomPasswordState = state; // 현재 위치 저장
	mRoomPassword = password; // 패스 워드 저장
	mRoomPasswordInputFocus = true;
	
	this.fInputCursorPasswordSetSheet.visible = false;	//비밀번호입력커서

	//roomPasswordTyping.onkeydown = this.onlyNumber;
	//roomPasswordTyping.onkeyup = this.removeChar;

	roomPasswordTyping.value = "";
	//this.fPlaceHolder2.fill = '#608eb8';
};

// 검색 텍스트 입력창
MenuV2.prototype.roomPasswordInput = function() {
	if (roomPasswordTyping.value === "") {
		mRoomPasswordInputFocus = true;
		this.fPlaceHolder2.text = "";
		roomPasswordTyping.value = "";
		this.fPlaceHolder2.fill = '#ffffff';
		this.fInputCursorPasswordSetSheet.visible = true;	//비밀번호입력커서
	}
};

// 비밀번호 시
MenuV2.prototype.roomPasswordInputCheck = function() {
	if (mRoomPasswordInputFocus === true) {
		this.fInputCursorPasswordSetSheet.visible = true;	//비밀번호입력커서
		this.fPlaceHolder2.fill = '#ffffff';
		roomPasswordTyping.focus();
		userTajaTyping.blur();
	} else {
		roomPasswordTyping.blur();
	}
};

// 비밀번호 입력창
MenuV2.prototype.roomPasswordText = function(text) {
	this.gameUtil.setText(this.fPlaceHolder2, 0, 28, "center", "middle", text);
};

// 종료 버튼
MenuV2.prototype.roomPasswordExit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPasswordSet.visible = false;
	mRoomPasswordInputFocus = false;
	this.fInputCursorPasswordSetSheet.visible = false;	//비밀번호입력커서
	// 방 만들기에서 들어온 경우 다시 방 만들기 팝업창으로 이동
	if (mRoomPasswordState === that.gameConst.RoomPasswordSateType.ROOM_CREATE) {
		this.fRoomCreate.visible = true;
	}
};

// 패스워드 확인 버튼
MenuV2.prototype.roomPasswordConfirm = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	
	//console.log("roomPasswordTyping.value.length : " + roomPasswordTyping.value.length);
	if(roomPasswordTyping.value.length < 4 || (roomPasswordTyping.value.indexOf("비밀")) !== -1){
		that.setToastMessage("4자리 숫자로 입력해주세요", 2);
		return;
	}
	
	
	this.fPopupPasswordSet.visible = false;
	mRoomPasswordInputFocus = false;	
	
	if (mRoomPasswordState === that.gameConst.RoomPasswordSateType.ROOM_CREATE) {
		netSocketLogin(that.gameConst.NextLoginType.ROOM_CREATE);
		return;
	}
	// 대기방 입장
	// this.standByInit(false);
	// this.enterRoomSetting();
	if (mRoomPassword === roomPasswordTyping.value) {
		if (mRoomPasswordState === that.gameConst.RoomPasswordSateType.ROOM_LIST) {
			netSocketLogin(that.gameConst.NextLoginType.ROOM_ENTER_ROOM_LIST);
		} else if (mRoomPasswordState === that.gameConst.RoomPasswordSateType.ROOM_FASTER) {
			netSocketLogin(that.gameConst.NextLoginType.ROOM_ENTER_FASTER);
		} else if (mRoomPasswordState === that.gameConst.RoomPasswordSateType.ROOM_SEARCH) {
			netSocketLogin(that.gameConst.NextLoginType.ROOM_ENTER_ROOM_SEARCH);
		} else if (mRoomPasswordState === that.gameConst.RoomPasswordSateType.ROOM_RESET) {
			netSocketResetRoom();
		}
	} else {
		if (mRoomPasswordState === that.gameConst.RoomPasswordSateType.ROOM_RESET) {
			netSocketResetRoom();
		} else {
			this.setOneBluePopup("비밀번호가 틀렸습니다.", confirmBlueListener);
		}
	}
};

/*
 * 혼자하기 팝업창
 */

// 혼자하기 초기화
MenuV2.prototype.roomPlayAloneInit = function() {
	this.fPopupPlayAlone.visible = true;
	this.fTransImg706.inputEnabled = true;

	this.fDownMenu4.visible = false;
	this.fDownMenu5.visible = false;

	this.roomPlayAloneDropText();

	this.fDropdownBtn41.index = 0;
	this.fDropdownBtn42.index = 1;

	this.fDropdownBtn51.index = 0;
	this.fDropdownBtn52.index = 1;

	this.fListBar40.index = 0;
	this.fListBar41.index = 1;
	this.fListBar42.index = 2;
	this.fListBar43.index = 3;
	this.fListBar44.index = 4;
	this.fListBar45.index = 5;
	this.fListBar46.index = 6;
	this.fListBar47.index = 7;
	this.fListBar48.index = 8;

	this.fListBar50.index = 0;
	this.fListBar51.index = 1;
	this.fListBar52.index = 2;
	this.fListBar53.index = 3;
	this.fListBar54.index = 4;

	this.fBtnArea4.index = 0;
	this.fBtnArea4.inputEnabled = true;
	this.fBtnArea4.events.onInputDown.add(this.roomPlayAloneDropDown4, this);

	this.fBtnArea5.index = 0;
	this.fBtnArea5.inputEnabled = true;
	this.fBtnArea5.events.onInputDown.add(this.roomPlayAloneDropDown5, this);
};

// 드롭 다운 속성, 배경, 시간 이름
MenuV2.prototype.roomPlayAloneDropText = function() {
	this.gameUtil.setText(this.fTextSelected4, 0, 32, "center", "middle",
			mRoomCreateTitleBackArray[mRoomCreateTitleBack]); // 배경
	this.gameUtil.setText(this.fTextSelected5, 0, 32, "center", "middle",
			mRoomCreateTimeArray[mRoomCreateTime]); // 시간
};

// 배경 드롭 다운 버튼
MenuV2.prototype.roomPlayAloneDropDown4 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (target.index === 0) {
		this.roomPlayAloneBackDropEnable();
		this.roomPlayAloneTimeDropDisEnable();
	} else {
		this.roomPlayAloneBackDropDisEnable();
	}

	if (this.fBtnArea4.index === 0)
		this.fBtnArea4.index = 1;
	else
		this.fBtnArea4.index = 0;
};

// 시간 드롭 다운 버튼
MenuV2.prototype.roomPlayAloneDropDown5 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (target.index === 0) {
		this.roomPlayAloneBackDropDisEnable();
		this.roomPlayAloneTimeDropEnable();
	} else {
		this.roomPlayAloneTimeDropDisEnable();
	}

	if (this.fBtnArea5.index === 0)
		this.fBtnArea5.index = 1;
	else
		this.fBtnArea5.index = 0;
};

// 배경 드롭다운 선택 버튼
MenuV2.prototype.roomPlayAloneBack = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateTitleBack = target.index;

	this.roomPlayAloneBackDropDisEnable();
	this.roomPlayAloneDropText();
};

// 시간 드롭다운 선택 버튼
MenuV2.prototype.roomPlayAloneTime = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateTime = target.index;

	this.roomPlayAloneTimeDropDisEnable();
	this.roomPlayAloneDropText();
};

// 배경 드롭다운 활성화
MenuV2.prototype.roomPlayAloneBackDropEnable = function() {
	this.fDropdownBtn41.visible = false;
	this.fDropdownBtn42.visible = true;
	this.fDownMenu4.visible = true;
};

// 배경 드롭다운 비활성화
MenuV2.prototype.roomPlayAloneBackDropDisEnable = function() {
	this.fDropdownBtn41.visible = true;
	this.fDropdownBtn42.visible = false;
	this.fDownMenu4.visible = false;
};

// 시간 드롭다운 활성화
MenuV2.prototype.roomPlayAloneTimeDropEnable = function() {
	this.fDropdownBtn51.visible = false;
	this.fDropdownBtn52.visible = true;
	this.fDownMenu5.visible = true;
};

// 시간 드롭다운 비활성화
MenuV2.prototype.roomPlayAloneTimeDropDisEnable = function() {
	this.fDropdownBtn51.visible = true;
	this.fDropdownBtn52.visible = false;
	this.fDownMenu5.visible = false;
};

// 종료 버튼
MenuV2.prototype.roomPlayAloneExit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPlayAlone.visible = false;
};

// 확인 버튼
MenuV2.prototype.roomPlayAloneConfirm = function() {
	this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Rm);
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPlayAlone.visible = false;

	if(intervalTimerID !== null){
		clearInterval(intervalTimerID);
		intervalTimerID = null;
	}
	
	this.gameData.isFriendVisitePopup = false;	//초대 팝업 여부
	if (roomFriendInvitingSave.length !== 0)
		that.roomFriendInviteSpliceAll();

	that.socketManager.isRoomList = false;

	this.game.state.start("Level1");
	
	// that.game.time.events.stop();
};

/*
 * 친구 초대 팝업창
 */

var roomFriendNameData = [ "친구 좋아요1", "친구 좋아요2", "친구 좋아요3", "친구 좋아요4",
		"친구 좋아요5", "친구 좋아요6", "친구 좋아요7", "친구 좋아요8", "친구 좋아요9", "친구 좋아요10",
		"친구 좋아요11", "친구 좋아요12", "친구 좋아요13", "친구 좋아요14", "친구 좋아요15", "친구 좋아요16",
		"친구 좋아요17", "친구 좋아요18", "친구 좋아요19", "친구 좋아요20", "친구 좋아요21", "친구 좋아요22",
		"친구 좋아요23", "친구 좋아요24", "친구 좋아요25", "친구 좋아요26", "친구 좋아요27", "친구 좋아요28",
		"친구 좋아요29", "친구 좋아요30", "친구 좋아요31", "친구 좋아요32", "친구 좋아요33", "친구 좋아요34",
		"친구 좋아요35", "친구 좋아요36", "친구 좋아요37", "친구 좋아요38", "친구 좋아요39", "친구 좋아요40" ];

var roomFriendNameArray = []; // 친구 이름 텍스트 배열
var roomFriendButtonArray = []; // 초대 버튼 배열

var roomFriendInvitingSave = []; // 초대한 친구 저장
var roomFriendInvitingSelectName = []; // 초대 선택한 친구 저장

var roomFriendMaxListBar = 5; // 한 페이지에 들어갈 리스트 갯수 정의

var roomFriendTotalCount = 0; // 테스트용 친구 전체 갯수
var roomFriendTotalPage = 0; // 친구 전체 페이지
var roomFriendPage = 1; // 친구 현재 페이지

var roomFriendListRefresh = false; // 친구 리스트 갱신

// 친구 초대 초기화
MenuV2.prototype.roomFriendInviteInit = function() {

	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	var configUrlType = that.config.getURLType();
	if (configUrlType === that.config.URL_TYPE.DEV
			|| configUrlType === that.config.URL_TYPE.LIVE
			|| configUrlType === that.config.URL_TYPE.MY_COM
			|| configUrlType === that.config.URL_TYPE.STG) {
		if (that.gameData.sessionID.indexOf("Guest") !== -1) {
			that.setToastMessage("게스트는 친구초대를 할 수 없습니다.", 2);
			
			return;
		} else {
			this.ajaxManager.netReqFriendList(that.gameData.sessionID,
					netResFriendListSuccess, netResFriendListFail);
		}
	} else {
		this.ajaxManager.netReqFriendList(
				"d0f47848-bf8b-4f6d-8282-98a2eb2998db",
				netResFriendListSuccess, netResFriendListFail); // 테스트용
	}

	this.fPopupFriendInvite.visible = true;
	this.fTransImg705.inputEnabled = true;
	
	this.fFriendListBtnLR.visible = false;
	this.fFriendListBtnLR1.visible = false;	
	
	this.roomFriendInviteArray();
	
	for(var i = 0; i < 5 ; i++){
		roomFriendButtonArray[i].frame = 7;
		roomFriendButtonArray[i].inputEnabled = false;
	}
	// this.roomFriendInvitePage();
	// this.roomFriendInviteBarGroup();
	// that.setToastMessage("친구 정보를 가져오는 중입니다. 잠시 기다려 주세요...");
	that.setNetworkLoading();
};

// 친구 이름, 초대 버튼 리스트로 저장
MenuV2.prototype.roomFriendInviteArray = function() {
	roomFriendNameArray = [ this.fNicknametext1, this.fNicknametext2,
			this.fNicknametext3, this.fNicknametext4, this.fNicknametext5 ];
	roomFriendButtonArray = [ this.fBtnInvite1, this.fBtnInvite2,
			this.fBtnInvite3, this.fBtnInvite4, this.fBtnInvite5 ];
};

MenuV2.prototype.roomFriendInvitePush = function(aNickText, aIsToggleOn) {
	mInviteTime = 15000;
	mInviteStartTime = new Date();
	roomFriendInvitingSave.push({
		nickName : aNickText,
		time : mInviteTime,		
		startTime : mInviteStartTime,
	});
};

MenuV2.prototype.roomFriendInvitePop = function(aNickText) {
	for (var i = 0; i < roomFriendInvitingSave.length; i++) {
		if (aNickText === roomFriendInvitingSave[i].nickName) {
			roomFriendInvitingSave.splice(i, 1);
			break;
		}
	}
};

MenuV2.prototype.roomFriendInviteSpliceAll = function() {
	roomFriendInvitingSave.splice(0, roomFriendInvitingSave.length);
};

MenuV2.prototype.roomFriendInvitePage = function() {

	roomFriendTotalPage = Math
			.ceil(roomFriendTotalCount / roomFriendMaxListBar); // 전체 페이지 수
	
	if(roomFriendTotalPage <= 0) roomFriendTotalPage = 1;

	this.gameUtil.setText(this.fListNum, 0, 30, "center", "middle",
			roomFriendPage.toString() + "/" + roomFriendTotalPage.toString()); // 페이지
	
	for(var i = 0; i < 5 ; i++){
		roomFriendButtonArray[i].frame = 7;
		roomFriendButtonArray[i].inputEnabled = false;
	}

	// 페이지 이동 왼쪽 버튼
	this.fFriendListBtnLR.visible = true;
	if (roomFriendPage === 1) {
		this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
		this.fFriendListBtnLR.visible = false;
	}

	// 페이지 이동 오른쪽 버튼
	this.fFriendListBtnLR1.visible = true;
	if (roomFriendPage === roomFriendTotalPage) {
		this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
		this.fFriendListBtnLR1.visible = false;
	}
};

MenuV2.prototype.roomFriendInviteBarGroup = function() {
	var pageIndex = (roomFriendPage - 1) * roomFriendMaxListBar; // 현재 페이지 시작
																	// 인덱스
	var pageTotal = roomFriendMaxListBar; // 화면에 출력하는 리스트 갯수

	// 화면에 출력하는 리스트가 5개 보다 작을 경우 몇개 출력해야하는지 계산한다.
	if (roomFriendTotalCount - pageIndex < roomFriendMaxListBar) {
		pageTotal = roomFriendTotalCount - pageIndex;
	}

	// 화면에 출력한 리스트
	for (var i = 0; i < roomFriendMaxListBar; i++) {
		var IsSave = false;
		// 화면에 출력할 리스트가 5개 보다 작을 경우 빈 공간으로 채운다.
		if (pageTotal > i) {
			this.roomFriendInviteBar(roomFriendNameArray[i],
					roomFriendNameData[pageIndex + i]);
			roomFriendButtonArray[i].index = pageIndex + i;
			for (var j = 0; j < roomFriendInvitingSave.length; j++) {
				if (roomFriendNameData[pageIndex + i] === roomFriendInvitingSave[j].nickName) {
					//roomFriendButtonArray[i].frame = 3;
					
					if(roomFriendButtonArray[i].events.onInputDown !== undefined || roomFriendButtonArray[i].events.onInputDown.length > 0){
						roomFriendButtonArray[i].events.onInputDown.removeAll();
					}
					roomFriendButtonArray[i].events.onInputDown.add(this.roomFriendUnSelect, this);

					roomFriendButtonArray[i].setFrames(4,3,5,3);
					roomFriendButtonArray[i].inputEnabled = true;
					
					IsSave = true;
					break;
				}
			}
			
//			for(var j = 0; j < roomFriendInvitingSelectName.length; j++){
//				if (roomFriendNameData[pageIndex + i] === roomFriendInvitingSelectName[j]){
//					roomFriendButtonArray[i].frame = 3;
//					roomFriendButtonArray[i].inputEnabled = true;
//					IsSave = true;
//					break;
//				}
//			}

			if (IsSave === false) {
				//roomFriendButtonArray[i].frame = 0;
				if(roomFriendButtonArray[i].events.onInputDown !== undefined || roomFriendButtonArray[i].events.onInputDown.length > 0){
					roomFriendButtonArray[i].events.onInputDown.removeAll();
				}
				roomFriendButtonArray[i].events.onInputDown.add(this.roomFriendSelect, this);
				roomFriendButtonArray[i].setFrames(1,0,2,0);
				roomFriendButtonArray[i].inputEnabled = true;
			}
		} else {
			this.roomFriendInviteBar(roomFriendNameArray[i], "");
			roomFriendButtonArray[i].frame = 7;
			roomFriendButtonArray[i].inputEnabled = false;
		}
	}
};

MenuV2.prototype.roomFriendInviteBar = function(aName, nameText) {
	this.gameUtil.setText(aName, 0, 34, "center", "middle", nameText); // 친구 이름
};

// 초대 메시지 팝업창 처리
MenuV2.prototype.updateFriendInvite = function() {
//	if (roomFriendInvitingSave.length > 0) {
//		for (var i = 0; i < roomFriendInvitingSave.length; i++) {
//			var nowTime = new Date();
//			var gap = nowTime.getTime()
//					- roomFriendInvitingSave[i].startTime.getTime();
//			var sec_gap = Math
//					.floor(((roomFriendInvitingSave[i].time - gap) / 1000) % 60) + 1;
//
//			if (sec_gap < 0) {
//				this.roomFriendInvitePop(roomFriendInvitingSave[i].nickName);
//				this.roomFriendInviteBarGroup();
//			}
//		}
//	}

	if (roomFriendListRefresh === true) {
		this.roomFriendInviteBarGroup();
		roomFriendListRefresh = false;
	}
};

// 왼쪽으로 페이지 이동 버튼
MenuV2.prototype.roomFriendInvitePageMoveLeft = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	roomFriendPage--;
	if (roomFriendPage < 1) {
		roomFriendPage = 1;
	}

	this.roomFriendInvitePage();
	this.roomFriendInviteBarGroup();
};

// 오른쪽으로 페이지 이동 버튼
MenuV2.prototype.roomFriendInvitePageMoveRight = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	roomFriendPage++;
	if (roomFriendPage > roomFriendTotalPage) {
		roomFriendPage = roomFriendTotalPage;
	}

	this.roomFriendInvitePage();
	this.roomFriendInviteBarGroup();
};

// 초대 버튼
MenuV2.prototype.roomFriendSelect = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	if (roomFriendInvitingSave.length < 10) {
		for(var j = 0; j < roomFriendInvitingSave.length; j++){
			if (roomFriendNameData[target.index] === roomFriendInvitingSave[j].nickName)
			{
				this.roomFriendInvitePop(roomFriendNameData[target.index]);
				roomFriendListRefresh = true;
				return;
			}
		}
		this.roomFriendInvitePush(roomFriendNameData[target.index], false);
		roomFriendListRefresh = true;
	} else {
		this.setToastMessage("친구초대는 동시에 10명까지 가능합니다.", 2);
	}
//	
//	if (roomFriendInvitingSelectName.length < 10) {
//		
//		
//		var pageIndex = (roomFriendPage - 1) * roomFriendMaxListBar; // 현재 페이지 시작
//				// 인덱스
//		var pageTotal = roomFriendMaxListBar; // 화면에 출력하는 리스트 갯수
//		
//		// 화면에 출력하는 리스트가 5개 보다 작을 경우 몇개 출력해야하는지 계산한다.
//		if (roomFriendTotalCount - pageIndex < roomFriendMaxListBar) {
//		pageTotal = roomFriendTotalCount - pageIndex;
//		}
//		
//		var isSelect = false;
//		// 화면에 출력한 리스트
//		for (var i = 0; i < roomFriendMaxListBar; i++) {
//		// 화면에 출력할 리스트가 5개 보다 작을 경우 빈 공간으로 채운다.
//			if (pageTotal > i) {
//				for(var j = 0; j < roomFriendInvitingSelectName.length; j++){
//					if (roomFriendNameData[target.index] === roomFriendInvitingSelectName[j]){
//				
//						if(roomFriendButtonArray[i].frame === 3 || roomFriendButtonArray[i].frame === 4 || roomFriendButtonArray[i].frame === 5)
//						{
//							roomFriendInvitingSelectName.splice(i, 1);	
//							roomFriendListRefresh = true;							
//							return;
//							
//						} else if(roomFriendButtonArray[i].frame === 0 || roomFriendButtonArray[i].frame === 1 || roomFriendButtonArray[i].frame === 2){
//							roomFriendInvitingSelectName.push(roomFriendNameData[target.index]);
//							roomFriendListRefresh = true;							
//							return;
//						}				
//						
//					}
//				}
//			}
//		}
//		
//		if(isSelect === false){			
//			roomFriendInvitingSelectName.push(roomFriendNameData[target.index]);					
//			roomFriendListRefresh = true;
//		}
//	} else {
//		this.setToastMessage("친구 초대 선택을 10명 이상 하실 수 없습니다.", 2);
//	}
};

//초대 버튼
MenuV2.prototype.roomFriendUnSelect = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	if (roomFriendInvitingSave.length > 0) {
		for(var j = 0; j < roomFriendInvitingSave.length; j++){
			if (roomFriendNameData[target.index] === roomFriendInvitingSave[j].nickName)
			{
				this.roomFriendInvitePop(roomFriendNameData[target.index]);
				roomFriendListRefresh = true;
				return;
			}
		}
	}
};
//친구 초대 모두 보내기.
MenuV2.prototype.roomFriendInviteAll = function() {
	// 방원일때는 보낼 수 없다.
	if (that.gameData.roomOwner === 0) {
		return;
	}	
	
	if (roomFriendInvitingSave.length === 0) {
		that.setToastMessage("초대할 친구를 선택해주세요", 2);
		return;
	}

	var inviteFriends = [];
	for (var i = 0; i < roomFriendInvitingSave.length; i++) {
		inviteFriends.push(roomFriendInvitingSave[i].nickName);
	}
	
	that.roomFriendInviteSpliceAll();
	that.socketManager.netReqInvite('req_invite', that.gameData.sessionID,
					that.gameData.userNickName, inviteFriends,
					that.gameData.roomNumber);
	// that.socketManager.netReqInvite('req_invite',
	// 'd0f47848-bf8b-4f6d-8282-98a2eb2998db', '구수짱', inviteFriends,
	// that.gameData.roomNumber);

	that.setToastMessage("친구 초대 하였습니다", 2);
	that.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		this.fPopupFriendInvite.visible = false;
	}, that);
};

// 종료 버튼
MenuV2.prototype.roomFriendInviteExit = function() {
	if (roomFriendInvitingSave.length !== 0)
		that.roomFriendInviteSpliceAll();
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupFriendInvite.visible = false;

};

// 확인 버튼
MenuV2.prototype.roomFriendInviteConfirm = function() {
	if (roomFriendInvitingSave.length !== 0)
		that.roomFriendInviteSpliceAll();
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupFriendInvite.visible = false;

};

// 초대 거절 성공...
function netResInvitedRejectSuccess(aData) {
	// console.log("MenuV2::netResPersonStandByRoomEnterSuccess ->
	// netResPersonStandByRoomEnterSuccess data.." + JSON.stringify(aData));
	// that.fRoomListGroup.visible = false;
	//console.log("MenuV2::netResInvitedRejectSuccess");
	if (that.fStandByRoomGroup.visible === true) {
		that.setDenyInviteMessage(aData.nick_name);
	}
}

// 초대 거절 실패...
function netResInvitedRejectFail(aResult) {
	//console.log("MenuV2::netResInvitedRejectFail");
}

/*
 * 초대 거부 메시지
 */

var mDenyInviteTime = 0; // 초대 거부 메시지 창 없어지는 시간
var mDenyInviteStartTime = 0; // 초대 거부 메시지 창 시작 시간

// 초대 거부 메시지 처리
MenuV2.prototype.setDenyInviteMessage = function(aText) {
	this.fDenyInviteMessagePanel.visible = true;

	mDenyInviteTime = 3000; // 2초후 사라짐.
	mDenyInviteStartTime = new Date();

	this.gameUtil.setText(this.fDenyUserNickname, 0, 28, "center", "middle", aText);
};

// 초대 메시지 팝업창 처리
MenuV2.prototype.updateDenyInviteMessage = function() {
	if (this.fDenyInviteMessagePanel.visible === true) {
		var nowTime = new Date();
		var gap = nowTime.getTime() - mDenyInviteStartTime.getTime();
		var sec_gap = Math.floor(((mDenyInviteTime - gap) / 1000) % 60);

		if (sec_gap <= 0) {
			this.disableDenyInviteMessage();
		}
	}
};

// 초대 거부 메시지 비활성화
MenuV2.prototype.disableDenyInviteMessage = function(aText) {
	this.fDenyInviteMessagePanel.visible = false;
};

/*
 * 초대 메시지 팝업창
 */

var mIsInviteRefresh = false; // 초대 메시지 팝업창 내용 갱신
var mInviteTime = 0; // 초대 메시지 팝업창 없어지는 시간
var mInviteStartTime = 0; // 초대 메시지 팝업창 시작 시간
var mInviteArray = []; // 초대 메시지를 받아서 저장

// 초대 메시지를 받은 경우 값을 배열에 저장 처리
MenuV2.prototype.pushInviteRequest = function(aText, aPassword) {
	mInviteTime = 15000; // 15초 후에 팝업창이 사라짐
	mInviteStartTime = new Date();

	mInviteArray.push({
		text : aText,
		password : aPassword,
		time : mInviteTime,
		startTime : mInviteStartTime
	});
};

// 초대 메시지 팝업창 처리
MenuV2.prototype.setInviteRequest = function(aText, aPassword) {
	if (this.fInviteRequestgroup.visible === false
			|| mIsInviteRefresh === false) {
		this.fInviteRequestgroup.visible = true;
		mIsInviteRefresh = true;

		this.gameUtil.setText(this.fPanelInContents, 0, 28, "center", "middle",
				aText + "님이 동전쌓기에서 초대했습니다.");
		if (aPassword > 0)
			this.gameUtil.setText(this.fViewPasswordText, 0, 28, "center",
					"middle", "( 비밀번호 : " + aPassword + " )");
		else
			this.gameUtil.setText(this.fViewPasswordText, 0, 28, "center",
					"middle", "");
	}
};

// 초대 메시지 팝업창 처리
MenuV2.prototype.updateInviteRequest = function() {
	if (mInviteArray.length > 0) {
		for (var i = 0; i < mInviteArray.length; i++) {
			var nowTime = new Date();
			var gap = nowTime.getTime() - mInviteArray[i].startTime.getTime();
			var sec_gap = Math
					.floor(((mInviteArray[i].time - gap) / 1000) % 60) + 1;

			if (i == 0) {
				this.setInviteRequest(mInviteArray[i].text,
						mInviteArray[i].password);
				this.gameUtil.setText(this.fAllowTimeText, 0, 50, "center",
						"middle", sec_gap.toString());

				if (sec_gap < 0) {
					this.disableInviteRequest();
				}
			}
		}
	}
};

// 초대 메시지 수락 버튼
MenuV2.prototype.InviteRequestAccept = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.disableInviteRequest();
};

// 초대 메시지 거절 버튼
MenuV2.prototype.InviteRequestDeny = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.disableInviteRequest();
};

// 초대 메시지 팝업창 비활성화
MenuV2.prototype.disableInviteRequest = function() {
	mInviteArray.shift(); // 맨앞 배열 값을 삭제
	mInviteTime = 0;
	mIsInviteRefresh = false;
	if (mInviteArray.length <= 0) {
		this.fInviteRequestgroup.visible = false;
	}
};

/*
 * 방 설정 변경 팝업창
 */


var mRoomResetInputFocus = false; // 방 이름 입력창 포커스 처리
// 방 설졍 변경 초기화.
MenuV2.prototype.roomResetInit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fRoomResetCreate.visible = true;

	this.roomResetAttributeDropDisEnable();
	this.roomResetBackDropDisEnable();
	this.roomResetTimeDropDisEnable();

//	mRoomCreateAttribute = 0; // 속성
//	mRoomCreateTitleBack = 0; // 배경
//	mRoomCreateFixedTitleBack = 0; // 랜덤으로 선택된 배경
//	mRoomCreateTime = 2; // 시간
	
	mRoomCreateAttribute = that.gameData.roomIsLock; // 속성
	mRoomCreateTitleBack = that.gameData.backGround; // 배경
	mRoomCreateFixedTitleBack = that.gameData.backGround; // 랜덤으로 선택된 배경
	mRoomCreateTime = (that.gameData.roomPlayTime - 1); // 시간

	this.roomResetDropText(); // 속성, 배경, 시간
	// this.roomResetNameText(); // 방이름

	mRoomResetInputFocus = false;
	this.fInputCursorResetCreateSheet.visible = false;	//방생성커서
	//userTajaTyping.value = mRoomCreateNameArray[Math.floor(Math.random() * 9)];
	userTajaTyping.value = that.gameData.roomTitle;

	this.fResetDropdownBtn11.index = 0;
	this.fResetDropdownBtn12.index = 1;

	this.fRsDropdownBtn21.index = 0;
	this.fRsDropdownBtn22.index = 1;

	this.fRsDropdownBtn31.index = 0;
	this.fRsDropdownBtn32.index = 1;

	this.fRsListBar10.index = 0;
	this.fRsListBar11.index = 1;

	this.fRsListBar20.index = 0;
	this.fRsListBar21.index = 1;
	this.fRsListBar22.index = 2;
	this.fRsListBar23.index = 3;
	this.fRsListBar24.index = 4;
	this.fRsListBar25.index = 5;
	this.fRsListBar26.index = 6;
	this.fRsListBar27.index = 7;
	this.fRsListBar28.index = 8;

	this.fRsListBar30.index = 0;
	this.fRsListBar31.index = 1;
	this.fRsListBar32.index = 2;
	this.fRsListBar33.index = 3;
	this.fRsListBar34.index = 4;

	this.fResetBtnArea1.index = 0;
	this.fResetBtnArea1.inputEnabled = true;
	this.fResetBtnArea1.events.onInputDown.add(this.roomResetDropDown1, this);

	this.fRsBtnArea2.index = 0;
	this.fRsBtnArea2.inputEnabled = true;
	this.fRsBtnArea2.events.onInputDown.add(this.roomResetDropDown2, this);

	this.fRsBtnArea3.index = 0;
	this.fRsBtnArea3.inputEnabled = true;
	this.fRsBtnArea3.events.onInputDown.add(this.roomResetDropDown3, this);

	this.fResetTransImg70.inputEnabled = true; // 방 설정 변경 팝업창

	this.fResetPopupInfoNormalBar.inputEnabled = true;
	this.fResetPopupInfoNormalBar.events.onInputDown.add(
			this.roomResetNameLisner, this);
	
	//userTajaTyping.onkeydown = this.userWordsCheck;
};

// 속성 드롭 다운 버튼
MenuV2.prototype.roomResetDropDown1 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	if (target.index === 0) {
		this.roomResetAttributeDropEnable();
		this.roomResetBackDropDisEnable();
		this.roomResetTimeDropDisEnable();
	} else {
		this.roomResetAttributeDropDisEnable();
	}

	if (this.fResetBtnArea1.index === 0)
		this.fResetBtnArea1.index = 1;
	else
		this.fResetBtnArea1.index = 0;
};

// 배경 드롭 다운 버튼
MenuV2.prototype.roomResetDropDown2 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	if (target.index === 0) {
		this.roomResetAttributeDropDisEnable();
		this.roomResetBackDropEnable();
		this.roomResetTimeDropDisEnable();
	} else {
		this.roomResetBackDropDisEnable();
	}

	if (this.fRsBtnArea2.index === 0)
		this.fRsBtnArea2.index = 1;
	else
		this.fRsBtnArea2.index = 0;
};

// 시간 드롭 다운 버튼
MenuV2.prototype.roomResetDropDown3 = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	if (target.index === 0) {
		this.roomResetAttributeDropDisEnable();
		this.roomResetBackDropDisEnable();
		this.roomResetTimeDropEnable();
	} else {
		this.roomResetTimeDropDisEnable();
	}

	if (this.fRsBtnArea3.index === 0)
		this.fRsBtnArea3.index = 1;
	else
		this.fRsBtnArea3.index = 0;
};

//속성, 배경, 시간 모두 다 닫는다
MenuV2.prototype.roomResetDropDownAllClose = function(){
	this.roomResetAttributeDisDropEnable();
	this.roomResetBackDropDisEnable();
	this.roomResetTimeDropDisEnable();

	this.fResetBtnArea1.index = 0;
	this.fResetBtnArea2.index = 0;
	this.fResetBtnArea3.index = 0;
};

// 속성 드롭다운 선택 버튼
MenuV2.prototype.roomResetAttribute = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateAttribute = target.index;

	this.roomResetAttributeDropDisEnable();
	this.roomResetDropText();
};

// 배경 드롭다운 선택 버튼
MenuV2.prototype.roomResetBack = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateTitleBack = target.index;

	this.roomResetBackDropDisEnable();
	this.roomResetDropText();
};

// 시간 드롭다운 선택 버튼
MenuV2.prototype.roomResetTime = function(target) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mRoomCreateTime = target.index;

	this.roomResetTimeDropDisEnable();
	this.roomResetDropText();
};

// 종료 버튼
MenuV2.prototype.roomResetExit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fRoomResetCreate.visible = false;
};

// 변경 버튼
MenuV2.prototype.roomResetChange = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (userTajaTyping.value === "") {
		that.setOneBluePopup("방 제목을 입력해주세요.", confirmBlueListener);
		return;
	}

	if (mRoomCreateAttribute === "1" || mRoomCreateAttribute === 1) { // 비밀번호
																		// 설정
																		// 팝업창
		this.roomPasswordInit(that.gameConst.RoomPasswordSateType.ROOM_RESET,
				that.gameData.roomPassword);
		//console.log("mRoomCreateAttribute 111");
	} else { // 대기방
		netSocketResetRoom();
	}
};
//방 설정 변경 정보 보냄..
function netSocketResetRoom() {
	// that.socketManager.setConnect();
	// that.socketManager.netResCreateRoom(netResCreateRoomSuccess,
	// netResCreateRoomFail);
	mRoomCreateFixedTitleBack = mRoomCreateTitleBack === 0 ? (Math.floor(Math
			.random() * 8) + 1) : mRoomCreateTitleBack;

	// that.setToastMessage("방 설정 변경 중입니다.");
	that.setNetworkLoading();
	// that.gameData.sessionID

	that.socketManager.netReqChangeRoomOption('req_change_room_option',
			that.gameData.sessionID, that.gameData.roomNumber,
			that.gameData.userNickName, userTajaTyping.value,
			mRoomCreateFixedTitleBack, mRoomCreateAttribute,
			roomPasswordTyping.value, (mRoomCreateTime + 1));
}

// 방 정보 변경 응답 - 성공시
function netResChangeRoomOptionSuccess(aData) {
	that.fRoomResetCreate.visible = false;

	//console.log("MenuV2::netResCreateRoomSuccess -> netResCreateRoomSuccess data.."
	//				+ JSON.stringify(aData));

	that.gameData.roomNumber = that.gameData.roomNumber;
	that.gameData.roomTitle = userTajaTyping.value;
	that.gameData.roomIsLock = mRoomCreateAttribute;
	that.gameData.roomPlayTime = (mRoomCreateTime + 1);
	that.gameData.roomPassword = roomPasswordTyping.value;
	that.gameData.roomOwner = 1;
	that.gameData.backGround = mRoomCreateFixedTitleBack;

	// 방 토탈 갯수.
	that.disableNetworkLoading();

	that.setRoomInfo();
}
// 방 정보 변경 응담 - 실패시
function netResChangeRoomOptionFail(aResult) {
	// that.disableNetworkLoading();
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	
	if(checkSetLobbyDisconnect(aResult) === true){
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult), this.confirmRedExitListener);
//		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2);
//		setTimeout(window.close(), 1200);
	} else {	
		that.disableNetworkLoading();
		that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),	confirmBlueListener);
	}
	
	
	// that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3);
	// that.socketManager.setDisConnect();
}

//new added
function netResRoomChangeInfoSuccess(aData) {
	if(!that.socketManager.isRoomList) {
		return;
	}
	if(aData === undefined || aData === null) return;
	if(aData.result != 0) 
		return;

	for(let i = 0; i < roomMaxListBar; i ++)
		if(roomListNumData[i] == aData.data.room_number) {
			roomListNameData[i] = aData.data.room_title;
			roomListLockData[i] = aData.data.is_lock;
			roomListTimeData[i] = aData.data.play_time;

			that.roomListBar(roomNumArray[i], roomNameArray[i],
                roomTimeArray[i], roomListNumData[i], roomListNameData[i],
                roomListTimeData[i].toString() + "분");

			if (roomListLockData[i] === "1"
                || roomListLockData[i] === 1) {
            	roomLockArray[i].frame = 1;
				roomListPasswordData[i] = aData.data.password;
				resLoadRoomListArray[i].password = aData.data.password;
        	} else {
            	roomLockArray[i].frame = 0;
        	}
			// roomLockArray[i].frame = 1;
			roomButtonArray[i].frame = 0;
			roomButtonArray[i].inputEnabled = true; 
		
			return;
		}
}

function netResRoomListSuccess(aData) {
	console.log('netResRoomListSuccess=====');
	if(!that.socketManager.isRoomList) {
		return;
	}
	console.log('netResRoomListSuccess display RoomList=====');
	that.disableNetworkLoading();

	if(aData === undefined || aData === null) return;
	if(aData.result != 0) 
		return;

	roomTotalCount = aData.room_list.length;

	tempRoomPage = roomPage;
	if(tempRoomPage <= 0)
		tempRoomPage = 1;
	if(Math.ceil(roomTotalCount / roomMaxListBar) < tempRoomPage && Math.ceil(roomTotalCount / roomMaxListBar) > 0)
		tempRoomPage = Math.ceil(roomTotalCount / roomMaxListBar);

	for(let i = (tempRoomPage - 1) * roomMaxListBar; i < (tempRoomPage * roomMaxListBar > aData.room_list.length ? aData.room_list.length : tempRoomPage * roomMaxListBar); i ++) {
		if(aData.room_list[i].room_number !== null) {
			roomListNameData[i - (tempRoomPage - 1) * roomMaxListBar] = aData.room_list[i].room_title;
			roomListPasswordData[i - (tempRoomPage - 1) * roomMaxListBar] = aData.room_list[i].password;
			roomListLockData[i - (tempRoomPage - 1) * roomMaxListBar] = aData.room_list[i].is_lock;
			roomListTimeData[i - (tempRoomPage - 1) * roomMaxListBar] = aData.room_list[i].play_time;
			roomListNumData[i - (tempRoomPage - 1) * roomMaxListBar] = aData.room_list[i].room_number;
			roomListserverIndexData[i - (tempRoomPage - 1) * roomMaxListBar] = aData.room_list[i].server_idx;
			resLoadRoomListArray[i - (tempRoomPage - 1) * roomMaxListBar] = aData.room_list[i];
		}
		else {
			console.log("aData.room_list["+i+"]"+".room_number is NULL!!!!!!");
		}
	}	

	that.roomListPage();
	that.roomListBarGroup();
	/*
	for (var i = 0; i < aData.length; i++) {
		if(aData[i].room_number !== null){
			roomListNameData[i] = aData[i].room_title;
			roomListPasswordData[i] = aData[i].password;
			roomListLockData[i] = aData[i].is_lock;
			roomListTimeData[i] = aData[i].play_time;
			roomListNumData[i] = aData[i].room_number;
			roomListserverIndexData[i] = aData[i].server_idx;
		}else{
			console.log("aData["+i+"]"+".room_number is NULL!!!!!!");
		}
	}
	that.roomListPage();
	that.roomListBarGroup(); */
}

function netResRoomListFail(aResult) {
	console.log("room_list failed method=========", aResult);
}

function netResRoomChangeInfoFail(aResult) {
	console.log("room_change_info failed method=========", aResult);
}
// 드롭 다운 속성, 배경, 시간 이름
MenuV2.prototype.roomResetDropText = function() {
	this.gameUtil.setText(this.fResettextSelected1, 0, 32, "center", "middle",
			mRoomCreateAttributeArray[mRoomCreateAttribute]); // 속성
	// this.gameUtil.setText(this.fRstextSelected2, 0, 32, "center", "middle",
	// mRoomCreateTitleBackArray[mRoomCreateTitleBack]); // 배경

	this.gameUtil.setText(this.fRstextSelected2, 0, 32, "center", "middle",
			that.gameConst.BackGround[mRoomCreateTitleBack]); // 배경
	this.gameUtil.setText(this.fRstextSelected3, 0, 32, "center", "middle",
			mRoomCreateTimeArray[mRoomCreateTime]); // 시간
};

// 방 이름
MenuV2.prototype.roomResetNameText = function(text) {
	this.gameUtil.setText(this.fReset1textSelected, 0, 28, "center", "middle",
			text);
};
// 방 이름 변경 리스너 셋팅
MenuV2.prototype.roomResetNameLisner = function(evt) {
	if (mRoomResetInputFocus === false) {
		mRoomResetInputFocus = true;
		this.fReset1textSelected.text = "";
		userTajaTyping.value = "";
		this.fInputCursorResetCreateSheet.visible = true;	//방생성커서
		this.roomResetDropDownAllClose();
	}
};

// 속성 드롭다운 활성화
MenuV2.prototype.roomResetAttributeDropEnable = function() {
	this.fResetDropdownBtn11.visible = false;
	this.fResetDropdownBtn12.visible = true;
	this.fRsDownMenu1.visible = true;

	mRoomResetInputFocus = false;
	this.fInputCursorResetCreateSheet.visible = false;	//방생성커서
};

// 속성 드롭다운 비활성화
MenuV2.prototype.roomResetAttributeDropDisEnable = function() {
	this.fResetDropdownBtn11.visible = true;
	this.fResetDropdownBtn12.visible = false;
	this.fRsDownMenu1.visible = false;
};

// 배경 드롭다운 활성화
MenuV2.prototype.roomResetBackDropEnable = function() {
	this.fRsDropdownBtn21.visible = false;
	this.fRsDropdownBtn22.visible = true;
	this.fRsDownMenu2.visible = true;

	mRoomResetInputFocus = false;
	this.fInputCursorResetCreateSheet.visible = false;	//방생성커서
};

// 배경 드롭다운 비활성화
MenuV2.prototype.roomResetBackDropDisEnable = function() {
	this.fRsDropdownBtn21.visible = true;
	this.fRsDropdownBtn22.visible = false;
	this.fRsDownMenu2.visible = false;
};

// 시간 드롭다운 활성화
MenuV2.prototype.roomResetTimeDropEnable = function() {
	this.fRsDropdownBtn31.visible = false;
	this.fRsDropdownBtn32.visible = true;
	this.fRsDownMenu3.visible = true;

	mRoomResetInputFocus = false;
	this.fInputCursorResetCreateSheet.visible = false;	//방생성커서
};

// 시간 드롭다운 비활성화
MenuV2.prototype.roomResetTimeDropDisEnable = function() {
	this.fRsDropdownBtn31.visible = true;
	this.fRsDropdownBtn32.visible = false;
	this.fRsDownMenu3.visible = false;
};

// 방 생성 시 방 이름 드롭 다운이 켜 있을 경우 입력 못함
MenuV2.prototype.roomResetInputCheck = function() {
	if (mRoomResetInputFocus === true && this.fRsDownMenu1.visible === false
			&& this.fRsDownMenu2.visible === false
			&& this.fRsDownMenu3.visible === false) {
		userTajaTyping.focus();
	} else {
		userTajaTyping.blur();
	}
};

/*
 * 게임 설명
 */
var roomHelpTotalPage = 11; // 게임 설명 전체 페이지
var roomHelpPage = 1; // 게임 설명 현재 페이지
var mRoomHelpData = 0; // 로컬스토리지 저장함...
var mIsRoomHelp = false;
var mIsSaveRoomHelp = false;

// 도움말 데이터 저장
MenuV2.prototype.roomHelpDataSave = function() {
	mIsRoomHelp === false ? (mRoomHelpData = 0) : (mRoomHelpData = 1);			
	localStorage.setItem('RoomHelpData', mRoomHelpData);
};

// 룸 도움말 데이터 읽기
MenuV2.prototype.roomHelpDataLoad = function() {
	var restoredData = localStorage.getItem('RoomHelpData');
	if (restoredData === null) {
		localStorage.setItem('RoomHelpData', mRoomHelpData);
		restoredData = localStorage.getItem('RoomHelpData');
	}
	mRoomHelpData = restoredData;	
	mIsRoomHelp = (mRoomHelpData === "0") ? false : true;
};

// 도움말 이미지 생성
MenuV2.prototype.CreateHelpImage = function() {
	if (this.fHelpContentImage === undefined || this.fHelpContentImage === null) {
		this.fHelpContentImage = this.game.add.sprite(242.0, 124.0, 'a');
		this.fPopupHelpContentGroup.add(this.fHelpContentImage);
	}
};

// 도움말 이미지 변경
MenuV2.prototype.SetHelpContentImage = function() {
	var helpContent = "PopupHelpContent" + roomHelpPage;
	this.fHelpContentImage.loadTexture(helpContent, 0);
};
// 도움말 다시 보기 했는지 확인함
MenuV2.prototype.CheckHelpRoom = function(){
	this.roomHelpDataLoad();
	if(mIsRoomHelp !== true && this.gameData.isGameHelp === false){
		this.roomHelpInit();
	}
};
// 도움말 리스너 처리
MenuV2.prototype.RoomHelpListener = function(){	
	mIsRoomHelp = !mIsRoomHelp;
	this.fPopupHelpDontAgainCheck.visible = mIsRoomHelp;
	this.soundManager.play(that.soundManager.SOUND_TYPE.Tog_sound);
};
// 게임 설명 초기화
MenuV2.prototype.roomHelpInit = function() {	
	roomHelpPage = 1;
	this.gameData.isGameHelp = true;
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);	
	this.fPopupHelp.visible = true;
	this.fHelpTransImg703.inputEnabled = true;	
	this.fPopupHelpDontAgainCheck.visible = mIsRoomHelp;
	this.CreateHelpImage();
	this.roomHelpPage();
};
//도움말 페이지 표시
MenuV2.prototype.roomHelpPage = function() {

	this.gameUtil.setText(this.fHelpPageText1, 52, 30, "center", "right",
			roomHelpPage.toString() + "/" + roomHelpTotalPage.toString()); // 페이지

	// 페이지 이동 왼쪽 버튼
	this.fHelpListBtnLR2.visible = true;
	if (roomHelpPage === 1) {
		this.fHelpListBtnLR2.visible = false;
	}

	// 페이지 이동 오른쪽 버튼
	this.fHelpListBtnLR3.visible = true;
	if (roomHelpPage === roomHelpTotalPage) {
		this.fHelpListBtnLR3.visible = false;
	}
	this.SetHelpContentImage();
};
// 왼쪽으로 페이지 이동 버튼
MenuV2.prototype.roomHelpPageMoveLeft = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	roomHelpPage--;
	if (roomHelpPage < 1) {
		roomHelpPage = 1;
	}

	this.roomHelpPage();
};

// 오른쪽으로 페이지 이동 버튼
MenuV2.prototype.roomHelpPageMoveRight = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	roomHelpPage++;
	if (roomHelpPage > roomHelpTotalPage) {
		roomHelpPage = roomHelpTotalPage;
	}

	this.roomHelpPage();
};

// 종료 버튼
MenuV2.prototype.roomGameHelpExit = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupHelp.visible = false;	
	this.fHelpContentImage.destroy();
	this.fHelpContentImage = null;
	this.roomHelpDataSave();
};
/*
 * 공통 팝업창 레드
 */
// 확인 버튼만 있는 레드 윈도우 종료 팝업창
MenuV2.prototype.setOneRedExitPopup = function(aExplan, aConfirm) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPublicRExit.visible = true;
	this.fTransImg704_Exit.inputEnabled = true;
	this.fPublicBtnExit2_Exit.visible = true;
	this.fPopupBtnCheck4_Exit.visible = true;
	this.fPopupBtnNoR_Exit.visible = false;
	this.fPopupBtnYesR_Exit.visible = false;

	this.gameUtil.setText(this.fContentsText2_Exit, 0, 28, "center", "middle",
			aExplan);
	this.fPopupBtnCheck4_Exit.events.onInputDown.addOnce(aConfirm, this);

};

//확인 버튼만 있는 블루 윈도우 종료 팝업창
MenuV2.prototype.setOneBlueExitPopup = function(aExplan, aConfirm) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPublicBExit.visible = true;
	this.fTransImg704_BExit.inputEnabled = true;
	this.fPublicBtnExit2_BExit.visible = true;
	this.fPopupBtnCheck4_BExit.visible = true;
	this.fPopupBtnNoR_BExit.visible = false;
	this.fPopupBtnYesR_BExit.visible = false;

	this.gameUtil.setText(this.fContentsText2_BExit, 0, 28, "center", "middle",
			aExplan);
	this.fPopupBtnCheck4_BExit.events.onInputDown.addOnce(aConfirm, this);

};

// 확인 버튼만 있는 팝업창
MenuV2.prototype.setOneRedPopup = function(aExplan, aConfirm) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPublicR.visible = true;
	this.fTransImg704.inputEnabled = true;

	this.fPopupBtnCheck4.visible = true;
	this.fPopupBtnNoR.visible = false;
	this.fPopupBtnYesR.visible = false;

	this.gameUtil.setText(this.fContentsText2, 0, 28, "center", "middle",
			aExplan);
	this.fPopupBtnCheck3.events.onInputDown.addOnce(aConfirm, this);
};

// 확인/취소 버튼이 있는 팝업창
MenuV2.prototype.setTwoRedPopup = function(aExplan, aConfirm, aCancel) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPublicR.visible = true;
	this.fTransImg704.inputEnabled = true;

	this.fPopupBtnCheck4.visible = false;
	this.fPopupBtnNoR.visible = true;
	this.fPopupBtnYesR.visible = true;

	this.gameUtil.setText(this.fContentsText2, 0, 28, "center", "middle",
			aExplan);

	this.fPopupBtnYesR.events.onInputDown.addOnce(aConfirm, this);
	this.fPopupBtnNoR.events.onInputDown.addOnce(aCancel, this);
};
//리스너 처리함..
function confirmRedExitListener() {
	//console.log("confirmGameExitRedListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicRExit.visible = false;
	self.close();
}
//리스너 처리함..
MenuV2.prototype.cancelRedExitListener = function() {
	//console.log("cancelRedExitListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicRExit.visible = false;
	self.close();
};
//리스너 처리함..
function confirmBlueExitListener() {
	//console.log("confirmGameBlueExitListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicBExit.visible = false;
	self.close();
}
//리스너 처리함..
MenuV2.prototype.cancelBlueExitListener = function() {
	//console.log("cancelBlueExitListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicBExit.visible = false;
	self.close();
};
//리스너 처리함..
function confirmRedListener() {
	//console.log("confirmRedListener");
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	that.fPopupPublicR.visible = false;
}
//리스너 처리함..
MenuV2.prototype.cancelRedListener = function() {
	//console.log("cancelRedListener");
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	that.fPopupPublicR.visible = false;
};

/*
 * 공통 팝업창 블루
 */

// 확인 버튼만 있는 팝업창
MenuV2.prototype.setOneBluePopup = function(aExplan, aConfirm) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPublicB.visible = true;
	this.fTransImg703.inputEnabled = true;

	this.fPopupBtnCheck3.visible = true;
	this.fPopupBtnNo.visible = false;
	this.fPopupBtnYes.visible = false;

	this.gameUtil.setText(this.fContentsText, 0, 28, "center", "middle",
			aExplan);

	this.fPopupBtnCheck3.events.onInputDown.addOnce(aConfirm, this);
};

// 확인/취소 버튼이 있는 팝업창
MenuV2.prototype.setTwoBluePopup = function(aExplan, aConfirm, aCancel) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPublicB.visible = true;
	this.fTransImg703.inputEnabled = true;

	this.fPopupBtnCheck3.visible = false;
	this.fPopupBtnNo.visible = true;
	this.fPopupBtnYes.visible = true;

	this.gameUtil.setText(this.fContentsText, 0, 28, "center", "middle",
			aExplan);

	this.fPopupBtnYes.events.onInputDown.addOnce(aConfirm, this);
	this.fPopupBtnNo.events.onInputDown.addOnce(aCancel, this);
};
//리스너 처리함..
function confirmBlueListener() {
	//console.log("confirmBlueListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicB.visible = false;
}
//리스너 처리함..
MenuV2.prototype.cancelBlueListener = function() {
	//console.log("cancelBlueListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicB.visible = false;
};

// 네트웍 커넥트 체크. 해당 값일때는 DisConnect
function checkSetLobbyDisconnect(aResult){
	if(aResult === 202 || aResult === 303 || aResult === 401 || aResult === 501 || aResult === 606 || aResult === 1001
		|| aResult === 701 || aResult === 801 || aResult === 901  || aResult === 1201 || aResult === 1301 || aResult === 1401 || aResult === 1501 || aResult === 1601 || aResult === 1701){		
		return true;
	}
	return false;
}

// 로딩바 세팅
MenuV2.prototype.setNetworkLoading = function() {
	that.fNetworkLoadingGroup.visible = true;
	that.fNotRayCast3.inputEnabled = true;
};

// 로딩바 종료
MenuV2.prototype.disableNetworkLoading = function() {
	that.fNetworkLoadingGroup.visible = false;
};

// 토스트 메세지
MenuV2.prototype.setToastMessage = function(aExplan, aSecTime) {
	that.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	that.fToastMessageGroup.visible = true;
	that.fNotRayCast1.inputEnabled = true;

	that.gameUtil.setText(this.fToastMessageText, 0, 28, "center", "middle",
			aExplan);

	if (aSecTime === undefined)
		return;

	that.game.time.events.add(Phaser.Timer.SECOND * aSecTime, function() {
		that.fToastMessageGroup.visible = false;
		that.fNotRayCast1.inputEnabled = false;
	}, that);
};

// 토스트 메세지
MenuV2.prototype.disableToastMessage = function() {
	that.fToastMessageGroup.visible = false;
};

var mConfigVolumeDatas = [ 0, 0, 50, 50 ]; // 로컬스토리지
var mBackgroundVolume = 0.5;
var mEffectVolume = 0.5;
var mBackgroundMute = false;
var mEffectMute = false;

// 볼륨 저장
MenuV2.prototype.roomVolumeDataSave = function() {
	mBackgroundMute === false ? mConfigVolumeDatas[0] = 0
			: mConfigVolumeDatas[0] = 1;
	mEffectMute === false ? mConfigVolumeDatas[1] = 0
			: mConfigVolumeDatas[1] = 1;
	mConfigVolumeDatas[2] = mBackgroundVolume;
	mConfigVolumeDatas[3] = mEffectVolume;
	localStorage.setItem('configVolumeDatas', mConfigVolumeDatas);

	this.gameData.backgroundVolume = mBackgroundMute === true ? 0
			: mBackgroundVolume;
	this.gameData.effectVolume = mEffectMute === true ? 0 : mEffectVolume;
};

// 불륨 읽기
MenuV2.prototype.roomVolumeDataLoad = function() {
	var restoredData = localStorage.getItem('configVolumeDatas');
	if (restoredData === null) {
		localStorage.setItem('configVolumeDatas', mConfigVolumeDatas);
		restoredData = localStorage.getItem('configVolumeDatas');
	}

	mConfigVolumeDatas = restoredData.split(',');
	
	this.gameData.backgroundVolume = mConfigVolumeDatas[2];
	this.gameData.effectVolume = mConfigVolumeDatas[3];
};

// 볼륨 버튼
MenuV2.prototype.roomVolume = function() {
	// this.setTwoRedPopup("감사합니다. 우리 모두 열심히 합시다.\n감사합니다. 우리 모두 열심히 합시다.\n감사합니다.
	// 우리 모두 열심히 합시다.\n감사합니다. 우리 모두 열심히 합시다.", this.confirmRedListener,
	// this.cancelRedListener);
	// this.setOneBluePopup("준비중입니다.", confirmBlueListener);
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupVolControl.visible = true;
	this.fVolControlTransImg70.inputEnabled = true;

	this.fBtnSetGaugePointerBG.x = 450;
	this.fBtnSetGaugePointerES.x = 450;

	var bounds = new Phaser.Rectangle(450, 232, 226, 232);
	this.fBtnSetGaugePointerBG.inputEnabled = true;
	this.fBtnSetGaugePointerBG.input.enableDrag(false, false, false, 255,
			bounds);
	this.fBtnSetGaugePointerBG.input.allowVerticalDrag = false;
	this.fBtnSetGaugePointerBG.events.onDragStop.add(
			this.SetBackgroundParameter, this.game);

	this.fBtnSetGaugePointerES.inputEnabled = true;
	this.fBtnSetGaugePointerES.input.enableDrag(false, false, false, 255,
			bounds);
	this.fBtnSetGaugePointerES.input.allowVerticalDrag = false;
	this.fBtnSetGaugePointerES.events.onDragStop.add(this.SetEffectParameter,
			this.game);

	this.roomVolumeDataLoad();
	parseInt(mConfigVolumeDatas[0]) === 0 ? mBackgroundMute = false
			: mBackgroundMute = true;
	parseInt(mConfigVolumeDatas[1]) === 0 ? mEffectMute = false
			: mEffectMute = true;
	mBackgroundVolume = parseInt(mConfigVolumeDatas[2]);
	mEffectVolume = parseInt(mConfigVolumeDatas[3]);

	this.roomBackgroundSet();
	this.roomEffectSet();
};

// 배경음 드래그 사용 처리
MenuV2.prototype.SetBackgroundParameter = function() {
	var sprite = that.fBtnSetGaugePointerBG;
	var volume = parseInt((sprite.x - 450) / 18 * 10);

	mBackgroundVolume = volume;

	if (mBackgroundMute === true) {
		mBackgroundMute = false;
		that.fMuteCheckBG.visible = mBackgroundMute;
	}
};

// 효과음 드래그 사용 처리
MenuV2.prototype.SetEffectParameter = function() {
	var sprite = that.fBtnSetGaugePointerES;
	var volume = parseInt((sprite.x - 450) / 18 * 10);

	mEffectVolume = volume;

	if (mEffectMute === true) {
		mEffectMute = false;
		that.fMuteCheckES.visible = mEffectMute;
	}
};

// 배경음 세팅
MenuV2.prototype.roomBackgroundSet = function() {
	this.fMuteCheckBG.visible = mBackgroundMute;

	this.roomBackgroundDraw();
};

// 효과음 세팅
MenuV2.prototype.roomEffectSet = function() {
	this.fMuteCheckES.visible = mEffectMute;

	this.roomEffectDraw();
};

// 볼륨 팝업창 닫기
MenuV2.prototype.roomVolumeExit = function() {	
	this.fPopupVolControl.visible = false;
	this.fVolControlTransImg70.inputEnabled = false;
	this.roomVolumeDataSave();
	//this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	
	if(this.fRoomListGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Lob);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Lob);
	}
	else if(this.fStandByRoomGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Rm);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Rm);
	}
	
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 배경음 음소거 처리
MenuV2.prototype.roomBackgroundMute = function() {
	//this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mBackgroundMute = !mBackgroundMute;
	this.fMuteCheckBG.visible = mBackgroundMute;

	this.roomBackgroundDraw();
	
	this.gameData.backgroundVolume = mBackgroundMute === true ? 0 : mBackgroundVolume;	
	
	if(this.fRoomListGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Lob);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Lob);
	}
	else if(this.fStandByRoomGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Rm);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Rm);
	}
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 효과음 음소거 처리
MenuV2.prototype.roomEffectMute = function() {
	//this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	mEffectMute = !mEffectMute;
	this.fMuteCheckES.visible = mEffectMute;

	this.roomEffectDraw();
	
	this.gameData.effectVolume = mEffectMute === true ? 0 : mEffectVolume;
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 배경음 좌측 버튼
MenuV2.prototype.roomBackgroundLeft = function() {
	mBackgroundVolume -= 10;
	//this.soundManager.play(that.soundManager.SOUND_TYPE.Click);

	if (mBackgroundVolume <= 0) {
		mBackgroundVolume = 0;
	}

	if (mBackgroundMute === true) {
		mBackgroundMute = false;
		this.fMuteCheckBG.visible = mBackgroundMute;
	}

	mSaveBackgroundVolume = mBackgroundVolume;
	this.roomBackgroundDraw();
	
	this.gameData.backgroundVolume = mBackgroundMute === true ? 0 : mBackgroundVolume;	
	
	if(this.fRoomListGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Lob);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Lob);
	}
	else if(this.fStandByRoomGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Rm);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Rm);
	}
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 배경음 우측 버튼
MenuV2.prototype.roomBackgroundRight = function() {
	mBackgroundVolume += 10;
	//this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (mBackgroundVolume > 100)
		mBackgroundVolume = 100;

	if (mBackgroundMute === true) {
		mBackgroundMute = false;
		this.fMuteCheckBG.visible = mBackgroundMute;
	}

	mSaveBackgroundVolume = mBackgroundVolume;
	this.roomBackgroundDraw();
	
	this.gameData.backgroundVolume = mBackgroundMute === true ? 0 : mBackgroundVolume;	
	
	if(this.fRoomListGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Lob);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Lob);
	}
	else if(this.fStandByRoomGroup.visible === true){
		this.soundManager.pause(that.soundManager.SOUND_TYPE.Coin_Rm);
		this.soundManager.resume(that.soundManager.SOUND_TYPE.Coin_Rm);
	}
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 효과음 좌측 버튼
MenuV2.prototype.roomEffectLeft = function() {
	mEffectVolume -= 10;
	//this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (mEffectVolume <= 0) {
		mEffectVolume = 0;
	}

	if (mEffectMute === true) {
		mEffectMute = false;
		this.fMuteCheckES.visible = mEffectMute;
	}

	mSaveEffectVolume = mEffectVolume;
	this.roomEffectDraw();
	
	this.gameData.effectVolume = mEffectMute === true ? 0 : mEffectVolume;
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 효과음 우측 버튼
MenuV2.prototype.roomEffectRight = function() {
	mEffectVolume += 10;
	//this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	if (mEffectVolume > 100) {
		mEffectVolume = 100;
	}

	if (mEffectMute === true) {
		mEffectMute = false;
		this.fMuteCheckES.visible = mEffectMute;
	}

	mSaveEffectVolume = mEffectVolume;
	this.roomEffectDraw();
	
	this.gameData.effectVolume = mEffectMute === true ? 0 : mEffectVolume;
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
};

// 배경음 포인트 이미지 x 좌표값 처리
MenuV2.prototype.roomBackgroundDraw = function() {
	this.fBtnSetGaugePointerBG.x = 450 + (18 * (mBackgroundVolume / 10));
};

// 효과음 포인트 이미지 x 좌표값 처리
MenuV2.prototype.roomEffectDraw = function() {
	this.fBtnSetGaugePointerES.x = 450 + (18 * (mEffectVolume / 10));
};
