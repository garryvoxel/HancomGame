// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * SingleLevel1.
 */
function SingleLevel1() {
	
	Phaser.State.call(this);
	this.beforeConstruct();
	this.afterConstruct();
	
}

/** @type Phaser.State */
var SingleLevel1_proto = Object.create(Phaser.State.prototype);
SingleLevel1.prototype = SingleLevel1_proto;
SingleLevel1.prototype.constructor = SingleLevel1;

SingleLevel1.prototype.init = function () {
	
	this.beforeInit();
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	
	this.afterInit();
	
};

SingleLevel1.prototype.preload = function () {
	
	this.beforePreload();
	
	this.afterPreload();
	
};

SingleLevel1.prototype.create = function () {
	
	this.beforeCreate();
	
	var _root = this.add.group();
	
	var _other = this.add.physicsGroup(Phaser.Physics.ARCADE, _root);
	_other.position.setTo(512.0, 0.0);
	
	var _Back_image1_other = this.add.sprite(0.0, 0.0, 'Back_image1', null, _other);
	
	var _Back_image2_other = this.add.sprite(0.0, -576.0, 'Back_image3', null, _other);
	
	var _Back_image3_other = this.add.sprite(0.0, -1152.0, 'Back_image2', null, _other);
	
	var _background_pelican_other = new BackObjPelican2V1(this.game, 68.0, 310.0);
	_other.add(_background_pelican_other);
	
	var _background_airplane_other = new BackObjAirplane2V1(this.game, 66.0, 135.0);
	_other.add(_background_airplane_other);
	
	var _wall_Rt_other4 = this.add.sprite(451.0, -1728.0, 'wall_Rt', null, _other);
	
	var _wall_Rt_other3 = this.add.sprite(451.0, -1152.0, 'wall_Rt', null, _other);
	
	var _wall_Rt_other2 = this.add.sprite(451.0, -576.0, 'wall_Rt', null, _other);
	
	var _wall_Rt_other = this.add.sprite(451.0, 0.0, 'wall_Rt', null, _other);
	
	var _wall_Lf_other4 = this.add.sprite(0.0, -1728.0, 'wall_Lf', null, _other);
	
	var _wall_Lf_other3 = this.add.sprite(0.0, -1152.0, 'wall_Lf', null, _other);
	
	var _wall_Lf_other2 = this.add.sprite(0.0, -576.0, 'wall_Lf', null, _other);
	
	var _wall_Lf_other = this.add.sprite(0.0, 0.0, 'wall_Lf', null, _other);
	
	this.add.sprite(15.0, 12.0, 'ui_up_panel', null, _other);
	
	this.add.sprite(26.0, 21.0, 'ui_icon_coin', null, _other);
	
	var _coinValueOutline_other = this.add.text(77.5, 25.5, '4680', {"font":"bold 20px ����ǹ��� �־�","strokeThickness":4,"align":"right"}, _other);
	
	var _coinValue_other = this.add.text(79.0, 27.0, '4680', {"font":"bold 20px ����ǹ��� �־�","fill":"#ffffff","align":"right"}, _other);
	
	this.add.sprite(365.0, 12.0, 'ui_up_panel', null, _other);
	
	this.add.tileSprite(0.0, 220.0, 511.0, 6.0, 'ui_guideLine', null, _other);
	
	var _ui_icon_heart3_other = new LifeHeartV1(this.game, 461.0, 39.0);
	_other.add(_ui_icon_heart3_other);
	
	var _ui_icon_heart2_other = new LifeHeartV1(this.game, 431.0, 39.0);
	_other.add(_ui_icon_heart2_other);
	
	var _ui_icon_heart1_other = new LifeHeartV1(this.game, 400.0, 39.0);
	_other.add(_ui_icon_heart1_other);
	
	var _meterOutlineValue_other = this.add.text(261.0, 39.0, '4680m', {"font":"41px ����ǹ��� �־�","strokeThickness":4,"align":"center"}, _other);
	_meterOutlineValue_other.anchor.setTo(0.5, 0.5);
	
	var _meterValue_other = this.add.text(261.0, 39.0, '4680m', {"font":"41px ����ǹ��� �־�","fill":"#ffffff","align":"center"}, _other);
	_meterValue_other.anchor.setTo(0.5, 0.5);
	
	var _coin_container_other = this.add.group(_other);
	
	
	
	
	
	
	
	
	var _coin_player_other = this.add.physicsGroup(Phaser.Physics.ARCADE, _other);
	
	
	var _Char_aniSheet_other_group = this.add.group(_other);
	
	var _coin_part_other = this.add.group(_other);
	
	var _coin_part10_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part10_other);
	
	var _coin_part9_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part9_other);
	
	var _coin_part8_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part8_other);
	
	var _coin_part7_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part7_other);
	
	var _coin_part6_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part6_other);
	
	var _coin_part5_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part5_other);
	
	var _coin_part4_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part4_other);
	
	var _coin_part3_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part3_other);
	
	var _coin_part2_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part2_other);
	
	var _coin_part1_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part1_other);
	
	var _sheet_talkBox_other = new TalkBoxV1(this.game, 245.0, 335.0);
	_other.add(_sheet_talkBox_other);
	
	var _sheet_talkBoxCombo1_other = new TalkBoxComboV2(this.game, 245.0, 335.0);
	_other.add(_sheet_talkBoxCombo1_other);
	
	var _sheet_talkBoxCombo2_other = new TalkBoxCombo2V2(this.game, 245.0, 335.0);
	_other.add(_sheet_talkBoxCombo2_other);
	
	var _wordtext_other = this.add.text(192.0, 274.0, '', {"font":"20px �������","fill":"#ffffff","align":"center"}, _other);
	
	var _sheet_coin_eff_other = new CoinEffectV1(this.game, 236.0, 426.0);
	_other.add(_sheet_coin_eff_other);
	
	var _sheet_coinCombo_eff_other = new CoinEffectComboV1(this.game, 238.0, 431.0);
	_other.add(_sheet_coinCombo_eff_other);
	
	
	var _combo_group_other = this.add.group(_other);
	
	var _ui_comboPanel_other = this.add.sprite(151.0, 420.0, 'ui_comboPanel', null, _combo_group_other);
	
	var _ui_comboGauge_other = this.add.sprite(152.0, 484.0, 'ui_comboGauge', null, _combo_group_other);
	
	var _crumble_group_other = this.add.group(_other);
	
	var _crumble_effect_20_other = new CoinEffCrashV2(this.game, 252.0, 382.0);
	_crumble_group_other.add(_crumble_effect_20_other);
	
	var _crumble_effect_19_other = new CoinEffCrashV2(this.game, 346.0, 502.0);
	_crumble_group_other.add(_crumble_effect_19_other);
	
	var _crumble_effect_18_other = new CoinEffCrashV2(this.game, 150.0, 492.0);
	_crumble_group_other.add(_crumble_effect_18_other);
	
	var _crumble_effect_17_other = new CoinEffCrashV2(this.game, 320.0, 470.0);
	_crumble_group_other.add(_crumble_effect_17_other);
	
	var _crumble_effect_16_other = new CoinEffCrashV2(this.game, 325.0, 431.0);
	_crumble_group_other.add(_crumble_effect_16_other);
	
	var _crumble_effect_15_other = new CoinEffCrashV2(this.game, 288.0, 386.0);
	_crumble_group_other.add(_crumble_effect_15_other);
	
	var _crumble_effect_14_other = new CoinEffCrashV2(this.game, 238.0, 377.0);
	_crumble_group_other.add(_crumble_effect_14_other);
	
	var _crumble_effect_13_other = new CoinEffCrashV2(this.game, 178.0, 379.0);
	_crumble_group_other.add(_crumble_effect_13_other);
	
	var _crumble_effect_12_other = new CoinEffCrashV2(this.game, 154.0, 435.0);
	_crumble_group_other.add(_crumble_effect_12_other);
	
	var _crumble_effect_11_other = new CoinEffCrashV2(this.game, 162.0, 488.0);
	_crumble_group_other.add(_crumble_effect_11_other);
	
	var _crumble_effect_10_other = new CoinEffCrashV2(this.game, 250.0, 400.0);
	_crumble_group_other.add(_crumble_effect_10_other);
	
	var _crumble_effect_9_other = new CoinEffCrashV2(this.game, 217.0, 405.0);
	_crumble_group_other.add(_crumble_effect_9_other);
	
	var _crumble_effect_8_other = new CoinEffCrashV2(this.game, 257.0, 424.0);
	_crumble_group_other.add(_crumble_effect_8_other);
	
	var _crumble_effect_7_other = new CoinEffCrashV2(this.game, 205.0, 440.0);
	_crumble_group_other.add(_crumble_effect_7_other);
	
	var _crumble_effect_6_other = new CoinEffCrashV2(this.game, 240.0, 462.0);
	_crumble_group_other.add(_crumble_effect_6_other);
	
	var _crumble_effect_5_other = new CoinEffCrashV2(this.game, 267.0, 479.0);
	_crumble_group_other.add(_crumble_effect_5_other);
	
	var _crumble_effect_4_other = new CoinEffCrashV2(this.game, 205.0, 485.0);
	_crumble_group_other.add(_crumble_effect_4_other);
	
	var _crumble_effect_3_other = new CoinEffCrashV2(this.game, 283.0, 517.0);
	_crumble_group_other.add(_crumble_effect_3_other);
	
	var _crumble_effect_2_other = new CoinEffCrashV2(this.game, 240.0, 519.0);
	_crumble_group_other.add(_crumble_effect_2_other);
	
	var _crumble_effect_1_other = new CoinEffCrashV2(this.game, 195.0, 523.0);
	_crumble_group_other.add(_crumble_effect_1_other);
	
	var _coin_effect_other = new UICoinEffV1(this.game, 41.0, 39.0);
	_other.add(_coin_effect_other);
	
	var _start_count_other = this.add.group(_other);
	
	var _begin_start_other = this.add.sprite(235.0, 240.0, 'begin_start', null, _start_count_other);
	_begin_start_other.anchor.setTo(0.5, 0.5);
	
	var _begin_ready2_other = this.add.sprite(235.0, 245.0, 'begin_ready1', null, _start_count_other);
	_begin_ready2_other.anchor.setTo(0.5, 0.5);
	
	var _begin_ready1_other = this.add.sprite(235.0, 245.0, 'begin_ready2', null, _start_count_other);
	_begin_ready1_other.anchor.setTo(0.5, 0.5);
	
	var _begin_ready_other = this.add.sprite(235.0, 245.0, 'begin_ready3', null, _start_count_other);
	_begin_ready_other.anchor.setTo(0.5, 0.5);
	
	var _user = this.add.physicsGroup(Phaser.Physics.ARCADE, _root);
	
	var _Back_image1_user = this.add.sprite(0.0, 0.0, 'Back_image1', null, _user);
	
	var _Back_image2_user = this.add.sprite(0.0, -576.0, 'Back_image3', null, _user);
	
	var _Back_image3_user = this.add.sprite(0.0, -1152.0, 'Back_image2', null, _user);
	
	var _background_airplane_user = new BackObjAirplaneV1(this.game, 379.0, 110.0);
	_user.add(_background_airplane_user);
	
	var _background_pelican_user = new BackObjPelicanV1(this.game, 413.0, 245.0);
	_user.add(_background_pelican_user);
	
	var _wall_Rt_user4 = this.add.sprite(451.0, -1728.0, 'wall_Rt', null, _user);
	
	var _wall_Rt_user3 = this.add.sprite(451.0, -1152.0, 'wall_Rt', null, _user);
	
	var _wall_Rt_user2 = this.add.sprite(451.0, -576.0, 'wall_Rt', null, _user);
	
	var _wall_Rt_user = this.add.sprite(451.0, 0.0, 'wall_Rt', null, _user);
	
	var _wall_Lf_user4 = this.add.sprite(0.0, -1728.0, 'wall_Lf', null, _user);
	
	var _wall_Lf_user3 = this.add.sprite(0.0, -1152.0, 'wall_Lf', null, _user);
	
	var _wall_Lf_user2 = this.add.sprite(0.0, -576.0, 'wall_Lf', null, _user);
	
	var _wall_Lf_user = this.add.sprite(0.0, 0.0, 'wall_Lf', null, _user);
	
	this.add.sprite(15.0, 12.0, 'ui_up_panel', null, _user);
	
	this.add.sprite(26.0, 21.0, 'ui_icon_coin', null, _user);
	
	var _coinValueOutline_user = this.add.text(77.5, 25.5, '4680', {"font":"bold 20px ����ǹ��� �־�","strokeThickness":4,"align":"right"}, _user);
	
	var _coinValue_user = this.add.text(79.0, 27.0, '4680', {"font":"bold 20px ����ǹ��� �־�","fill":"#ffffff","align":"right"}, _user);
	
	this.add.sprite(365.0, 12.0, 'ui_up_panel', null, _user);
	
	this.add.tileSprite(0.0, 220.0, 511.0, 6.0, 'ui_guideLine', null, _user);
	
	var _ui_icon_heart3_user = new LifeHeartV1(this.game, 462.0, 39.0);
	_user.add(_ui_icon_heart3_user);
	
	var _ui_icon_heart2_user = new LifeHeartV1(this.game, 431.0, 39.0);
	_user.add(_ui_icon_heart2_user);
	
	var _ui_icon_heart1_user = new LifeHeartV1(this.game, 400.0, 39.0);
	_user.add(_ui_icon_heart1_user);
	
	var _meterOutlineValue_user = this.add.text(261.0, 39.0, '4680m', {"font":"41px ����ǹ��� �־�","strokeThickness":4,"align":"center"}, _user);
	_meterOutlineValue_user.anchor.setTo(0.5, 0.5);
	
	var _meterValue_user = this.add.text(261.0, 39.0, '4680m', {"font":"41px ����ǹ��� �־�","fill":"#ffffff","align":"center"}, _user);
	_meterValue_user.anchor.setTo(0.5, 0.5);
	
	var _coin_container_user = this.add.group(_user);
	
	
	
	
	
	
	
	
	var _coin_player_user = this.add.physicsGroup(Phaser.Physics.ARCADE, _user);
	
	
	var _Char_aniSheet_user_group = this.add.group(_user);
	
	var _coin_part_user = this.add.group(_user);
	
	var _coin_part10_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part10_user);
	
	var _coin_part9_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part9_user);
	
	var _coin_part8_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part8_user);
	
	var _coin_part7_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part7_user);
	
	var _coin_part6_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part6_user);
	
	var _coin_part5_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part5_user);
	
	var _coin_part4_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part4_user);
	
	var _coin_part3_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part3_user);
	
	var _coin_part2_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part2_user);
	
	var _coin_part1_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part1_user);
	
	var _sheet_talkBox_user = new TalkBoxV1(this.game, 245.0, 335.0);
	_user.add(_sheet_talkBox_user);
	
	var _sheet_talkBoxCombo1_user = new TalkBoxComboV2(this.game, 245.0, 335.0);
	_user.add(_sheet_talkBoxCombo1_user);
	
	var _sheet_talkBoxCombo2_user = new TalkBoxCombo2V2(this.game, 245.0, 335.0);
	_user.add(_sheet_talkBoxCombo2_user);
	
	var _wordtext_user = this.add.text(192.0, 274.0, '', {"font":"20px �������","fill":"#ffffff","align":"center"}, _user);
	
	var _sheet_coin_eff_user = new CoinEffectV1(this.game, 236.0, 426.0);
	_user.add(_sheet_coin_eff_user);
	
	var _sheet_coinCombo_eff_user = new CoinEffectComboV1(this.game, 238.0, 431.0);
	_user.add(_sheet_coinCombo_eff_user);
	
	
	var _combo_group_user = this.add.group(_user);
	
	var _ui_comboPanel_user = this.add.sprite(151.0, 420.0, 'ui_comboPanel', null, _combo_group_user);
	
	var _ui_comboGauge_user = this.add.sprite(152.0, 484.0, 'ui_comboGauge', null, _combo_group_user);
	
	var _crumble_group_user = this.add.group(_user);
	
	var _crumble_effect_20_user = new CoinEffCrashV2(this.game, 252.0, 382.0);
	_crumble_group_user.add(_crumble_effect_20_user);
	
	var _crumble_effect_19_user = new CoinEffCrashV2(this.game, 346.0, 502.0);
	_crumble_group_user.add(_crumble_effect_19_user);
	
	var _crumble_effect_18_user = new CoinEffCrashV2(this.game, 150.0, 492.0);
	_crumble_group_user.add(_crumble_effect_18_user);
	
	var _crumble_effect_17_user = new CoinEffCrashV2(this.game, 320.0, 470.0);
	_crumble_group_user.add(_crumble_effect_17_user);
	
	var _crumble_effect_16_user = new CoinEffCrashV2(this.game, 325.0, 431.0);
	_crumble_group_user.add(_crumble_effect_16_user);
	
	var _crumble_effect_15_user = new CoinEffCrashV2(this.game, 288.0, 386.0);
	_crumble_group_user.add(_crumble_effect_15_user);
	
	var _crumble_effect_14_user = new CoinEffCrashV2(this.game, 238.0, 377.0);
	_crumble_group_user.add(_crumble_effect_14_user);
	
	var _crumble_effect_13_user = new CoinEffCrashV2(this.game, 178.0, 379.0);
	_crumble_group_user.add(_crumble_effect_13_user);
	
	var _crumble_effect_12_user = new CoinEffCrashV2(this.game, 154.0, 435.0);
	_crumble_group_user.add(_crumble_effect_12_user);
	
	var _crumble_effect_11_user = new CoinEffCrashV2(this.game, 162.0, 488.0);
	_crumble_group_user.add(_crumble_effect_11_user);
	
	var _crumble_effect_10_user = new CoinEffCrashV2(this.game, 250.0, 450.0);
	_crumble_group_user.add(_crumble_effect_10_user);
	
	var _crumble_effect_9_user = new CoinEffCrashV2(this.game, 217.0, 450.0);
	_crumble_group_user.add(_crumble_effect_9_user);
	
	var _crumble_effect_8_user = new CoinEffCrashV2(this.game, 257.0, 460.0);
	_crumble_group_user.add(_crumble_effect_8_user);
	
	var _crumble_effect_7_user = new CoinEffCrashV2(this.game, 205.0, 440.0);
	_crumble_group_user.add(_crumble_effect_7_user);
	
	var _crumble_effect_6_user = new CoinEffCrashV2(this.game, 240.0, 462.0);
	_crumble_group_user.add(_crumble_effect_6_user);
	
	var _crumble_effect_5_user = new CoinEffCrashV2(this.game, 267.0, 479.0);
	_crumble_group_user.add(_crumble_effect_5_user);
	
	var _crumble_effect_4_user = new CoinEffCrashV2(this.game, 205.0, 485.0);
	_crumble_group_user.add(_crumble_effect_4_user);
	
	var _crumble_effect_3_user = new CoinEffCrashV2(this.game, 283.0, 517.0);
	_crumble_group_user.add(_crumble_effect_3_user);
	
	var _crumble_effect_2_user = new CoinEffCrashV2(this.game, 240.0, 519.0);
	_crumble_group_user.add(_crumble_effect_2_user);
	
	var _crumble_effect_1_user = new CoinEffCrashV2(this.game, 195.0, 523.0);
	_crumble_group_user.add(_crumble_effect_1_user);
	
	var _coin_effect_user = new UICoinEffV1(this.game, 43.0, 39.0);
	_user.add(_coin_effect_user);
	
	var _start_count_user = this.add.group(_user);
	
	var _begin_start_user = this.add.sprite(235.0, 240.0, 'begin_start', null, _start_count_user);
	_begin_start_user.anchor.setTo(0.5, 0.5);
	
	var _begin_ready2_user = this.add.sprite(235.0, 245.0, 'begin_ready1', null, _start_count_user);
	_begin_ready2_user.anchor.setTo(0.5, 0.5);
	
	var _begin_ready1_user = this.add.sprite(235.0, 245.0, 'begin_ready2', null, _start_count_user);
	_begin_ready1_user.anchor.setTo(0.5, 0.5);
	
	var _begin_ready_user = this.add.sprite(235.0, 245.0, 'begin_ready3', null, _start_count_user);
	_begin_ready_user.anchor.setTo(0.5, 0.5);
	
	var _common = this.add.group(_root);
	
	this.add.tileSprite(0.0, 537.0, 1024.0, 39.0, 'ui_dw_panelUnit', null, _common);
	
	this.add.sprite(331.0, 517.0, 'ui_input', null, _common);
	
	this.add.sprite(814.0, 518.0, 'uiidPanel_other', null, _common);
	
	var _otherID_text = this.add.text(830.0, 534.0, 'ABCDABCDABCDABCD', {"font":"14px �������","fill":"#ffffff"}, _common);
	
	this.add.sprite(0.0, 517.0, 'uiidPanel_me', null, _common);
	
	var _userID_text = this.add.text(44.0, 532.0, 'ABCDABCDABCDABCD', {"font":"14px �������","fill":"#ffffff"}, _common);
	
	var _ui_inputWord = this.add.text(365.0, 534.0, '', {"font":"14px �������","fill":"#ffffff"}, _common);
	
	var _InputCursorSheet = new InputCursor(this.game, 367.0, 533.0);
	_common.add(_InputCursorSheet);
	
	this.add.button(619.0, 521.0, 'ui_input_btnSheet', this.wordinput, this, 1, 0, 2, 3, _common);
	
	this.add.sprite(385.0, 84.0, 'ui_vs', null, _common);
	
	var _ui_timePanel = this.add.sprite(433.0, 262.0, 'ui_timePanel', null, _common);
	
	var _timeNum = this.add.text(501.0, 280.0, '01:00', {"font":"bold 24px �������","fill":"#400040","align":"center"}, _common);
	
	
	var _ui_timePanel_Alert = this.add.sprite(437.0, 267.0, 'ui_timePanel_Alert', null, _common);
	
	var _combo_attack_effect_explosion_other = new EffComboAttExplosionV1(this.game, 260.0, 67.0);
	_common.add(_combo_attack_effect_explosion_other);
	
	var _combo_attack_effect_fly_other = new EffComboAttFlyV1(this.game, 749.0, 426.0);
	_common.add(_combo_attack_effect_fly_other);
	
	var _combo_attack_effect_explosion_user = new EffComboAttExplosionV1(this.game, 760.0, 75.0);
	_common.add(_combo_attack_effect_explosion_user);
	
	var _combo_attack_effect_fly_user = new EffComboAttFlyV1(this.game, 239.0, 438.0);
	_common.add(_combo_attack_effect_fly_user);
	
	var _transImg_ = this.add.sprite(0.0, 0.0, 'transImg_70', null, _common);
	
	var _resultEff_L = this.add.sprite(512.0, 283.0, 'resultEff_L', null, _common);
	_resultEff_L.anchor.setTo(0.5, 0.5);
	
	var _resultEff_S = this.add.sprite(512.0, 283.0, 'resultEff_S', null, _common);
	_resultEff_S.anchor.setTo(0.5, 0.5);
	
	var _resultImg = this.add.sprite(512.0, 283.0, 'resultImg', null, _common);
	_resultImg.anchor.setTo(0.5, 0.5);
	
	var _result = this.add.group(_root);
	
	var _SucessAI = this.add.group(_result);
	
	this.add.sprite(0.0, 0.0, 'transImg_70', null, _SucessAI);
	
	
	var _RUIBtnSheetExitSA = this.add.button(428.0, 460.0, 'RUIBtnSheetExit', this.ExitAI, this, 1, 0, 2, 0, _SucessAI);
	
	var _RUIRedPanelSA = this.add.sprite(119.0, 64.0, 'RUIBluePanel', null, _SucessAI);
	
	var _RUIRedPanelFA = this.add.sprite(119.0, 64.0, 'RUIRedPanel', null, _SucessAI);
	
	var _RUICharEffSA2 = this.add.sprite(512.0, 260.0, 'RUICharEff', null, _SucessAI);
	_RUICharEffSA2.angle = -23.0;
	_RUICharEffSA2.alpha = 0.8;
	_RUICharEffSA2.anchor.setTo(0.5, 0.5);
	
	var _RUICharEffSA1 = this.add.sprite(512.0, 260.0, 'RUICharEff', null, _SucessAI);
	_RUICharEffSA1.alpha = 0.8;
	_RUICharEffSA1.anchor.setTo(0.5, 0.5);
	
	
	var _CharAIAniSheetGroup = this.add.group(_SucessAI);
	
	var _RUIInfoRSA2 = this.add.sprite(602.0, 235.0, 'RUIInfo', null, _SucessAI);
	
	var _RUIInfoRSA1 = this.add.sprite(165.0, 235.0, 'RUIInfo', null, _SucessAI);
	
	var _RUIInfoRFA2 = this.add.sprite(602.0, 235.0, 'RUIInfoR', null, _SucessAI);
	
	var _RUIInfoRFA1 = this.add.sprite(165.0, 235.0, 'RUIInfoR', null, _SucessAI);
	
	var _PMeterSA2 = this.add.text(718.0, 242.0, '', {"font":"bold 28px �������","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PPointSA2 = this.add.text(718.0, 298.0, '', {"font":"bold 28px �������","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PMeterSA1 = this.add.text(282.0, 242.0, '', {"font":"bold 28px �������","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PPointSA1 = this.add.text(282.0, 298.0, '', {"font":"bold 28px �������","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PNicknameLineSA2 = this.add.text(580.0, 189.0, '', {"font":"bold 28px �������","fill":"#bff2ff","stroke":"#bff2ff","strokeThickness":4,"align":"center"}, _SucessAI);
	
	var _PNicknameSA2 = this.add.text(580.0, 189.0, '', {"font":"bold 28px �������","fill":"#2a2a2a","align":"center"}, _SucessAI);
	
	var _PNicknameLineSA1 = this.add.text(160.0, 189.0, '', {"font":"bold 28px �������","fill":"#bff2ff","stroke":"#bff2ff","strokeThickness":4,"align":"center"}, _SucessAI);
	
	var _PNicknameSA1 = this.add.text(160.0, 189.0, '', {"font":"bold 28px �������","fill":"#2a2a2a","align":"center"}, _SucessAI);
	
	this.add.sprite(708.0, 140.0, 'RUI2P', null, _SucessAI);
	
	this.add.sprite(255.0, 140.0, 'RUI1P', null, _SucessAI);
	
	var _RUIVicTitleSA = this.add.sprite(352.0, 12.0, 'RUIVicTitle', null, _SucessAI);
	
	var _RUIDrawTitleDA = this.add.sprite(387.0, 20.0, 'RUIDrawTitle', null, _SucessAI);
	
	var _RUIFailTitleFA = this.add.sprite(270.0, 26.0, 'RUIFailTitle', null, _SucessAI);
	
	var _PopupPublicB = this.add.group(_root);
	
	var _transImg703 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicB);
	
	var _PopupBtnCheck3 = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicB);
	
	var _YesNoGroup = this.add.group(_PopupPublicB);
	_YesNoGroup.position.setTo(322.0, 402.0);
	
	var _PopupBtnNo = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroup);
	
	var _PopupBtnYes = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroup);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupPublicB);
	
	var _ContentsText = this.add.text(512.0, 250.0, '', {"font":"bold 25px �����ٸ����","fill":"#2a2a2a"}, _PopupPublicB);
	
	this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelBlueListener, this, 1, 0, 2, 0, _PopupPublicB);
	
	this.add.sprite(476.0, 140.0, 'TitleTalk', null, _PopupPublicB);
	
	var _PopupPublicR = this.add.group(_root);
	
	var _transImg704 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicR);
	
	var _PopupBtnCheck4 = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicR);
	
	var _YesNoGroupR = this.add.group(_PopupPublicR);
	_YesNoGroupR.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR);
	
	var _PopupBtnYesR = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR);
	
	this.add.sprite(243.0, 110.0, 'PopupPublicNotice', null, _PopupPublicR);
	
	var _ContentsText2 = this.add.text(512.0, 250.0, '', {"font":"bold 25px �����ٸ����","fill":"#2a2a2a"}, _PopupPublicR);
	
	var _PublicBtnExit2 = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelRedListener, this, 1, 0, 2, 0, _PopupPublicR);
	
	this.add.sprite(473.0, 140.0, 'TitleNotice', null, _PopupPublicR);
	
	var _PopupPublicRExit = this.add.group(_root);
	
	var _transImg704_Exit = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicRExit);
	
	var _PopupBtnCheck4_Exit = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicRExit);
	
	var _YesNoGroupR_BR_Exit = this.add.group(_PopupPublicRExit);
	_YesNoGroupR_BR_Exit.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR_Exit = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_Exit);
	
	var _PopupBtnYesR_Exit = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_Exit);
	
	this.add.sprite(243.0, 110.0, 'PopupPublicNotice', null, _PopupPublicRExit);
	
	var _ContentsText2_Exit = this.add.text(512.0, 250.0, '', {"font":"bold 25px �����ٸ����","fill":"#2a2a2a"}, _PopupPublicRExit);
	
	var _PublicBtnExit2_Exit = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelRedExitListener, this, 1, 0, 2, 0, _PopupPublicRExit);
	
	this.add.sprite(473.0, 140.0, 'TitleNotice', null, _PopupPublicRExit);
	
	var _ToastMessageGroup = this.add.group(_root);
	_ToastMessageGroup.position.setTo(1.0, 0.0);
	
	this.add.sprite(0.0, 238.0, 'UIToaster', null, _ToastMessageGroup);
	
	var _ToastMessageText = this.add.text(512.0, 250.0, '�佺Ʈ �޼���', {"font":"20px �����ٸ����","fill":"#ffffff","align":"center"}, _ToastMessageGroup);
	
	var _notRayCast1 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _ToastMessageGroup);
	_notRayCast1.alpha = 0.0;
	
	
	
	// fields
	
	this.fOther = _other;
	this.fBack_image1_other = _Back_image1_other;
	this.fBack_image2_other = _Back_image2_other;
	this.fBack_image3_other = _Back_image3_other;
	this.fBackground_pelican_other = _background_pelican_other;
	this.fBackground_airplane_other = _background_airplane_other;
	this.fWall_Rt_other4 = _wall_Rt_other4;
	this.fWall_Rt_other3 = _wall_Rt_other3;
	this.fWall_Rt_other2 = _wall_Rt_other2;
	this.fWall_Rt_other = _wall_Rt_other;
	this.fWall_Lf_other4 = _wall_Lf_other4;
	this.fWall_Lf_other3 = _wall_Lf_other3;
	this.fWall_Lf_other2 = _wall_Lf_other2;
	this.fWall_Lf_other = _wall_Lf_other;
	this.fCoinValueOutline_other = _coinValueOutline_other;
	this.fCoinValue_other = _coinValue_other;
	this.fUi_icon_heart3_other = _ui_icon_heart3_other;
	this.fUi_icon_heart2_other = _ui_icon_heart2_other;
	this.fUi_icon_heart1_other = _ui_icon_heart1_other;
	this.fMeterOutlineValue_other = _meterOutlineValue_other;
	this.fMeterValue_other = _meterValue_other;
	this.fCoin_container_other = _coin_container_other;
	this.fCoin_player_other = _coin_player_other;
	this.fChar_aniSheet_other_group = _Char_aniSheet_other_group;
	this.fCoin_part_other = _coin_part_other;
	this.fCoin_part10_other = _coin_part10_other;
	this.fCoin_part9_other = _coin_part9_other;
	this.fCoin_part8_other = _coin_part8_other;
	this.fCoin_part7_other = _coin_part7_other;
	this.fCoin_part6_other = _coin_part6_other;
	this.fCoin_part5_other = _coin_part5_other;
	this.fCoin_part4_other = _coin_part4_other;
	this.fCoin_part3_other = _coin_part3_other;
	this.fCoin_part2_other = _coin_part2_other;
	this.fCoin_part1_other = _coin_part1_other;
	this.fSheet_talkBox_other = _sheet_talkBox_other;
	this.fSheet_talkBoxCombo1_other = _sheet_talkBoxCombo1_other;
	this.fSheet_talkBoxCombo2_other = _sheet_talkBoxCombo2_other;
	this.fWordtext_other = _wordtext_other;
	this.fSheet_coin_eff_other = _sheet_coin_eff_other;
	this.fSheet_coinCombo_eff_other = _sheet_coinCombo_eff_other;
	this.fCombo_group_other = _combo_group_other;
	this.fUi_comboPanel_other = _ui_comboPanel_other;
	this.fUi_comboGauge_other = _ui_comboGauge_other;
	this.fCrumble_group_other = _crumble_group_other;
	this.fCrumble_effect_20_other = _crumble_effect_20_other;
	this.fCrumble_effect_19_other = _crumble_effect_19_other;
	this.fCrumble_effect_18_other = _crumble_effect_18_other;
	this.fCrumble_effect_17_other = _crumble_effect_17_other;
	this.fCrumble_effect_16_other = _crumble_effect_16_other;
	this.fCrumble_effect_15_other = _crumble_effect_15_other;
	this.fCrumble_effect_14_other = _crumble_effect_14_other;
	this.fCrumble_effect_13_other = _crumble_effect_13_other;
	this.fCrumble_effect_12_other = _crumble_effect_12_other;
	this.fCrumble_effect_11_other = _crumble_effect_11_other;
	this.fCrumble_effect_10_other = _crumble_effect_10_other;
	this.fCrumble_effect_9_other = _crumble_effect_9_other;
	this.fCrumble_effect_8_other = _crumble_effect_8_other;
	this.fCrumble_effect_7_other = _crumble_effect_7_other;
	this.fCrumble_effect_6_other = _crumble_effect_6_other;
	this.fCrumble_effect_5_other = _crumble_effect_5_other;
	this.fCrumble_effect_4_other = _crumble_effect_4_other;
	this.fCrumble_effect_3_other = _crumble_effect_3_other;
	this.fCrumble_effect_2_other = _crumble_effect_2_other;
	this.fCrumble_effect_1_other = _crumble_effect_1_other;
	this.fCoin_effect_other = _coin_effect_other;
	this.fStart_count_other = _start_count_other;
	this.fBegin_start_other = _begin_start_other;
	this.fBegin_ready2_other = _begin_ready2_other;
	this.fBegin_ready1_other = _begin_ready1_other;
	this.fBegin_ready_other = _begin_ready_other;
	this.fUser = _user;
	this.fBack_image1_user = _Back_image1_user;
	this.fBack_image2_user = _Back_image2_user;
	this.fBack_image3_user = _Back_image3_user;
	this.fBackground_airplane_user = _background_airplane_user;
	this.fBackground_pelican_user = _background_pelican_user;
	this.fWall_Rt_user4 = _wall_Rt_user4;
	this.fWall_Rt_user3 = _wall_Rt_user3;
	this.fWall_Rt_user2 = _wall_Rt_user2;
	this.fWall_Rt_user = _wall_Rt_user;
	this.fWall_Lf_user4 = _wall_Lf_user4;
	this.fWall_Lf_user3 = _wall_Lf_user3;
	this.fWall_Lf_user2 = _wall_Lf_user2;
	this.fWall_Lf_user = _wall_Lf_user;
	this.fCoinValueOutline_user = _coinValueOutline_user;
	this.fCoinValue_user = _coinValue_user;
	this.fUi_icon_heart3_user = _ui_icon_heart3_user;
	this.fUi_icon_heart2_user = _ui_icon_heart2_user;
	this.fUi_icon_heart1_user = _ui_icon_heart1_user;
	this.fMeterOutlineValue_user = _meterOutlineValue_user;
	this.fMeterValue_user = _meterValue_user;
	this.fCoin_container_user = _coin_container_user;
	this.fCoin_player_user = _coin_player_user;
	this.fChar_aniSheet_user_group = _Char_aniSheet_user_group;
	this.fCoin_part_user = _coin_part_user;
	this.fCoin_part10_user = _coin_part10_user;
	this.fCoin_part9_user = _coin_part9_user;
	this.fCoin_part8_user = _coin_part8_user;
	this.fCoin_part7_user = _coin_part7_user;
	this.fCoin_part6_user = _coin_part6_user;
	this.fCoin_part5_user = _coin_part5_user;
	this.fCoin_part4_user = _coin_part4_user;
	this.fCoin_part3_user = _coin_part3_user;
	this.fCoin_part2_user = _coin_part2_user;
	this.fCoin_part1_user = _coin_part1_user;
	this.fSheet_talkBox_user = _sheet_talkBox_user;
	this.fSheet_talkBoxCombo1_user = _sheet_talkBoxCombo1_user;
	this.fSheet_talkBoxCombo2_user = _sheet_talkBoxCombo2_user;
	this.fWordtext_user = _wordtext_user;
	this.fSheet_coin_eff_user = _sheet_coin_eff_user;
	this.fSheet_coinCombo_eff_user = _sheet_coinCombo_eff_user;
	this.fCombo_group_user = _combo_group_user;
	this.fUi_comboPanel_user = _ui_comboPanel_user;
	this.fUi_comboGauge_user = _ui_comboGauge_user;
	this.fCrumble_group_user = _crumble_group_user;
	this.fCrumble_effect_20_user = _crumble_effect_20_user;
	this.fCrumble_effect_19_user = _crumble_effect_19_user;
	this.fCrumble_effect_18_user = _crumble_effect_18_user;
	this.fCrumble_effect_17_user = _crumble_effect_17_user;
	this.fCrumble_effect_16_user = _crumble_effect_16_user;
	this.fCrumble_effect_15_user = _crumble_effect_15_user;
	this.fCrumble_effect_14_user = _crumble_effect_14_user;
	this.fCrumble_effect_13_user = _crumble_effect_13_user;
	this.fCrumble_effect_12_user = _crumble_effect_12_user;
	this.fCrumble_effect_11_user = _crumble_effect_11_user;
	this.fCrumble_effect_10_user = _crumble_effect_10_user;
	this.fCrumble_effect_9_user = _crumble_effect_9_user;
	this.fCrumble_effect_8_user = _crumble_effect_8_user;
	this.fCrumble_effect_7_user = _crumble_effect_7_user;
	this.fCrumble_effect_6_user = _crumble_effect_6_user;
	this.fCrumble_effect_5_user = _crumble_effect_5_user;
	this.fCrumble_effect_4_user = _crumble_effect_4_user;
	this.fCrumble_effect_3_user = _crumble_effect_3_user;
	this.fCrumble_effect_2_user = _crumble_effect_2_user;
	this.fCrumble_effect_1_user = _crumble_effect_1_user;
	this.fCoin_effect_user = _coin_effect_user;
	this.fStart_count_user = _start_count_user;
	this.fBegin_start_user = _begin_start_user;
	this.fBegin_ready2_user = _begin_ready2_user;
	this.fBegin_ready1_user = _begin_ready1_user;
	this.fBegin_ready_user = _begin_ready_user;
	this.fOtherID_text = _otherID_text;
	this.fUserID_text = _userID_text;
	this.fUi_inputWord = _ui_inputWord;
	this.fInputCursorSheet = _InputCursorSheet;
	this.fUi_timePanel = _ui_timePanel;
	this.fTimeNum = _timeNum;
	this.fUi_timePanel_Alert = _ui_timePanel_Alert;
	this.fCombo_attack_effect_explosion_other = _combo_attack_effect_explosion_other;
	this.fCombo_attack_effect_fly_other = _combo_attack_effect_fly_other;
	this.fCombo_attack_effect_explosion_user = _combo_attack_effect_explosion_user;
	this.fCombo_attack_effect_fly_user = _combo_attack_effect_fly_user;
	this.fTransImg_ = _transImg_;
	this.fResultEff_L = _resultEff_L;
	this.fResultEff_S = _resultEff_S;
	this.fResultImg = _resultImg;
	this.fSucessAI = _SucessAI;
	this.fRUIBtnSheetExitSA = _RUIBtnSheetExitSA;
	this.fRUIRedPanelSA = _RUIRedPanelSA;
	this.fRUIRedPanelFA = _RUIRedPanelFA;
	this.fRUICharEffSA2 = _RUICharEffSA2;
	this.fRUICharEffSA1 = _RUICharEffSA1;
	this.fCharAIAniSheetGroup = _CharAIAniSheetGroup;
	this.fRUIInfoRSA2 = _RUIInfoRSA2;
	this.fRUIInfoRSA1 = _RUIInfoRSA1;
	this.fRUIInfoRFA2 = _RUIInfoRFA2;
	this.fRUIInfoRFA1 = _RUIInfoRFA1;
	this.fPMeterSA2 = _PMeterSA2;
	this.fPPointSA2 = _PPointSA2;
	this.fPMeterSA1 = _PMeterSA1;
	this.fPPointSA1 = _PPointSA1;
	this.fPNicknameLineSA2 = _PNicknameLineSA2;
	this.fPNicknameSA2 = _PNicknameSA2;
	this.fPNicknameLineSA1 = _PNicknameLineSA1;
	this.fPNicknameSA1 = _PNicknameSA1;
	this.fRUIVicTitleSA = _RUIVicTitleSA;
	this.fRUIDrawTitleDA = _RUIDrawTitleDA;
	this.fRUIFailTitleFA = _RUIFailTitleFA;
	this.fPopupPublicB = _PopupPublicB;
	this.fTransImg703 = _transImg703;
	this.fPopupBtnCheck3 = _PopupBtnCheck3;
	this.fPopupBtnNo = _PopupBtnNo;
	this.fPopupBtnYes = _PopupBtnYes;
	this.fContentsText = _ContentsText;
	this.fPopupPublicR = _PopupPublicR;
	this.fTransImg704 = _transImg704;
	this.fPopupBtnCheck4 = _PopupBtnCheck4;
	this.fPopupBtnNoR = _PopupBtnNoR;
	this.fPopupBtnYesR = _PopupBtnYesR;
	this.fContentsText2 = _ContentsText2;
	this.fPublicBtnExit2 = _PublicBtnExit2;
	this.fPopupPublicRExit = _PopupPublicRExit;
	this.fTransImg704_Exit = _transImg704_Exit;
	this.fPopupBtnCheck4_Exit = _PopupBtnCheck4_Exit;
	this.fPopupBtnNoR_Exit = _PopupBtnNoR_Exit;
	this.fPopupBtnYesR_Exit = _PopupBtnYesR_Exit;
	this.fContentsText2_Exit = _ContentsText2_Exit;
	this.fPublicBtnExit2_Exit = _PublicBtnExit2_Exit;
	this.fToastMessageGroup = _ToastMessageGroup;
	this.fToastMessageText = _ToastMessageText;
	this.fNotRayCast1 = _notRayCast1;
	this.afterCreate();
	
};

/* --- end generated code --- */
// -- user code here --
SingleLevel1.prototype.beforeConstruct = function() {

};

SingleLevel1.prototype.afterConstruct = function() {

};

SingleLevel1.prototype.beforeInit = function() {

};

SingleLevel1.prototype.afterInit = function() {	
	this.initUserField();
};

SingleLevel1.prototype.beforePreload = function() {

};

SingleLevel1.prototype.afterPreload = function() {

};

SingleLevel1.prototype.beforeCreate = function() {	
	that = this;
	this.createScript();	
	//socket 연결...
//	socket = io.connect('http://localhost:3000');
};

SingleLevel1.prototype.afterCreate = function() {
	this.createUserComboText();
	//this.createUserComboGauge();

	this.createOtherComboText();
	//this.createOtherComboGauge();

	//this.playAudio('coinbgm1', 0.5, true);
	this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Music);

	// //콤보 이펙트 상대방한테 날라가는것.
	this.fCombo_attack_effect_fly_user.visible = false;
	this.fCombo_attack_effect_explosion_user.visible = false;

	this.fCombo_attack_effect_fly_other.visible = false;
	this.fCombo_attack_effect_explosion_other.visible = false;

	this.fCoin_effect_user.visible = false;
	this.fCoin_effect_other.visible = false;

	this.fBackground_pelican_user.visible = false;
	this.fBackground_airplane_user.visible = false;

	this.fBackground_pelican_other.visible = false;
	this.fBackground_airplane_other.visible = false;
	
	// AI 결과 화면 초기화
	this.fSucessAI.visible = false;
	
	this.fRUIRedPanelSA.visible = false;
	this.fRUIRedPanelFA.visible = false;

	this.fRUIInfoRSA2.visible = false;
	this.fRUIInfoRSA1.visible = false;
	this.fRUIInfoRFA2.visible = false;
	this.fRUIInfoRFA1.visible = false;

	this.fRUIVicTitleSA.visible = false;
	this.fRUIDrawTitleDA.visible = false;
	this.fRUIFailTitleFA.visible = false;
	
	this.fUi_comboPanel_user.visible = false;
	this.fUi_comboPanel_other.visible = false;
	
	this.fStart_count_user.visible = false;
	this.fStart_count_user.children.forEach(function(element) {
		element.visible = false;
	});
	
	this.fStart_count_other.visible = false;
	this.fStart_count_other.children.forEach(function(element) {
		element.visible = false;
	});
	
	this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		this.fBackground_pelican_user.setPlay("PLAY", true, -1);
	}, this);
	this.fBackground_airplane_user.setPlay("PLAY", true, -1);

	this.fBackground_pelican_other.setPlay("PLAY", true, 1);
	this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		this.fBackground_airplane_other.setPlay("PLAY", true, 1);
	}, this);
	
	//console.log("this.gameConst.WordType.NORMAL is " + this.gameConst.WordType.NORMAL);	
	
	userStartCnt = 0;
	otherStartCnt = 0;
	
	userComboIndex = 0;
	otherComboIndex = 0;
	
	userWordType = this.gameConst.WordType.BASIC;
	otherWordType = this.gameConst.WordType.BASIC;
	
	userWordNextType = this.gameConst.WordType.BASIC;
	otherWordNextType = this.gameConst.WordType.BASIC;
	
	mUserBackgroundWallY1 = this.fWall_Lf_user.y;
	mUserBackgroundWallY2 = this.fWall_Lf_user2.y;
	mUserBackgroundWallY3 = this.fWall_Lf_user3.y;
	mUserBackgroundWallY4 = this.fWall_Lf_user4.y;
	
	mUserBackgroundY1 = this.fBack_image1_user.y;
	mUserBackgroundY2 = this.fBack_image2_user.y;
	mUserBackgroundY3 = this.fBack_image3_user.y;

	
	mOtherBackgroundWallY1 = this.fWall_Lf_other.y;
	mOtherBackgroundWallY2 = this.fWall_Lf_other2.y;
	mOtherBackgroundWallY3 = this.fWall_Lf_other3.y;
	mOtherBackgroundWallY4 = this.fWall_Lf_other4.y;
	
	mOtherBackgroundY1 = this.fBack_image1_other.y;
	mOtherBackgroundY2 = this.fBack_image2_other.y;
	mOtherBackgroundY3 = this.fBack_image3_other.y;
	

	this.fWordtext_user.setTextBounds(0, 0, 105, 26);

	this.fWordtext_user.boundsAlignH = 'center';
	this.fWordtext_user.boundsAlignV = 'middle';

	this.fWordtext_other.setTextBounds(0, 0, 105, 26);
	this.fWordtext_other.boundsAlignH = 'center';
	this.fWordtext_other.boundsAlignV = 'middle';

	this.createInitUser();
	this.createInitOther();
	
	this.fToastMessageGroup.visible = false;
	this.fPopupPublicRExit.visible = false;
	this.fPopupPublicR.visible = false;
	this.fPopupPublicB.visible = false;
	
	this.fChar_aniPoseSheet_user.visible = false;
	this.fChar_aniPoseSheet_other.visible = false;
	
//	//Test
//	this.userBmd = this.game.make.bitmapData(186,21);
//	this.userMaskComboGauge = this.game.add.image(152, 484, this.userBmd);
//	this.userMaskComboGauge.visible = false;
	
	this.fUi_comboGauge_user.mask = this.game.add.graphics(0,0);
	this.fUi_comboGauge_user.mask.beginFill(0xffffff);
	this.fUi_comboGauge_user.mask.drawRect(this.fUi_comboGauge_user.x, this.fUi_comboGauge_user.y, this.fUi_comboGauge_user.width, this.fUi_comboGauge_user.height);
	this.fUi_comboGauge_user.visible = false;
	
	this.fUi_comboGauge_other.mask = this.game.add.graphics(0,0);
	this.fUi_comboGauge_other.mask.beginFill(0x000000);
	this.fUi_comboGauge_other.mask.drawRect(512 + this.fUi_comboGauge_other.x, this.fUi_comboGauge_other.y, this.fUi_comboGauge_other.width, this.fUi_comboGauge_other.height);
	this.fUi_comboGauge_other.visible = false;
		
	this.setIngameResultCharacterAni();	//결과창 애니 캐릭터
	
	this.setOrderStudy();
	
	gameState = that.gameConst.GameStateType.ENTER;
	this.setGameState(that.gameConst.GameStateType.ENTER);

	// var emitter = this.game.add.emitter(this.game.world.centerX, 5, 100);

	// This emitter will have a width of 800px, so a particle can emit from
	// anywhere in the range emitter.x += emitter.width / 2
	// emitter.width = 800;

	// var emitter = this.game.add.emitter(250, 400, 10);
	// emitter.width = 100;
	// emitter.makeParticles('coin_part');
	// emitter.setXSpeed(30, -30);
	// emitter.setYSpeed(200, 180);
	// emitter.setRotation(50,-50);

	// emitter.worldPosition.x = 100;
	// emitter.worldPosition.y = 100;
	// emitter.setAlpha(1, 0.01, 800);
	// emitter.setScale(0.05, 0.4, 0.05, 0.4, 2000, Phaser.Easing.Quintic.Out);
	// emitter.start(false, 5000, 10);
};

SingleLevel1.prototype.update = function() {
	// 기존함수테스트
	this.gameProcess();
	
//	if(this.fBackground_airplane_user.visible){
//		this.fTestWords.x = this.fBackground_airplane_user.position.x + 30;
//		this.fTestWords.y = this.fBackground_airplane_user.y - 10;
//	}
};

SingleLevel1.prototype.setGameState = function(aState) {

	//console.log("setGameState aState " + aState);

	switch (aState) {
	case that.gameConst.GameStateType.ENTER:
		this.setGameReadyAnimation();
		break;
		
	case that.gameConst.GameStateType.START:
		gameState = that.gameConst.GameStateType.START;
		break;
	}
};

// Global Variable
var movTime = 10; // 단어 움직임
var makeTime = 550; // 화면에 단어가 만들어지는 시간차이
var startTime = 100; // 시작되는 시간

var coinWidth = 50; // 코인 한개당 Width
var coinHeight = 20; // 코인 한개당 Height

var gameState; // 게임 현 상태.

var socket;

//var player = {
//		score : 0,		
//		heart : 0
//};

var words = {
		currentWord : 'blank',
		nextWord : 'blank'
};
	

var isUserDrop = false;
var isUserPile = false;
var isUserRolling = false;

var isOtherDrop = false;
var isOtherPile = false;
var isOtherRolling = false;

var isGameStart = false;

var userWordType = 0;
var otherWordType = 0;
var mUserTypingText = "";

var userWordNextType = 0;
var otherWordNextType = 0;

var userStartCnt = 0;
var otherStartCnt = 0;

var userCoinCount = 0;
var otherCoinCount = 0;

var onUserDiv = []; // 현재 화면에서 움직이는 div
var onUserTextField; // 현재화면에서의 텍스트 필드
var onUserTextFieldInput; // 현재화면에서의 인풋텍스트 필드

var onOtherDiv = []; // 현재 화면에서 움직이는 div
var onOtherTextField; // 현재화면에서의 텍스트 필드
var onOtherTextFieldInput; // 현재화면에서의 인풋텍스트 필드

var jsUserStudy = [
				"간",
				"감",
				"갑",
				"값",
				"갓",
				"강",
				"개",
				"객",
				"갸",
				"거",
				"검",
				"겁",
				"것",
				"겉",
				"게",
				"겨",
				"고",
				"골",
				"곰",
				"공",
				"곹",
				"교",
				"구",
				"국",
				"규",
				"그",
				"글",
				"금",
				"기",
				"길",
				"김",
				"깁",
				"깃",
				"꽃",
				"꾀",
				"꿈",
				"꿩",
				"끈",
				"끝",
				"나",
				"난",
				"남",
				"낫",
				"낮",
				"내",
				"냐",
				"너",
				"넌",
				"널",
				"네",
				"녀",
				"노",
				"논",
				"놈",
				"뇨",
				"누",
				"눈",
				"뉴",
				"느",
				"늘",
				"니",
				"님",
				"다",
				"달",
				"닭",
				"담",
				"답",
				"당",
				"닻",
				"대",
				"댁",
				"댐",
				"댜",
				"더",
				"덕",
				"덤",
				"덫",
				"데",
				"뎌",
				"도",
				"돈",
				"돌",
				"동",
				"돛",
				"됴",
				"두",
				"둑",
				"둘",
				"듀",
				"드",
				"들",
				"디",
				"딸",
				"떡",
				"라",
				"래",
				"랴",
				"러",
				"레",
				"려",
				"로",
				"료",
				"루",
				"류",
				"르",
				"리",
				"마",
				"만",
				"말",
				"맘",
				"맛",
				"망",
				"매",
				"맥",
				"먀",
				"머",
				"먹",
				"멋",
				"멍",
				"메",
				"며",
				"모",
				"목",
				"몫",
				"몸",
				"못",
				"몾",
				"묘",
				"무",
				"묵",
				"문",
				"물",
				"뮤",
				"므",
				"미",
				"바",
				"반",
				"발",
				"밤",
				"밥",
				"방",
				"밭",
				"배",
				"백",
				"뱀",
				"뱌",
				"버",
				"번",
				"벌",
				"법",
				"벚",
				"베",
				"벼",
				"별",
				"보",
				"복",
				"볼",
				"봄",
				"뵤",
				"부",
				"북",
				"분",
				"불",
				"붓",
				"뷰",
				"브",
				"비",
				"빗",
				"빚",
				"빛",
				"빵",
				"삑",
				"사",
				"산",
				"살",
				"삼",
				"삽",
				"상",
				"샄",
				"새",
				"샘",
				"샤",
				"서",
				"선",
				"설",
				"섬",
				"성",
				"섶",
				"세",
				"셈",
				"셔",
				"소",
				"속",
				"손",
				"솔",
				"솜",
				"솥",
				"쇼",
				"수",
				"순",
				"술",
				"숨",
				"숯",
				"숲",
				"슈",
				"스",
				"시",
				"신",
				"실",
				"심",
				"십",
				"싹",
				"쌀",
				"아",
				"안",
				"알",
				"암",
				"애",
				"야",
				"어",
				"억",
				"얼",
				"업",
				"에",
				"여",
				"오",
				"옷",
				"옻",
				"요",
				"우",
				"운",
				"울",
				"웁",
				"웃",
				"유",
				"으",
				"음",
				"이",
				"일",
				"입",
				"잎",
				"자",
				"잔",
				"잠",
				"잣",
				"장",
				"재",
				"쟈",
				"저",
				"적",
				"전",
				"절",
				"점",
				"젓",
				"정",
				"젖",
				"제",
				"져",
				"조",
				"좀",
				"종",
				"죠",
				"주",
				"죽",
				"줄",
				"줌",
				"중",
				"쥐",
				"쥬",
				"즈",
				"즉",
				"즙",
				"지",
				"진",
				"짐",
				"집",
				"징",
				"짚",
				"짝",
				"차",
				"찬",
				"참",
				"창",
				"채",
				"책",
				"챠",
				"처",
				"척",
				"천",
				"철",
				"첩",
				"청",
				"체",
				"쳐",
				"초",
				"총",
				"쵸",
				"추",
				"축",
				"춤",
				"츄",
				"츠",
				"치",
				"칠",
				"침",
				"카",
				"칸",
				"캐",
				"캬",
				"커",
				"케",
				"켜",
				"코",
				"콩",
				"쿄",
				"쿠",
				"큐",
				"크",
				"큼",
				"키",
				"타",
				"탈",
				"탕",
				"태",
				"탸",
				"터",
				"턱",
				"털",
				"테",
				"텨",
				"토",
				"통",
				"툐",
				"투",
				"튜",
				"트",
				"틀",
				"틈",
				"티",
				"파",
				"판",
				"팔",
				"팥",
				"패",
				"퍄",
				"퍼",
				"페",
				"펴",
				"포",
				"표",
				"푸",
				"풀",
				"풍",
				"퓨",
				"프",
				"피",
				"하",
				"학",
				"한",
				"함",
				"합",
				"해",
				"핵",
				"햐",
				"허",
				"헌",
				"헤",
				"혀",
				"호",
				"혹",
				"혼",
				"홈",
				"홍",
				"화",
				"효",
				"후",
				"휴",
				"흐",
				"흙",
				"흠",
				"히",
				"힘",
				"가닥",
				"가락",
				"가래",
				"가로",
				"가루",
				"가마",
				"가물",
				"가방",
				"가슴",
				"가시",
				"가위",
				"가을",
				"가장",
				"가족",
				"가죽",
				"가지",
				"갈다",
				"갈대",
				"갈증",
				"갈퀴",
				"감자",
				"감투",
				"갑절",
				"갔다",
				"강가",
				"같다",
				"갚다",
				"개다",
				"개미",
				"개울",
				"개펄",
				"갯벌",
				"거기",
				"거듭",
				"거리",
				"거미",
				"거울",
				"거위",
				"거의",
				"거저",
				"거적",
				"거죽",
				"걱정",
				"건강",
				"건듯",
				"건성",
				"걷다",
				"걸다",
				"걸레",
				"검다",
				"검불",
				"겉장",
				"겨냥",
				"겨울",
				"겪다",
				"겯다",
				"경험",
				"곁길",
				"계산",
				"계집",
				"계획",
				"고개",
				"고기",
				"고니",
				"고동",
				"고랑",
				"고래",
				"고리",
				"고삐",
				"고을",
				"고이",
				"고작",
				"고장",
				"고추",
				"곤충",
				"곧다",
				"골치",
				"곪다",
				"곰보",
				"곱다",
				"곱셈",
				"공룡",
				"공부",
				"공연",
				"공원",
				"과일",
				"과학",
				"괜히",
				"괴다",
				"괴물",
				"교과",
				"구경",
				"구두",
				"구름",
				"구멍",
				"구슬",
				"구실",
				"구유",
				"굳다",
				"굳이",
				"굴비",
				"굵다",
				"굶다",
				"굻다",
				"굽다",
				"궁궐",
				"궂다",
				"귀띔",
				"그냥",
				"그네",
				"그늘",
				"그루",
				"그릇",
				"그림",
				"그물",
				"그저",
				"글귀",
				"글쇠",
				"글씨",
				"글피",
				"긁다",
				"급식",
				"기다",
				"기둥",
				"기린",
				"기반",
				"기본",
				"기분",
				"기슭",
				"기아",
				"기와",
				"기자",
				"기장",
				"기차",
				"기침",
				"긷다",
				"길다",
				"길이",
				"김밥",
				"김장",
				"김치",
				"깁다",
				"깃발",
				"깊다",
				"깊이",
				"까다",
				"까닭",
				"까치",
				"깔깔",
				"깜박",
				"깡통",
				"깨다",
				"꺾다",
				"껄껄",
				"껍질",
				"꼬다",
				"꼬리",
				"꼭지",
				"꽁꽁",
				"꽁지",
				"꽃밭",
				"꽃샘",
				"꽃잎",
				"꾀다",
				"꿀벌",
				"꿈결",
				"끊다",
				"끓다",
				"나라",
				"나무",
				"나비",
				"나이",
				"나중",
				"낚다",
				"낚시",
				"낟알",
				"날개",
				"날다",
				"날림",
				"날씨",
				"날짜",
				"날품",
				"낡은",
				"남다",
				"낫다",
				"낭독",
				"낭자",
				"낭패",
				"낮잠",
				"낱말",
				"낱자",
				"낳다",
				"내각",
				"내기",
				"내면",
				"내복",
				"내용",
				"내일",
				"내정",
				"냄새",
				"냇가",
				"냉담",
				"냉면",
				"냉수",
				"냉큼",
				"냉풍",
				"너머",
				"넓다",
				"네모",
				"녀석",
				"노랑",
				"노래",
				"노루",
				"노름",
				"노릇",
				"노새",
				"노을",
				"녹두",
				"녹말",
				"놀다",
				"놀부",
				"놀이",
				"농구",
				"농부",
				"농장",
				"높이",
				"놓다",
				"누구",
				"누나",
				"누룩",
				"누리",
				"누이",
				"눈곱",
				"눈길",
				"눈물",
				"눈썹",
				"눈치",
				"눕다",
				"느낌",
				"늑골",
				"늑대",
				"늙다",
				"능금",
				"능동",
				"능력",
				"능률",
				"늦게",
				"늦다",
				"늦잠",
				"다리",
				"다시",
				"다음",
				"다짐",
				"다툼",
				"닦다",
				"단골",
				"단원",
				"단짝",
				"단추",
				"단풍",
				"닫다",
				"달걀",
				"달님",
				"달다",
				"달콤",
				"달포",
				"담빡",
				"닷새",
				"당근",
				"대꾸",
				"대낮",
				"대님",
				"대다",
				"대뜸",
				"대롱",
				"대목",
				"대출",
				"대패",
				"더럭",
				"더미",
				"덜컥",
				"덧셈",
				"덧신",
				"덩굴",
				"덮개",
				"도끼",
				"도둑",
				"도랑",
				"도망",
				"도미",
				"도시",
				"도움",
				"도착",
				"도포",
				"독서",
				"돌다",
				"돌림",
				"돕다",
				"동네",
				"동무",
				"동물",
				"동산",
				"동생",
				"동작",
				"돼지",
				"두다",
				"두둑",
				"두루",
				"두메",
				"두엄",
				"둘레",
				"둥둥",
				"둥실",
				"둥지",
				"뒤뜰",
				"뒷짐",
				"듣기",
				"듣다",
				"들것",
				"들다",
				"들쥐",
				"들판",
				"등쌀",
				"따귀",
				"따로",
				"따위",
				"딸기",
				"땅콩",
				"때문",
				"떡보",
				"떡잎",
				"떨기",
				"떼다",
				"뗏목",
				"또래",
				"뚫다",
				"뜨다",
				"뜬눈",
				"뜯다",
				"띠다",
				"라틴",
				"램프",
				"레몬",
				"로마",
				"로봇",
				"루비",
				"마감",
				"마구",
				"마냥",
				"마늘",
				"마디",
				"마리",
				"마을",
				"마음",
				"마주",
				"마중",
				"마차",
				"마치",
				"마침",
				"막내",
				"막다",
				"만남",
				"만세",
				"만화",
				"많다",
				"말굽",
				"말다",
				"말벗",
				"말본",
				"말썽",
				"말판",
				"맑다",
				"망치",
				"맞다",
				"맡다",
				"매다",
				"매듭",
				"매실",
				"매우",
				"매점",
				"매질",
				"맵다",
				"맵시",
				"맷돌",
				"머루",
				"머리",
				"머슴",
				"먹다",
				"먹이",
				"먼지",
				"멀다",
				"멀미",
				"멍멍",
				"메기",
				"메다",
				"메주",
				"며칠",
				"멱살",
				"멸구",
				"명절",
				"모과",
				"모금",
				"모기",
				"모두",
				"모둠",
				"모래",
				"모습",
				"모양",
				"모음",
				"모임",
				"모자",
				"목욕",
				"목표",
				"몰골",
				"몰다",
				"몰래",
				"몸살",
				"몸소",
				"몸짓",
				"못내",
				"몽땅",
				"무게",
				"무덤",
				"무릇",
				"무릎",
				"무리",
				"무엇",
				"무척",
				"묶다",
				"문어",
				"문장",
				"문제",
				"문학",
				"묻다",
				"물감",
				"물건",
				"물결",
				"물길",
				"물레",
				"물음",
				"묽다",
				"미끼",
				"미리",
				"미소",
				"미역",
				"미움",
				"민물",
				"믿다",
				"밀다",
				"밑천",
				"바다",
				"바닥",
				"바둑",
				"바람",
				"바삐",
				"바싹",
				"바지",
				"바퀴",
				"바탕",
				"박꽃",
				"박수",
				"박자",
				"박쥐",
				"반기",
				"반납",
				"반장",
				"반지",
				"받침",
				"발끈",
				"발딱",
				"발목",
				"발뺌",
				"발칵",
				"발표",
				"밝다",
				"밤새",
				"밤톨",
				"밧줄",
				"방법",
				"방울",
				"밭둑",
				"밭일",
				"배웅",
				"배짱",
				"백성",
				"버럭",
				"버릇",
				"버선",
				"번개",
				"벌다",
				"벌레",
				"벌벌",
				"벌판",
				"벚꽃",
				"베개",
				"베다",
				"벼락",
				"벼슬",
				"변비",
				"변신",
				"병풍",
				"보기",
				"보람",
				"보배",
				"볼기",
				"볼모",
				"부리",
				"부자",
				"부피",
				"부호",
				"분량",
				"불길",
				"불끈",
				"붓다",
				"블록",
				"비늘",
				"비듬",
				"비빔",
				"빈말",
				"빌다",
				"빗금",
				"빚다",
				"빡빡",
				"빨다",
				"빨래",
				"빨리",
				"빵빵",
				"빻다",
				"빽빽",
				"뺑뺑",
				"뾰족",
				"뿌리",
				"삐다",
				"사과",
				"사냥",
				"사슴",
				"사자",
				"사진",
				"산말",
				"살갗",
				"살결",
				"살림",
				"살살",
				"살짝",
				"삶다",
				"삼다",
				"삿갓",
				"삿대",
				"상상",
				"상자",
				"상투",
				"새알",
				"새해",
				"색깔",
				"샘터",
				"샛별",
				"생각",
				"생신",
				"생일",
				"생쥐",
				"생활",
				"서울",
				"서점",
				"선물",
				"설날",
				"설명",
				"설빔",
				"세간",
				"세계",
				"세다",
				"세로",
				"세수",
				"셈틀",
				"소개",
				"소경",
				"소고",
				"소금",
				"소름",
				"소리",
				"소화",
				"속다",
				"손뼉",
				"솔숲",
				"솔질",
				"솜씨",
				"솜털",
				"솟다",
				"수고",
				"수다",
				"수달",
				"수레",
				"수박",
				"수수",
				"수술",
				"수업",
				"수저",
				"수풀",
				"수학",
				"숙제",
				"순간",
				"순서",
				"순솦",
				"숨결",
				"숲속",
				"쉬다",
				"쉼표",
				"스님",
				"스승",
				"슬기",
				"슬픔",
				"시간",
				"시골",
				"시늉",
				"시다",
				"시름",
				"시소",
				"시작",
				"식다",
				"신기",
				"신다",
				"신세",
				"싣다",
				"실감",
				"실망",
				"실천",
				"싫다",
				"싫증",
				"심심",
				"심장",
				"싱긋",
				"싸다",
				"싸리",
				"쌌다",
				"쌓다",
				"쌩쌩",
				"써레",
				"썰매",
				"썼다",
				"쏙쏙",
				"쓰다",
				"쓰임",
				"쓸개",
				"씨름",
				"씻다",
				"씽긋",
				"씽씽",
				"아기",
				"아까",
				"아내",
				"아니",
				"아들",
				"아름",
				"아우",
				"아이",
				"아주",
				"아침",
				"아큰",
				"악어",
				"안마",
				"안채",
				"안팎",
				"앓다",
				"앞뜰",
				"앵두",
				"얇다",
				"얇은",
				"양말",
				"양보",
				"어깨",
				"어른",
				"어름",
				"어제",
				"억지",
				"언덕",
				"얹다",
				"얼굴",
				"얼레",
				"얼른",
				"얼음",
				"엄두",
				"엄마",
				"엄살",
				"없다",
				"없어",
				"엉망",
				"여느",
				"여덟",
				"여름",
				"여물",
				"여우",
				"여울",
				"역량",
				"역성",
				"역할",
				"엮다",
				"연극",
				"연방",
				"연습",
				"연장",
				"연필",
				"열다",
				"열매",
				"열흘",
				"엷다",
				"염소",
				"영문",
				"영화",
				"예절",
				"옛날",
				"오뚝",
				"오리",
				"오이",
				"오죽",
				"온갖",
				"온통",
				"옷깃",
				"옹이",
				"완성",
				"왈칵",
				"왕자",
				"외투",
				"요일",
				"용궁",
				"용왕",
				"우리",
				"우엉",
				"우유",
				"우주",
				"윙윙",
				"으레",
				"으쓱",
				"읊다",
				"음식",
				"응달",
				"응원",
				"의자",
				"이끼",
				"이날",
				"이랑",
				"이름",
				"이마",
				"이불",
				"이삭",
				"이슬",
				"이웃",
				"익다",
				"익살",
				"인간",
				"인물",
				"인사",
				"인형",
				"일기",
				"읽기",
				"읽다",
				"잃다",
				"임금",
				"임자",
				"입학",
				"있다",
				"잊다",
				"자갈",
				"자개",
				"자국",
				"자기",
				"자두",
				"자라",
				"자락",
				"자료",
				"자루",
				"자리",
				"자세",
				"자음",
				"자주",
				"자취",
				"자판",
				"작곡",
				"작다",
				"작사",
				"잔디",
				"잔뜩",
				"잔잔",
				"잔치",
				"잔털",
				"잘못",
				"잠결",
				"잠깐",
				"잤다",
				"장가",
				"장갑",
				"장기",
				"장님",
				"장면",
				"장자",
				"잦다",
				"재갈",
				"재료",
				"재미",
				"잿물",
				"잿빛",
				"저것",
				"저기",
				"저녁",
				"저런",
				"저리",
				"저승",
				"저울",
				"저희",
				"적다",
				"적이",
				"절간",
				"절구",
				"절다",
				"절로",
				"젊다",
				"점수",
				"점심",
				"점잔",
				"접다",
				"젓다",
				"정리",
				"젖니",
				"젖다",
				"젖소",
				"제목",
				"제발",
				"제법",
				"제비",
				"제일",
				"조금",
				"조리",
				"조상",
				"조카",
				"족족",
				"졸다",
				"졸음",
				"졸졸",
				"좀더",
				"좁다",
				"종류",
				"종이",
				"좇다",
				"좋다",
				"좌우",
				"좔좔",
				"좽이",
				"죄다",
				"죄악",
				"주낙",
				"주다",
				"주룩",
				"주름",
				"주먹",
				"주변",
				"주의",
				"주춤",
				"죽음",
				"준말",
				"준비",
				"줄기",
				"줄자",
				"줄줄",
				"줍다",
				"중요",
				"쥐다",
				"즈음",
				"지게",
				"지다",
				"지레",
				"지름",
				"지반",
				"지붕",
				"지진",
				"지혜",
				"진자",
				"진작",
				"진창",
				"진흙",
				"질질",
				"짐꾼",
				"짐승",
				"짐작",
				"집게",
				"집다",
				"집안",
				"짓다",
				"짖다",
				"짙다",
				"짚다",
				"짜다",
				"짜임",
				"짜증",
				"짝꿍",
				"짝눈",
				"짠물",
				"짠지",
				"짧다",
				"째다",
				"짹짹",
				"쨍쨍",
				"쩡쩡",
				"쪼다",
				"쪽박",
				"쪽배",
				"쪽빛",
				"쫄딱",
				"쫑긋",
				"쫓다",
				"쬐다",
				"찌개",
				"찌다",
				"찍다",
				"찐빵",
				"찡긋",
				"찢다",
				"찧다",
				"차감",
				"차관",
				"차단",
				"차도",
				"차량",
				"차례",
				"차림",
				"차별",
				"차압",
				"차액",
				"차이",
				"차장",
				"차후",
				"착안",
				"착오",
				"찬미",
				"찬장",
				"찬조",
				"찰나",
				"찰싹",
				"찰흙",
				"참다",
				"참뜻",
				"참말",
				"참새",
				"참여",
				"참외",
				"참회",
				"창고",
				"창공",
				"창살",
				"창포",
				"찾다",
				"채소",
				"채점",
				"책상",
				"책임",
				"처가",
				"처음",
				"척척",
				"철새",
				"첫째",
				"초대",
				"초원",
				"추녀",
				"추다",
				"추석",
				"추위",
				"축구",
				"축하",
				"출발",
				"춥다",
				"치과",
				"치다",
				"치마",
				"친구",
				"친척",
				"칠판",
				"칭찬",
				"칭칭",
				"카드",
				"칼날",
				"캐다",
				"커녕",
				"켜다",
				"켤레",
				"코앞",
				"코피",
				"콤마",
				"콧등",
				"콧물",
				"콩쥐",
				"쾅쾅",
				"쾌락",
				"크기",
				"크다",
				"큰일",
				"큰집",
				"킬킬",
				"타국",
				"타다",
				"타래",
				"타산",
				"타일",
				"타작",
				"타협",
				"탁류",
				"탄광",
				"탄력",
				"탄산",
				"탄생",
				"탄식",
				"탄압",
				"탄원",
				"탄핵",
				"탈고",
				"탈색",
				"탈의",
				"탈주",
				"탈출",
				"탐구",
				"탐심",
				"탐욕",
				"탕진",
				"태고",
				"태동",
				"태만",
				"태몽",
				"태반",
				"태생",
				"태아",
				"태양",
				"태조",
				"택시",
				"탱크",
				"탱탱",
				"털다",
				"털썩",
				"텃밭",
				"텃새",
				"토굴",
				"토기",
				"토끼",
				"토대",
				"토론",
				"토목",
				"토사",
				"토지",
				"톱밥",
				"톱질",
				"통계",
				"통곡",
				"통과",
				"통닭",
				"통례",
				"통보",
				"통상",
				"통신",
				"퇴학",
				"투사",
				"투서",
				"투수",
				"투영",
				"투표",
				"툭툭",
				"퉤퉤",
				"튀다",
				"트다",
				"트림",
				"트집",
				"특공",
				"특대",
				"티끌",
				"파격",
				"파견",
				"파괴",
				"파다",
				"파도",
				"파동",
				"파리",
				"파면",
				"파문",
				"파산",
				"파선",
				"파손",
				"파쇄",
				"파편",
				"판결",
				"판권",
				"판단",
				"판로",
				"판매",
				"판명",
				"판별",
				"판사",
				"팔각",
				"팔다",
				"팔랑",
				"팔목",
				"팔지",
				"팔짱",
				"팔팔",
				"팥죽",
				"패각",
				"패군",
				"패권",
				"패기",
				"패다",
				"패물",
				"패배",
				"팽창",
				"펄쩍",
				"펌프",
				"펴다",
				"편견",
				"편도",
				"편성",
				"편애",
				"편지",
				"편집",
				"포기",
				"포대",
				"포도",
				"포목",
				"포부",
				"포수",
				"포옹",
				"포학",
				"포함",
				"폭동",
				"폭등",
				"폭력",
				"폭로",
				"폭우",
				"폭음",
				"폭탄",
				"폭포",
				"폭풍",
				"퐁당",
				"표구",
				"표기",
				"표백",
				"표범",
				"표정",
				"표현",
				"풀다",
				"풀무",
				"풀밭",
				"풀숲",
				"품격",
				"품다",
				"품명",
				"품목",
				"품사",
				"품삯",
				"품성",
				"품위",
				"품질",
				"품행",
				"풋볼",
				"풍경",
				"풍년",
				"풍덩",
				"풍랑",
				"풍선",
				"풍습",
				"풍자",
				"풍토",
				"피곤",
				"피난",
				"피리",
				"피복",
				"피부",
				"피신",
				"피폐",
				"핀잔",
				"필답",
				"필사",
				"필생",
				"필승",
				"필연",
				"필요",
				"필적",
				"필통",
				"핏대",
				"핑계",
				"핑핑",
				"하나",
				"하루",
				"하마",
				"하품",
				"학교",
				"학습",
				"한결",
				"한길",
				"한낱",
				"한때",
				"한몫",
				"한술",
				"한숨",
				"한옆",
				"한잠",
				"한참",
				"한철",
				"핥다",
				"함빡",
				"함석",
				"함지",
				"해님",
				"해적",
				"해죽",
				"햅쌀",
				"햇볕",
				"햇살",
				"행동",
				"행복",
				"행주",
				"허리",
				"허물",
				"허울",
				"헐다",
				"형님",
				"호미",
				"호박",
				"호수",
				"호통",
				"홀랑",
				"홀몸",
				"홀씨",
				"화분",
				"환호",
				"활용",
				"활짝",
				"황소",
				"횃불",
				"훑다",
				"훨씬",
				"흉내",
				"흐림",
				"흠씬",
				"흥부",
				"흰색",
				"흰자",
				"히죽",
				"힘껏",
				"힘살",
				"가노라",
				"가누다",
				"가늘다",
				"가두다",
				"가락지",
				"가랑눈",
				"가랑비",
				"가랑잎",
				"가르다",
				"가리다",
				"가만히",
				"가시다",
				"가엾다",
				"가엾은",
				"가지다",
				"가풀막",
				"갈기다",
				"갈림길",
				"갈매기",
				"갈무리",
				"갈묻이",
				"갈수록",
				"감돌다",
				"감싸다",
				"감추다",
				"갑자기",
				"값어치",
				"값지다",
				"갓나다",
				"갓난애",
				"강아지",
				"개구리",
				"개나리",
				"개머리",
				"개키다",
				"갯마을",
				"거꾸로",
				"거누다",
				"거닐다",
				"거두다",
				"거룻배",
				"거르다",
				"거머리",
				"거멓다",
				"거문고",
				"거북이",
				"거세다",
				"거짓말",
				"거치다",
				"거칠다",
				"거푸집",
				"건너다",
				"건널목",
				"건더기",
				"건지다",
				"걷잡다",
				"걸리다",
				"걸맞다",
				"걸음마",
				"걸치다",
				"검둥이",
				"겉대중",
				"겉돌다",
				"겉치레",
				"게우다",
				"겨누다",
				"겨루다",
				"겨우내",
				"겪은일",
				"견디다",
				"겹겹이",
				"겹치다",
				"고갯짓",
				"고구마",
				"고깃배",
				"고대로",
				"고되다",
				"고드름",
				"고라니",
				"고르다",
				"고무래",
				"고무줄",
				"고사리",
				"고양이",
				"고운말",
				"고인돌",
				"고치다",
				"고프다",
				"곤하다",
				"골고루",
				"곰방대",
				"곰팡이",
				"공놀이",
				"광주리",
				"괜찮아",
				"괴로움",
				"구기다",
				"구두쇠",
				"구르다",
				"군것질",
				"굳세다",
				"굼벵이",
				"귀고리",
				"귀엣말",
				"귀엽다",
				"귀찮다",
				"귤나무",
				"그까짓",
				"그나마",
				"그다지",
				"그대로",
				"그래서",
				"그러나",
				"그러면",
				"그르다",
				"그리다",
				"그리움",
				"그림자",
				"그림책",
				"그림판",
				"그립다",
				"그믐날",
				"그사이",
				"그을다",
				"그치다",
				"글쓴이",
				"금요일",
				"금잔디",
				"기대다",
				"기러기",
				"기르다",
				"기뻐요",
				"기쁘다",
				"기울다",
				"길들다",
				"길잡이",
				"김칫국",
				"까마귀",
				"까맣다",
				"까불다",
				"까치눈",
				"깍두기",
				"깎았다",
				"깔때기",
				"깔보다",
				"깜깜한",
				"깨닫다",
				"깨달음",
				"깨물다",
				"꺼내다",
				"꺼리다",
				"껍데기",
				"껴들다",
				"껴안다",
				"꼬끼오",
				"꼬이다",
				"꼬투리",
				"꽁무니",
				"꽃구름",
				"꽹과리",
				"꾀꼬리",
				"꾸러미",
				"꾸지람",
				"끔찍한",
				"끝끝내",
				"끼우다",
				"끼치다",
				"나그네",
				"나날이",
				"나누다",
				"나들다",
				"나들이",
				"나란히",
				"나르기",
				"나무꾼",
				"나뭇잎",
				"나쁘다",
				"나오다",
				"나이테",
				"나홀로",
				"나흗날",
				"낚시질",
				"낟가리",
				"날개옷",
				"날뛰다",
				"날래다",
				"날짐승",
				"남달리",
				"낮추다",
				"낮춤말",
				"낯설다",
				"낱낱이",
				"내각원",
				"내구력",
				"내닫다",
				"내리다",
				"내밀다",
				"내뿜다",
				"내젓다",
				"내주다",
				"내쫓다",
				"내키다",
				"냉수욕",
				"냉잇국",
				"냉장고",
				"너구리",
				"너르다",
				"넋두리",
				"넌지시",
				"널뛰기",
				"넘치다",
				"네거리",
				"노다지",
				"노란색",
				"노래책",
				"노랫말",
				"노략질",
				"노리다",
				"노여움",
				"녹지다",
				"놀라다",
				"놀리다",
				"놀이터",
				"누르다",
				"누비다",
				"누에섶",
				"눈가림",
				"눈동자",
				"눈맵시",
				"눈멀다",
				"눈보라",
				"눈사람",
				"눈송이",
				"느끼다",
				"느낌표",
				"느리다",
				"늘리다",
				"늘이다",
				"능동태",
				"늦추다",
				"다갈색",
				"다달이",
				"다람쥐",
				"다림질",
				"다물다",
				"다지다",
				"다치다",
				"다투다",
				"닥나무",
				"닦는다",
				"달가닥",
				"달구지",
				"달라다",
				"달라진",
				"달리기",
				"달리다",
				"달맞이",
				"달팽이",
				"닮은꼴",
				"담그다",
				"당기다",
				"당차다",
				"닿소리",
				"대나무",
				"대들다",
				"대중말",
				"더구나",
				"더럽다",
				"더불어",
				"더없이",
				"더욱이",
				"덜되다",
				"덤비다",
				"덩달아",
				"덮치다",
				"도가니",
				"도깨비",
				"도라지",
				"도련님",
				"도리깨",
				"도마뱀",
				"도막말",
				"도서관",
				"도시락",
				"도토리",
				"도화지",
				"독수리",
				"돋구다",
				"돋보기",
				"돌다리",
				"돌리다",
				"돌맞이",
				"돌멩이",
				"돌보다",
				"돌부처",
				"돌잡이",
				"돗자리",
				"동나다",
				"동물원",
				"동시집",
				"동아줄",
				"동영상",
				"동치미",
				"동화책",
				"돛단배",
				"되뇌다",
				"되도록",
				"되묻다",
				"되살다",
				"되새김",
				"된소리",
				"됨됨이",
				"두꺼비",
				"두꺼운",
				"두껍다",
				"두더지",
				"두둥실",
				"두레박",
				"두려움",
				"두루미",
				"두텁다",
				"둥글다",
				"둥우리",
				"뒤범벅",
				"뒤엎다",
				"뒤통수",
				"뒷골목",
				"뒷받침",
				"뒷부분",
				"뒷사람",
				"뒹굴다",
				"드디어",
				"드리다",
				"드물다",
				"드세다",
				"들끓다",
				"들뜨다",
				"들르다",
				"들볶다",
				"들추다",
				"들키다",
				"등지다",
				"디디다",
				"따갑다",
				"따다닥",
				"따르다",
				"따옴표",
				"따지다",
				"딴생각",
				"딸리다",
				"땅거미",
				"땅덩이",
				"땅바닥",
				"때때로",
				"떠나다",
				"떠들다",
				"떠보다",
				"떨치다",
				"똑같다",
				"뛰놀다",
				"뛰어난",
				"뜬구름",
				"뜯기다",
				"뜻글자",
				"뜻밖에",
				"레슬링",
				"레이다",
				"마구간",
				"마굿간",
				"마나님",
				"마당쇠",
				"마르다",
				"마름질",
				"마무리",
				"마술사",
				"마을일",
				"마음껏",
				"마음씨",
				"마지막",
				"마치다",
				"마침표",
				"막대기",
				"막바지",
				"막히다",
				"만들다",
				"만만함",
				"만지다",
				"만화책",
				"맏아들",
				"말고삐",
				"말놀이",
				"말다툼",
				"말리다",
				"말머리",
				"말버릇",
				"말솜씨",
				"말주변",
				"말풍선",
				"말하기",
				"말하다",
				"맛들다",
				"맛보다",
				"망나니",
				"망아지",
				"망치다",
				"맞들다",
				"맞먹다",
				"맞붙다",
				"맞장구",
				"맞추다",
				"맞춰서",
				"맡기다",
				"매기다",
				"매달다",
				"매섭다",
				"매이다",
				"맨머리",
				"맨주먹",
				"맴돌다",
				"맹꽁이",
				"맺히다",
				"머금다",
				"머나먼",
				"머리맡",
				"먹구름",
				"먹었다",
				"먼발치",
				"멈추다",
				"멋대로",
				"멋쟁이",
				"멋지다",
				"멍청이",
				"멍하다",
				"메뚜기",
				"메아리",
				"메우다",
				"멧돼지",
				"며느리",
				"멱감다",
				"모내기",
				"모닥불",
				"모래성",
				"모래찜",
				"모롱이",
				"모르다",
				"모서리",
				"모시다",
				"모으다",
				"모조리",
				"모질다",
				"모쪼록",
				"모처럼",
				"모퉁이",
				"목덜미",
				"목도리",
				"목소리",
				"몰리다",
				"몸뚱이",
				"몸서리",
				"못난이",
				"못자리",
				"몽둥이",
				"무겁다",
				"무더기",
				"무더위",
				"무디다",
				"무르다",
				"무서움",
				"무섭다",
				"무지개",
				"묶는다",
				"문방구",
				"물고기",
				"물동이",
				"물방아",
				"물벼락",
				"물음표",
				"물장난",
				"뭉개다",
				"미나리",
				"미닫이",
				"미덥다",
				"미루다",
				"미치다",
				"민들레",
				"밀기울",
				"밀리다",
				"밑거름",
				"밑둥치",
				"바가지",
				"바구니",
				"바꾸다",
				"바나나",
				"바느질",
				"바둑이",
				"바라다",
				"바라지",
				"바래다",
				"바르다",
				"바르르",
				"바쁘다",
				"바치다",
				"바탕글",
				"박히다",
				"반갑다",
				"반드시",
				"반상회",
				"받들다",
				"받치다",
				"받히다",
				"발가락",
				"발돋움",
				"발바리",
				"발벗다",
				"발소리",
				"발자국",
				"방그레",
				"방아쇠",
				"배기다",
				"배우다",
				"배춧국",
				"뱃노래",
				"버리다",
				"버티다",
				"벅차다",
				"번데기",
				"벼랑길",
				"변변히",
				"볏가리",
				"병아리",
				"보랏빛",
				"보름달",
				"보세요",
				"보자기",
				"보조개",
				"보태다",
				"복숭아",
				"볶음밥",
				"봉오리",
				"부르다",
				"부스럼",
				"부치다",
				"북새통",
				"불리다",
				"불붙다",
				"불조심",
				"붉히다",
				"붐비다",
				"붙이다",
				"비구름",
				"비기다",
				"비둘기",
				"비뚜로",
				"비로소",
				"비비여",
				"비우다",
				"비치다",
				"비키다",
				"비틀다",
				"빗맞다",
				"빗방울",
				"빠르기",
				"빠르다",
				"빨간색",
				"빼내다",
				"빼앗다",
				"뻐기다",
				"뻔하다",
				"뽀얗다",
				"뽐내다",
				"뽕나무",
				"뿔뿔이",
				"삐죽이",
				"사나이",
				"사납다",
				"사다리",
				"사르다",
				"삭이다",
				"살얼음",
				"살찌다",
				"삼가다",
				"삼키다",
				"삽살개",
				"새김질",
				"새나라",
				"새바람",
				"새색시",
				"새우다",
				"색종이",
				"생김새",
				"생소한",
				"서럽다",
				"서리다",
				"서슴다",
				"섞었다",
				"선생님",
				"선하다",
				"설레다",
				"섬기다",
				"성나다",
				"세우다",
				"소나기",
				"소나무",
				"소낙비",
				"소르르",
				"소방관",
				"소방서",
				"소쿠리",
				"손가락",
				"손꼽다",
				"손놓다",
				"손바닥",
				"손버릇",
				"손수건",
				"손아래",
				"손잡이",
				"솔바람",
				"솜사탕",
				"송사리",
				"송아지",
				"쇠고기",
				"쇠사슬",
				"수세미",
				"수줍다",
				"숨기다",
				"숱하다",
				"쉽사리",
				"스르르",
				"스스로",
				"스치다",
				"슬며시",
				"시궁창",
				"시냇가",
				"시들다",
				"시리다",
				"신나다",
				"실리다",
				"실마리",
				"실없다",
				"실핏줄",
				"심부름",
				"싱겁다",
				"싸안다",
				"쌀가게",
				"쏠리다",
				"쓰리다",
				"아가씨",
				"아궁이",
				"아깝다",
				"아끼다",
				"아낙네",
				"아드님",
				"아래뜸",
				"아뢰다",
				"아리다",
				"아리랑",
				"아버님",
				"아버지",
				"아쉽다",
				"아우성",
				"아울러",
				"아이가",
				"아이고",
				"아저씨",
				"아프다",
				"악물다",
				"악쓰다",
				"안간힘",
				"안기다",
				"안내문",
				"안마당",
				"안전띠",
				"알리다",
				"알맞다",
				"알차다",
				"앙갚음",
				"앞잡이",
				"앞치마",
				"애달다",
				"애쓰다",
				"야물다",
				"얄밉다",
				"얕잡다",
				"어기다",
				"어느덧",
				"어둡다",
				"어렵다",
				"어리광",
				"어리다",
				"어린이",
				"어림셈",
				"어머나",
				"어머니",
				"어머님",
				"어버이",
				"어여쁜",
				"어이구",
				"억지로",
				"언짢다",
				"언청이",
				"얹히다",
				"얼룩소",
				"얼마나",
				"얽히다",
				"엉겁결",
				"엉터리",
				"엊그제",
				"에누리",
				"여닫다",
				"여러분",
				"여름내",
				"여리다",
				"여물다",
				"여미다",
				"여운다",
				"여위다",
				"여쭈다",
				"여태껏",
				"열없다",
				"엿보다",
				"영양소",
				"예쁘다",
				"오가다",
				"오누이",
				"오도독",
				"오랑캐",
				"오로지",
				"오르막",
				"오리다",
				"오소리",
				"오징어",
				"오히려",
				"옥수수",
				"옥토끼",
				"올가미",
				"올빼미",
				"올챙이",
				"옮기다",
				"옳은일",
				"옷차림",
				"옹달샘",
				"외롭다",
				"요리사",
				"요즈음",
				"우기다",
				"우리말",
				"우짖다",
				"우체국",
				"운동장",
				"운동회",
				"울리다",
				"울타리",
				"움트다",
				"웃기다",
				"웅덩이",
				"원숭이",
				"웬만큼",
				"윗사람",
				"유난히",
				"윷가락",
				"으뜸꼴",
				"으르다",
				"이기다",
				"이끌다",
				"이나마",
				"이다음",
				"이따위",
				"이렇듯",
				"이맛살",
				"이바지",
				"이야기",
				"이영차",
				"이윽고",
				"이튿날",
				"일기장",
				"일부러",
				"일자리",
				"일찍이",
				"일컫다",
				"임금님",
				"잇닿다",
				"자라다",
				"자르다",
				"자장가",
				"자전거",
				"자치기",
				"작은말",
				"잔등이",
				"잔소리",
				"잘리다",
				"잠그다",
				"잠들다",
				"잠자다",
				"잠자리",
				"잡치다",
				"잣나무",
				"장난감",
				"장사치",
				"장아찌",
				"재봉사",
				"재채기",
				"잿더미",
				"쟁그랑",
				"저같이",
				"저고리",
				"저나마",
				"저녁때",
				"저녁밥",
				"저다지",
				"저렇다",
				"저리다",
				"저마다",
				"저만큼",
				"저물다",
				"저울질",
				"저울추",
				"저절로",
				"적히다",
				"전나무",
				"절구통",
				"절이다",
				"젊은이",
				"점잖다",
				"접히다",
				"젓가락",
				"정어리",
				"정하다",
				"젖히다",
				"제대로",
				"제비꽃",
				"제자리",
				"제치다",
				"조르다",
				"조리다",
				"조바심",
				"조약돌",
				"조지다",
				"족제비",
				"졸리다",
				"졸이다",
				"좀먹다",
				"좀처럼",
				"좁히다",
				"종다리",
				"종달새",
				"종아리",
				"종이쪽",
				"좋아요",
				"주르르",
				"주름살",
				"주리다",
				"주머니",
				"주사위",
				"주인공",
				"주황색",
				"죽이다",
				"준비물",
				"줄거리",
				"줄넘기",
				"줄무늬",
				"줄이다",
				"쥐구멍",
				"즐겁다",
				"즐기다",
				"지게꾼",
				"지그시",
				"지나다",
				"지내다",
				"지니다",
				"지르다",
				"지름길",
				"지우개",
				"지우다",
				"지치다",
				"지키다",
				"지팡이",
				"지피다",
				"진달래",
				"진저리",
				"진흙집",
				"질그릇",
				"질기다",
				"질리다",
				"짐수레",
				"집오리",
				"짓궂다",
				"짓밟다",
				"짜개다",
				"짜임새",
				"짝맞다",
				"짝짜꿍",
				"째리다",
				"째지다",
				"쪼개다",
				"쪽마루",
				"쭉정이",
				"찌꺼기",
				"찡하다",
				"차갑다",
				"차라리",
				"차례상",
				"착하다",
				"찬바람",
				"참고서",
				"참관인",
				"참기름",
				"참나무",
				"참되다",
				"참을성",
				"참정권",
				"창세기",
				"채송화",
				"채식가",
				"채우다",
				"책하다",
				"천자문",
				"천천히",
				"철나다",
				"철없다",
				"첫마디",
				"첫솜씨",
				"첫인상",
				"초겨울",
				"촌사람",
				"추가된",
				"축구공",
				"축이다",
				"춤추다",
				"취나물",
				"치닫다",
				"치르다",
				"치밀다",
				"치받다",
				"치솟다",
				"치우다",
				"치이다",
				"치키다",
				"칸막이",
				"칼국수",
				"캥거루",
				"컴퓨터",
				"켕기다",
				"코끼리",
				"코뚜레",
				"콤파스",
				"콧구멍",
				"콧노래",
				"콩나물",
				"크레용",
				"큰기침",
				"큰소리",
				"키다리",
				"키우다",
				"타박상",
				"타방면",
				"타임스",
				"타자기",
				"탐내다",
				"탐험대",
				"태우다",
				"태평양",
				"택하다",
				"터지다",
				"턱없다",
				"테두리",
				"토마토",
				"토벌대",
				"토사물",
				"토요일",
				"토하다",
				"통계표",
				"통나무",
				"통신부",
				"통신사",
				"통신원",
				"통틀어",
				"투기명",
				"투기열",
				"툭하면",
				"퉁기다",
				"특허품",
				"틀리다",
				"틈나다",
				"틈타다",
				"틈틈이",
				"틔우다",
				"파내다",
				"파드득",
				"파란색",
				"파랑새",
				"파랗다",
				"파묻다",
				"파충류",
				"파하다",
				"판단력",
				"판매부",
				"판매인",
				"판매점",
				"팔리다",
				"팔면체",
				"팔베개",
				"패랭이",
				"팽창성",
				"퍼내다",
				"퍼붓다",
				"퍼지다",
				"페이지",
				"편도선",
				"펼치다",
				"포도당",
				"포도원",
				"포도주",
				"포르르",
				"포물선",
				"포유류",
				"포장지",
				"폭주다",
				"푸드득",
				"푸르다",
				"풀그림",
				"풀리다",
				"풍경화",
				"풍뎅이",
				"피나무",
				"피눈물",
				"피로연",
				"피아노",
				"피우다",
				"피차간",
				"필기장",
				"핏줄기",
				"하기야",
				"하나지",
				"하느님",
				"하룻밤",
				"하물며",
				"하얗다",
				"하여금",
				"하였다",
				"하지만",
				"하찮다",
				"한가위",
				"한가을",
				"한걱정",
				"한겨울",
				"한국인",
				"한글날",
				"한더위",
				"한마디",
				"한마리",
				"한바퀴",
				"한바탕",
				"한차례",
				"할머니",
				"할미꽃",
				"할퀴다",
				"함박꽃",
				"함박눈",
				"함부로",
				"함지박",
				"항아리",
				"해내다",
				"해돋이",
				"해먹다",
				"햇곡식",
				"햇과일",
				"허깨비",
				"허드레",
				"허리춤",
				"허물다",
				"허투루",
				"헉헉헉",
				"헐벗다",
				"헛소리",
				"헤치다",
				"헤프다",
				"헹가래",
				"헹구다",
				"호랑이",
				"혼잣말",
				"홀소리",
				"홑이불",
				"화나요",
				"환하다",
				"후두두",
				"후루룩",
				"후비다",
				"훔치다",
				"훤하다",
				"휘덮다",
				"휘말다",
				"휘파람",
				"휩싸다",
				"흉보다",
				"흐르다",
				"흐리다",
				"흔하다",
				"흘기다",
				"흘리다",
				"힘겹다",
				"힘들다",
				"힘세다",
				"힘입다",
				"힘주다",
				"힘차게",
				"가게놀이",
				"가나다라",
				"가냘프다",
				"가다듬다",
				"가득하다",
				"가뜬하다",
				"가라사대",
				"가라앉다",
				"가련하다",
				"가로막다",
				"가로채다",
				"가르치다",
				"가시나무",
				"가시덤불",
				"가을걷이",
				"가을보리",
				"거룩하다",
				"거름더미",
				"거리끼다",
				"거북하다",
				"거스르다",
				"거침없다",
				"건드리다",
				"건몸달다",
				"건방지다",
				"건사하다",
				"걷어차다",
				"걸터앉다",
				"게으르다",
				"겨드랑이",
				"겨우살이",
				"겸사겸사",
				"곁방살이",
				"계면쩍다",
				"고달프다",
				"고대하다",
				"고루고루",
				"고소하다",
				"고요하다",
				"곱사등이",
				"공기놀이",
				"과일나무",
				"교통안전",
				"구겨지다",
				"구부리다",
				"구석구석",
				"구석지다",
				"구수하다",
				"구슬프다",
				"군데군데",
				"굽이굽이",
				"궁금하다",
				"귀뚜라미",
				"귀머거리",
				"귀밑머리",
				"귀양살다",
				"그득하다",
				"그러니까",
				"그럭저럭",
				"그림일기",
				"그만두다",
				"그만하다",
				"그윽하다",
				"그지없다",
				"글썽하다",
				"기나길다",
				"기다리다",
				"기대하다",
				"기름지다",
				"기침감기",
				"길쭉길쭉",
				"길쭉하다",
				"깃들이다",
				"까다롭다",
				"까닥이다",
				"까딱없다",
				"까라지다",
				"까매지다",
				"까물까물",
				"까부르다",
				"깍듯하다",
				"깜찍하다",
				"깡충깡충",
				"깨끗하다",
				"깨뜨리다",
				"깨우치다",
				"꺼림하다",
				"꼼질꼼질",
				"꾸준하다",
				"끌어안다",
				"끝말잇기",
				"나다니다",
				"나뒹굴다",
				"나라글자",
				"나란하다",
				"나무딸기",
				"나무라다",
				"나뭇가지",
				"나부끼다",
				"나아가다",
				"나타나다",
				"나풀나풀",
				"낙낙하다",
				"남자아이",
				"납작하다",
				"낭떠러지",
				"내다보다",
				"내두르다",
				"내려가다",
				"내리닫다",
				"내리치다",
				"내버리다",
				"내통하다",
				"내한하다",
				"냉수마찰",
				"너그럽다",
				"너울너울",
				"너털웃음",
				"널찍하다",
				"넘어가다",
				"넝마주이",
				"노랑나비",
				"노랫가락",
				"노려보다",
				"놀이공원",
				"높다랗다",
				"뇌까리다",
				"눈물짓다",
				"눈부시다",
				"뉘엿뉘엿",
				"뉘우치다",
				"느릿느릿",
				"느슨하다",
				"느티나무",
				"늘어놓다",
				"늘어지다",
				"늠름하다",
				"능가하다",
				"능통하다",
				"다가서다",
				"다감하다",
				"다능하다",
				"다다다다",
				"다다르다",
				"다닥다닥",
				"다부지다",
				"다스리다",
				"단단하다",
				"단춧구멍",
				"달달달달",
				"달아나다",
				"달콤하다",
				"대견하다",
				"대롱대롱",
				"대바구니",
				"대부분의",
				"더덕더덕",
				"더듬더듬",
				"더부살이",
				"던져두다",
				"덜컹덜컹",
				"데굴데굴",
				"도란도란",
				"도톰하다",
				"독특하다",
				"돋아나다",
				"돌이키다",
				"동그라미",
				"동냥아치",
				"되새기다",
				"두고두고",
				"두들기다",
				"두루마기",
				"두리둥실",
				"둘러보다",
				"뒤뚱뒤뚱",
				"뒤섞이다",
				"뒤적뒤적",
				"뒷바라지",
				"드러눕다",
				"드리우다",
				"들이받다",
				"듬뿍하다",
				"듬성듬성",
				"디딜방아",
				"따뜻하다",
				"따분하다",
				"따스하다",
				"딱따구리",
				"딱딱하다",
				"떠다니다",
				"떠받치다",
				"떠벌리다",
				"떠올리다",
				"떡갈나무",
				"떳떳하다",
				"또렷하다",
				"똑똑하다",
				"뚜렷하다",
				"뛰어나다",
				"뜨끈뜨끈",
				"뜨뜻하다",
				"뜯어먹다",
				"띄엄띄엄",
				"르네상스",
				"마감하다",
				"마땅하다",
				"마룻바닥",
				"마음가짐",
				"마음대로",
				"마찬가지",
				"만만하다",
				"말괄량이",
				"말똥구리",
				"말미암다",
				"말쑥하다",
				"망설이다",
				"매만지다",
				"매부리코",
				"매스껍다",
				"매운바람",
				"매정하다",
				"매한가지",
				"맨드라미",
				"머무르다",
				"머쓱하다",
				"멀쩡하다",
				"메마르다",
				"메스껍다",
				"모름지기",
				"목마르다",
				"몰려가다",
				"몽글몽글",
				"무너지다",
				"무당벌레",
				"무던하다",
				"무럭무럭",
				"무르녹다",
				"무찌르다",
				"문지르다",
				"물들이다",
				"물러가다",
				"물렁물렁",
				"물레방아",
				"물리치다",
				"물밀듯이",
				"물오르다",
				"뭉게뭉게",
				"미꾸라지",
				"미끄럼틀",
				"미끈하다",
				"미안해요",
				"미어지다",
				"민며느리",
				"민속놀이",
				"밋밋하다",
				"바글바글",
				"바라보다",
				"바람개비",
				"바람잡이",
				"바랍니다",
				"바로잡다",
				"바야흐로",
				"바작바작",
				"바지랑대",
				"바특하다",
				"박달나무",
				"반반하다",
				"반짝반짝",
				"반짝이다",
				"발가숭이",
				"발개지다",
				"발름발름",
				"방글방글",
				"방물장수",
				"방정맞다",
				"방해하다",
				"버드나무",
				"번득이다",
				"벌거숭이",
				"벌렁벌렁",
				"벌어지다",
				"벗나가다",
				"벙글벙글",
				"보금자리",
				"보릿고개",
				"보살피다",
				"보아주다",
				"복슬복슬",
				"본체만체",
				"부글부글",
				"부끄럽다",
				"부닥치다",
				"부대끼다",
				"부드럽다",
				"부듯하다",
				"부딪치다",
				"부러워요",
				"부러지다",
				"부려먹다",
				"부서지다",
				"부스러기",
				"북돋우다",
				"불쌍하다",
				"불어넣다",
				"비롯하다",
				"비사치기",
				"비슷비슷",
				"빙글빙글",
				"빙긋하다",
				"빤빤하다",
				"빼쭉하다",
				"뻐근하다",
				"뼈아프다",
				"뽀글뽀글",
				"뾰족뾰족",
				"뾰족하다",
				"뿌리치다",
				"삐죽하다",
				"사각사각",
				"사용하다",
				"사이좋다",
				"삯바느질",
				"산들바람",
				"산뜻하다",
				"살그머니",
				"살랑살랑",
				"살펴보다",
				"상냥하다",
				"새겨듣다",
				"새끼치다",
				"새침데기",
				"새카맣다",
				"색칠하기",
				"색칠하다",
				"생일잔치",
				"서두르다",
				"서로서로",
				"서리맞다",
				"서투르다",
				"선선하다",
				"설레설레",
				"설설기다",
				"성가시다",
				"소리치다",
				"소매치기",
				"속삭이다",
				"속상해요",
				"송이송이",
				"수수께끼",
				"수수하다",
				"숙덕이다",
				"술래잡기",
				"숨바꼭질",
				"스르스륵",
				"슬그머니",
				"슬금슬금",
				"슬퍼하다",
				"시골뜨기",
				"시끄럽다",
				"시달리다",
				"시새우다",
				"시시하다",
				"시집가다",
				"싯누렇다",
				"싱글벙글",
				"싱글싱글",
				"싱숭생숭",
				"싶어하다",
				"싹싹하다",
				"쌀쌀하다",
				"쌔근쌔근",
				"썩둑썩둑",
				"썰매타기",
				"쏘다니다",
				"쑥스럽다",
				"쓰다듬다",
				"쓰레받기",
				"쓱싹하다",
				"쓸쓸하다",
				"씩씩하다",
				"아기자기",
				"아늑하다",
				"아니꼽다",
				"아랫사람",
				"아롱아롱",
				"아름답다",
				"아리따운",
				"아무쪼록",
				"아슬아슬",
				"아주머니",
				"아지랑이",
				"아직까지",
				"아찔하다",
				"안타깝다",
				"앉은뱅이",
				"알뜰하다",
				"알려주다",
				"알아채다",
				"앙상하다",
				"앙큼하다",
				"앞지르다",
				"애매하다",
				"애틋하다",
				"야옹야옹",
				"약속시간",
				"얌전하다",
				"어깨동무",
				"어둑어둑",
				"어리둥절",
				"어리석다",
				"어림없다",
				"어색하다",
				"어설프다",
				"어여쁘다",
				"어우르다",
				"어울리다",
				"어지럽다",
				"어쩌다가",
				"어처구니",
				"억누르다",
				"언덕빼기",
				"언제든지",
				"얻어맞다",
				"얼빠지다",
				"얽매이다",
				"업신여김",
				"엇갈리다",
				"엉금엉금",
				"엉뚱하다",
				"엉성하다",
				"엎드리다",
				"에워가다",
				"여기저기",
				"여러가지",
				"여무지다",
				"여자아이",
				"역학놀이",
				"연주회장",
				"오늘따라",
				"오들오들",
				"오락가락",
				"오래오래",
				"오막살이",
				"오목하다",
				"오므리다",
				"오붓하다",
				"오순도순",
				"오슬오슬",
				"오줌싸개",
				"오지그릇",
				"올망졸망",
				"옴츠리다",
				"옹긋쫑긋",
				"옹기옹기",
				"옹기종기",
				"와글와글",
				"와들와들",
				"우거지다",
				"우두머리",
				"우두커니",
				"우렁차다",
				"울긋불긋",
				"울먹이다",
				"울부짖다",
				"울음소리",
				"움직이다",
				"움츠리다",
				"움켜잡다",
				"웃음거리",
				"웅그리다",
				"웅크리다",
				"으슥하다",
				"이것저것",
				"이글이글",
				"이럭저럭",
				"이룩하다",
				"이리저리",
				"이슥하다",
				"이야기책",
				"이어지다",
				"익숙하다",
				"일깨우다",
				"일러두기",
				"일어서다",
				"일으키다",
				"읽어주다",
				"잇따르다",
				"자그마치",
				"자나깨나",
				"자리잡다",
				"자신있다",
				"잔잔하다",
				"잘라먹다",
				"잘래잘래",
				"잠꾸러기",
				"재빠르다",
				"재우치다",
				"저녁노을",
				"저러하다",
				"저지르다",
				"절벅절벅",
				"제기차기",
				"제멋대로",
				"제재하다",
				"조개무지",
				"조것만큼",
				"조그맣다",
				"조마조마",
				"조물조물",
				"조심하다",
				"조아리다",
				"종종걸음",
				"주고받다",
				"주둥아리",
				"주렁주렁",
				"주룩주룩",
				"주먹구구",
				"주무르다",
				"주무시다",
				"줄기차다",
				"줄다리기",
				"줄달음질",
				"줄어지다",
				"쥐며느리",
				"쥐어뜯다",
				"쥐어박다",
				"지글지글",
				"지껄이다",
				"지나가다",
				"지나치다",
				"지느러미",
				"지루하다",
				"지새우다",
				"지어내다",
				"지저귀다",
				"지절대다",
				"지켜보다",
				"지푸라기",
				"지혜롭다",
				"질겁하다",
				"질척하다",
				"짊어지다",
				"짓누르다",
				"짓밟히다",
				"짜릿짜릿",
				"짤랑짤랑",
				"짤막하다",
				"짭짤하다",
				"쩌렁쩌렁",
				"쩔쩔매다",
				"쪼그리다",
				"쪼들리다",
				"쪼아먹다",
				"쫑긋쫑긋",
				"쭈그리다",
				"쭈글쭈글",
				"쭈뼛하다",
				"찌그리다",
				"찌르레기",
				"찌푸리다",
				"찡그리다",
				"차곡차곡",
				"차분하다",
				"차츰차츰",
				"착복하다",
				"착실하다",
				"착용하다",
				"찬란하다",
				"참고하다",
				"참담하다",
				"참신하다",
				"채식주의",
				"채용시험",
				"채취하다",
				"철모르다",
				"청개구리",
				"체육시간",
				"쳐다보다",
				"초라하다",
				"초롱초롱",
				"촉촉하다",
				"촘촘하다",
				"총총하다",
				"축축하다",
				"치근대다",
				"치맛자락",
				"치우치다",
				"칙칙폭폭",
				"칭얼칭얼",
				"칭찬하다",
				"카네이션",
				"캄캄하다",
				"커다랗다",
				"컴컴하다",
				"케케묵다",
				"코스모스",
				"콩닥콩닥",
				"크레파스",
				"큰따옴표",
				"큰아버지",
				"큼직하다",
				"타고나다",
				"타도하다",
				"타오르다",
				"타이르다",
				"타파하다",
				"탄탄대로",
				"탐험여행",
				"태연하다",
				"태평성대",
				"택일하다",
				"터뜨리다",
				"터벅터벅",
				"토라지다",
				"토지대장",
				"톱니바퀴",
				"통근시간",
				"통근하다",
				"통상우편",
				"통신기관",
				"통신판매",
				"투숙하다",
				"특별하다",
				"특파하다",
				"튼튼하다",
				"틀어막다",
				"틀어박다",
				"틈바구니",
				"파고들다",
				"파릇파릇",
				"파송하다",
				"판로확장",
				"판연하다",
				"판이하다",
				"팽개치다",
				"팽이치기",
				"팽팽하다",
				"퍼뜨리다",
				"펄럭이다",
				"편벽하다",
				"편안하다",
				"포식하다",
				"표방하다",
				"표시하다",
				"푸근하다",
				"푹신하다",
				"품절하다",
				"플라스틱",
				"피어나다",
				"필요하다",
				"핏덩어리",
				"하늘나라",
				"하늘하늘",
				"하루갈이",
				"하루바삐",
				"하루속히",
				"하루하루",
				"하마터면",
				"하염없다",
				"하하호호",
				"한가운데",
				"한가하다",
				"한꺼번에",
				"한눈팔다",
				"한들한들",
				"한올한올",
				"한해살이",
				"할아버지",
				"핥아먹다",
				"함박웃음",
				"해바라기",
				"해어지다",
				"해오라기",
				"허덕이다",
				"허둥지둥",
				"허름하다",
				"허술하다",
				"허전하다",
				"허파꽈리",
				"허허벌판",
				"헐떡이다",
				"헐레벌떡",
				"헤아리다",
				"헤어나다",
				"헤어지다",
				"호리호리",
				"회전목마",
				"후려내다",
				"후룩후룩",
				"훌륭하다",
				"훌쩍훌쩍",
				"훔쳐먹다",
				"휘감기다",
				"휘날리다",
				"휘두르다",
				"휘어지다",
				"휴대전화",
				"흉내내다",
				"흐느끼다",
				"흐려지다",
				"흐릿하다",
				"흐뭇하다",
				"흔들흔들",
				"흘겨보다",
				"흘깃흘깃",
				"흙투성이",
				"흥부놀부",
				"흩날리다",
				"흩어지다",
				"가나다라마",
				"가위바위보",
				"갈색너구리",
				"갈지자걸음",
				"값비싼대가",
				"개그콘서트",
				"개밥도토리",
				"개밥바라기",
				"개인의취향",
				"거문고자리",
				"거짓말쟁이",
				"건빵한봉지",
				"고추잠자리",
				"광개토대왕",
				"국립도서관",
				"국민주권설",
				"국적증명서",
				"국제경찰군",
				"굿거리장단",
				"귀기울이다",
				"기회주의자",
				"눌러주세요",
				"다각부채형",
				"다듬거리다",
				"다르르하다",
				"다마스쿠스",
				"다음단계로",
				"데구르르르",
				"독립박물관",
				"되돌아보기",
				"두꺼비씨름",
				"두더지소금",
				"두발자전거",
				"마쉬멜로우",
				"몸통박치기",
				"못갖춘마디",
				"물고기화석",
				"민주공화국",
				"보통속도로",
				"복숭아벌레",
				"분리수거함",
				"수평선너머",
				"시금치무침",
				"신발주머니",
				"아련한추억",
				"아주빠르게",
				"안녕하세요",
				"어거리풍년",
				"어린밤나방",
				"어서오세요",
				"엄지손가락",
				"여우꼬리풀",
				"여행자보험",
				"옛날이야기",
				"오리온자리",
				"오세아니아",
				"운수좋은날",
				"이순신장군",
				"작은따옴표",
				"장난꾸러기",
				"장수풍뎅이",
				"장수하늘소",
				"전용비행기",
				"조금느리게",
				"조금빠르게",
				"주사위놀이",
				"크리스마스",
				"토끼와거북",
				"트라이앵글",
				"하얀고양이",
				"학교운동장",
				"한강수타령",
				"한거십팔곡",
				"한글맞춤법",
				"한무릎공부",
				"한산도대첩",
				"한악스럽다",
				"한일의정서",
				"한해살이풀",
				"함초롬하다",
				"행복하세요",
				"호랑이형님",
				"가나다라마바",
				"갖은등글월문",
				"계명구폐상문",
				"국화과실파리",
				"기우뚱기우뚱",
				"까치걸음하다",
				"나가떨어지다",
				"나우엘와피호",
				"네잎갈퀴덩굴",
				"다람쥐원숭이",
				"대머리독수리",
				"대한독립만세",
				"동해물백두산",
				"두리번거리다",
				"두해살이뿌리",
				"라디오악티늄",
				"마르고닳도록",
				"모스크바선언",
				"바사삭바사삭",
				"백두산봄맞이",
				"백두산천지봉",
				"백발환혹하다",
				"백홍관일하다",
				"별수염하늘소",
				"복사붙여넣기",
				"불러일으키다",
				"빨리빨리빨리",
				"산화마그네슘",
				"산화알루미늄",
				"산화지르코늄",
				"섞임겹닿소리",
				"아인시타이늄",
				"악티노우라늄",
				"애기검은파리",
				"애기씨꽃나무",
				"오그라트리다",
				"오렌지맛쿠키",
				"오르락내리락",
				"오르텔리우스",
				"오물오물하다",
				"올망이졸망이",
				"우두둑거리다",
				"우리나라만세",
				"이상주의문학",
				"조금씩조금씩",
				"조립식컴퓨터",
				"주머니두더지",
				"쭈그렁밤송이",
				"타루치라팔리",
				"토착주의운동",
				"파랑물잠자리",
				"페로알루미늄",
				"풍광명미하다",
				"풍화물잔적층",
				"풍화잔류광상",
				"한글과컴퓨터"];

var jsUserAttackStudy = ["아제르바이잔", "남아프리카공화국", "동해물과백두산이대한사람", "가나다라마바사아자차카타파하만세"];

var jsUserAttackStudy3 = ["동해물백두산", "마르고닳도록", "하느님이보우", "우리나라만세", "무궁화삼천리", "대한민국만세", "길이보전하세", "철갑을두른듯", "우리기상일세", "높고구름없이", 
                          "일편단심일세", "정성을다하여", "나라사랑하세", "삼천리자전거", "일이삼사오육", "여섯글자네요", "삼콤보공격임", "콤보공격이다", "한글과컴퓨터", "컴퓨터와한글", 
                          "동전쌓기만세", "동전을쌓아봐", "생즉사사즉생"];
var jsUserAttackStudy4 = ["동해물과백두산이", "하느님이보우하사", "대한사람대한으로", "남산위에저소나무", "바람서리불변함은", "가을하늘공활한데", "밝은달은우리가슴", "이기상과이맘으로", "괴로우나즐거우나", "차지호리실지처리", 
                          "궤부가실시부재래", "성문실화앙급지어", "방하도도립지성불", "근주자적근묵자흑", "도고일척마고일장", "항장무검의재패공", "휼방상쟁어옹득리", "부입호혈언득호자", "저위옥쇄부위와전", "지자천필필유일실", 
                          "우자천필필유일득", "성성지화가이료원", "만사구비지흠동풍", "전사부망후사지사", "당랑포선황작재후", "팔선과해각현신통", "중상지하필유용부", "겸은칙명편은칙암", "삼천타어량천쇄망", "인무원필필유근우", 
                          "천군역득일장난구", "수칙재주수칙복주", "권부리수곡부리구", "인위도조아위어육", "생우우환사우안악", "성명지하기실난부", "실지동우수지상유", "실지호리류이천리", "십목소시십수소지", "순아자창역아자망", 
                          "천망회회소이부루", "두통의두각통의각", "왕파매과자매자과", "무원지수무본지목", "물이류취인이군분", "양병천일용병일시", "일파미평일파우기", "일언기출사마난추", "일협폐목부견태산", "일협장목부견태산"];
var jsUserAttackStudy5 = ["친구와함께즐기는동전쌓기", "무궁화와삼천리가화려강산", "가나다라마바사아자차카타", "거너더러머버서어저처커터", "동해물과백두산이마르고도", 
                          "하느님이보우하사우리나라", "열두글자치는데얼마나걸려", "대한사람대한으로길이보전", "대한민국만세만세만세만세", "한글과컴퓨터한컴타자연습", 
                          "동전쌓기는동전을쌓는게임", "동전쌓기는혼자놀기가가능", "오콤보는열두글자공격이네", "동전을쌓아서어디까지갈까"];
var jsUserAttackStudy6 = ["무엇때문에탄식을하느냐고묻습니다", "내가뤼르봉산에서양을치고있을때의", "몇주일씩이나사람이라고는통그림자", "그러기에두주일마다보름치의양식을", "실어다주는우리농장노새의방울소리", 
                          "언덕길에서들려오는노새의방울소리", "꼬마미아로의그또랑또랑한얼굴이나", "나는너무나기뻐서어쩔줄을몰랐던것", "무엇보다관심이쏠리는것주인집따님", "장판은벌써쓸쓸하고더운햇발이훅훅", 
                          "팔리지못한나무꾼패가길거리에궁싯", "얼금뱅이요왼손잡이인드팀전허생원", "봉평장에서한번이나흐뭇하게사본일", "오늘밤은밤을새서걸어야될것같은걸", "나비는어딘지무척귀족적인데가있다", 
                          "오늘도또다시우리수탉이막쫓기었다", "산으로올라서려니까등뒤에서푸드득", "놀라서고개를돌려보니아니나다를까", "이가크고똑오소리같이실팍하게생긴", "푸드드득하고면두를쪼고물러섰다가", 
                          "도끼가연못물속에풍덩들어가버렸다", "다시찾을생각도못하고나무꾼은그냥", "토끼를만난자라는육지생활이위험해", "한참만에번쩍번쩍하는좋은금도끼를", "예예그것이제것이올시다하였습니다", 
                          "나무꾼의마음이정직한것을기특하게", "워싱턴스퀘어는뉴욕오가에있는공원", "플레이스들은기묘한각과곡선을이룸", "동해에사는용왕이병이들었다는소식", "도사가나타나서육지에사는토끼의간", 
                          "육지에나갈사자라면당연자라가제격", "육콤보는열여섯글자콤보공격입니다", "용궁에가서우리행복하게오래살자구"];


var jsOrderStudyArray = [];
var userComboIndex = 0;
var otherComboIndex = 0;

SingleLevel1.prototype.createScript = function() {
	this.gameUtil = GameUtil.getInstance();
	this.gameConst = GameConst.getInstance();
	this.gameData = GameData.getInstance();
	
	this.soundManager = SoundManager.getInstance(this);
	this.ajaxManager = AjaxManager.getInstance();
};

SingleLevel1.prototype.setTime = function() {
	if (userStartCnt === startTime) {
		this.oldTime = new Date();
	} else if (isGameStart) {
		this.fTimeNum.text = this.nowTime();
	}
};

// 단어를 가져오기 위해 100개 배열을 만들어서 index를 저장해서 하나씩 읽어온다.
SingleLevel1.prototype.setOrderStudy = function() {
//	jsOrderStudyArray = new Array();
//	var temp = 0;
//    var rnum = 0;
//    
//  //전달받은 매개변수 n만큼 배열 생성 ( 1~n )
//    for(var i=1; i<=jsUserStudy.length; i++){
//    	jsOrderStudyArray.push(i);
//    }
//    
//    //값을 서로 섞기
//    for(var i=0; i< jsOrderStudyArray.length ; i++){
//        rnum = Math.floor(Math.random() * jsUserStudy.length); //난수발생
//        temp = jsOrderStudyArray[i];
//        jsOrderStudyArray[i] = jsOrderStudyArray[rnum];
//        jsOrderStudyArray[rnum] = temp;
//    }
	
	jsOrderStudyArray = new Array();
	var pickNumbers = 100;
    
    for(var insertCur = 0; insertCur < pickNumbers ; insertCur++){
    	jsOrderStudyArray[insertCur] = Math.floor(Math.random() * (jsUserStudy.length - 1)) + 1;

        // 2. 중복 검사
        // 배열의 기존 원소(insertCur 이전까지)를
        // 방금 삽입한 수와 비교해 같은 수가 있다면 insertCur를 앞으로 밀어
        // 다음 반복에서 같은 칸에 다른 수를 쓰도록 합니다.
        for(var searchCur = 0; searchCur < insertCur; searchCur ++){
            if(jsOrderStudyArray[insertCur] == jsOrderStudyArray[searchCur]){
                insertCur--; // insertCur를 앞으로 민다
                break; // 다음 것을 검색할 필요가 없으므로 중복검사 반복을 나갑니다.
            }
        }
    }
};

SingleLevel1.prototype.createUserComboText = function() {
	this.fUserComboEffectText = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[5]);
	this.fUserComboEffectText.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText);

	this.fUserComboEffectText1 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[0]);
	this.fUserComboEffectText1.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText1);	
	
	this.fUserComboEffectText2 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[1]);
	this.fUserComboEffectText2.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText2);	
	
	this.fUserComboEffectText3 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[2]);
	this.fUserComboEffectText3.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText3);
	
	this.fUserComboEffectText4 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[3]);
	this.fUserComboEffectText4.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText4);	
	
	this.fUserComboEffectText5 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[4]);
	this.fUserComboEffectText5.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText5);
};

SingleLevel1.prototype.createOtherComboText = function() {
	this.fOtherComboEffectText = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[5]);
	this.fOtherComboEffectText.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText);

	this.fOtherComboEffectText1 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[0]);
	this.fOtherComboEffectText1.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText1);	
	
	this.fOtherComboEffectText2 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[1]);
	this.fOtherComboEffectText2.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText2);	
	
	this.fOtherComboEffectText3 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[2]);
	this.fOtherComboEffectText3.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText3);
	
	this.fOtherComboEffectText4 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[3]);
	this.fOtherComboEffectText4.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText4);	
	
	this.fOtherComboEffectText5 = new ComboTextEffectV1(
			this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[4]);
	this.fOtherComboEffectText5.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText5);
};


SingleLevel1.prototype.createInitUser = function() {
	userCoinCount = 0;
	this.userCoinCollectCount = 0;
	this.userMeterValue = 0;

	//console.log("createInitUser userCoinCount " + userCoinCount);

	this.userCoinValueTotalCount = 0;
	this.userCoinValue = 0;
	
	userWordType = this.gameConst.WordType.BASIC;
	userWordNextType = this.gameConst.WordType.BASIC;

	this.userHeart = 3;
	this.isGameStart = false;
	this.isWarring = false;

	this.isGameEnd = false;

	this.userComboCount = 0;
	this.userAttackCount = 0;
	
	this.userComboGaugePx = 0;
	this.userComboGaugeAniPx = 0;

	//this.oldTime = new Date();

	this.fMeterValue_user.text = this.userMeterValue.toString() + "m";
	this.fMeterOutlineValue_user.text = this.userMeterValue.toString() + "m";

	this.fCoinValue_user.text = this.userCoinValue.toString();
	this.fCoinValueOutline_user.text = this.userCoinValue.toString();

	this.userGenerateCoinPileAll();

	this.fSheet_coin_eff_user.visible = false;
	this.fSheet_coinCombo_eff_user.visible = false;
	
	//this.fUserID_text.text = that.gameData.userNickName.toString();	
	//this.gameUtil.setText(this.fUserID_text, 44.0, 532.0, 'center', 'middle', "aaaaaaaaaaaa");	
	this.gameUtil.setText(this.fUserID_text, 150, 25, 'center', 'middle', this.gameData.userNickName);
	this.setIngameCharacterAni(true, that.gameData.userCharacterType);	//우리 캐릭터 애니

	this.fChar_aniSheet_user.setPlay("IDLE");

	this.fSheet_talkBox_user.visible = false;
	this.fSheet_talkBoxCombo1_user.visible = false;
	this.fSheet_talkBoxCombo2_user.visible = false;

	this.fCrumble_group_user.visible = false;

	this.fUi_timePanel_Alert.alpha = 0;

	this.fTransImg_.visible = false;
	this.fResultEff_L.visible = false;
	this.fResultEff_S.visible = false;
	this.fResultImg.visible = false;

	userTajaTyping.onkeydown = this.userWordsCheck;
};

SingleLevel1.prototype.createInitOther = function() {
	//console.log("createInitOther");
	otherCoinCount = 0;
	this.otherCoinCollectCount = 0;
	this.otherMeterValue = 0;

	this.otherCoinValueTotalCount = 0;
	this.otherCoinValue = 0;
	
	otherWordType = this.gameConst.WordType.BASIC;
	otherNextWordType = this.gameConst.WordType.BASIC;

	this.otherHeart = 3;

	this.otherAiFrame = 0;
	this.otherAiMaxFrame = 325;
	this.otherAiFrameCount = 0;
	
	this.otherComboGaugePx = 0;
	this.otherComboGaugeAniPx = 0;
	
	this.otherComboCount = 0;
	this.otherAttackCount = 0;

	this.fMeterValue_other.text = this.otherMeterValue.toString() + "m";
	this.fMeterOutlineValue_other.text = this.otherMeterValue.toString() + "m";

	this.fCoinValue_other.text = this.otherCoinValue.toString();
	this.fCoinValueOutline_other.text = this.otherCoinValue.toString();

	this.otherGenerateCoinPileAll();

	that.gameData.otherCharacterType = Math.floor( Math.random() * 6 );
	//console.log("that.gameData.otherCharacterType is " + that.gameData.otherCharacterType);
	that.gameData.otherNickName = that.gameConst.CharacterNames[that.gameData.otherCharacterType];
	//console.log("that.gameData.otherNickName is " + that.gameData.otherNickName);
	//this.fOtherID_text.text = that.gameData.otherNickName.toString();
	this.gameUtil.setText(this.fOtherID_text, 150, 25, 'center', 'middle', that.gameData.otherNickName);
	
	this.setIngameCharacterAni(false, that.gameData.otherCharacterType);	//상대방 캐릭터 애니
	
	this.setOtherCoinsAni("PILE", false);

	this.fSheet_coin_eff_other.visible = false;
	this.fSheet_coinCombo_eff_other.visible = false;

	this.fChar_aniSheet_other.setPlay("IDLE");

	this.fSheet_talkBox_other.visible = false;
	this.fSheet_talkBoxCombo1_other.visible = false;
	this.fSheet_talkBoxCombo2_other.visible = false;

	this.fCrumble_group_other.visible = false;
};

SingleLevel1.prototype.checkStartGame = function() {
	if ((userStartCnt > startTime) && isGameStart === false) {
		isGameStart = true;
	}
};

SingleLevel1.prototype.setGameEnd = function() {	
	if ((userStartCnt > startTime) && this.isGameEnd) {

		return true;
	}
	return false;
};


SingleLevel1.prototype.setUserTalkBox = function() {
	if ((userStartCnt === startTime - 20)
			|| (isGameStart && ((userStartCnt % makeTime) === (makeTime - 20 - 1)))) {
		
		userWordType = userWordNextType;
		userWordNextType = this.gameConst.WordType.BASIC;
		if(this.otherComboCount <= 1){
			if(this.otherAttackCount === 3 || this.otherAttackCount === 4)
				this.fSheet_talkBoxCombo1_user.setPlay("NOTICE");
			else if(this.otherAttackCount === 5 || this.otherAttackCount === 6)
				this.fSheet_talkBoxCombo2_user.setPlay("NOTICE");
			else
				this.fSheet_talkBox_user.setPlay("SHOW");
		} else {
			this.fSheet_talkBox_user.setPlay("SHOW");
		}			

		//console.log("setUserTalkBox -> this.otherComboCount : " + this.otherComboCount);
		//console.log("setUserTalkBox -> this.otherAttackCount : " + this.otherAttackCount);		
		
		this.userGenerateCoinPileAll();
		this.fChar_aniSheet_user.x = 235.0;
		this.fChar_aniSheet_user.y = 436.0;

		if (this.fChar_aniSheet_user.animations.currentAnim.name !== "IDLE"
			&& this.fChar_aniSheet_user.animations.currentAnim.name !== "DROP_IDLE") {
			this.fChar_aniSheet_user.setPlay("IDLE");
		}
	}
};


SingleLevel1.prototype.setOtherTalkBox = function() {
	
	if ((otherStartCnt === startTime - 20)
			|| (isGameStart && ((otherStartCnt % makeTime) === (makeTime - 20 - 1)))) {
		
		otherWordType = otherWordNextType;
		otherWordNextType = this.gameConst.WordType.BASIC;	
		
		if(this.userComboCount <= 1){
			if(this.userAttackCount === 3 || this.userAttackCount === 4)
				this.fSheet_talkBoxCombo1_other.setPlay("NOTICE");
			else if(this.userAttackCount === 5 || this.userAttackCount === 6)
				this.fSheet_talkBoxCombo2_other.setPlay("NOTICE");
			else
				this.fSheet_talkBox_other.setPlay("SHOW");
		} else {
			this.fSheet_talkBox_other.setPlay("SHOW");
		}		
		
		//console.log("setOtherTalkBox -> this.userComboCount : " + this.userComboCount);
		//console.log("setOtherTalkBox -> this.userAttackCount : " + this.userAttackCount);

		this.otherGenerateCoinPileAll();
		this.fChar_aniSheet_other.x = 235.0;
		this.fChar_aniSheet_other.y = 436.0;

		if (this.fChar_aniSheet_other.animations.currentAnim.name !== "IDLE"
			&& this.fChar_aniSheet_other.animations.currentAnim.name !== "DROP_IDLE") {
			this.fChar_aniSheet_other.setPlay("IDLE");
		}
	}
};

SingleLevel1.prototype.checkUserGenerateCoin = function() {
	if (userStartCnt === startTime
			|| (isGameStart && ((userStartCnt % makeTime) === (makeTime - 1)))) {
		this.userGenerateCoin();
	}
};

SingleLevel1.prototype.checkOtherGenerateCoin = function() {
	if (otherStartCnt === startTime
			|| (isGameStart && ((otherStartCnt % makeTime) === (makeTime - 1)))) {
		this.otherGenerateCoin();
	}
};


SingleLevel1.prototype.userGenerateCoin = function() {
	userCoinCount++;

	isUserDrop = false;
	isUserPile = false;
	isUserRolling = false;

	_userPlayerCoin = new CoinV1(this.game, 235, -25);
	_userPlayerCoin.setDirection(userCoinCount);
	this.fCoin_player_user.add(_userPlayerCoin);
	this.fUserPlayCoin = _userPlayerCoin;

	this.fUserPlayCoin.setPlay("DROP_BASIC", true);	

	//박스 재 체크한다.
	if(this.otherComboCount <= 1){
			if(this.otherAttackCount === 3 || this.otherAttackCount === 4){
				if(this.fSheet_talkBoxCombo1_user.visible === false){
					this.fSheet_talkBox_user.hide();
					this.fSheet_talkBoxCombo1_user.setPlay("NOTICE");
					this.fSheet_talkBoxCombo2_user.hide();					
				}
			}
			else if(this.otherAttackCount === 5 || this.otherAttackCount === 6){
				if(this.fSheet_talkBoxCombo2_user.visible === false){
					this.fSheet_talkBox_user.hide();
					this.fSheet_talkBoxCombo1_user.hide();
					this.fSheet_talkBoxCombo2_user.setPlay("NOTICE");
				}
			}
			else {
				if(this.fSheet_talkBox_user.visible === false){
					this.fSheet_talkBox_user.setPlay("SHOW");
					this.fSheet_talkBoxCombo1_user.hide();
					this.fSheet_talkBoxCombo2_user.hide();
				}
			} 
		} else {
		if(this.fSheet_talkBox_user.visible === false){
			this.fSheet_talkBox_user.setPlay("SHOW");
			this.fSheet_talkBoxCombo1_user.hide();
			this.fSheet_talkBoxCombo2_user.hide();
		}
	}
	
	
	if(this.otherComboCount <= 1){
		if(this.otherAttackCount === 3){
			userComboIndex = Math.floor(Math.random() * (jsUserAttackStudy3.length - 1));
		}else if(this.otherAttackCount === 4){
			userComboIndex = Math.floor(Math.random() * (jsUserAttackStudy4.length - 1));
		}else if(this.otherAttackCount === 5){
			userComboIndex = Math.floor(Math.random() * (jsUserAttackStudy5.length - 1));
		}else if(this.otherAttackCount === 6){
			userComboIndex = Math.floor(Math.random() * (jsUserAttackStudy6.length - 1));
		}	
	}

	this.wordsManufactureUser();
};


SingleLevel1.prototype.otherGenerateCoin = function() {

	//박스 재 체크한다.
	if(this.userComboCount <= 1){
		if(this.userAttackCount === 3 || this.userAttackCount === 4){
			if(this.fSheet_talkBoxCombo1_other.visible === false){
				this.fSheet_talkBox_other.hide();
				this.fSheet_talkBoxCombo1_other.setPlay("NOTICE");
				this.fSheet_talkBoxCombo2_other.hide();
			}
		}	else if(this.userAttackCount === 5 || this.userAttackCount === 6){
			if(this.fSheet_talkBoxCombo2_other.visible == false){
				this.fSheet_talkBox_other.hide();
				this.fSheet_talkBoxCombo1_other.hide();
				this.fSheet_talkBoxCombo2_other.setPlay("NOTICE");
			}
		} else{
			if(this.fSheet_talkBox_other.visible == false){
				this.fSheet_talkBox_other.setPlay("SHOW");
				this.fSheet_talkBoxCombo1_other.hide();
				this.fSheet_talkBoxCombo2_other.hide();
			}
		}	
	} else {
		if(this.fSheet_talkBox_other.visible == false){
			this.fSheet_talkBox_other.setPlay("SHOW");
			this.fSheet_talkBoxCombo1_other.hide();
			this.fSheet_talkBoxCombo2_other.hide();
		}
	}
	
	if(this.userComboCount <= 1){
		if(this.userAttackCount === 3){
			otherComboIndex = Math.round(Math.random() * (jsUserAttackStudy3.length - 1));
		}else if(this.userAttackCount === 4){
			otherComboIndex = Math.round(Math.random() * (jsUserAttackStudy4.length - 1));
		}else if(this.userAttackCount === 5){
			otherComboIndex = Math.round(Math.random() * (jsUserAttackStudy5.length - 1));
		}else if(this.userAttackCount === 6){
			otherComboIndex = Math.round(Math.random() * (jsUserAttackStudy6.length - 1));
		}	
	}
//
//	this.wordsManufactureOther();
	
	otherCoinCount++;
	// this.otherAiFrameCount = 0;
	// this.otherAiFrame = Math.round(Math.random() * this.otherAiMaxFrame);

	this.wordsManufactureOther();

	var delaySec = this.setAICorrect(this.otherComboCount);
	//console.log("delaySec..." + delaySec);

	this.game.time.events.add( Phaser.Timer.SECOND * (delaySec / 1000), function() {
		if (this.fOtherPlayCoin.checkCurrentAnimation("DROP_BASIC")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_1")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_1")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_2")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_2")) {
			// 체크함.
			this.otherWordsCheck();
		}
	}, this);

	isOtherDrop = false;
	isOtherPile = false;
	isOtherRolling = false;

	this.fCoin_player_other.visible = true;
	var _otherPlayerCoin = new CoinV1(this.game, 235, -25);
	_otherPlayerCoin.setDirection(otherCoinCount);
	this.fCoin_player_other.add(_otherPlayerCoin);
	this.fOtherPlayCoin = _otherPlayerCoin;

	this.fOtherPlayCoin.setPlay("DROP_BASIC", true);
};

SingleLevel1.prototype.processCoinUser = function() {

	if (isGameStart === false)
		return;

	this.setUserTextAni();
	
	if (isUserDrop) {
		
		if(this.fUserPlayCoin.checkCurrentAnimation("DROP_BASIC")
				|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_1")
				|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_2")
				|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_1")
				|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_2"))
			{
				if (this.fUserPlayCoin.checkCurrentAnimation("DROP_BASIC")) {
					this.userComboCount++;
					this.userAttackCount++;
					if (this.userComboCount > 6) {						
						this.userComboCount = 1;
						this.setOtherWordNextType(this.userComboCount);
					} else if(this.userComboCount == 6){
						this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
						this.fCombo_attack_effect_fly_user.setPlay("IDLE", true, 47, 239, 438,	730, 50);
						this.setUserComboAni();						
						this.setOtherWordNextType(this.userComboCount);
						this.userComboCount = 0;
					} else {
						this.setUserComboAni();
						this.setOtherWordNextType(this.gameConst.WordType.BASIC);
					}
					
				} else {
					if (this.userComboCount > 1 && this.userComboCount <= 6) {
						if(this.userComboCount > 2) {
							this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
							this.fCombo_attack_effect_fly_user.setPlay("IDLE", true, 47, 239, 438, 730, 50);
						}
						this.endUserComboAni();
					}	
					
					this.setOtherWordNextType(this.userComboCount);	
					this.userComboCount = 0;
				}
	
				this.fUserPlayCoin.setPlay("DROP_DIRECT", true);
				this.fChar_aniSheet_user.setPlay("JUMP_IDLE");
				this.soundManager.play(this.soundManager.SOUND_TYPE.Coin_land);
				isUserDrop = false;
				isUserPile = true;
	
				this.wordInputEmptyUser();
				this.fSheet_talkBox_user.hide();
				this.fSheet_talkBoxCombo1_user.hide();
				this.fSheet_talkBoxCombo2_user.hide();
			}
	}

	if (this.fUserPlayCoin.isEndTweenPileDown) {
		this.fUserPlayCoin.isEndTweenPileDown = false;

		//console.log("PILE_DOWN");
	}

	if (this.fUserPlayCoin.checkCurrentAnimation("PILE") && isUserPile === true) {
		isUserPile = false;

		this.fUserPlayCoin.setPlay("PILE_DOWN", true);
		this.setUserCoinsAni("PILE_DOWN", true);
		this.fSheet_coin_eff_user.setPlay("PLAY");
		this.scrollBackgroundUser();

		this.userCoinCollectCount++;

		if (this.userComboCount > 1)
			this.fSheet_coinCombo_eff_user.setPlay("PLAY");
		
		//this.scrollBackgroundUser();
	}

	if (this.fUserPlayCoin.checkCurrentAnimation("DROP_ROLLING")
			&& isUserRolling === false) {		
		
		userStartCnt = makeTime - 80;
		
		isUserRolling = true;		
		this.setUserHeartMinus(true);
	}
};

SingleLevel1.prototype.setUserHeartMinus = function(aIsShake) {
	this.userHeart--;
	this.setUserHeartAni();

	if (aIsShake){
		
		this.shakeTween(this.fUser, 1);
		if (this.userComboCount > 2 && this.userComboCount <= 6){
			this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
			this.fCombo_attack_effect_fly_user.setPlay("IDLE", true, 47, 239, 438,
					730, 50);
		}
		this.setOtherWordNextType(this.userComboCount);
	}
	this.userComboCount = 0;
	
	//console.log("SingleLevel1::setUserHeartMinus...this.userComboCount -> " + this.userComboCount);	
	
	this.wordInputEmptyUser();
	this.fSheet_talkBox_user.hide();
	this.fSheet_talkBoxCombo1_user.hide();
	this.fSheet_talkBoxCombo2_user.hide();
	
	
	this.endUserComboAni();
	if (this.userHeart <= 0) {
		this.soundManager.stop(that.soundManager.SOUND_TYPE.Time_danger);
		this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
		this.isGameEnd = true;
		this.setGameOver();
	}
};

SingleLevel1.prototype.processUserBackground = function(){	

	if(mUserBackgroundWallY4 > this.fWall_Rt_user4.y){
		this.fWall_Rt_user4.y+=2;
		this.fWall_Lf_user4.y+=2;
	}
	
	if(mUserBackgroundWallY3 > this.fWall_Rt_user3.y){
		this.fWall_Rt_user3.y+=2;
		this.fWall_Lf_user3.y+=2;
	}
	
	if(mUserBackgroundWallY2 > this.fWall_Rt_user2.y){
		this.fWall_Rt_user2.y+=2;
		this.fWall_Lf_user2.y+=2;
	}
	
	if(mUserBackgroundWallY1 > this.fWall_Rt_user.y){
		this.fWall_Rt_user.y+=2;
		this.fWall_Lf_user.y+=2;
	}
	
	
	
	if(mUserBackgroundY1 > this.fBack_image1_user.y){
		this.fBack_image1_user.y+=2;
	}	
	
	if(mUserBackgroundY2 > this.fBack_image2_user.y){
		this.fBack_image2_user.y+=2;
	}
	
	if(mUserBackgroundY3 > this.fBack_image3_user.y){
		this.fBack_image3_user.y+=2;
	}
};

SingleLevel1.prototype.processOtherBackground = function(){
	if(mOtherBackgroundWallY4 > this.fWall_Rt_other4.y){
		this.fWall_Rt_other4.y+=2;
		this.fWall_Lf_other4.y+=2;
	}
	
	if(mOtherBackgroundWallY3 > this.fWall_Rt_other3.y){
		this.fWall_Rt_other3.y+=2;
		this.fWall_Lf_other3.y+=2;
	}
	
	if(mOtherBackgroundWallY2 > this.fWall_Rt_other2.y){
		this.fWall_Rt_other2.y+=2;
		this.fWall_Lf_other2.y+=2;
	}
	
	if(mOtherBackgroundWallY1 > this.fWall_Rt_other.y){
		this.fWall_Rt_other.y+=2;
		this.fWall_Lf_other.y+=2;
	}
	
	
	
	if(mOtherBackgroundY1 > this.fBack_image1_other.y){
		this.fBack_image1_other.y+=2;
	}
	
	if(mOtherBackgroundY2 > this.fBack_image2_other.y){
		this.fBack_image2_other.y+=2;
	}
	
	if(mOtherBackgroundY3 > this.fBack_image3_other.y){
		this.fBack_image3_other.y+=2;
	}
};

SingleLevel1.prototype.setGameOver = function(){
//	this.game.time.events.add(Phaser.Timer.SECOND * 10, function() {
//		that.soundManager.play('Coin_Lob');
//		that.game.state.start("MenuV2");
//	}, this);
	var winLoseIdx = 0;	
	
	this.resultCommonAI(); // AI 공용
	if(this.userHeart <= 0 && this.otherHeart <= 0 && this.userMeterValue === this.otherMeterValue && this.userCoinValue === this.otherCoinValue){
		this.resultDrawAI();		// 무승부 인 경우
		winLoseIdx = 3;
	} else if(this.userHeart <= 0 || this.userMeterValue < this.otherMeterValue){
		this.resultLoseAI(); 		// 내가 진 경우
		winLoseIdx = 2;
	}else if(this.otherHeart <= 0 || this.userMeterValue > this.otherMeterValue){
		this.resultSuccessAI(); 	// 내가 이긴 경우
		winLoseIdx = 1;
	}else{
		if(this.userCoinValue < this.otherCoinValue){
			this.resultLoseAI(); 		// 내가 진 경우
			winLoseIdx = 2;
		}else if(this.userCoinValue > this.otherCoinValue){
			this.resultSuccessAI(); 	// 내가 이긴 경우
			winLoseIdx = 1;
		}else{
			this.resultDrawAI();		// 무승부 인 경우
			winLoseIdx = 3;
		}
	}
	//var sysdate = new Date(1356745844000);
	//sysdate.format('{yyyy}-{MM}-{dd} {hh}:{mm}:{ss}'); // '2012-12-29 10:50:44' 출력
		
	//var startTimeStr = this.oldTime.format('{yyyy}-{MM}-{dd} {hh}:{mm}:{ss}');
	var startTimeStr = this.LeadingZeros(this.oldTime.getFullYear(), 4) + "-" + 
	               this.LeadingZeros((this.oldTime.getMonth() + 1), 2) + "-" + 
	               this.LeadingZeros(this.oldTime.getDate(), 2) + " " +
	               this.LeadingZeros(this.oldTime.getHours(), 2) + ":" +
	               this.LeadingZeros(this.oldTime.getMinutes(), 2) + ":" +
	               this.LeadingZeros(this.oldTime.getSeconds(), 2);
	var endTime = new Date();
	//var endTimeStr = endTime.format('{yyyy}-{MM}-{dd} {hh}:{mm}:{ss}');
	var endTimeStr = this.LeadingZeros(endTime.getFullYear(), 4) + "-" + 
	              this.LeadingZeros((endTime.getMonth() + 1), 2) + "-" + 
	              this.LeadingZeros(endTime.getDate(), 2) + " " +
	              this.LeadingZeros(endTime.getHours(), 2) + ":" +
	              this.LeadingZeros(endTime.getMinutes(), 2) + ":" +
	              this.LeadingZeros(endTime.getSeconds(), 2);
	
	
	that.ajaxManager.netReqLogStartEndGame(that.gameData.uuid, that.gameData.userNickName, 2, "", 1, winLoseIdx, this.userCoinValue, startTimeStr, endTimeStr, netResLogStartEndGameSuccess, netResLogStartEndGameFail);
	
	var timerEvents = this.game.time.events;
	var tweenEvents = this.game.tweens;
	
	for (var i=0; i<timerEvents.length; i++){ this.game.time.events.remove(timerEvents[i]); }
	for (var i=0; i<tweenEvents.length; i++){ this.game.tweenEvents.remove(tweenEvents[i]); }
};

SingleLevel1.prototype.setOtherHeartMinus = function(aIsShake) {
	this.otherHeart--;
	this.setOtherHeartAni();

	if (aIsShake){
		this.shakeTween(this.fOther, 1);
		if (this.otherComboCount > 2 && this.otherComboCount < 6)	{
			this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
			this.fCombo_attack_effect_fly_other.setPlay("IDLE", true, -47, 749,
					426, 260, 67);
		}
		this.setUserWordNextType(this.otherComboCount);
	}
			
	this.otherComboCount = 0;
	
	
	//console.log("SingleLevel1::setOtherHeartMinus...this.otherComboCount -> " + this.otherComboCount);
	
	
	
	this.wordInputEmptyOther();
	this.fSheet_talkBox_other.hide();
	this.fSheet_talkBoxCombo1_other.hide();
	this.fSheet_talkBoxCombo2_other.hide();
	
	this.endOtherComboAni();
	if (this.otherHeart <= 0) {
		this.soundManager.stop(that.soundManager.SOUND_TYPE.Time_danger);
		this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
		this.isGameEnd = true;
		this.setGameOver();
	}
};

SingleLevel1.prototype.processAI = function() {
	this.otherAiFrameCount++;

	if (this.otherAiFrame === this.otherAiFrameCount) {
		if (this.fOtherPlayCoin.checkCurrentAnimation("DROP_BASIC")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_1")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_1")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_2")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_2")) {
			// 체크함.
			this.otherWordsCheck();
		}
	}
};

SingleLevel1.prototype.processCoinOther = function() {

	if (isGameStart === false)
		return;
	
	this.setOtherTextAni();
	
	this.processAI();
	
	if (isOtherDrop) {
		
		if(this.fOtherPlayCoin.checkCurrentAnimation("DROP_BASIC")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_1")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_2")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_1")
				|| this.fOtherPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_2"))
			{
				if (this.fOtherPlayCoin.checkCurrentAnimation("DROP_BASIC")) {
					this.otherComboCount++;
					this.otherAttackCount++;
					if (this.otherComboCount > 6) {						
						this.otherComboCount = 1;	
						this.setUserWordNextType(this.otherComboCount);
					} else if(this.otherComboCount == 6){
						this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
						this.fCombo_attack_effect_fly_other.setPlay("IDLE", true, -47, 749, 426, 260, 67);
						this.setOtherComboAni();						
						this.setUserWordNextType(this.otherComboCount);
						this.otherComboCount = 0;
					} else {
						this.setOtherComboAni();
						this.setUserWordNextType(this.gameConst.WordType.BASIC);
					}					
				} else {
					if (this.otherComboCount > 1 && this.otherComboCount <= 6) {
						if(this.otherComboCount > 2) {
							this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
							this.fCombo_attack_effect_fly_other.setPlay("IDLE", true, -47, 749, 426, 260, 67);
						}
						this.endOtherComboAni();
					}	
					
					this.setUserWordNextType(this.otherComboCount);	
					this.otherComboCount = 0;
				}
	
				this.fOtherPlayCoin.setPlay("DROP_DIRECT", true);
				this.fChar_aniSheet_other.setPlay("JUMP_IDLE");
				this.soundManager.play(this.soundManager.SOUND_TYPE.Coin_land);
				isOtherDrop = false;
				isOtherPile = true;
	
				this.wordInputEmptyOther();
				this.fSheet_talkBox_other.hide();
				this.fSheet_talkBoxCombo1_other.hide();
				this.fSheet_talkBoxCombo2_other.hide();
			}
	}

	if (this.fOtherPlayCoin.isEndTweenPileDown) {
		this.fOtherPlayCoin.isEndTweenPileDown = false;

		//console.log("PILE_DOWN");
	}

	if (this.fOtherPlayCoin.checkCurrentAnimation("PILE") && isOtherPile === true) {
		isOtherPile = false;

		this.fOtherPlayCoin.setPlay("PILE_DOWN", true);
		this.setOtherCoinsAni("PILE_DOWN", true);
		this.fSheet_coin_eff_other.setPlay("PLAY");

		this.otherCoinCollectCount++;

		if (this.otherComboCount > 1)
			this.fSheet_coinCombo_eff_other.setPlay("PLAY");
		
		this.scrollBackgroundOther();
	}

	if (this.fOtherPlayCoin.checkCurrentAnimation("DROP_ROLLING")
			&& isOtherRolling === false) {
		isOtherRolling = true;
		otherStartCnt = makeTime - 80;
		this.setOtherHeartMinus(true);
	}
};

SingleLevel1.prototype.userGenerateCoinPileAll = function() {

	if (this.fCoin_container_user.length > 0)
		return;

	var _userCoinPile1 = new CoinV1(this.game, 243.0, 528.0);
	this.fCoin_container_user.add(_userCoinPile1);

	var _userCoinPile2 = new CoinV1(this.game, 235.0, 515.0);
	this.fCoin_container_user.add(_userCoinPile2);

	var _userCoinPile3 = new CoinV1(this.game, 240.0, 500.0);
	this.fCoin_container_user.add(_userCoinPile3);

	var _userCoinPile4 = new CoinV1(this.game, 235.0, 485.0);
	this.fCoin_container_user.add(_userCoinPile4);

	var _userCoinPile5 = new CoinV1(this.game, 242.0, 470.0);
	this.fCoin_container_user.add(_userCoinPile5);

	var _userCoinPile6 = new CoinV1(this.game, 237.0, 455.0);
	this.fCoin_container_user.add(_userCoinPile6);

	var _userCoinPile7 = new CoinV1(this.game, 241.0, 440.0);
	this.fCoin_container_user.add(_userCoinPile7);

	this.fUserCoinPile1 = _userCoinPile1;
	this.fUserCoinPile2 = _userCoinPile2;
	this.fUserCoinPile3 = _userCoinPile3;
	this.fUserCoinPile4 = _userCoinPile4;
	this.fUserCoinPile5 = _userCoinPile5;

	this.fUserCoinPile6 = _userCoinPile6;
	this.fUserCoinPile7 = _userCoinPile7;

	this.fCoin_container_user.visible = true;
	this.setUserCoinsAni("PILE", false);
};

SingleLevel1.prototype.otherGenerateCoinPileAll = function() {

	if (this.fCoin_container_other.length > 0)
		return;

	var _otherCoinPile1 = new CoinV1(this.game, 243.0, 528.0);
	this.fCoin_container_other.add(_otherCoinPile1);

	var _otherCoinPile2 = new CoinV1(this.game, 235.0, 515.0);
	this.fCoin_container_other.add(_otherCoinPile2);

	var _otherCoinPile3 = new CoinV1(this.game, 240.0, 500.0);
	this.fCoin_container_other.add(_otherCoinPile3);

	var _otherCoinPile4 = new CoinV1(this.game, 235.0, 485.0);
	this.fCoin_container_other.add(_otherCoinPile4);

	var _otherCoinPile5 = new CoinV1(this.game, 242.0, 470.0);
	this.fCoin_container_other.add(_otherCoinPile5);

	var _otherCoinPile6 = new CoinV1(this.game, 237.0, 455.0);
	this.fCoin_container_other.add(_otherCoinPile6);

	var _otherCoinPile7 = new CoinV1(this.game, 241.0, 440.0);
	this.fCoin_container_other.add(_otherCoinPile7);

	this.fOtherCoinPile1 = _otherCoinPile1;
	this.fOtherCoinPile2 = _otherCoinPile2;
	this.fOtherCoinPile3 = _otherCoinPile3;
	this.fOtherCoinPile4 = _otherCoinPile4;
	this.fOtherCoinPile5 = _otherCoinPile5;

	this.fOtherCoinPile6 = _otherCoinPile6;
	this.fOtherCoinPile7 = _otherCoinPile7;

	this.fCoin_container_other.visible = true;
	this.setOtherCoinsAni("PILE", false);
};


var mUserBackgroundWallY1;
var mUserBackgroundWallY2;
var mUserBackgroundWallY3;
var mUserBackgroundWallY4;
var mUserBackgroundY1;
var mUserBackgroundY2;
var mUserBackgroundY3;

var mOtherBackgroundWallY1;
var mOtherBackgroundWallY2;
var mOtherBackgroundWallY3;
var mOtherBackgroundWallY4;
var mOtherBackgroundY1;
var mOtherBackgroundY2;
var mOtherBackgroundY3;

SingleLevel1.prototype.scrollBackgroundUser = function() {		
	if(mUserBackgroundWallY1 <= (1728 - 40) ){
		mUserBackgroundWallY1 += 40;
		mUserBackgroundWallY2 += 40;
		mUserBackgroundWallY3 += 40;
		mUserBackgroundWallY4 += 40;
	}	
	
	if(mUserBackgroundY1 <= (1152 - 30) ){
		mUserBackgroundY1 += 30;
		mUserBackgroundY2 += 30;
		mUserBackgroundY3 += 30;
	}
};

SingleLevel1.prototype.scrollBackgroundOther = function() {	
	if(mOtherBackgroundWallY1 <= (1728 - 40) ){
		mOtherBackgroundWallY1 += 40;
		mOtherBackgroundWallY2 += 40;
		mOtherBackgroundWallY3 += 40;
		mOtherBackgroundWallY4 += 40;
	}
	
	if(mOtherBackgroundY1 <= (1152 - 30) ){
		mOtherBackgroundY1 += 30;
		mOtherBackgroundY2 += 30;
		mOtherBackgroundY3 += 30;
	}
};

SingleLevel1.prototype.processUser = function() {
	if (this.fChar_aniSheet_user.animations.currentAnim.isFinished === true
			&& this.fChar_aniSheet_user.animations.currentAnim.name === "JUMP_LANDING") {
		
		this.userFileSetting();
		
		var badCoinCount = this.getUserBadCoinCount();
		
		if (badCoinCount > 2)
		{
			this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_des);
			this.setUserHeartMinus(false);
			this.fChar_aniSheet_user.setPlay("DROP", true);
			userStartCnt = makeTime - 150;
			this.game.time.events.add(Phaser.Timer.SECOND * 0.15, function() {
				this.fUserPlayCoin.setPlay("CRUMBLE", true);
				this.setUserCoinsAni("CRUMBLE", true);
				this.setUserEffectCrash();
				this.game.time.events.add(Phaser.Timer.SECOND * 0.1, function() {
							this.shakeTween(this.fUser, 3);
						}, this);
				this.game.time.events.add(Phaser.Timer.SECOND * 0.5, function() {
							this.shakeTween(this.fUser, 1);
						}, this);
			}, this);
		}	
		else
		{
			if(badCoinCount === 2) this.fChar_aniSheet_user.setPlay("DROP_IDLE");
			
			this.setUserCoinPointAni();			
			userStartCnt = makeTime - 80;
			this.fUserPlayCoin.setPlay("FINISH");
		}
		
	}
};

SingleLevel1.prototype.processComboAttackUser = function() {
	if (this.fCombo_attack_effect_fly_user.animations.currentAnim.isFinished === true
			&& this.fCombo_attack_effect_fly_user.animations.currentAnim.name === "PLAY") {
		this.fCombo_attack_effect_explosion_user
				.setPlay("PLAY", false, 750, 50);
		this.fCombo_attack_effect_fly_user.alpha = 0;
		this.fCombo_attack_effect_fly_user.visible = false;

		this.fCombo_attack_effect_fly_user.animations.currentAnim.isFinished = false;

		//console.log("processComboAttackUser");
		//console.log("");
	}
};

SingleLevel1.prototype.processComboAttackOther = function() {
	if (this.fCombo_attack_effect_fly_other.animations.currentAnim.isFinished === true
			&& this.fCombo_attack_effect_fly_other.animations.currentAnim.name === "PLAY") {
		this.fCombo_attack_effect_explosion_other.setPlay("PLAY", false, 260,
				67);
		this.fCombo_attack_effect_fly_other.alpha = 0;
		this.fCombo_attack_effect_fly_other.visible = false;

		this.fCombo_attack_effect_fly_other.animations.currentAnim.isFinished = false;

		//console.log("processComboAttackOther");
	}
};

SingleLevel1.prototype.processOther = function() {
	if (this.fChar_aniSheet_other.animations.currentAnim.isFinished === true
			&& this.fChar_aniSheet_other.animations.currentAnim.name === "JUMP_LANDING")
	{
		this.otherFileSetting();
		
		var badCoinCount = this.getOtherBadCoinCount();		
		
		
			
		if (badCoinCount > 2) {
			this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_des);
			this.setOtherHeartMinus(false);
			this.fChar_aniSheet_other.setPlay("DROP", true);
			otherStartCnt = makeTime - 150;
			this.game.time.events.add(Phaser.Timer.SECOND * 0.15, function() {
				this.fOtherPlayCoin.setPlay("CRUMBLE", true);
				this.setOtherCoinsAni("CRUMBLE", true);
				this.setOtherEffectCrash();
				this.game.time.events.add(Phaser.Timer.SECOND * 0.1, function() {
							this.shakeTween(this.fOther, 3);
						}, this);
				this.game.time.events.add(Phaser.Timer.SECOND * 0.5, function() {
							this.shakeTween(this.fOther, 1);
						}, this);

			}, this);
		} else {
			this.setOtherCoinPointAni();			
			if(badCoinCount === 2) this.fChar_aniSheet_other.setPlay("DROP_IDLE");			
			otherStartCnt = makeTime - 80;
			this.fOtherPlayCoin.setPlay("FINISH");
		}
	}
};

SingleLevel1.prototype.gameProcess = function() {
	userTajaTyping.focus();
	
	switch (gameState) {
	case that.gameConst.GameStateType.ENTER:
//		this.checkStartGame();
//		if (this.setGameEnd())
//			return;
//		this.setTime();

//		this.checkUserGenerateCoin();
//		this.checkOtherGenerateCoin();

		
		
		this.fTimeNum.text ="01:00";
		isGameStart = false;
		this.fUi_inputWord.text = userTajaTyping.value;
		//this.fUi_inputWord.text = mUserTypingText;		 
		
		this.fUi_inputWord.text.trim();		
		if(this.fUi_inputWord.text === ""){
			this.fInputCursorSheet.x = 365;
		} else {
			var ctx = this.fUi_inputWord.canvas.getContext("2d");		
			ctx.font = "14px 나눔고딕";
		    var text = ctx.measureText(this.fUi_inputWord.text);	    
		    this.fInputCursorSheet.x = 365 + text.width;
		}

		this.setOtherTalkBox();
		this.setUserTalkBox();
		
		this.processUserBackground();
		this.processOtherBackground();
		

//		this.processCoinUser();
//		this.processCoinOther();

		this.processUser();
		this.processOther();

		this.setUserComboMax();
		this.setOtherComboMax();

		this.processComboAttackUser();
		this.processComboAttackOther();
		break;
	case that.gameConst.GameStateType.START:
		userStartCnt++;
		otherStartCnt++;
		this.checkStartGame();
		if (this.setGameEnd()){
			this.fRUICharEffSA2.angle += 0.5;
			this.fRUICharEffSA1.angle -= 0.7;
			return;
		}
		
		this.setTime();

		this.checkUserGenerateCoin();
		this.checkOtherGenerateCoin();

		this.fUi_inputWord.text = userTajaTyping.value;
		//this.fUi_inputWord.text = mUserTypingText;
		//this.fUi_inputWord.text.trim();
		if(this.fUi_inputWord.text === ""){
			this.fInputCursorSheet.x = 365;
		} else {
			var ctx = this.fUi_inputWord.canvas.getContext("2d");		
			ctx.font = "14px 나눔고딕";
		    var text = ctx.measureText(this.fUi_inputWord.text);	    
		    this.fInputCursorSheet.x = 365 + text.width;
		}

		this.setOtherTalkBox();
		this.setUserTalkBox();
		
		this.processUserBackground();
		this.processOtherBackground();

		this.processCoinUser();
		this.processCoinOther();		
		
		this.processUser();
		this.processOther();

		this.setUserComboMax();
		this.setOtherComboMax();

		this.processComboAttackUser();
		this.processComboAttackOther();		
		
		this.processGaugeUser();
		this.processGaugeOther();
		break;
	}
};

SingleLevel1.prototype.processGaugeUser = function(){
    if(this.isGameEnd === true) {
    	return;
    }    
    
    if (this.userComboGaugeAniPx < this.userComboGaugePx){
    	this.userComboGaugeAniPx++;
   		this.fUi_comboGauge_user.mask.clear();
    	this.fUi_comboGauge_user.mask = this.game.add.graphics(0,0);
    	this.fUi_comboGauge_user.mask.beginFill(0xffffff);
    	this.fUi_comboGauge_user.mask.drawRect(this.fUi_comboGauge_user.x, this.fUi_comboGauge_user.y, this.userComboGaugeAniPx + 1, this.fUi_comboGauge_user.height);    	
    	this.fUi_comboGauge_user.visible = true;
    }   
};

SingleLevel1.prototype.processGaugeOther = function(){
    if(this.isGameEnd === true) {
    	return;
    }    
    
    if (this.otherComboGaugeAniPx < this.otherComboGaugePx){    	
    	this.otherComboGaugeAniPx++;
   		this.fUi_comboGauge_other.mask.clear();
    	this.fUi_comboGauge_other.mask = this.game.add.graphics(0,0);
    	this.fUi_comboGauge_other.mask.beginFill(0xffffff);
    	this.fUi_comboGauge_other.mask.drawRect(512 + this.fUi_comboGauge_other.x, this.fUi_comboGauge_other.y, this.otherComboGaugeAniPx + 1, this.fUi_comboGauge_other.height);    	
    	this.fUi_comboGauge_other.visible = true;
    }   
};

/** jsUserStudy배열에서 단어 뽑아 화면에 보이기 * */
SingleLevel1.prototype.wordsManufactureUser = function() {
	this.wordInputEmptyUser();

	var index = jsOrderStudyArray[userCoinCount];
	var attackStudy = "";
	if(this.otherComboCount <= 1){
		if(this.otherAttackCount === 3){
			attackStudy = jsUserAttackStudy3[userComboIndex];
		} else if(this.otherAttackCount === 4){
			attackStudy = jsUserAttackStudy4[userComboIndex];
		} else if(this.otherAttackCount === 5){
			attackStudy = jsUserAttackStudy5[userComboIndex];
		} else if(this.otherAttackCount === 6){
			attackStudy = jsUserAttackStudy6[userComboIndex];
		}
		
		if(this.otherAttackCount >= 3){
			this.fWordtext_user.text = attackStudy;
		} else {
			this.fWordtext_user.text = jsUserStudy[index];
		}		
		this.otherAttackCount = this.otherComboCount;
	} else {
		this.fWordtext_user.text = jsUserStudy[index];
		this.otherAttackCount = this.otherComboCount;
	}
	
	//console.log("wordsManufactureUser -> this.otherComboCount : " + this.otherComboCount);
	//console.log("wordsManufactureUser -> this.otherAttackCount : " + this.otherAttackCount);
};

/** jsUserStudy배열에서 단어 뽑아 화면에 보이기 * */
SingleLevel1.prototype.wordsManufactureOther = function() {
	this.wordInputEmptyOther();
	var index = jsOrderStudyArray[otherCoinCount];
	var attackStudy = "";
	
	if(this.userComboCount <= 1){
		if(this.userAttackCount === 3){
			attackStudy = jsUserAttackStudy3[otherComboIndex];
		}else if(this.userAttackCount === 4){
			attackStudy = jsUserAttackStudy4[otherComboIndex];
		}else if(this.userAttackCount === 5){
			attackStudy = jsUserAttackStudy5[otherComboIndex];
		}else if(this.userAttackCount === 6){
			attackStudy = jsUserAttackStudy6[otherComboIndex];
		}
		
		if(this.userAttackCount >= 3){
			this.fWordtext_other.text = attackStudy;
		} else {
			this.fWordtext_other.text = jsUserStudy[index];
		}
		this.userAttackCount = this.userComboCount;		
	} else {		
		this.fWordtext_other.text = jsUserStudy[index];
		this.userAttackCount = this.userComboCount;
	}
	
	//console.log("wordsManufactureOther -> this.userComboCount : " + this.userComboCount);
	//console.log("wordsManufactureOther -> this.userAttackCount : " + this.userAttackCount);
	
};

SingleLevel1.prototype.userWordsCheck = function(evt) {

	var wordString = that.fWordtext_user.text;
	var wordAnswer = userTajaTyping.value.trim();
	
	event = evt || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;
		
	if ((keyID >= 33 && keyID <= 40) || keyID == 18) {
    	evt.returnValue = false;
    	return;
    }
	
	if (keyID >= 65 && keyID <= 90){
		that.setToastMessage("영문 자판입니다. 한글로 바꿔주세요.", 2, false);		
		return;
	}
	
	if (keyID == 27) {
		that.setOneBluePopup("혼자놀기를 그만하시겠습니까?", confirmMenuListener);
    }
	
	if(/[a-zA-Z]/.test(evt.target.value)){
		that.setToastMessage("영문 자판입니다. 한글로 바꿔주세요.", 2, false);
        evt.returnValue = false;
     	evt.target.value = evt.target.value.replace(/[a-zA-Z]/g, "");
     	return;
  	}	
	if (keyID === 32 || keyID === 13) {
		userTajaTyping.value = '';
		mUserTypingText = userTajaTyping.value;
	    that.fInputCursorSheet.x = 365;
	    
	    if (wordAnswer === "" || wordAnswer === null){
			return;
		}
		if (wordString === "" || wordString === null){
			userTajaTyping.value = "";
			mUserTypingText = userTajaTyping.value;
			return;
		}
		
		//console.log("wordString " + wordString);
		if (wordString === wordAnswer) {
			that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_right);			
			isUserDrop = true;
		}
		else {
			that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_wrong);
		}
	}
	mUserTypingText = userTajaTyping.value;
};


SingleLevel1.prototype.wordinput = function(){
	var wordString = that.fWordtext_user.text;
	var wordAnswer = userTajaTyping.value.trim();	

	userTajaTyping.value = '';
	mUserTypingText = userTajaTyping.value;
    that.fInputCursorSheet.x = 365;
    
    if (wordAnswer === "" || wordAnswer === null){
		return;
	}
	if (wordString === "" || wordString === null){
		userTajaTyping.value = "";
		mUserTypingText = userTajaTyping.value;
		return;
	}
	
	//console.log("wordString " + wordString);
	if (wordString === wordAnswer) {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_right);			
		isUserDrop = true;
	}
	else {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_wrong);
	}
	
	mUserTypingText = userTajaTyping.value;
};

// 단어 체크함.
SingleLevel1.prototype.otherWordsCheck = function() {
	isOtherDrop = true;
};

SingleLevel1.prototype.wordInputEmptyUser = function() {
	this.fWordtext_user.text = "";
};

SingleLevel1.prototype.wordInputEmptyOther = function() {
	this.fWordtext_other.text = "";
};

SingleLevel1.prototype.getUserBadCoinCount = function() {
	var count = 0;

	this.fCoin_container_user.children.forEach(function(element) {
		if (element.pileStatus === "BAD")
			count++;
	});

	return count;
};

SingleLevel1.prototype.getOtherBadCoinCount = function() {
	var count = 0;

	this.fCoin_container_other.children.forEach(function(element) {
		if (element.pileStatus === "BAD")
			count++;
	});

	return count;
};

SingleLevel1.prototype.initUserField = function() {
	onUserTextField = "<DIV id=" + "TajaControlUser" + " style="
			+ "position:absolute;left:" + "375" + "px;top:" + "-100"
			+ "px;width:300px;height:22px;" + "focus" + ">";

	onUserTextFieldInput = "<input type="
			+ "text"
			+ " id="
			+ "userTajaTyping"
			+ " maxlength=" 
			+ "17"
			+ " style='border:0px; border-style : none; background-color:transparent; color : white; outline-style:none;'"
			+ " autofocus><br>" + "</div>";
	
	
//	onUserTextFieldInput = "<textarea name=" + "userTajaTyping" + " rows=" + "10" + " cols=" + "60" + "autofocus=" + "autofocus" + "></textarea>" + "</div>";

	userTajaBackground.innerHTML = onUserTextField + onUserTextFieldInput;
};

SingleLevel1.prototype.setUserCoinPointAni = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_score);
	this.game.time.events.add(Phaser.Timer.SECOND * 1, function() {
		var comboCount = this.userComboCount < 1 ? 1 : this.userComboCount;
		this.userCoinValueTotalCount += (10 * 1.5 * comboCount);		
	}, this);

	this.particleUnit(this.fCoin_part1_user, this.fCoin_effect_user, 31, 31, -70, 0, 50);
	this.particleUnit(this.fCoin_part2_user, this.fCoin_effect_user, 39, 39, -45, -28, 100);
	this.particleUnit(this.fCoin_part3_user, this.fCoin_effect_user, 35, 35, -10, -55, 150);
	this.particleUnit(this.fCoin_part4_user, this.fCoin_effect_user, 33, 33, 10, -55, 200);
	this.particleUnit(this.fCoin_part5_user, this.fCoin_effect_user, 37, 37, 45, -28, 250);
	
	this.particleUnit(this.fCoin_part6_user, this.fCoin_effect_user, 32, 32, 70, 0, 300);
	this.particleUnit(this.fCoin_part7_user, this.fCoin_effect_user, 38, 38, 45, 28, 350);
	this.particleUnit(this.fCoin_part8_user, this.fCoin_effect_user, 35, 35, 10, 55, 400);
	this.particleUnit(this.fCoin_part9_user, this.fCoin_effect_user, 36, 36, -10, 55, 450);
	this.particleUnit(this.fCoin_part10_user, this.fCoin_effect_user, 34, 34, -45, 28, 500);
};

SingleLevel1.prototype.setOtherCoinPointAni = function() {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_score);
	this.game.time.events.add(Phaser.Timer.SECOND * 1, function() {
		var comboCount = this.otherComboCount < 1 ? 1 : this.otherComboCount;
		this.otherCoinValueTotalCount += (10 * 1.5 * comboCount);		
	}, this);

	this.particleUnit(this.fCoin_part1_other, this.fCoin_effect_other, 31, 31, -70, 0, 50);
	this.particleUnit(this.fCoin_part2_other, this.fCoin_effect_other, 39, 39, -45, -28, 100);
	this.particleUnit(this.fCoin_part3_other, this.fCoin_effect_other, 35, 35, -10, -55, 150);
	this.particleUnit(this.fCoin_part4_other, this.fCoin_effect_other, 33, 33, 10, -55, 200);
	this.particleUnit(this.fCoin_part5_other, this.fCoin_effect_other, 37, 37, 45, -28, 250);

	this.particleUnit(this.fCoin_part6_other, this.fCoin_effect_other, 32, 32, 70, 0, 300);
	this.particleUnit(this.fCoin_part7_other, this.fCoin_effect_other, 38, 38, 45, 28, 350);
	this.particleUnit(this.fCoin_part8_other, this.fCoin_effect_other, 35, 35, 10, 55, 400);
	this.particleUnit(this.fCoin_part9_other, this.fCoin_effect_other, 36, 36, -10, 55, 450);
	this.particleUnit(this.fCoin_part10_other, this.fCoin_effect_other, 34, 34, -45, 28, 500);
};

SingleLevel1.prototype.setUserHeartAni = function() {
	if (this.userHeart === 2) {
		this.fUi_icon_heart1_user.setPlay("HIDE");
	} else if (this.userHeart === 1) {
		this.fUi_icon_heart2_user.setPlay("HIDE");
	} else if (this.userHeart === 0) {
		this.fUi_icon_heart3_user.setPlay("HIDE");
	}
	//console.log("this.userHeart : " + this.userHeart);
	this.fUserComboEffectText.PlayTween();
};

SingleLevel1.prototype.setOtherHeartAni = function() {
	if (this.otherHeart === 2) {
		this.fUi_icon_heart1_other.setPlay("HIDE");
	} else if (this.otherHeart === 1) {
		this.fUi_icon_heart2_other.setPlay("HIDE");
	} else if (this.otherHeart === 0) {
		this.fUi_icon_heart3_other.setPlay("HIDE");
	}
	//console.log("this.otherHeart : " + this.otherHeart);
	this.fOtherComboEffectText.PlayTween();
};

SingleLevel1.prototype.setUserCoinsAni = function(aAnimationName, aIsTween) {
	// fields
	this.fCoin_container_user.children.forEach(function(element) {
		element.setPlay(aAnimationName, aIsTween);
	});
};

SingleLevel1.prototype.setOtherCoinsAni = function(aAnimationName, aIsTween) {
	// fields
	this.fCoin_container_other.children.forEach(function(element) {
		element.setPlay(aAnimationName, aIsTween);
	});
};

SingleLevel1.prototype.userFileSetting = function() {	
	this.fUserCoinPile1.x = this.fUserCoinPile2.x;
	this.fUserCoinPile1.y = this.fUserCoinPile2.y;
	this.fUserCoinPile2.x = this.fUserCoinPile3.x;
	this.fUserCoinPile2.y = this.fUserCoinPile3.y;
	this.fUserCoinPile3.x = this.fUserCoinPile4.x;
	this.fUserCoinPile3.y = this.fUserCoinPile4.y;
	this.fUserCoinPile4.x = this.fUserCoinPile5.x;
	this.fUserCoinPile4.y = this.fUserCoinPile5.y;
	this.fUserCoinPile5.x = this.fUserCoinPile6.x;
	this.fUserCoinPile5.y = this.fUserCoinPile6.y;

	this.fUserCoinPile6.x = this.fUserCoinPile7.x;
	this.fUserCoinPile6.y = this.fUserCoinPile7.y;
	this.fUserCoinPile7.x = this.fUserPlayCoin.x;
	this.fUserCoinPile7.y = this.fUserPlayCoin.y;
	
	this.fUserPlayCoin.x = 0;
	this.fUserPlayCoin.y = 1000;

	this.fUserCoinPile1.pileStatus = this.fUserCoinPile2.pileStatus;
	this.fUserCoinPile2.pileStatus = this.fUserCoinPile3.pileStatus;
	this.fUserCoinPile3.pileStatus = this.fUserCoinPile4.pileStatus;
	this.fUserCoinPile4.pileStatus = this.fUserCoinPile5.pileStatus;
	this.fUserCoinPile5.pileStatus = this.fUserCoinPile6.pileStatus;

	this.fUserCoinPile6.pileStatus = this.fUserCoinPile7.pileStatus;
	this.fUserCoinPile7.pileStatus = this.fUserPlayCoin.pileStatus;
};

SingleLevel1.prototype.otherFileSetting = function() {
	this.fOtherCoinPile1.x = this.fOtherCoinPile2.x;
	this.fOtherCoinPile1.y = this.fOtherCoinPile2.y;
	this.fOtherCoinPile2.x = this.fOtherCoinPile3.x;
	this.fOtherCoinPile2.y = this.fOtherCoinPile3.y;
	this.fOtherCoinPile3.x = this.fOtherCoinPile4.x;
	this.fOtherCoinPile3.y = this.fOtherCoinPile4.y;
	this.fOtherCoinPile4.x = this.fOtherCoinPile5.x;
	this.fOtherCoinPile4.y = this.fOtherCoinPile5.y;
	this.fOtherCoinPile5.x = this.fOtherCoinPile6.x;
	this.fOtherCoinPile5.y = this.fOtherCoinPile6.y;

	this.fOtherCoinPile6.x = this.fOtherCoinPile7.x;
	this.fOtherCoinPile6.y = this.fOtherCoinPile7.y;
	this.fOtherCoinPile7.x = this.fOtherPlayCoin.x;
	this.fOtherCoinPile7.y = this.fOtherPlayCoin.y;
	
	this.fOtherPlayCoin.x = 0;
	this.fOtherPlayCoin.y = 1000;

	this.fOtherCoinPile1.pileStatus = this.fOtherCoinPile2.pileStatus;
	this.fOtherCoinPile2.pileStatus = this.fOtherCoinPile3.pileStatus;
	this.fOtherCoinPile3.pileStatus = this.fOtherCoinPile4.pileStatus;
	this.fOtherCoinPile4.pileStatus = this.fOtherCoinPile5.pileStatus;
	this.fOtherCoinPile5.pileStatus = this.fOtherCoinPile6.pileStatus;

	this.fOtherCoinPile6.pileStatus = this.fOtherCoinPile7.pileStatus;
	this.fOtherCoinPile7.pileStatus = this.fOtherPlayCoin.pileStatus;
};


SingleLevel1.prototype.setUserComboAni = function() {	
	var isVisible = false;
	if(this.userComboCount >= 2){
		isVisible = true;
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_com);		
		this.userComboGaugePx = (this.userComboCount - 1) * 37 + 1;
		
		if(this.userComboCount === 2){
			this.fUserComboEffectText1.PlayTween();
		} else if(this.userComboCount === 3){
			this.fUserComboEffectText2.PlayTween();
		} else if(this.userComboCount === 4){
			this.fUserComboEffectText3.PlayTween();
		} else if(this.userComboCount === 5){
			this.fUserComboEffectText4.PlayTween();
		} else if(this.userComboCount === 6){
			this.fUserComboEffectText5.PlayTween();
		}
	} else {
		this.userComboGaugePx = 0;
		this.userComboGaugeAniPx = 0;
	}
	
	this.fCombo_group_user.visible = isVisible;
	this.fUi_comboPanel_user.visible = isVisible;
	this.fUi_comboGauge_user.visible = isVisible;
};


SingleLevel1.prototype.setOtherComboAni = function() {	
	var isVisible = false;
	if(this.otherComboCount >= 2){
		isVisible = true;
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_com);		
		this.otherComboGaugePx = (this.otherComboCount - 1) * 37 + 1;
		
		if(this.otherComboCount === 2){
			this.fOtherComboEffectText1.PlayTween();
		} else if(this.otherComboCount === 3){
			this.fOtherComboEffectText2.PlayTween();
		} else if(this.otherComboCount === 4){
			this.fOtherComboEffectText3.PlayTween();
		} else if(this.otherComboCount === 5){
			this.fOtherComboEffectText4.PlayTween();
		} else if(this.otherComboCount === 6){
			this.fOtherComboEffectText5.PlayTween();
		}
		
	} else {
		this.otherComboGaugePx = 0;
		this.otherComboGaugeAniPx = 0;
	}
	
	this.fCombo_group_other.visible = isVisible;
	this.fUi_comboPanel_other.visible = isVisible;
	this.fUi_comboGauge_other.visible = isVisible;
};

SingleLevel1.prototype.endUserComboAni = function() {
	this.fUi_comboPanel_user.visible = false;
	this.fUi_comboGauge_user.visible = false;
};

SingleLevel1.prototype.endOtherComboAni = function() {
	this.fUi_comboPanel_other.visible = false;
	this.fUi_comboGauge_other.visible = false;
};

SingleLevel1.prototype.setUserComboMax = function() {
	if(this.userComboGaugeAniPx >= this.fUi_comboGauge_user.width){
		this.fUi_comboPanel_user.visible = false;
		this.userComboGaugePx = 0;
		this.userComboGaugeAniPx = 0;
		this.fUi_comboGauge_user.visible = false;
	}
};

SingleLevel1.prototype.setOtherComboMax = function() {
	if(this.otherComboGaugeAniPx >= this.fUi_comboGauge_other.width){
		this.fUi_comboPanel_other.visible = false;
		this.fUi_comboGauge_other.visible = false;
		this.otherComboGaugePx = 0;
		this.otherComboGaugeAniPx = 0;
		this.fUi_comboGauge_other.visible = false;


	}
};

SingleLevel1.prototype.setGameReadyAnimation = function() {
	this.startCountUserArray();
	this.startCountOtherArray();
	
	this.setStartUserCount();
	this.setStartOtherCount();
	
	// 3,2,1 스타트 구현
	this.game.time.events.add(Phaser.Timer.SECOND * 4, function() {
		this.setGameState(that.gameConst.GameStateType.START);
	}, this);
};

SingleLevel1.prototype.startCountUserArray = function() {
	// 3,2,1,Start
	startCountUserArray = [ this.fBegin_ready_user, this.fBegin_ready1_user, this.fBegin_ready2_user, this.fBegin_start_user ];
};

SingleLevel1.prototype.setStartUserCount = function() {
	this.fStart_count_user.visible = true;
	var totalTime = 1000;
	for (var i = 0; i < startCountUserArray.length; i++) {

		//console.log("startCountUserArray.length " + startCountUserArray.length);
		startCountUserArray[i].visible = true;
		startCountUserArray[i].alpha = 1;
		startCountUserArray[i].scale.x = 0;
		startCountUserArray[i].scale.y = 0;

		this.game.add.tween(startCountUserArray[i].scale).to({
			x : 1,
			y : 1
		}, 300, "Linear", true, (totalTime * i));
		this.game.add.tween(startCountUserArray[i]).to({
			alpha : 0
		}, 300, "Linear", true, 700 + (totalTime * i));
	}

	this.game.time.events.add(Phaser.Timer.SECOND * 3.8, function() {
		this.fChar_aniSheet_user.setPlay("IDLE");
		this.fChar_aniSheet_other.setPlay("IDLE");

		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_pelican_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_airplane_user.setPlay("PLAY", true, -1);

		this.fBackground_pelican_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_airplane_other.setPlay("PLAY", true, 1);
		}, this);

	}, this);
};

SingleLevel1.prototype.startCountOtherArray = function() {
	// 3,2,1,Start
	startCountOtherArray = [ this.fBegin_ready_other, this.fBegin_ready1_other, this.fBegin_ready2_other, this.fBegin_start_other ];
};

SingleLevel1.prototype.setStartOtherCount = function() {
	this.fStart_count_other.visible = true;
	var totalTime = 1000;
	
	//this.soundManager.play('CoDown_3_2_1');
	
	for (var i = 0; i < startCountOtherArray.length; i++) {

		//console.log("startCountUserArray.length " + startCountOtherArray.length);
		startCountOtherArray[i].visible = true;
		startCountOtherArray[i].alpha = 1;
		startCountOtherArray[i].scale.x = 0;
		startCountOtherArray[i].scale.y = 0;

		this.game.add.tween(startCountOtherArray[i].scale).to({
			x : 1,
			y : 1
		}, 300, "Linear", true, (totalTime * i));
		this.game.add.tween(startCountOtherArray[i]).to({
			alpha : 0
		}, 300, "Linear", true, 700 + (totalTime * i));
		
		this.game.time.events.add(totalTime * i, function() {			
			if(i === (startCountOtherArray.length - 1)){
				this.soundManager.play(that.soundManager.SOUND_TYPE.G_Start);
			} else {
				this.soundManager.play(that.soundManager.SOUND_TYPE.CoDown_3_2_1);
			}			
		}, this);
	}
};

SingleLevel1.prototype.setUserEffectCrash = function() {
	this.fCrumble_group_user.visible = true;

	this.fCrumble_group_user.children.forEach(function(element) {
		element.delay = (Math.floor(Math.random() * 3) + 3) / 9;
		element.setPlay("PLAY", false, element.delay, 0);
	});
};

SingleLevel1.prototype.setOtherEffectCrash = function() {
	this.fCrumble_group_other.visible = true;

	this.fCrumble_group_other.children.forEach(function(element) {
		element.delay = (Math.floor(Math.random() * 3) + 3) / 9;
		element.setPlay("PLAY", false, element.delay, 0);
	});
};

SingleLevel1.prototype.setUserTextAni = function() {
	this.setUserMeterAni();
	this.setUserCoinValueAni();
};

SingleLevel1.prototype.setOtherTextAni = function() {
	this.setOtherMeterAni();
	this.setOtherCoinValueAni();
};

SingleLevel1.prototype.setUserMeterAni = function() {
	if ((this.userCoinCollectCount * 10) > this.userMeterValue) {
		this.userMeterValue++;

		this.fMeterValue_user.text = this.userMeterValue.toString() + "m";
		this.fMeterOutlineValue_user.text = this.userMeterValue.toString()
				+ "m";
	}
};

SingleLevel1.prototype.setOtherMeterAni = function() {
	if ((this.otherCoinCollectCount * 10) > this.otherMeterValue) {
		this.otherMeterValue++;

		this.fMeterValue_other.text = this.otherMeterValue.toString() + "m";
		this.fMeterOutlineValue_other.text = this.otherMeterValue.toString()
				+ "m";
	}
};

SingleLevel1.prototype.setUserCoinValueAni = function() {
	if (this.userCoinValueTotalCount > this.userCoinValue) {
		this.userCoinValue++;

		this.fCoinValue_user.text = this.userCoinValue.toString();
		this.fCoinValueOutline_user.text = this.userCoinValue.toString();
	}
};

SingleLevel1.prototype.setOtherCoinValueAni = function() {
	if (this.otherCoinValueTotalCount > this.otherCoinValue) {
		this.otherCoinValue++;

		this.fCoinValue_other.text = this.otherCoinValue.toString();
		this.fCoinValueOutline_other.text = this.otherCoinValue.toString();
	}
};

SingleLevel1.prototype.setAICorrect = function(aComboCount) {

	var comboCountRate = [ 95, 90, 85, 80, 75, 70 ];
	var inputTimeRate = [ [ 75, 95, 100, 100, 100, 100 ], // 1음절.
						  [ 60, 90, 95, 100, 100, 100 ], // 2음절.
						  [ 45, 85, 90, 95, 100, 100 ], // 3음절.
						  [ 30, 80, 85, 90, 95, 100 ], // 4음절.
						  [ 15, 65, 80, 90, 95, 100 ], // 5음절.
						
						  [ 5, 45, 65, 80, 90, 100 ], // 6음절.
						  [ 0, 30, 50, 70, 85, 100 ], // 8음절.
						  [ 0, 10, 20, 40, 80, 100 ], // 12음절.
						  [ 0, 0, 5, 15, 55, 100 ] ]; // 16음절.
	
	if(that.gameData.playMode === that.gameConst.GameLevel.HARD){
		var levelLimitSecond = [ 1000, 2000, 2250, 2500, 2750, 3000 ];
	} else {
		var levelLimitSecond = [ 2000, 4000, 4500, 5000, 5500, 6000 ];
	}
	//var levelLimitSecond = [ 1000, 2000, 2250, 2500, 2750, 3000 ];

	var textLength = this.fWordtext_other.text.length;
	var textIndex = 0;

	if (textLength >= 16)
		textIndex = 8;
	else if (textLength >= 12)
		textIndex = 7;
	else if (textLength >= 8)
		textIndex = 6;
	else if (textLength >= 6)
		textIndex = 5;
	else if (textLength >= 1)
		textIndex = (textLength - 1);

	// 325
	var initDelaySecond = 200;
	var secIdx = 6;
	// var combo
	var comboRateRandom = Math.floor(Math.random() * 100);

	if (comboRateRandom > comboCountRate[aComboCount]) {
		return levelLimitSecond[levelLimitSecond.length - 1] + 300;
	} else {
		var timeRateRandom = Math.floor(Math.random() * 100);
		for (var i = 0; i < inputTimeRate[textIndex].length; i++) {
			if (inputTimeRate[textIndex][i] > timeRateRandom) {
				secIdx = i;
				break;
			}
		}

		//console.log("[기획] " + this.fWordtext_other.text + " 의 상대방 입력시간은 " + (secIdx) + "초 ~ " + (secIdx + 1) + "초입니다.");

		if (secIdx == 6) {
			return levelLimitSecond[levelLimitSecond.length - 1] + 1000;
		} else if (secIdx === 0) {
			return Math.floor(Math.random() * levelLimitSecond[secIdx])	+ initDelaySecond;
		} else {
			return (Math.floor(Math.random() * (levelLimitSecond[secIdx] - levelLimitSecond[secIdx - 1])) + levelLimitSecond[secIdx - 1]);
		}
	}
};

SingleLevel1.prototype.sharing = function(){		

};

SingleLevel1.prototype.setUserWordNextType = function(aComboCount) {
	if(aComboCount === 3){
		userWordNextType = this.gameConst.WordType.ATTACK_1;
	} else if(aComboCount === 4){
		userWordNextType = this.gameConst.WordType.ATTACK_2;
	} else if(aComboCount === 5){
		userWordNextType = this.gameConst.WordType.ATTACK_3;
	} else if(aComboCount === 6){
		userWordNextType = this.gameConst.WordType.ATTACK_4;
	} else	{
		userWordNextType = this.gameConst.WordType.BASIC;
	}
	
	//console.log("SingleLevel1::setUserWordNextType...aComboCount is -> " + aComboCount);
};

SingleLevel1.prototype.setOtherWordNextType = function(aComboCount) {
	if(aComboCount === 3){
		otherWordNextType = this.gameConst.WordType.ATTACK_1;
	} else if(aComboCount === 4){
		otherWordNextType = this.gameConst.WordType.ATTACK_2;
	} else if(aComboCount === 5){
		otherWordNextType = this.gameConst.WordType.ATTACK_3;
	} else if(aComboCount === 6){
		otherWordNextType = this.gameConst.WordType.ATTACK_4;
	} else	{
		otherWordNextType = this.gameConst.WordType.BASIC;
	}
	
	//console.log("SingleLevel1::setOtherWordNextType...aComboCount is -> " + aComboCount);
	
	//console.log("setOtherWordNextType_aComboCount = " + aComboCount);
	//console.log("setOtherWordNextType_otherWordNextType = " + otherWordNextType);
};

SingleLevel1.prototype.nowTime = function() {
	var nowTime = new Date();
	var gap = nowTime.getTime() - this.oldTime.getTime();

	var sec_gap = Math.floor(((60000 - gap) / 1000) % 60);
	var min_gap = Math.floor((60000 - gap) / 1000 / 60);

	var sec_gap_str = sec_gap.toString();
	var min_gap_str = min_gap.toString();

	if (sec_gap < 10)
		sec_gap_str = "0" + sec_gap_str;
	if (min_gap < 10)
		min_gap_str = "0" + min_gap_str;

	if (min_gap <= 0 && sec_gap <= 20 && this.isWarring === false) {
		this.isWarring = true;

		that.soundManager.play(that.soundManager.SOUND_TYPE.Time_danger);
		
		var tween = this.game.add.tween(this.fUi_timePanel_Alert).to({
			alpha : 1
		}, 500, "Linear", true, 0, -1);
		tween.yoyo(true, 100);
	}

	if (sec_gap <= 0 && min_gap <= 0) {
		this.soundManager.stop(that.soundManager.SOUND_TYPE.Time_danger);
		this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
		this.isGameEnd = true;
		this.setGameOver();
		this.wordInputEmptyUser();
		this.wordInputEmptyOther();
		this.fSheet_talkBox_user.hide();
		this.fSheet_talkBoxCombo1_user.hide();
		this.fSheet_talkBoxCombo2_user.hide();
		this.fSheet_talkBox_other.hide();
		this.fSheet_talkBoxCombo1_other.hide();
		this.fSheet_talkBoxCombo2_other.hide();
	}

	return min_gap_str + ":" + sec_gap_str;
};

SingleLevel1.prototype.setEffectAttackFly = function() {

};

// Collection
SingleLevel1.prototype.shakeTween = function(aTweenObject, strength) {
	var tweenA = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x + (5 * strength),
		y : aTweenObject.y + (5 * strength)
	}, 10, "Linear");
	var tweenB = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x,
		y : aTweenObject.y
	}, 10, "Linear");

	var tweenC = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x + (2 * strength),
		y : aTweenObject.y + (2 * strength)
	}, 10, "Linear");
	var tweenD = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x,
		y : aTweenObject.y
	}, 10, "Linear");
	tweenA.chain(tweenB.chain(tweenC.chain(tweenD))).start();
};

SingleLevel1.prototype.particleUnit = function(aTweenObject, aEndEffectObject, aTargetX, aTargetY, aWidth, aHeight, aSpeed) {
	var randX = Math.floor(Math.random() * 30) - 15 + aWidth;
	var randY = Math.floor(Math.random() * 30) - 15 + aHeight;

	aTweenObject.x = aTweenObject.initX;
	aTweenObject.y = aTweenObject.initY;

	aTweenObject.scale.x = 1;
	aTweenObject.scale.y = 1;

	aTweenObject.visible = true;
	aTweenObject.alpha = 0;

	var tweenA = this.game.add.tween(aTweenObject).to({
		alpha : 1,
		x : aTweenObject.x + randX,
		y : aTweenObject.y + randY
	}, 500, "Quart.easeIn", false);
	var tweenB = this.game.add.tween(aTweenObject).to({
		x : aTargetX,
		y : aTargetY
	}, 700 - aSpeed, "Quart.easeIn", false, 200);

	tweenA.chain(tweenB).start();
	tweenB.onComplete.add(function() {
		aTweenObject.visible = false;
		aEndEffectObject.setPlay("SHOW", false);
	}, this);
};

//CHARACTER_TYPE : {"AMOGAE":0, "GIGI":1, "MOA":2, "MAMANG":3, "YUKBEE":4, "YAYA":5},
SingleLevel1.prototype.setIngameCharacterAni = function(aIsUser, aCharacterType){
	var characterAni;
	var characterPoseAni;
	
	switch(aCharacterType){
		case  this.gameConst.CHARACTER_TYPE.AMOGAE :
			characterAni = new CharAmogeaIngameV3(this.game, 235.0, 436.0);
			characterPoseAni = new CharAmogeaResultV3(this.game, 235.0, 436.0);
		break;	
		
		case  this.gameConst.CHARACTER_TYPE.GIGI :
			characterAni = new CharJijiIngameV1(this.game, 235.0, 436.0);
			characterPoseAni = new CharJijiResultV1(this.game, 235.0, 436.0);
		break;
		
		case  this.gameConst.CHARACTER_TYPE.MOA :
			characterAni = new CharMoaIngameV1(this.game, 235.0, 436.0);
			characterPoseAni = new CharMoaResultV1(this.game, 235.0, 436.0);
		break;
		
		case  this.gameConst.CHARACTER_TYPE.MAMANG :
			characterAni = new CharMamangIngameV2(this.game, 235.0, 436.0);
			characterPoseAni = new CharMamangResultV2(this.game, 235.0, 436.0);
		break;
		
		case  this.gameConst.CHARACTER_TYPE.YUKBEE :
			characterAni = new Char6bIngameV1(this.game, 235.0, 436.0);
			characterPoseAni = new Char6bResultV1(this.game, 235.0, 436.0);
		break;

		case  this.gameConst.CHARACTER_TYPE.YAYA :
			characterAni = new CharYayaIngameV1(this.game, 235.0, 436.0);
			characterPoseAni = new CharYayaResultV1(this.game, 235.0, 436.0);
		break;
		
		default:
			characterAni = new CharAmogeaIngameV3(this.game, 235.0, 436.0);
			characterPoseAni = new CharAmogeaResultV3(this.game, 235.0, 436.0);
		break;
	}
	
	if(aIsUser === true){
		this.fChar_aniSheet_user = characterAni;
		this.fChar_aniSheet_user_group.add(this.fChar_aniSheet_user);
		
		this.fChar_aniPoseSheet_user = characterPoseAni;
		this.fChar_aniSheet_user_group.add(this.fChar_aniPoseSheet_user);
	} else {		
		this.fChar_aniSheet_other = characterAni;
		this.fChar_aniSheet_other_group.add(this.fChar_aniSheet_other);
		
		this.fChar_aniPoseSheet_other = characterPoseAni;
		this.fChar_aniSheet_other_group.add(this.fChar_aniPoseSheet_other);
	}
};

SingleLevel1.prototype.setIngameResultCharacterAni = function(){
	var resultCharacterPoseAni;	
	
	switch(that.gameData.userCharacterType){
		case  that.gameConst.CHARACTER_TYPE.AMOGAE :
			resultCharacterPoseAni = new CharAmogeaResultV3(this.game, 512.0, 292.0);
		break;	
		
		case  that.gameConst.CHARACTER_TYPE.GIGI :
			resultCharacterPoseAni = new CharJijiResultV1(this.game, 512.0, 292.0);
		break;
		
		case  that.gameConst.CHARACTER_TYPE.MOA :
			resultCharacterPoseAni = new CharMoaResultV1(this.game, 512.0, 292.0);
		break;
		
		case  that.gameConst.CHARACTER_TYPE.MAMANG :
			resultCharacterPoseAni = new CharMamangResultV2(this.game, 512.0, 292.0);
		break;
		
		case  that.gameConst.CHARACTER_TYPE.YUKBEE :
			resultCharacterPoseAni = new Char6bResultV1(this.game, 512.0, 292.0);
		break;

		case  that.gameConst.CHARACTER_TYPE.YAYA :
			resultCharacterPoseAni = new CharYayaResultV1(this.game, 512.0, 292.0);
		break;
		
		default:
			resultCharacterPoseAni = new CharAmogeaResultV3(this.game, 512.0, 292.0);
		break;
	}
	
	this.fChar_result_aniPoseSheet_user = resultCharacterPoseAni;
	this.fCharAIAniSheetGroup.add(this.fChar_result_aniPoseSheet_user);
};

//AI 공용 UI 처리
SingleLevel1.prototype.resultCommonAI = function() {
	this.fSucessAI.visible = true;
	
	this.fChar_aniSheet_user.visible = false;
	this.fChar_aniSheet_other.visible = false;
	
	this.fChar_aniSheet_user.x = -1000;
	this.fChar_aniSheet_other.x = -1000;
	
	this.fChar_aniSheet_user.alpha = 0;
	this.fChar_aniSheet_other.alpha = 0;
	
	this.fChar_aniSheet_user.x = -700.0;
	this.fChar_aniSheet_user.y = -700.0;

	this.fRUICharEffSA1.scale.x = 0.8;
	this.fRUICharEffSA1.scale.y = 0.8;
	
	if ((this.userCoinCollectCount * 10) > this.userMeterValue) {
		this.userMeterValue = (this.userCoinCollectCount * 10);
		this.fMeterValue_user.text = this.userMeterValue.toString() + "m";
		this.fMeterOutlineValue_user.text = this.userMeterValue.toString() + "m";
	}

	if ((this.otherCoinCollectCount * 10) > this.otherMeterValue) {
		this.otherMeterValue = (this.otherCoinCollectCount * 10);
		this.fMeterValue_other.text = this.otherMeterValue.toString() + "m";
		this.fMeterOutlineValue_other.text = this.otherMeterValue.toString() + "m";
	}
	
	
	if (this.userCoinValueTotalCount > this.userCoinValue) {
		this.userCoinValue = this.userCoinValueTotalCount;
		this.fCoinValue_user.text = this.userCoinValue.toString();
		this.fCoinValueOutline_user.text = this.userCoinValue.toString();
	}	


	if (this.otherCoinValueTotalCount > this.otherCoinValue) {
		this.otherCoinValue = this.otherCoinValueTotalCount;
		this.fCoinValue_other.text = this.otherCoinValue.toString();
		this.fCoinValueOutline_other.text = this.otherCoinValue.toString();
	}
	
	
	//this.fRUICharEffSA2.angle += 0.5;
	//this.fRUICharEffSA1.angle -= 0.7;

	this.gameUtil.setText(this.fPMeterSA1, 126, 40, 'right', 'middle', this.userMeterValue + "M");
	this.gameUtil.setText(this.fPPointSA1, 126, 40, 'right', 'middle', this.userCoinValue + "점");

	this.gameUtil.setText(this.fPNicknameLineSA1, 270, 40, 'center', 'middle', that.gameData.userNickName + " 님");
	this.gameUtil.setText(this.fPNicknameSA1, 270, 40, 'center', 'middle', that.gameData.userNickName + " 님");

	this.gameUtil.setText(this.fPMeterSA2, 126, 40, 'right', 'middle', this.otherMeterValue + "M");
	this.gameUtil.setText(this.fPPointSA2, 126, 40, 'right', 'middle', this.otherCoinValue + "점");

	this.gameUtil.setText(this.fPNicknameLineSA2, 270, 40, 'center', 'middle', that.gameData.otherNickName + " 님");
	this.gameUtil.setText(this.fPNicknameSA2, 270, 40, 'center', 'middle', that.gameData.otherNickName + " 님");

	// 패배 시 닉네임 색깔 분홍색
	// 승리/무승부 시 닉네임 색깔 하늘색
	if (this.userHeart <= 0 || this.userMeterValue < this.otherMeterValue) {
		this.gameUtil.setTextColor(this.fPNicknameLineSA1, '#ffd2bb', '#ffd2bb');
		this.gameUtil.setTextColor(this.fPNicknameLineSA2, '#ffd2bb', '#ffd2bb');
	}else if( this.otherHeart <= 0 || this.userMeterValue > this.otherMeterValue) {
		this.gameUtil.setTextColor(this.fPNicknameLineSA1, '#bff2ff', '#bff2ff');
		this.gameUtil.setTextColor(this.fPNicknameLineSA2, '#bff2ff', '#bff2ff');
	} else {
		if(this.userCoinValue < this.otherCoinValue){
			this.gameUtil.setTextColor(this.fPNicknameLineSA1, '#ffd2bb', '#ffd2bb');
			this.gameUtil.setTextColor(this.fPNicknameLineSA2, '#ffd2bb', '#ffd2bb');
		}else{
			this.gameUtil.setTextColor(this.fPNicknameLineSA1, '#bff2ff', '#bff2ff');
			this.gameUtil.setTextColor(this.fPNicknameLineSA2, '#bff2ff', '#bff2ff');			
		}
	}
};

// AI 승리 UI 처리
SingleLevel1.prototype.resultSuccessAI = function() {
	this.fRUIVicTitleSA.visible = true; // 타이틀
	this.fRUIRedPanelSA.visible = true; // 배경
	this.fRUIInfoRSA2.visible = true; // 점수 우측 배경
	this.fRUIInfoRSA1.visible = true; // 점수 좌측 배경
	
//	this.fChar_aniSheet_user.visible = false;
//	this.fChar_aniSheet_other.visible = false;
	
	this.fChar_result_aniPoseSheet_user.setPlay("RESULT_WIN");		// 내 캐릭터 승리 애니메이션
	if(this.getUserBadCoinCount() < 3)
		this.fChar_aniPoseSheet_user.setPlay("RESULT_WIN");				// 내 캐릭터 승리 애니메이션
	if(this.getOtherBadCoinCount() < 3)
		this.fChar_aniPoseSheet_other.setPlay("RESULT_LOSE");			// 상대방 캐릭터 패배 애니메이션	
	
	this.soundManager.play(that.soundManager.SOUND_TYPE.Vict);
};

// AI 패배 UI 처리
SingleLevel1.prototype.resultLoseAI = function() {
	this.fRUIFailTitleFA.visible = true; // 타이틀
	this.fRUIRedPanelFA.visible = true; // 배경
	this.fRUIInfoRFA2.visible = true; // 점수 우측 배경
	this.fRUIInfoRFA1.visible = true; // 점수 좌측 배경
	
//	this.fChar_aniSheet_user.visible = false;
//	this.fChar_aniSheet_other.visible = false;
	
	this.fChar_result_aniPoseSheet_user.setPlay("RESULT_LOSE");		// 내 캐릭터 승리 애니메이션
	if(this.getUserBadCoinCount() < 3)
		this.fChar_aniPoseSheet_user.setPlay("RESULT_LOSE");			// 내 캐릭터 패배 애니메이션
	if(this.getOtherBadCoinCount() < 3)
		this.fChar_aniPoseSheet_other.setPlay("RESULT_WIN");			// 상대방 캐릭터 승리 애니메이션	
	
	this.soundManager.play(that.soundManager.SOUND_TYPE.Lose);
};

// AI 무승부 UI 처리
SingleLevel1.prototype.resultDrawAI = function() {
	this.fRUIDrawTitleDA.visible = true; // 타이틀
	this.fRUIRedPanelSA.visible = true; // 배경
	this.fRUIInfoRSA2.visible = true; // 점수 우측 배경
	this.fRUIInfoRSA1.visible = true; // 점수 좌측 배경
	
//	this.fChar_aniSheet_user.visible = false;
//	this.fChar_aniSheet_other.visible = false;
	
	this.fChar_result_aniPoseSheet_user.setPlay("RESULT_DRAW");		// 내 캐릭터 승리 애니메이션
	if(this.getUserBadCoinCount() < 3)
		this.fChar_aniPoseSheet_user.setPlay("RESULT_DRAW");			// 내 캐릭터 무승부 애니메이션
	if(this.getOtherBadCoinCount() < 3)
		this.fChar_aniPoseSheet_other.setPlay("RESULT_DRAW");			// 상대방 캐릭터 무승부 애니메이션
	
	this.soundManager.play(that.soundManager.SOUND_TYPE.Draw);
};

//AI 계속하기 버튼 처리
SingleLevel1.prototype.ContinueAI = function(evt) {
	//console.log("AI 계속하기 ");
};

// AI 나가기 버튼 처리
SingleLevel1.prototype.ExitAI = function(evt) {
	//console.log("AI 나가기 ");
	//that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Lob);
	that.game.state.start("MenuV2");
};

//토스트 메세지
SingleLevel1.prototype.setToastMessage = function(aExplan, aSecTime, aIsInputEnabled) {
	var isInputEnabled = true;
	that.fToastMessageGroup.visible = true;
	
	isInputEnabled = (aIsInputEnabled === undefined) ? true : aIsInputEnabled;
		
	that.gameUtil.setText(this.fToastMessageText, 0, 28, "center", "middle", aExplan);
	
	if(aSecTime === undefined) return;
	
	that.game.time.events.add(Phaser.Timer.SECOND * aSecTime, function() {
		that.fToastMessageGroup.visible = false;
		that.fNotRayCast1.inputEnabled = false;
	}, that);
};

//토스트 메세지
SingleLevel1.prototype.disableToastMessage = function() {
	that.fToastMessageGroup.visible = false;
};

//확인 버튼만 있는 팝업창
SingleLevel1.prototype.setOneBluePopup = function(aExplan, aConfirm) {
	this.fPopupPublicB.visible = true;
	this.fTransImg703.inputEnabled = true;
	
	this.fPopupBtnCheck3.visible = true;
	this.fPopupBtnNo.visible = false;
	this.fPopupBtnYes.visible = false;		
		
	this.gameUtil.setText(this.fContentsText, 0, 28, "center", "middle", aExplan);
	
	this.fPopupBtnCheck3.events.onInputDown.addOnce(aConfirm, this);
};

function confirmMenuListener() {
	//console.log("confirmBlueListener");
	this.fPopupPublicB.visible = false;
	this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
	that.game.state.start("MenuV2");	
}

SingleLevel1.prototype.cancelBlueListener = function() {
	//console.log("cancelBlueListener");
	this.fPopupPublicB.visible = false;
};

//로그 관련...
//싱글 결과 관련 정보 보냄...
function netResLogStartEndGameSuccess(aData){
	//console.log("netResLogStartEndGameSuccess 으로 로그가 쌓였습니다.");
}

function netResLogStartEndGameFail(aResult){
	//console.log("netResLogStartEndGameFail 으로 로그가 안 쌓였습니다.");
}

SingleLevel1.prototype.LeadingZeros = function(n, digits) {
    var zero = '';
    var len = n.toString();

    if (len.length < digits) {
      for (var i = 0; i < digits - len.length; i++)
        zero += '0';
    }
    return zero + len;
};
