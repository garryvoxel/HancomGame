// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * Level1.
 */
function Level1() {
	
	Phaser.State.call(this);
	this.beforeConstruct();
	this.afterConstruct();
	
}

/** @type Phaser.State */
var Level1_proto = Object.create(Phaser.State.prototype);
Level1.prototype = Level1_proto;
Level1.prototype.constructor = Level1;

Level1.prototype.init = function () {
	
	this.beforeInit();
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	
	this.afterInit();
	
};

Level1.prototype.preload = function () {
	
	this.beforePreload();
	
	this.afterPreload();
	
};

Level1.prototype.create = function () {
	
	this.beforeCreate();
	
	var _root = this.add.group();
	
	var _other = this.add.physicsGroup(Phaser.Physics.ARCADE, _root);
	_other.position.setTo(512.0, 0.0);
	
	var _back_other = this.add.group(_other);
	
	var _back_far_other = this.add.group(_back_other);
	
	
	
	
	var _back_object_other = this.add.group(_back_other);
	
	
	
	var _back_near_other = this.add.group(_back_other);
	
	
	
	
	
	
	
	
	
	this.add.sprite(15.0, 12.0, 'ui_up_panel', null, _other);
	
	this.add.sprite(26.0, 21.0, 'ui_icon_coin', null, _other);
	
	var _coinValueOutline_other = this.add.text(77.5, 26.5, '4680', {"font":"bold 20px 나눔고딕","strokeThickness":4,"align":"right"}, _other);
	
	var _coinValue_other = this.add.text(79.0, 28.0, '4680', {"font":"bold 20px 나눔고딕","fill":"#ffffff","align":"right"}, _other);
	
	this.add.sprite(365.0, 12.0, 'ui_up_panel', null, _other);
	
	this.add.tileSprite(0.0, 220.0, 511.0, 6.0, 'ui_guideLine', null, _other);
	
	var _ui_icon_heart3_other = new LifeHeartV1(this.game, 461.0, 39.0);
	_other.add(_ui_icon_heart3_other);
	
	var _ui_icon_heart2_other = new LifeHeartV1(this.game, 431.0, 39.0);
	_other.add(_ui_icon_heart2_other);
	
	var _ui_icon_heart1_other = new LifeHeartV1(this.game, 400.0, 39.0);
	_other.add(_ui_icon_heart1_other);
	
	var _meterOutlineValue_other = this.add.text(261.0, 39.0, '4680m', {"font":"41px 나눔고딕","strokeThickness":4,"align":"center"}, _other);
	_meterOutlineValue_other.anchor.setTo(0.5, 0.5);
	
	var _meterValue_other = this.add.text(261.0, 39.0, '4680m', {"font":"41px 나눔고딕","fill":"#ffffff","align":"center"}, _other);
	_meterValue_other.anchor.setTo(0.5, 0.5);
	
	var _coin_container_other = this.add.group(_other);
	
	
	
	
	
	
	
	
	var _coin_player_other = this.add.physicsGroup(Phaser.Physics.ARCADE, _other);
	
	var _parachuteSheet_other = new ParaChuteV1(this.game, 235.0, 436.0);
	_other.add(_parachuteSheet_other);
	
	var _Char_aniSheet_other_group = this.add.group(_other);
	
	
	
	var _coin_part_other = this.add.group(_other);
	
	var _coin_part10_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part10_other);
	
	var _coin_part9_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part9_other);
	
	var _coin_part8_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part8_other);
	
	var _coin_part7_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part7_other);
	
	var _coin_part6_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part6_other);
	
	var _coin_part5_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part5_other);
	
	var _coin_part4_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part4_other);
	
	var _coin_part3_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part3_other);
	
	var _coin_part2_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part2_other);
	
	var _coin_part1_other = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_other.add(_coin_part1_other);
	
	var _sheet_talkBox_other = new TalkBoxV1(this.game, 245.0, 335.0);
	_other.add(_sheet_talkBox_other);
	
	var _sheet_talkBoxCombo1_other = new TalkBoxComboV2(this.game, 245.0, 335.0);
	_other.add(_sheet_talkBoxCombo1_other);
	
	var _sheet_talkBoxCombo2_other = new TalkBoxCombo2V2(this.game, 245.0, 335.0);
	_other.add(_sheet_talkBoxCombo2_other);
	
	var _wordtext_other = this.add.text(192.0, 274.0, '', {"font":"20px 나눔고딕","fill":"#ffffff","align":"center"}, _other);
	
	var _sheet_coin_eff_other = new CoinEffectV1(this.game, 236.0, 426.0);
	_other.add(_sheet_coin_eff_other);
	
	var _sheet_coinCombo_eff_other = new CoinEffectComboV1(this.game, 238.0, 431.0);
	_other.add(_sheet_coinCombo_eff_other);
	
	
	var _combo_group_other = this.add.group(_other);
	
	var _ui_comboPanel_other = this.add.sprite(151.0, 420.0, 'ui_comboPanel', null, _combo_group_other);
	
	var _ui_comboGauge_other = this.add.sprite(152.0, 484.0, 'ui_comboGauge', null, _combo_group_other);
	
	var _crumble_group_other = this.add.group(_other);
	
	var _crumble_effect_20_other = new CoinEffCrashV2(this.game, 252.0, 382.0);
	_crumble_group_other.add(_crumble_effect_20_other);
	
	var _crumble_effect_19_other = new CoinEffCrashV2(this.game, 346.0, 502.0);
	_crumble_group_other.add(_crumble_effect_19_other);
	
	var _crumble_effect_18_other = new CoinEffCrashV2(this.game, 150.0, 492.0);
	_crumble_group_other.add(_crumble_effect_18_other);
	
	var _crumble_effect_17_other = new CoinEffCrashV2(this.game, 320.0, 470.0);
	_crumble_group_other.add(_crumble_effect_17_other);
	
	var _crumble_effect_16_other = new CoinEffCrashV2(this.game, 325.0, 431.0);
	_crumble_group_other.add(_crumble_effect_16_other);
	
	var _crumble_effect_15_other = new CoinEffCrashV2(this.game, 288.0, 386.0);
	_crumble_group_other.add(_crumble_effect_15_other);
	
	var _crumble_effect_14_other = new CoinEffCrashV2(this.game, 238.0, 377.0);
	_crumble_group_other.add(_crumble_effect_14_other);
	
	var _crumble_effect_13_other = new CoinEffCrashV2(this.game, 178.0, 379.0);
	_crumble_group_other.add(_crumble_effect_13_other);
	
	var _crumble_effect_12_other = new CoinEffCrashV2(this.game, 154.0, 435.0);
	_crumble_group_other.add(_crumble_effect_12_other);
	
	var _crumble_effect_11_other = new CoinEffCrashV2(this.game, 162.0, 488.0);
	_crumble_group_other.add(_crumble_effect_11_other);
	
	var _crumble_effect_10_other = new CoinEffCrashV2(this.game, 250.0, 400.0);
	_crumble_group_other.add(_crumble_effect_10_other);
	
	var _crumble_effect_9_other = new CoinEffCrashV2(this.game, 217.0, 405.0);
	_crumble_group_other.add(_crumble_effect_9_other);
	
	var _crumble_effect_8_other = new CoinEffCrashV2(this.game, 257.0, 424.0);
	_crumble_group_other.add(_crumble_effect_8_other);
	
	var _crumble_effect_7_other = new CoinEffCrashV2(this.game, 205.0, 440.0);
	_crumble_group_other.add(_crumble_effect_7_other);
	
	var _crumble_effect_6_other = new CoinEffCrashV2(this.game, 240.0, 462.0);
	_crumble_group_other.add(_crumble_effect_6_other);
	
	var _crumble_effect_5_other = new CoinEffCrashV2(this.game, 267.0, 479.0);
	_crumble_group_other.add(_crumble_effect_5_other);
	
	var _crumble_effect_4_other = new CoinEffCrashV2(this.game, 205.0, 485.0);
	_crumble_group_other.add(_crumble_effect_4_other);
	
	var _crumble_effect_3_other = new CoinEffCrashV2(this.game, 283.0, 517.0);
	_crumble_group_other.add(_crumble_effect_3_other);
	
	var _crumble_effect_2_other = new CoinEffCrashV2(this.game, 240.0, 519.0);
	_crumble_group_other.add(_crumble_effect_2_other);
	
	var _crumble_effect_1_other = new CoinEffCrashV2(this.game, 195.0, 523.0);
	_crumble_group_other.add(_crumble_effect_1_other);
	
	var _coin_effect_other = new UICoinEffV1(this.game, 41.0, 39.0);
	_other.add(_coin_effect_other);
	
	var _start_count_other = this.add.group(_other);
	
	var _begin_start_other = this.add.sprite(235.0, 240.0, 'begin_start', null, _start_count_other);
	_begin_start_other.anchor.setTo(0.5, 0.5);
	
	var _begin_ready2_other = this.add.sprite(235.0, 245.0, 'begin_ready1', null, _start_count_other);
	_begin_ready2_other.anchor.setTo(0.5, 0.5);
	
	var _begin_ready1_other = this.add.sprite(235.0, 245.0, 'begin_ready2', null, _start_count_other);
	_begin_ready1_other.anchor.setTo(0.5, 0.5);
	
	var _begin_ready_other = this.add.sprite(235.0, 245.0, 'begin_ready3', null, _start_count_other);
	_begin_ready_other.anchor.setTo(0.5, 0.5);
	
	var _user = this.add.physicsGroup(Phaser.Physics.ARCADE, _root);
	
	var _back_user = this.add.group(_user);
	
	var _back_far_user = this.add.group(_back_user);
	
	
	
	
	var _back_object_user = this.add.group(_back_user);
	
	
	
	var _back_near_user = this.add.group(_back_user);
	
	
	
	
	
	
	
	
	
	var _ui_up_panel1_user = this.add.sprite(15.0, 12.0, 'ui_up_panel', null, _user);
	
	this.add.sprite(26.0, 21.0, 'ui_icon_coin', null, _user);
	
	var _coinValueOutline_user = this.add.text(77.5, 26.5, '4680', {"font":"bold 20px 나눔고딕","strokeThickness":4,"align":"right"}, _user);
	
	var _coinValue_user = this.add.text(79.0, 28.0, '4680', {"font":"bold 20px 나눔고딕","fill":"#ffffff","align":"right"}, _user);
	
	this.add.sprite(365.0, 12.0, 'ui_up_panel', null, _user);
	
	this.add.tileSprite(0.0, 220.0, 511.0, 6.0, 'ui_guideLine', null, _user);
	
	var _ui_icon_heart3_user = new LifeHeartV1(this.game, 462.0, 39.0);
	_user.add(_ui_icon_heart3_user);
	
	var _ui_icon_heart2_user = new LifeHeartV1(this.game, 431.0, 39.0);
	_user.add(_ui_icon_heart2_user);
	
	var _ui_icon_heart1_user = new LifeHeartV1(this.game, 400.0, 39.0);
	_user.add(_ui_icon_heart1_user);
	
	var _meterOutlineValue_user = this.add.text(261.0, 39.0, '4680m', {"font":"41px 나눔고딕","strokeThickness":4,"align":"center"}, _user);
	_meterOutlineValue_user.anchor.setTo(0.5, 0.5);
	
	var _meterValue_user = this.add.text(261.0, 39.0, '4680m', {"font":"41px 나눔고딕","fill":"#ffffff","align":"center"}, _user);
	_meterValue_user.anchor.setTo(0.5, 0.5);
	
	var _coin_container_user = this.add.group(_user);
	
	
	
	
	
	
	
	
	var _coin_player_user = this.add.physicsGroup(Phaser.Physics.ARCADE, _user);
	
	var _parachuteSheet_user = new ParaChuteV1(this.game, 235.0, 436.0);
	_user.add(_parachuteSheet_user);
	
	var _Char_aniSheet_user_group = this.add.group(_user);
	
	
	
	var _coin_part_user = this.add.group(_user);
	
	var _coin_part10_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part10_user);
	
	var _coin_part9_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part9_user);
	
	var _coin_part8_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part8_user);
	
	var _coin_part7_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part7_user);
	
	var _coin_part6_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part6_user);
	
	var _coin_part5_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part5_user);
	
	var _coin_part4_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part4_user);
	
	var _coin_part3_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part3_user);
	
	var _coin_part2_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part2_user);
	
	var _coin_part1_user = new CoinPartV1(this.game, 236.0, 439.0);
	_coin_part_user.add(_coin_part1_user);
	
	var _sheet_talkBox_user = new TalkBoxV1(this.game, 245.0, 335.0);
	_user.add(_sheet_talkBox_user);
	
	var _sheet_talkBoxCombo1_user = new TalkBoxComboV2(this.game, 245.0, 335.0);
	_user.add(_sheet_talkBoxCombo1_user);
	
	var _sheet_talkBoxCombo2_user = new TalkBoxCombo2V2(this.game, 245.0, 335.0);
	_user.add(_sheet_talkBoxCombo2_user);
	
	var _wordtext_user = this.add.text(192.0, 275.0, '', {"font":"20px 나눔고딕","fill":"#ffffff","align":"center"}, _user);
	
	var _sheet_coin_eff_user = new CoinEffectV1(this.game, 236.0, 426.0);
	_user.add(_sheet_coin_eff_user);
	
	var _sheet_coinCombo_eff_user = new CoinEffectComboV1(this.game, 238.0, 431.0);
	_user.add(_sheet_coinCombo_eff_user);
	
	
	var _combo_group_user = this.add.group(_user);
	
	var _ui_comboPanel_user = this.add.sprite(151.0, 420.0, 'ui_comboPanel', null, _combo_group_user);
	
	var _ui_comboGauge_user = this.add.sprite(152.0, 484.0, 'ui_comboGauge', null, _combo_group_user);
	
	var _crumble_group_user = this.add.group(_user);
	
	var _crumble_effect_20_user = new CoinEffCrashV2(this.game, 252.0, 382.0);
	_crumble_group_user.add(_crumble_effect_20_user);
	
	var _crumble_effect_19_user = new CoinEffCrashV2(this.game, 346.0, 502.0);
	_crumble_group_user.add(_crumble_effect_19_user);
	
	var _crumble_effect_18_user = new CoinEffCrashV2(this.game, 150.0, 492.0);
	_crumble_group_user.add(_crumble_effect_18_user);
	
	var _crumble_effect_17_user = new CoinEffCrashV2(this.game, 320.0, 470.0);
	_crumble_group_user.add(_crumble_effect_17_user);
	
	var _crumble_effect_16_user = new CoinEffCrashV2(this.game, 325.0, 431.0);
	_crumble_group_user.add(_crumble_effect_16_user);
	
	var _crumble_effect_15_user = new CoinEffCrashV2(this.game, 288.0, 386.0);
	_crumble_group_user.add(_crumble_effect_15_user);
	
	var _crumble_effect_14_user = new CoinEffCrashV2(this.game, 238.0, 377.0);
	_crumble_group_user.add(_crumble_effect_14_user);
	
	var _crumble_effect_13_user = new CoinEffCrashV2(this.game, 178.0, 379.0);
	_crumble_group_user.add(_crumble_effect_13_user);
	
	var _crumble_effect_12_user = new CoinEffCrashV2(this.game, 154.0, 435.0);
	_crumble_group_user.add(_crumble_effect_12_user);
	
	var _crumble_effect_11_user = new CoinEffCrashV2(this.game, 162.0, 488.0);
	_crumble_group_user.add(_crumble_effect_11_user);
	
	var _crumble_effect_10_user = new CoinEffCrashV2(this.game, 250.0, 450.0);
	_crumble_group_user.add(_crumble_effect_10_user);
	
	var _crumble_effect_9_user = new CoinEffCrashV2(this.game, 217.0, 450.0);
	_crumble_group_user.add(_crumble_effect_9_user);
	
	var _crumble_effect_8_user = new CoinEffCrashV2(this.game, 257.0, 460.0);
	_crumble_group_user.add(_crumble_effect_8_user);
	
	var _crumble_effect_7_user = new CoinEffCrashV2(this.game, 205.0, 440.0);
	_crumble_group_user.add(_crumble_effect_7_user);
	
	var _crumble_effect_6_user = new CoinEffCrashV2(this.game, 240.0, 462.0);
	_crumble_group_user.add(_crumble_effect_6_user);
	
	var _crumble_effect_5_user = new CoinEffCrashV2(this.game, 267.0, 479.0);
	_crumble_group_user.add(_crumble_effect_5_user);
	
	var _crumble_effect_4_user = new CoinEffCrashV2(this.game, 205.0, 485.0);
	_crumble_group_user.add(_crumble_effect_4_user);
	
	var _crumble_effect_3_user = new CoinEffCrashV2(this.game, 283.0, 517.0);
	_crumble_group_user.add(_crumble_effect_3_user);
	
	var _crumble_effect_2_user = new CoinEffCrashV2(this.game, 240.0, 519.0);
	_crumble_group_user.add(_crumble_effect_2_user);
	
	var _crumble_effect_1_user = new CoinEffCrashV2(this.game, 195.0, 523.0);
	_crumble_group_user.add(_crumble_effect_1_user);
	
	var _coin_effect_user = new UICoinEffV1(this.game, 43.0, 39.0);
	_user.add(_coin_effect_user);
	
	var _start_count_user = this.add.group(_user);
	
	var _begin_start_user = this.add.sprite(235.0, 240.0, 'begin_start', null, _start_count_user);
	_begin_start_user.anchor.setTo(0.5, 0.5);
	
	var _begin_ready2_user = this.add.sprite(235.0, 245.0, 'begin_ready1', null, _start_count_user);
	_begin_ready2_user.anchor.setTo(0.5, 0.5);
	
	var _begin_ready1_user = this.add.sprite(235.0, 245.0, 'begin_ready2', null, _start_count_user);
	_begin_ready1_user.anchor.setTo(0.5, 0.5);
	
	var _begin_ready_user = this.add.sprite(235.0, 245.0, 'begin_ready3', null, _start_count_user);
	_begin_ready_user.anchor.setTo(0.5, 0.5);
	
	var _common = this.add.group(_root);
	
	this.add.tileSprite(0.0, 537.0, 1024.0, 39.0, 'ui_dw_panelUnit', null, _common);
	
	this.add.sprite(331.0, 517.0, 'ui_input', null, _common);
	
	this.add.sprite(813.0, 518.0, 'uiidPanel_other', null, _common);
	
	var _otherID_text = this.add.text(829.0, 533.0, 'ABCDABCDABCDABCD', {"font":"14px 나눔고딕","fill":"#ffffff"}, _common);
	
	this.add.sprite(0.0, 518.0, 'uiidPanel_me', null, _common);
	
	var _userID_text = this.add.text(44.0, 533.0, 'ABCDABCDABCDABCD', {"font":"14px 나눔고딕","fill":"#ffffff"}, _common);
	
	var _ui_inputWord = this.add.text(365.0, 534.0, '', {"font":"14px 나눔고딕","fill":"#ffffff"}, _common);
	
	var _InputCursorSheet = new InputCursor(this.game, 367.0, 533.0);
	_common.add(_InputCursorSheet);
	
	this.add.button(619.0, 521.0, 'ui_input_btnSheet', this.wordinput, this, 1, 0, 2, 3, _common);
	
	this.add.sprite(385.0, 84.0, 'ui_vs', null, _common);
	
	var _ui_timePanel = this.add.sprite(433.0, 262.0, 'ui_timePanel', null, _common);
	
	var _timeNum = this.add.text(501.0, 280.0, '00:00', {"font":"bold 24px 나눔고딕","fill":"#400040","align":"center"}, _common);
	
	var _ui_timePanel_Alert = this.add.sprite(437.0, 267.0, 'ui_timePanel_Alert', null, _common);
	
	var _combo_attack_effect_explosion_other = new EffComboAttExplosionV1(this.game, 260.0, 67.0);
	_common.add(_combo_attack_effect_explosion_other);
	
	var _combo_attack_effect_fly_other = new EffComboAttFlyV1(this.game, 749.0, 426.0);
	_common.add(_combo_attack_effect_fly_other);
	
	var _combo_attack_effect_explosion_user = new EffComboAttExplosionV1(this.game, 760.0, 75.0);
	_common.add(_combo_attack_effect_explosion_user);
	
	var _combo_attack_effect_fly_user = new EffComboAttFlyV1(this.game, 239.0, 438.0);
	_common.add(_combo_attack_effect_fly_user);
	
	var _transImg_ = this.add.sprite(0.0, 0.0, 'transImg_70', null, _common);
	
	var _resultEff_L = this.add.sprite(512.0, 283.0, 'resultEff_L', null, _common);
	_resultEff_L.anchor.setTo(0.5, 0.5);
	
	var _resultEff_S = this.add.sprite(512.0, 283.0, 'resultEff_S', null, _common);
	_resultEff_S.anchor.setTo(0.5, 0.5);
	
	var _resultImg = this.add.sprite(512.0, 283.0, 'resultImg', null, _common);
	_resultImg.anchor.setTo(0.5, 0.5);
	
	var _result = this.add.group(_root);
	
	var _SucessAI = this.add.group(_result);
	
	this.add.sprite(0.0, 0.0, 'transImg_70', null, _SucessAI);
	
	var _RUIBtnContinueSA = this.add.button(318.0, 460.0, 'RUIBtnSheetContinue', this.ContinueAI, this, 1, 0, 2, 0, _SucessAI);
	
	var _RUIBtnSheetExitSA = this.add.button(536.0, 460.0, 'RUIBtnSheetExit', this.ExitAI, this, 1, 0, 2, 0, _SucessAI);
	
	var _RUIRedPanelSA = this.add.sprite(119.0, 64.0, 'RUIBluePanel', null, _SucessAI);
	
	var _RUIRedPanelFA = this.add.sprite(119.0, 64.0, 'RUIRedPanel', null, _SucessAI);
	
	var _RUICharEffSA2 = this.add.sprite(512.0, 259.0, 'RUICharEff', null, _SucessAI);
	_RUICharEffSA2.angle = -23.0;
	_RUICharEffSA2.alpha = 0.8;
	_RUICharEffSA2.anchor.setTo(0.5, 0.5);
	
	var _RUICharEffSA1 = this.add.sprite(512.0, 259.0, 'RUICharEff', null, _SucessAI);
	_RUICharEffSA1.alpha = 0.8;
	_RUICharEffSA1.anchor.setTo(0.5, 0.5);
	
	
	var _CharAIAniSheetGroup = this.add.group(_SucessAI);
	_CharAIAniSheetGroup.position.setTo(0.0, -1.0);
	
	var _RUIInfoRSA2 = this.add.sprite(602.0, 234.0, 'RUIInfo', null, _SucessAI);
	
	var _RUIInfoRSA1 = this.add.sprite(165.0, 234.0, 'RUIInfo', null, _SucessAI);
	
	var _RUIInfoRFA2 = this.add.sprite(602.0, 234.0, 'RUIInfoR', null, _SucessAI);
	
	var _RUIInfoRFA1 = this.add.sprite(165.0, 234.0, 'RUIInfoR', null, _SucessAI);
	
	var _PMeterSA2 = this.add.text(718.0, 297.0, '3200M', {"font":"bold 28px 나눔고딕","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PPointSA2 = this.add.text(718.0, 241.0, '55000점', {"font":"bold 28px 나눔고딕","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PMeterSA1 = this.add.text(282.0, 297.0, '3200M', {"font":"bold 28px 나눔고딕","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PPointSA1 = this.add.text(282.0, 241.0, '55000점', {"font":"bold 28px 나눔고딕","fill":"#ffffff","align":"center"}, _SucessAI);
	
	var _PNicknameLineSA2 = this.add.text(580.0, 188.0, '유저닉네임이맥스열글', {"font":"bold 28px 나눔고딕","fill":"#bff2ff","stroke":"#bff2ff","strokeThickness":4,"align":"center"}, _SucessAI);
	
	var _PNicknameSA2 = this.add.text(580.0, 188.0, '유저닉네임이맥스열글', {"font":"bold 28px 나눔고딕","fill":"#2a2a2a","align":"center"}, _SucessAI);
	
	var _PNicknameLineSA1 = this.add.text(160.0, 188.0, '유저닉네임이맥스열글', {"font":"bold 28px 나눔고딕","fill":"#bff2ff","stroke":"#bff2ff","strokeThickness":4,"align":"center"}, _SucessAI);
	
	var _PNicknameSA1 = this.add.text(160.0, 188.0, '유저닉네임이맥스열글', {"font":"bold 28px 나눔고딕","fill":"#2a2a2a","align":"center"}, _SucessAI);
	
	this.add.sprite(708.0, 139.0, 'RUI2P', null, _SucessAI);
	
	this.add.sprite(255.0, 139.0, 'RUI1P', null, _SucessAI);
	
	var _RUIVicTitleSA = this.add.sprite(352.0, 12.0, 'RUIVicTitle', null, _SucessAI);
	
	var _RUIDrawTitleDA = this.add.sprite(387.0, 20.0, 'RUIDrawTitle', null, _SucessAI);
	
	var _RUIFailTitleFA = this.add.sprite(270.0, 26.0, 'RUIFailTitle', null, _SucessAI);
	
	var _SucessVS = this.add.group(_result);
	
	this.add.sprite(0.0, 0.0, 'transImg_70', null, _SucessVS);
	
	var _RUIBtnContinueSV = this.add.button(323.0, 479.0, 'RUIBtnSheetContinue', this.ContinueVS, this, 1, 0, 2, 0, _SucessVS);
	
	var _RUIBtnSheetExitSV = this.add.button(541.0, 479.0, 'RUIBtnSheetExit', this.ExitVS, this, 1, 0, 2, 0, _SucessVS);
	
	var _RUIRedPanelFV = this.add.sprite(119.0, 64.0, 'RUIRedPanel', null, _SucessVS);
	
	var _RUIRedPanelSV = this.add.sprite(119.0, 64.0, 'RUIBluePanel', null, _SucessVS);
	
	var _RUICharEffSV2 = this.add.sprite(516.0, 240.0, 'RUICharEff', null, _SucessVS);
	_RUICharEffSV2.angle = -23.0;
	_RUICharEffSV2.alpha = 0.8;
	_RUICharEffSV2.anchor.setTo(0.5, 0.5);
	
	var _RUICharEffSV1 = this.add.sprite(516.0, 240.0, 'RUICharEff', null, _SucessVS);
	_RUICharEffSV1.alpha = 0.8;
	_RUICharEffSV1.anchor.setTo(0.5, 0.5);
	
	var _CharVsAniSheetGroup = this.add.group(_SucessVS);
	_CharVsAniSheetGroup.position.setTo(4.0, 0.0);
	
	
	var _RUIInfoRFV2 = this.add.sprite(597.0, 216.0, 'RUIInfoR1', null, _SucessVS);
	
	var _RUIInfoRFV1 = this.add.sprite(160.0, 216.0, 'RUIInfoR1', null, _SucessVS);
	
	var _RUIInfoRSV2 = this.add.sprite(597.0, 216.0, 'RUIInfo1', null, _SucessVS);
	
	var _RUIInfoRSV1 = this.add.sprite(160.0, 216.0, 'RUIInfo1', null, _SucessVS);
	
	var _PMeterSV2 = this.add.text(700.0, 222.0, '', {"font":"bold 28px 나눔고딕","fill":"#ffe552","stroke":"#ffe552","align":"center"}, _SucessVS);
	
	var _PPointSV2 = this.add.text(700.0, 278.0, '55000점', {"font":"bold 28px 나눔고딕","fill":"#ffffff","align":"center"}, _SucessVS);
	
	var _PMeterSV1 = this.add.text(265.0, 222.0, '', {"font":"bold 28px 나눔고딕","fill":"#ffe552","stroke":"#ffe552","align":"center"}, _SucessVS);
	
	var _PPointSV1 = this.add.text(265.0, 278.0, '', {"font":"bold 28px 나눔고딕","fill":"#ffffff","align":"right"}, _SucessVS);
	
	var _PNicknameLineSV2 = this.add.text(584.0, 169.0, '', {"font":"bold 28px 나눔고딕","fill":"#bff2ff","stroke":"#bff2ff","strokeThickness":4,"align":"center"}, _SucessVS);
	
	var _PNicknameSV2 = this.add.text(584.0, 169.0, '', {"font":"bold 28px 나눔고딕","fill":"#2a2a2a","align":"center"}, _SucessVS);
	
	var _PNicknameLineSV1 = this.add.text(164.0, 169.0, '', {"font":"bold 28px 나눔고딕","fill":"#bff2ff","stroke":"#bff2ff","strokeThickness":4,"align":"center"}, _SucessVS);
	
	var _PNicknameSV1 = this.add.text(164.0, 169.0, '', {"font":"bold 28px 나눔고딕","fill":"#2a2a2a","align":"center"}, _SucessVS);
	
	this.add.sprite(712.0, 120.0, 'RUI2P', null, _SucessVS);
	
	this.add.sprite(259.0, 120.0, 'RUI1P', null, _SucessVS);
	
	var _RUISharePanelSV = this.add.sprite(330.0, 382.0, 'RUISharePanel', null, _SucessVS);
	
	var _RUIBtnSheetFacebookSV = this.add.button(527.0, 396.0, 'RUIBtnSheetFacebook', this.FacebookVS, this, 0, 0, 1, 0, _SucessVS);
	
	var _RUIBtnSheetKakaoSV = this.add.button(358.0, 396.0, 'RUIBtnSheetKakao', this.KakaoVS, this, 0, 0, 1, 0, _SucessVS);
	
	this.add.sprite(361.0, 315.0, 'RUIScorePanel', null, _SucessVS);
	
	var __PScoreSV = this.add.text(379.0, 337.0, '', {"font":"bold 26px 나눔고딕","fill":"#2a2a2a","align":"center"}, _SucessVS);
	
	var _RUIDrawTitleDV = this.add.sprite(387.0, 20.0, 'RUIDrawTitle', null, _SucessVS);
	
	var _RUIFailTitleFV = this.add.sprite(270.0, 26.0, 'RUIFailTitle', null, _SucessVS);
	
	var _RUIVicTitleSV = this.add.sprite(352.0, 12.0, 'RUIVicTitle', null, _SucessVS);
	
	var _addPointPannel = this.add.group(_SucessVS);
	
	var _addPointOtherPannel = this.add.group(_addPointPannel);
	
	var _addPointPanelR = new resultAddPointPanelR(this.game, 898.0, 293.0);
	_addPointOtherPannel.add(_addPointPanelR);
	
	var _apTxtComboREnable = this.add.sprite(892.0, 271.0, 'apTxtCombo', 1, _addPointOtherPannel);
	
	var _apTxtComboRDisable = this.add.sprite(892.0, 271.0, 'apTxtCombo', 0, _addPointOtherPannel);
	
	var _apTxtHeartREnable = this.add.sprite(892.0, 296.0, 'apTxtHeart', 1, _addPointOtherPannel);
	
	var _apTxtHeartRDisable = this.add.sprite(892.0, 296.0, 'apTxtHeart', 0, _addPointOtherPannel);
	
	var _addPointUserPannel = this.add.group(_addPointPannel);
	
	var _addPointPanelL = new resultAddPointPanelL(this.game, 125.0, 293.0);
	_addPointUserPannel.add(_addPointPanelL);
	
	var _apTxtHeartLEnable = this.add.sprite(90.0, 296.0, 'apTxtHeart', 1, _addPointUserPannel);
	
	var _apTxtHeartLDisable = this.add.sprite(90.0, 296.0, 'apTxtHeart', 0, _addPointUserPannel);
	
	var _apTxtComboLEnable = this.add.sprite(90.0, 271.0, 'apTxtCombo', 1, _addPointUserPannel);
	
	var _apTxtComboLDisable = this.add.sprite(90.0, 271.0, 'apTxtCombo', 0, _addPointUserPannel);
	
	var _PopupPublicB = this.add.group(_root);
	
	var _transImg703 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicB);
	
	var _PopupBtnCheck3 = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicB);
	
	var _YesNoGroup = this.add.group(_PopupPublicB);
	_YesNoGroup.position.setTo(322.0, 402.0);
	
	var _PopupBtnNo = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroup);
	
	var _PopupBtnYes = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroup);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupPublicB);
	
	var _ContentsText = this.add.text(512.0, 250.0, '', {"font":"bold 25px 나눔바른고딕","fill":"#2a2a2a"}, _PopupPublicB);
	
	this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelBlueListener, this, 1, 0, 2, 0, _PopupPublicB);
	
	this.add.sprite(476.0, 140.0, 'TitleTalk', null, _PopupPublicB);
	
	var _PopupPublicR = this.add.group(_root);
	
	var _transImg704 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicR);
	
	var _PopupBtnCheck4 = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicR);
	
	var _YesNoGroupR = this.add.group(_PopupPublicR);
	_YesNoGroupR.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR);
	
	var _PopupBtnYesR = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR);
	
	this.add.sprite(243.0, 110.0, 'PopupPublicNotice', null, _PopupPublicR);
	
	var _ContentsText2 = this.add.text(512.0, 250.0, '', {"font":"bold 25px 나눔바른고딕","fill":"#2a2a2a"}, _PopupPublicR);
	
	var _PublicBtnExit2 = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelRedListener, this, 1, 0, 2, 0, _PopupPublicR);
	
	this.add.sprite(473.0, 140.0, 'TitleNotice', null, _PopupPublicR);
	
	var _PopupPublicBExit = this.add.group(_root);
	
	var _transImg704_BExit = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicBExit);
	
	var _PopupBtnCheck4_BExit = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicBExit);
	
	var _YesNoGroupR_BR_BExit = this.add.group(_PopupPublicBExit);
	_YesNoGroupR_BR_BExit.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR_BExit = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_BExit);
	
	var _PopupBtnYesR_BExit = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_BExit);
	
	this.add.sprite(243.0, 110.0, 'PopupPublic', null, _PopupPublicBExit);
	
	var _ContentsText2_BExit = this.add.text(512.0, 250.0, '', {"font":"25px 나눔고딕","fill":"#2a2a2a","align":"center"}, _PopupPublicBExit);
	
	var _PublicBtnExit2_BExit = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelBlueExitListener, this, 1, 0, 2, 0, _PopupPublicBExit);
	
	this.add.sprite(473.0, 140.0, 'TitleTalk', null, _PopupPublicBExit);
	
	var _PopupPublicRExit = this.add.group(_root);
	
	var _transImg704_Exit = this.add.sprite(0.0, 0.0, 'transImg_70', null, _PopupPublicRExit);
	
	var _PopupBtnCheck4_Exit = this.add.button(426.0, 396.0, 'PopupBtnCheck', null, this, 1, 0, 2, 0, _PopupPublicRExit);
	
	var _YesNoGroupR_BR_Exit = this.add.group(_PopupPublicRExit);
	_YesNoGroupR_BR_Exit.position.setTo(322.0, 402.0);
	
	var _PopupBtnNoR_Exit = this.add.button(214.0, -6.0, 'PopupBtnNo', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_Exit);
	
	var _PopupBtnYesR_Exit = this.add.button(-6.0, -6.0, 'PopupBtnYes', null, this, 1, 0, 2, 0, _YesNoGroupR_BR_Exit);
	
	this.add.sprite(243.0, 110.0, 'PopupPublicNotice', null, _PopupPublicRExit);
	
	var _ContentsText2_Exit = this.add.text(512.0, 250.0, '', {"font":"bold 25px 나눔바른고딕","fill":"#2a2a2a"}, _PopupPublicRExit);
	
	var _PublicBtnExit2_Exit = this.add.button(669.0, 94.0, 'RoomListBtnExit', this.cancelRedExitListener, this, 1, 0, 2, 0, _PopupPublicRExit);
	
	this.add.sprite(473.0, 140.0, 'TitleNotice', null, _PopupPublicRExit);
	
	var _ToastMessageGroup = this.add.group(_root);
	
	var _UIToaster = this.add.sprite(0.0, 238.0, 'UIToaster', null, _ToastMessageGroup);
	
	var _ToastMessageText = this.add.text(512.0, 250.0, '토스트 메세지', {"font":"20px 나눔바른고딕","fill":"#ffffff","align":"center"}, _ToastMessageGroup);
	
	var _notRayCast1 = this.add.sprite(0.0, 0.0, 'transImg_70', null, _ToastMessageGroup);
	_notRayCast1.alpha = 0.0;
	
	
	
	// fields
	
	this.fOther = _other;
	this.fBack_other = _back_other;
	this.fBack_far_other = _back_far_other;
	this.fBack_object_other = _back_object_other;
	this.fBack_near_other = _back_near_other;
	this.fCoinValueOutline_other = _coinValueOutline_other;
	this.fCoinValue_other = _coinValue_other;
	this.fUi_icon_heart3_other = _ui_icon_heart3_other;
	this.fUi_icon_heart2_other = _ui_icon_heart2_other;
	this.fUi_icon_heart1_other = _ui_icon_heart1_other;
	this.fMeterOutlineValue_other = _meterOutlineValue_other;
	this.fMeterValue_other = _meterValue_other;
	this.fCoin_container_other = _coin_container_other;
	this.fCoin_player_other = _coin_player_other;
	this.fParachuteSheet_other = _parachuteSheet_other;
	this.fChar_aniSheet_other_group = _Char_aniSheet_other_group;
	this.fCoin_part_other = _coin_part_other;
	this.fCoin_part10_other = _coin_part10_other;
	this.fCoin_part9_other = _coin_part9_other;
	this.fCoin_part8_other = _coin_part8_other;
	this.fCoin_part7_other = _coin_part7_other;
	this.fCoin_part6_other = _coin_part6_other;
	this.fCoin_part5_other = _coin_part5_other;
	this.fCoin_part4_other = _coin_part4_other;
	this.fCoin_part3_other = _coin_part3_other;
	this.fCoin_part2_other = _coin_part2_other;
	this.fCoin_part1_other = _coin_part1_other;
	this.fSheet_talkBox_other = _sheet_talkBox_other;
	this.fSheet_talkBoxCombo1_other = _sheet_talkBoxCombo1_other;
	this.fSheet_talkBoxCombo2_other = _sheet_talkBoxCombo2_other;
	this.fWordtext_other = _wordtext_other;
	this.fSheet_coin_eff_other = _sheet_coin_eff_other;
	this.fSheet_coinCombo_eff_other = _sheet_coinCombo_eff_other;
	this.fCombo_group_other = _combo_group_other;
	this.fUi_comboPanel_other = _ui_comboPanel_other;
	this.fUi_comboGauge_other = _ui_comboGauge_other;
	this.fCrumble_group_other = _crumble_group_other;
	this.fCrumble_effect_20_other = _crumble_effect_20_other;
	this.fCrumble_effect_19_other = _crumble_effect_19_other;
	this.fCrumble_effect_18_other = _crumble_effect_18_other;
	this.fCrumble_effect_17_other = _crumble_effect_17_other;
	this.fCrumble_effect_16_other = _crumble_effect_16_other;
	this.fCrumble_effect_15_other = _crumble_effect_15_other;
	this.fCrumble_effect_14_other = _crumble_effect_14_other;
	this.fCrumble_effect_13_other = _crumble_effect_13_other;
	this.fCrumble_effect_12_other = _crumble_effect_12_other;
	this.fCrumble_effect_11_other = _crumble_effect_11_other;
	this.fCrumble_effect_10_other = _crumble_effect_10_other;
	this.fCrumble_effect_9_other = _crumble_effect_9_other;
	this.fCrumble_effect_8_other = _crumble_effect_8_other;
	this.fCrumble_effect_7_other = _crumble_effect_7_other;
	this.fCrumble_effect_6_other = _crumble_effect_6_other;
	this.fCrumble_effect_5_other = _crumble_effect_5_other;
	this.fCrumble_effect_4_other = _crumble_effect_4_other;
	this.fCrumble_effect_3_other = _crumble_effect_3_other;
	this.fCrumble_effect_2_other = _crumble_effect_2_other;
	this.fCrumble_effect_1_other = _crumble_effect_1_other;
	this.fCoin_effect_other = _coin_effect_other;
	this.fStart_count_other = _start_count_other;
	this.fBegin_start_other = _begin_start_other;
	this.fBegin_ready2_other = _begin_ready2_other;
	this.fBegin_ready1_other = _begin_ready1_other;
	this.fBegin_ready_other = _begin_ready_other;
	this.fUser = _user;
	this.fBack_user = _back_user;
	this.fBack_far_user = _back_far_user;
	this.fBack_object_user = _back_object_user;
	this.fBack_near_user = _back_near_user;
	this.fUi_up_panel1_user = _ui_up_panel1_user;
	this.fCoinValueOutline_user = _coinValueOutline_user;
	this.fCoinValue_user = _coinValue_user;
	this.fUi_icon_heart3_user = _ui_icon_heart3_user;
	this.fUi_icon_heart2_user = _ui_icon_heart2_user;
	this.fUi_icon_heart1_user = _ui_icon_heart1_user;
	this.fMeterOutlineValue_user = _meterOutlineValue_user;
	this.fMeterValue_user = _meterValue_user;
	this.fCoin_container_user = _coin_container_user;
	this.fCoin_player_user = _coin_player_user;
	this.fParachuteSheet_user = _parachuteSheet_user;
	this.fChar_aniSheet_user_group = _Char_aniSheet_user_group;
	this.fCoin_part_user = _coin_part_user;
	this.fCoin_part10_user = _coin_part10_user;
	this.fCoin_part9_user = _coin_part9_user;
	this.fCoin_part8_user = _coin_part8_user;
	this.fCoin_part7_user = _coin_part7_user;
	this.fCoin_part6_user = _coin_part6_user;
	this.fCoin_part5_user = _coin_part5_user;
	this.fCoin_part4_user = _coin_part4_user;
	this.fCoin_part3_user = _coin_part3_user;
	this.fCoin_part2_user = _coin_part2_user;
	this.fCoin_part1_user = _coin_part1_user;
	this.fSheet_talkBox_user = _sheet_talkBox_user;
	this.fSheet_talkBoxCombo1_user = _sheet_talkBoxCombo1_user;
	this.fSheet_talkBoxCombo2_user = _sheet_talkBoxCombo2_user;
	this.fWordtext_user = _wordtext_user;
	this.fSheet_coin_eff_user = _sheet_coin_eff_user;
	this.fSheet_coinCombo_eff_user = _sheet_coinCombo_eff_user;
	this.fCombo_group_user = _combo_group_user;
	this.fUi_comboPanel_user = _ui_comboPanel_user;
	this.fUi_comboGauge_user = _ui_comboGauge_user;
	this.fCrumble_group_user = _crumble_group_user;
	this.fCrumble_effect_20_user = _crumble_effect_20_user;
	this.fCrumble_effect_19_user = _crumble_effect_19_user;
	this.fCrumble_effect_18_user = _crumble_effect_18_user;
	this.fCrumble_effect_17_user = _crumble_effect_17_user;
	this.fCrumble_effect_16_user = _crumble_effect_16_user;
	this.fCrumble_effect_15_user = _crumble_effect_15_user;
	this.fCrumble_effect_14_user = _crumble_effect_14_user;
	this.fCrumble_effect_13_user = _crumble_effect_13_user;
	this.fCrumble_effect_12_user = _crumble_effect_12_user;
	this.fCrumble_effect_11_user = _crumble_effect_11_user;
	this.fCrumble_effect_10_user = _crumble_effect_10_user;
	this.fCrumble_effect_9_user = _crumble_effect_9_user;
	this.fCrumble_effect_8_user = _crumble_effect_8_user;
	this.fCrumble_effect_7_user = _crumble_effect_7_user;
	this.fCrumble_effect_6_user = _crumble_effect_6_user;
	this.fCrumble_effect_5_user = _crumble_effect_5_user;
	this.fCrumble_effect_4_user = _crumble_effect_4_user;
	this.fCrumble_effect_3_user = _crumble_effect_3_user;
	this.fCrumble_effect_2_user = _crumble_effect_2_user;
	this.fCrumble_effect_1_user = _crumble_effect_1_user;
	this.fCoin_effect_user = _coin_effect_user;
	this.fStart_count_user = _start_count_user;
	this.fBegin_start_user = _begin_start_user;
	this.fBegin_ready2_user = _begin_ready2_user;
	this.fBegin_ready1_user = _begin_ready1_user;
	this.fBegin_ready_user = _begin_ready_user;
	this.fOtherID_text = _otherID_text;
	this.fUserID_text = _userID_text;
	this.fUi_inputWord = _ui_inputWord;
	this.fInputCursorSheet = _InputCursorSheet;
	this.fUi_timePanel = _ui_timePanel;
	this.fTimeNum = _timeNum;
	this.fUi_timePanel_Alert = _ui_timePanel_Alert;
	this.fCombo_attack_effect_explosion_other = _combo_attack_effect_explosion_other;
	this.fCombo_attack_effect_fly_other = _combo_attack_effect_fly_other;
	this.fCombo_attack_effect_explosion_user = _combo_attack_effect_explosion_user;
	this.fCombo_attack_effect_fly_user = _combo_attack_effect_fly_user;
	this.fTransImg_ = _transImg_;
	this.fResultEff_L = _resultEff_L;
	this.fResultEff_S = _resultEff_S;
	this.fResultImg = _resultImg;
	this.fResult = _result;
	this.fSucessAI = _SucessAI;
	this.fRUIBtnContinueSA = _RUIBtnContinueSA;
	this.fRUIBtnSheetExitSA = _RUIBtnSheetExitSA;
	this.fRUIRedPanelSA = _RUIRedPanelSA;
	this.fRUIRedPanelFA = _RUIRedPanelFA;
	this.fRUICharEffSA2 = _RUICharEffSA2;
	this.fRUICharEffSA1 = _RUICharEffSA1;
	this.fCharAIAniSheetGroup = _CharAIAniSheetGroup;
	this.fRUIInfoRSA2 = _RUIInfoRSA2;
	this.fRUIInfoRSA1 = _RUIInfoRSA1;
	this.fRUIInfoRFA2 = _RUIInfoRFA2;
	this.fRUIInfoRFA1 = _RUIInfoRFA1;
	this.fPMeterSA2 = _PMeterSA2;
	this.fPPointSA2 = _PPointSA2;
	this.fPMeterSA1 = _PMeterSA1;
	this.fPPointSA1 = _PPointSA1;
	this.fPNicknameLineSA2 = _PNicknameLineSA2;
	this.fPNicknameSA2 = _PNicknameSA2;
	this.fPNicknameLineSA1 = _PNicknameLineSA1;
	this.fPNicknameSA1 = _PNicknameSA1;
	this.fRUIVicTitleSA = _RUIVicTitleSA;
	this.fRUIDrawTitleDA = _RUIDrawTitleDA;
	this.fRUIFailTitleFA = _RUIFailTitleFA;
	this.fSucessVS = _SucessVS;
	this.fRUIBtnContinueSV = _RUIBtnContinueSV;
	this.fRUIBtnSheetExitSV = _RUIBtnSheetExitSV;
	this.fRUIRedPanelFV = _RUIRedPanelFV;
	this.fRUIRedPanelSV = _RUIRedPanelSV;
	this.fRUICharEffSV2 = _RUICharEffSV2;
	this.fRUICharEffSV1 = _RUICharEffSV1;
	this.fCharVsAniSheetGroup = _CharVsAniSheetGroup;
	this.fRUIInfoRFV2 = _RUIInfoRFV2;
	this.fRUIInfoRFV1 = _RUIInfoRFV1;
	this.fRUIInfoRSV2 = _RUIInfoRSV2;
	this.fRUIInfoRSV1 = _RUIInfoRSV1;
	this.fPMeterSV2 = _PMeterSV2;
	this.fPPointSV2 = _PPointSV2;
	this.fPMeterSV1 = _PMeterSV1;
	this.fPPointSV1 = _PPointSV1;
	this.fPNicknameLineSV2 = _PNicknameLineSV2;
	this.fPNicknameSV2 = _PNicknameSV2;
	this.fPNicknameLineSV1 = _PNicknameLineSV1;
	this.fPNicknameSV1 = _PNicknameSV1;
	this.fRUISharePanelSV = _RUISharePanelSV;
	this.fRUIBtnSheetFacebookSV = _RUIBtnSheetFacebookSV;
	this.fRUIBtnSheetKakaoSV = _RUIBtnSheetKakaoSV;
	this.f_PScoreSV = __PScoreSV;
	this.fRUIDrawTitleDV = _RUIDrawTitleDV;
	this.fRUIFailTitleFV = _RUIFailTitleFV;
	this.fRUIVicTitleSV = _RUIVicTitleSV;
	this.fAddPointPannel = _addPointPannel;
	this.fAddPointOtherPannel = _addPointOtherPannel;
	this.fAddPointPanelR = _addPointPanelR;
	this.fApTxtComboREnable = _apTxtComboREnable;
	this.fApTxtComboRDisable = _apTxtComboRDisable;
	this.fApTxtHeartREnable = _apTxtHeartREnable;
	this.fApTxtHeartRDisable = _apTxtHeartRDisable;
	this.fAddPointUserPannel = _addPointUserPannel;
	this.fAddPointPanelL = _addPointPanelL;
	this.fApTxtHeartLEnable = _apTxtHeartLEnable;
	this.fApTxtHeartLDisable = _apTxtHeartLDisable;
	this.fApTxtComboLEnable = _apTxtComboLEnable;
	this.fApTxtComboLDisable = _apTxtComboLDisable;
	this.fPopupPublicB = _PopupPublicB;
	this.fTransImg703 = _transImg703;
	this.fPopupBtnCheck3 = _PopupBtnCheck3;
	this.fPopupBtnNo = _PopupBtnNo;
	this.fPopupBtnYes = _PopupBtnYes;
	this.fContentsText = _ContentsText;
	this.fPopupPublicR = _PopupPublicR;
	this.fTransImg704 = _transImg704;
	this.fPopupBtnCheck4 = _PopupBtnCheck4;
	this.fPopupBtnNoR = _PopupBtnNoR;
	this.fPopupBtnYesR = _PopupBtnYesR;
	this.fContentsText2 = _ContentsText2;
	this.fPublicBtnExit2 = _PublicBtnExit2;
	this.fPopupPublicBExit = _PopupPublicBExit;
	this.fTransImg704_BExit = _transImg704_BExit;
	this.fPopupBtnCheck4_BExit = _PopupBtnCheck4_BExit;
	this.fPopupBtnNoR_BExit = _PopupBtnNoR_BExit;
	this.fPopupBtnYesR_BExit = _PopupBtnYesR_BExit;
	this.fContentsText2_BExit = _ContentsText2_BExit;
	this.fPublicBtnExit2_BExit = _PublicBtnExit2_BExit;
	this.fPopupPublicRExit = _PopupPublicRExit;
	this.fTransImg704_Exit = _transImg704_Exit;
	this.fPopupBtnCheck4_Exit = _PopupBtnCheck4_Exit;
	this.fPopupBtnNoR_Exit = _PopupBtnNoR_Exit;
	this.fPopupBtnYesR_Exit = _PopupBtnYesR_Exit;
	this.fContentsText2_Exit = _ContentsText2_Exit;
	this.fPublicBtnExit2_Exit = _PublicBtnExit2_Exit;
	this.fToastMessageGroup = _ToastMessageGroup;
	this.fUIToaster = _UIToaster;
	this.fToastMessageText = _ToastMessageText;
	this.fNotRayCast1 = _notRayCast1;
	this.afterCreate();
	
};

/* --- end generated code --- */
// -- user code here --
//생성자 전 구현부
Level1.prototype.beforeConstruct = function() {

};
//생성자 후 구현부
Level1.prototype.afterConstruct = function() {

};
//Init 함수 전 해주어야 할 부분
Level1.prototype.beforeInit = function() {

};
//Init 함수 전 해주어야 할 부분
Level1.prototype.afterInit = function() {
	this.initUserField();
};
//프리로드 전 해주어야 할 부분
Level1.prototype.beforePreload = function() {
	this.game.stage.disableVisibilityChange = true;
};
//프리로드 후 해주어야 할 부분
Level1.prototype.afterPreload = function() {

};
//Create전 해주어야 할 부분
Level1.prototype.beforeCreate = function() {
	that = this;
	this.createScript();
};
//Create후 해주어야 할 부분
Level1.prototype.afterCreate = function() {
	// this.checkStartGame();
	this.setBackGround();

	// this.music = this.game.add.audio('Coin_Lob');

	this.fUserID_text.text = that.gameData.userNickName;
	this.fOtherID_text.text = that.gameData.otherNickName;

	// console.log("Level1::afterCreate -> that.gameData.otherCharacterType is "
	// + that.gameData.otherCharacterType);

	this.setIngameCharacterAni(true, that.gameData.userCharacterType); // 우리
																		// 캐릭터
																		// 애니
	this.setIngameCharacterAni(false, that.gameData.otherCharacterType); // 상대방
																			// 캐릭터
																			// 애니

	this.setIngameResultCharacterAni(); // 결과창 애니 캐릭터
	netSocketResponseAll();

	this.createUserComboText();
	//this.createUserComboGauge();

	this.createOtherComboText();
	//this.createOtherComboGauge();

	// this.createAudio();

	that.setGameState(that.gameConst.GameStateType.ENTER);
};
//업데이트 함수. Phaser 기본 제공.
Level1.prototype.update = function() {
	// 기존함수테스트
	this.gameProcess();
};
//게임 스테이스 셋팅
Level1.prototype.setGameState = function(aState) {

	// console.log("setGameState aState " + aState);

	switch (aState) {
	case that.gameConst.GameStateType.ENTER:
		this.setGameEnter();
		break;

	case that.gameConst.GameStateType.READY_ANIMATION:
		this.setGameReadyAnimation();
		break;

	case that.gameConst.GameStateType.READY:
		this.setGameReady();
		break;

	case that.gameConst.GameStateType.START:
		this.setGameStart();
		break;

	case that.gameConst.GameStateType.INGAME_FINISH:
		this.setGameIngameFinish();
		break;

	case that.gameConst.GameStateType.INGAME_END_READY:
		this.setGameIngameEndReady();
		break;

	case that.gameConst.GameStateType.INGAME_END:
		this.setGameIngameEnd();
		break;

	case that.gameConst.GameStateType.INGAME_END_ANIMATION:
		this.setGameIngameEndAnimation();
		break;

	case that.gameConst.GameStateType.RESULT:
		this.setGameResult();
		break;

	case that.gameConst.GameStateType.OUTGAME_END:
		this.setGameOutGameEnd();
		break;
	}
};
//게임 스테이트 셋팅 Enter
Level1.prototype.setGameEnter = function() {
	gameState = that.gameConst.GameStateType.ENTER;

	// net관련...
	netUserGameReady = that.gameConst.NetState.COMPLETE;
	netOtherGameReady = that.gameConst.NetState.COMPLETE;

	// //소켓 커넥트...
	// this.socketManager.setConnect();

	this.soundManager.play(this.soundManager.SOUND_TYPE.Coin_Music);

	// //콤보 이펙트 상대방한테 날라가는것.
	this.fCombo_attack_effect_fly_user.visible = false;
	this.fCombo_attack_effect_explosion_user.visible = false;

	this.fCombo_attack_effect_fly_other.visible = false;
	this.fCombo_attack_effect_explosion_other.visible = false;

	this.fCoin_effect_user.visible = false;
	this.fCoin_effect_other.visible = false;

	this.initBackGroundObject();
	this.initBackground();

	this.fUi_comboPanel_user.visible = false;
	this.fUi_comboPanel_other.visible = false;

	this.fChar_aniPoseSheet_user.visible = false;
	this.fChar_aniPoseSheet_other.visible = false;

	this.fParachuteSheet_user.visible = false;
	this.fParachuteSheet_other.visible = false;

	this.fChar_aniSheet_user.visible = true;
	this.fChar_aniSheet_other.visible = true;

	this.fChar_aniSheet_user.animations.stop();
	this.fChar_aniSheet_other.animations.stop();

	this.fChar_aniSheet_user.x = 235.0;
	this.fChar_aniSheet_user.y = 436.0;

	this.fChar_aniSheet_other.x = 235.0;
	this.fChar_aniSheet_other.y = 436.0;

	this.fChar_aniSheet_user.setPlay("IDLE");
	this.fChar_aniSheet_other.setPlay("IDLE");

	this.fStart_count_user.visible = false;
	this.fStart_count_user.children.forEach(function(element) {
		element.visible = false;
	});

	this.fStart_count_other.visible = false;
	this.fStart_count_other.children.forEach(function(element) {
		element.visible = false;
	});

	this.fToastMessageGroup.visible = false;
	this.fPopupPublicRExit.visible = false;
	this.fPopupPublicBExit.visible = false;
	this.fPopupPublicR.visible = false;
	this.fPopupPublicB.visible = false;

	this.fAddPointPannel.visible = false;
	this.fAddPointUserPannel.visible = false;
	this.fAddPointOtherPannel.visible = false;

	this.fApTxtComboLEnable.visible = false;
	this.fApTxtComboLDisable.visible = false;
	this.fApTxtHeartLEnable.visible = false;
	this.fApTxtHeartLDisable.visible = false;

	this.fApTxtComboREnable.visible = false;
	this.fApTxtComboRDisable.visible = false;
	this.fApTxtHeartREnable.visible = false;
	this.fApTxtHeartRDisable.visible = false;

	this.fTimeNum.text = "0" + that.gameData.roomPlayTime.toString() + ":00";

	// console.log("that.gameConst.WordType.NORMAL is " +
	// that.gameConst.WordType.NORMAL);
	// console.log("form1.method " + form1.method);
	// console.log("form1.session_id.value " + form1.session_id.value);

	mIsUserResult = false;
	mIsOtherResult = false;

	this.fUi_comboGauge_user.mask = this.game.add.graphics(0, 0);
	this.fUi_comboGauge_user.mask.beginFill(0xffffff);
	this.fUi_comboGauge_user.mask.drawRect(this.fUi_comboGauge_user.x,
			this.fUi_comboGauge_user.y, this.fUi_comboGauge_user.width,
			this.fUi_comboGauge_user.height);
	this.fUi_comboGauge_user.visible = false;

	this.fUi_comboGauge_other.mask = this.game.add.graphics(0, 0);
	this.fUi_comboGauge_other.mask.beginFill(0x000000);
	this.fUi_comboGauge_other.mask.drawRect(512 + this.fUi_comboGauge_other.x,
			this.fUi_comboGauge_other.y, this.fUi_comboGauge_other.width,
			this.fUi_comboGauge_other.height);
	this.fUi_comboGauge_other.visible = false;

	this.createInitUser();
	this.createInitOther();

	this.gameUtil
			.setTextAlign(this.fWordtext_user, 105, 26, 'center', 'middle');
	this.gameUtil.setTextAlign(this.fWordtext_other, 105, 26, 'center',
			'middle');
	that.setGameState(that.gameConst.GameStateType.READY_ANIMATION);

	this.fSheet_talkBoxCombo1_user.animations.stop(null, true);
	this.fSheet_talkBoxCombo2_user.animations.stop(null, true);
	this.fSheet_talkBox_user.animations.stop(null, true);

	this.fSheet_talkBoxCombo1_other.animations.stop(null, true);
	this.fSheet_talkBoxCombo2_other.animations.stop(null, true);
	this.fSheet_talkBox_other.animations.stop(null, true);

	this.gameData.result_point = 0;

	// this.socketManager.netReqGameReady("req_game_ready",
	// that.gameData.sessionID, that.gameData.roomNumber,
	// that.gameData.userNickName);
};
//게임 스테이트 셋팅 - 준비 애니메이션
Level1.prototype.setGameReadyAnimation = function() {
	gameState = that.gameConst.GameStateType.READY_ANIMATION;
	this.startCountUserArray();
	this.startCountOtherArray();

	this.setStartUserCount();
	this.setStartOtherCount();

	// 3,2,1 스타트 구현
	this.game.time.events.add(Phaser.Timer.SECOND * 4, function() {
		// that.setGameState(that.gameConst.GameStateType.START);
		// this.setUserWord(1);
		// this.setOtherWord(1);
		that.setGameState(that.gameConst.GameStateType.READY);
	}, this);
};
//게임 스테이트 셋팅 -  준비
Level1.prototype.setGameReady = function() {
	gameState = that.gameConst.GameStateType.READY;
	that.setToastMessage("상대방을 기다리는 중입니다. 잠시 기다려 주세요...");
	checkDelayEnableGameStart();
	this.socketManager.netReqGameReady("req_game_ready",
			that.gameData.sessionID, that.gameData.roomNumber,
			that.gameData.userNickName);
};

// 접속 관련...
//게임 스테이트 셋팅 - 시작
Level1.prototype.setGameStart = function() {
	gameState = that.gameConst.GameStateType.START;
	// this.soundManager.play('G_Start');
	this.setUserWord(1);
	this.setOtherWord(1);
	this.initializeTime();
};
//게임 스테이트 셋팅 - 인게임 완료
Level1.prototype.setGameIngameFinish = function() {
	gameState = that.gameConst.GameStateType.INGAME_FINISH;

	mIngameFinishTime = 3000; // 2초후 사라짐.
	mIngameFinishStartTime = new Date();
};
//게임 스테이트 셋팅 - 인게임 끝 준비
Level1.prototype.setGameIngameEndReady = function() {
	gameState = that.gameConst.GameStateType.INGAME_END_READY;
	
	this.setToastMessage("게임이 끝났습니다. 결과 확인중 입니다.", 3, 0, true);
	
	
	that.game.time.events.add(Phaser.Timer.SECOND * 3.0, function() {
		that.setGameState(that.gameConst.GameStateType.INGAME_END);
	}, that);
};
//게임 스테이트 셋팅 - 인게임 끝
Level1.prototype.setGameIngameEnd = function() {
	gameState = that.gameConst.GameStateType.INGAME_END;

	this.wordInputEmptyUser();
	this.wordInputEmptyOther();
	
	this.fUi_comboGauge_user.mask.clear();
	this.fUi_comboGauge_other.mask.clear();
	
	this.fUi_comboGauge_user.visible = false;
	this.fUi_comboPanel_user.visible = false;
	
	this.fUi_comboGauge_other.visible = false;
	this.fUi_comboPanel_other.visible = false;
	
	this.setVisibleUserTalkBox(false);
	this.setVisibleOtherTalkBox(false);

	if (this.fUserPlayCoin !== undefined) {
		this.fUserPlayCoin.destroy();
	}

	if (this.fOtherPlayCoin !== undefined) {
		this.fOtherPlayCoin.destroy();
	}

	var timerEvents = this.game.time.events;
	for (var i = 0; i < timerEvents.length; i++) {
		this.game.time.events.remove(timerEvents[i]);
	}
	this.game.tweens.removeAll();

	this.fCoin_part1_user.visible = false;
	this.fCoin_part2_user.visible = false;
	this.fCoin_part3_user.visible = false;
	this.fCoin_part4_user.visible = false;
	this.fCoin_part5_user.visible = false;
	this.fCoin_part6_user.visible = false;
	this.fCoin_part7_user.visible = false;
	this.fCoin_part8_user.visible = false;
	this.fCoin_part9_user.visible = false;
	this.fCoin_part10_user.visible = false;

	this.fCoin_part1_other.visible = false;
	this.fCoin_part2_other.visible = false;
	this.fCoin_part3_other.visible = false;
	this.fCoin_part4_other.visible = false;
	this.fCoin_part5_other.visible = false;
	this.fCoin_part6_other.visible = false;
	this.fCoin_part7_other.visible = false;
	this.fCoin_part8_other.visible = false;
	this.fCoin_part9_other.visible = false;
	this.fCoin_part10_other.visible = false;

	this.fCombo_group_user.visible = false;
	this.fCombo_group_other.visible = false;

	this.soundManager.stop(that.soundManager.SOUND_TYPE.Time_danger);

	this.socketManager.netReqGameResult('req_game_result',
			that.gameData.sessionID, that.gameData.roomNumber,
			that.gameData.userNickName);

};
//게임 스테이트 셋팅 - 인게임 끝 애니메이션
Level1.prototype.setGameIngameEndAnimation = function() {
	gameState = that.gameConst.GameStateType.INGAME_END_ANIMATION;

	// this.initBackGroundObject();

	if (that.gameData.result_draw === true) {
		if ((this.fUserCoinPile1 !== undefined)
				&& (this.fUserCoinPile1.visible === true))
			this.fChar_aniPoseSheet_user.setPlay("RESULT_DRAW");
		if ((this.fOtherCoinPile1 !== undefined)
				&& (this.fOtherCoinPile1.visible === true))
			this.fChar_aniPoseSheet_other.setPlay("RESULT_DRAW");
		// this.soundManager.play('Draw');
	} else {
		if (that.gameData.result_win === true) {
			if ((this.fUserCoinPile1 !== undefined)
					&& (this.fUserCoinPile1.visible === true))
				this.fChar_aniPoseSheet_user.setPlay("RESULT_WIN");
			if ((this.fOtherCoinPile1 !== undefined)
					&& (this.fOtherCoinPile1.visible === true))
				this.fChar_aniPoseSheet_other.setPlay("RESULT_LOSE");
			// this.soundManager.play('Vict');
		} else {
			if ((this.fUserCoinPile1 !== undefined)
					&& (this.fUserCoinPile1.visible === true))
				this.fChar_aniPoseSheet_user.setPlay("RESULT_LOSE");
			if ((this.fOtherCoinPile1 !== undefined)
					&& (this.fOtherCoinPile1.visible === true))
				this.fChar_aniPoseSheet_other.setPlay("RESULT_WIN");
			// this.soundManager.play('Lose');
		}
	}

	if (this.fChar_aniSheet_user !== undefined) {
		this.fChar_aniSheet_user.visible = false;
	}

	if (this.fChar_aniSheet_other !== undefined) {
		this.fChar_aniSheet_other.visible = false;
	}

	this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		that.setGameState(that.gameConst.GameStateType.RESULT);
	}, this);
};
//게임 스테이트 셋팅 - 인게임 끝 애니메이션
Level1.prototype.setGameResult = function() {
	gameState = that.gameConst.GameStateType.RESULT;


	if (this.fChar_aniSheet_user !== undefined) {
		this.fChar_aniSheet_user.visible = false;
	}

	if (this.fChar_aniSheet_other !== undefined) {
		this.fChar_aniSheet_other.visible = false;
	}

	this.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);

	// this.fCoin_player_user.children.forEach(function(element) {
	// element.destroy();
	// });
	//	
	// this.fCoin_player_other.children.forEach(function(element) {
	// element.destroy();
	// });

	this.fRUICharEffSV1.scale.x = 0.8;
	this.fRUICharEffSV1.scale.y = 0.8;

	this.isUserDrop = false;
	this.isOtherDrop = false;

	userCoinCount = 0;
	otherCoinCount = 0;

	if (that.gameData.gamePlayMode === this.gameConst.GameModeType.AI) {
	} else {
		this.resultCommonVS(); // 대전 공용
		if (that.gameData.result_draw === true) {
			this.resultDrawVS(); // 무승부 인 경우
		} else {
			if (that.gameData.result_win === true) {
				this.resultSuccessVS(); // 내가 이긴 경우
			} else {
				this.resultLoseVS(); // 내가 진 경우
			}
		}
	}

	if (that.gameData.result_score > this.userScoreAniResultCount) {
		this.fAddPointPannel.visible = true;
		this.fAddPointUserPannel.visible = true;
		this.fAddPointPanelL.visible = true;
		this.fAddPointPanelL.animations.play("PLAY");
	} else {
		this.gameUtil.setText(this.fPPointSV1, 126, 40, 'right', 'middle',
				this.userScoreAniResultCount + "점");
	}

	if (that.gameData.result_other_score > this.otherScoreAniResultCount) {
		this.fAddPointPannel.visible = true;
		this.fAddPointOtherPannel.visible = true;
		this.fAddPointPanelR.visible = true;
		this.fAddPointPanelR.animations.play("PLAY");
	} else {
		this.gameUtil.setText(this.fPPointSV2, 126, 40, 'right', 'middle',
				this.otherScoreAniResultCount + "점");
	}
};
//결과 화면 유저 정보
function resultUserListener() {
	mIsUserResult = true;
	if (that.userComboCount > 0 && that.userComboCount < 6) {
		that.fApTxtComboLEnable.visible = true;
		that.fApTxtComboLDisable.visible = false;
	} else {
		that.fApTxtComboLEnable.visible = false;
		that.fApTxtComboLDisable.visible = true;
	}

	if (that.userHeart > 0) {
		that.fApTxtHeartLEnable.visible = true;
		that.fApTxtHeartLDisable.visible = false;

	} else {
		that.fApTxtHeartLEnable.visible = false;
		that.fApTxtHeartLDisable.visible = true;
	}

	this.userComboCount = 0;
}
//결과 화면 상대 정보 
function resultOtherListener() {
	mIsOtherResult = true;
	if (that.otherComboCount > 0 && that.otherComboCount < 6) {
		that.fApTxtComboREnable.visible = true;
		that.fApTxtComboRDisable.visible = false;
	} else {
		that.fApTxtComboREnable.visible = false;
		that.fApTxtComboRDisable.visible = true;
	}

	if (that.otherHeart > 0) {
		that.fApTxtHeartREnable.visible = true;
		that.fApTxtHeartRDisable.visible = false;
	} else {
		that.fApTxtHeartREnable.visible = false;
		that.fApTxtHeartRDisable.visible = true;
	}

	this.otherComboCount = 0;
}
//게임 스테이트 셋팅 - 아웃게임 끝
Level1.prototype.setGameOutGameEnd = function() {
	gameState = that.gameConst.GameStateType.OUTGAME_END;
};
//유저 - 쌓여져 있는 코인 애니메이션 셋팅
Level1.prototype.setUserCoinsAni = function(aAnimationName, aIsTween) {
	// fields
	this.fCoin_container_user.children.forEach(function(element) {
		element.setPlay(aAnimationName, aIsTween);
	});
};
//상대 - 쌓여져 있는 코인 애니메이션 셋팅
Level1.prototype.setOtherCoinsAni = function(aAnimationName, aIsTween) {
	// fields
	this.fCoin_container_other.children.forEach(function(element) {
		element.setPlay(aAnimationName, aIsTween);
	});
};
//Update에서 게임 로직 계산부
Level1.prototype.gameProcess = function() {
	switch (gameState) {
	case that.gameConst.GameStateType.ENTER:
	case that.gameConst.GameStateType.READY_ANIMATION:
	case that.gameConst.GameStateType.READY:
		userTajaTyping.focus();

		this.fUi_inputWord.text = userTajaTyping.value;
		// this.fUi_inputWord.text = mUserTypingText;
		this.fUi_inputWord.text.trim();
		if (this.fUi_inputWord.text === "") {
			this.fInputCursorSheet.x = 365;
		} else {
			var ctx = this.fUi_inputWord.canvas.getContext("2d");
			ctx.font = "14px 나눔고딕";
			var text = ctx.measureText(this.fUi_inputWord.text);
			this.fInputCursorSheet.x = 365 + text.width;
		}

		this.processUserBackground();
		this.processOtherBackground();

		this.processUser();
		this.processOther();

		this.setUserComboMax();
		this.setOtherComboMax();

		this.processComboAttackUser();
		this.processComboAttackOther();

		this.processGaugeUser();
		this.processGaugeOther();
		break;
	case that.gameConst.GameStateType.START:
		userTajaTyping.focus();
		this.processTime();

		this.fUi_inputWord.text = userTajaTyping.value;
		// this.fUi_inputWord.text = mUserTypingText;
		// this.fUi_inputWord.text.trim();
		if (this.fUi_inputWord.text === "") {
			this.fInputCursorSheet.x = 365;
		} else {
			var ctx = this.fUi_inputWord.canvas.getContext("2d");
			ctx.font = "14px 나눔고딕";
			var text = ctx.measureText(this.fUi_inputWord.text);
			this.fInputCursorSheet.x = 365 + text.width;
		}
		this.processUserBackground();
		this.processOtherBackground();

		this.processUser();
		this.processOther();

		this.processCoinUser();
		this.processCoinOther();

		this.setUserComboMax();
		this.setOtherComboMax();

		this.processComboAttackUser();
		this.processComboAttackOther();

		this.processGaugeUser();
		this.processGaugeOther();
		break;

	case that.gameConst.GameStateType.INGAME_FINISH:
		userTajaTyping.focus();
		this.processTime();

		this.fUi_inputWord.text = userTajaTyping.value;
		// this.fUi_inputWord.text = mUserTypingText;
		// this.fUi_inputWord.text.trim();
		if (this.fUi_inputWord.text === "") {
			this.fInputCursorSheet.x = 365;
		} else {
			var ctx = this.fUi_inputWord.canvas.getContext("2d");
			ctx.font = "14px 나눔고딕";
			var text = ctx.measureText(this.fUi_inputWord.text);
			this.fInputCursorSheet.x = 365 + text.width;
		}

		this.processUserBackground();
		this.processOtherBackground();

		this.processUser();
		this.processOther();

		this.processCoinUser();
		this.processCoinOther();

		this.setUserComboMax();
		this.setOtherComboMax();

		this.processComboAttackUser();
		this.processComboAttackOther();

		this.processGaugeUser();
		this.processGaugeOther();

		this.processIngameFinish();
		break;

	case that.gameConst.GameStateType.INGAME_END_READY:
		this.wordInputEmptyUser();
		this.setVisibleUserTalkBox(false);
		this.wordInputEmptyOther();
		this.setVisibleOtherTalkBox(false);		
		break;

	case that.gameConst.GameStateType.INGAME_END:
		this.wordInputEmptyUser();
		this.setVisibleUserTalkBox(false);
		this.wordInputEmptyOther();
		this.setVisibleOtherTalkBox(false);
		break;

	case that.gameConst.GameStateType.INGAME_END_ANIMATION:

		break;

	case that.gameConst.GameStateType.RESULT:
		

		this.processResult();
		
		this.fRUICharEffSV2.angle += 0.5;
		this.fRUICharEffSV1.angle -= 0.7;
		break;

	case that.gameConst.GameStateType.OUTGAME_END:

		break;
	}
};
//배경 및 배경 오브젝트 셋팅
Level1.prototype.setBackGround = function() {

	// BackGround : ["랜덤", "산", "우주", "눈 덮인 산", "바다 속", "빌딩", "고목나무", "노을 지는 산",
	// "동굴", "없음"],
	switch (this.gameData.backGround) {
	case 1: // 산
	default: // 산
		this.setBackGroundUnit('Back_image1', 'Back_image3', 'Back_image2',
				'wall_Lf', 'wall_Rt');

		// 배경 오브젝트.
		this.fBackground_airplane_user = new BackObjAirplaneV1(this.game,
				379.0, 110.0);
		this.fBack_object_user.add(this.fBackground_airplane_user);
		this.fBackground_pelican_user = new BackObjPelicanV1(this.game, 413.0,
				245.0);
		this.fBack_object_user.add(this.fBackground_pelican_user);

		this.fBackground_pelican_other = new BackObjPelican2V1(this.game, 68.0,
				310.0);
		this.fBack_object_other.add(this.fBackground_pelican_other);
		this.fBackground_airplane_other = new BackObjAirplane2V1(this.game,
				66.0, 135.0);
		this.fBack_object_other.add(this.fBackground_airplane_other);
		break;

	case 2: // 우주
		this.setBackGroundUnit('BackImg2_bg1', 'BackImg2_bg2', 'BackImg2_bg3',
				'BackImg2_wallL', 'BackImg2_wallR');

		// 배경 오브젝트.
		this.fBackground_twotwo_user = new BackObjTwoTwoV1(this.game, 379.0,
				110.0);
		this.fBack_object_user.add(this.fBackground_twotwo_user);
		this.fBackground_two_user = new BackObjTwoV1(this.game, 413.0, 245.0);
		this.fBack_object_user.add(this.fBackground_two_user);

		this.fBackground_two_other = new BackObjTwo2V1(this.game, 68.0, 310.0);
		this.fBack_object_other.add(this.fBackground_two_other);
		this.fBackground_twotwo_other = new BackObjTwoTwo2V1(this.game, 66.0,
				135.0);
		this.fBack_object_other.add(this.fBackground_twotwo_other);
		break;

	case 3: // 눈 덮인 산
		this.setBackGroundUnit('BackImg3_bg1', 'BackImg3_bg2', 'BackImg3_bg3',
				'BackImg3_wallL', 'BackImg3_wallR');

		// 배경 오브젝트.
		this.fBackground_threetwo_user = new BackObjThreeTwoV1(this.game,
				379.0, 110.0);
		this.fBack_object_user.add(this.fBackground_threetwo_user);
		this.fBackground_three_user = new BackObjThreeV1(this.game, 413.0,
				245.0);
		this.fBack_object_user.add(this.fBackground_three_user);

		this.fBackground_three_other = new BackObjThree2V1(this.game, 68.0,
				310.0);
		this.fBack_object_other.add(this.fBackground_three_other);
		this.fBackground_threetwo_other = new BackObjThreeTwo2V1(this.game,
				66.0, 135.0);
		this.fBack_object_other.add(this.fBackground_threetwo_other);
		break;

	case 4: // 바다 속
		this.setBackGroundUnit('BackImg4_bg1', 'BackImg4_bg2', 'BackImg4_bg3',
				'BackImg4_wallL', 'BackImg4_wallR');

		// 배경 오브젝트.
		this.fBackground_fourtwo_user = new BackObjFourTwoV1(this.game, 379.0,
				110.0);
		this.fBack_object_user.add(this.fBackground_fourtwo_user);
		this.fBackground_four_user = new BackObjFourV1(this.game, 413.0, 245.0);
		this.fBack_object_user.add(this.fBackground_four_user);

		this.fBackground_four_other = new BackObjFour2V1(this.game, 68.0, 310.0);
		this.fBack_object_other.add(this.fBackground_four_other);
		this.fBackground_fourtwo_other = new BackObjFourTwo2V1(this.game, 66.0,
				135.0);
		this.fBack_object_other.add(this.fBackground_fourtwo_other);
		break;

	case 5: // 빌딩
		this.setBackGroundUnit('BackImg5_bg1', 'BackImg5_bg2', 'BackImg5_bg3',
				'BackImg5_wallL', 'BackImg5_wallR');

		// 배경 오브젝트.
		this.fBackground_fivetwo_user = new BackObjFiveTwoV1(this.game, 379.0,
				110.0);
		this.fBack_object_user.add(this.fBackground_fivetwo_user);
		this.fBackground_five_user = new BackObjFiveV1(this.game, 413.0, 245.0);
		this.fBack_object_user.add(this.fBackground_five_user);

		this.fBackground_five_other = new BackObjFive2V1(this.game, 68.0, 310.0);
		this.fBack_object_other.add(this.fBackground_five_other);
		this.fBackground_fivetwo_other = new BackObjFiveTwo2V1(this.game, 66.0,
				135.0);
		this.fBack_object_other.add(this.fBackground_fivetwo_other);
		break;

	case 6: // 고목나무
		this.setBackGroundUnit('BackImg6_bg1', 'BackImg6_bg2', 'BackImg6_bg3',
				'BackImg6_wallL', 'BackImg6_wallR');

		// 배경 오브젝트.
		this.fBackground_sixtwo_user = new BackObjSixTwoV1(this.game, 379.0,
				110.0);
		this.fBack_object_user.add(this.fBackground_sixtwo_user);
		this.fBackground_six_user = new BackObjSixV1(this.game, 413.0, 245.0);
		this.fBack_object_user.add(this.fBackground_six_user);

		this.fBackground_six_other = new BackObjSix2V1(this.game, 68.0, 310.0);
		this.fBack_object_other.add(this.fBackground_six_other);
		this.fBackground_sixtwo_other = new BackObjSixTwo2V1(this.game, 66.0,
				135.0);
		this.fBack_object_other.add(this.fBackground_sixtwo_other);
		break;

	case 7: // 노을 지는 산
		this.setBackGroundUnit('BackImg7_bg1', 'BackImg7_bg2', 'BackImg7_bg3',
				'BackImg7_wallL', 'BackImg7_wallR');

		// 배경 오브젝트.
		this.fBackground_seventwo_user = new BackObjSevenTwoV1(this.game,
				379.0, 110.0);
		this.fBack_object_user.add(this.fBackground_seventwo_user);
		this.fBackground_seven_user = new BackObjSevenV1(this.game, 413.0,
				245.0);
		this.fBack_object_user.add(this.fBackground_seven_user);

		this.fBackground_seven_other = new BackObjSeven2V1(this.game, 68.0,
				310.0);
		this.fBack_object_other.add(this.fBackground_seven_other);
		this.fBackground_seventwo_other = new BackObjSevenTwo2V1(this.game,
				66.0, 135.0);
		this.fBack_object_other.add(this.fBackground_seventwo_other);
		break;

	case 8: // 동굴
		this.setBackGroundUnit('BackImg8_bg1', 'BackImg8_bg2', 'BackImg8_bg3',
				'BackImg8_wallL', 'BackImg8_wallR');
		// 배경 오브젝트.
		this.fBackground_eight_user = new BackObjEightV1(this.game, 379.0,
				110.0);
		this.fBack_object_user.add(this.fBackground_eight_user);
		this.fBackground_eighttwo_user = new BackObjEightTwoV1(this.game,
				413.0, 245.0);
		this.fBack_object_user.add(this.fBackground_eighttwo_user);

		this.fBackground_eight_other = new BackObjEight2V1(this.game, 68.0,
				310.0);
		this.fBack_object_other.add(this.fBackground_eight_other);
		this.fBackground_eighttwo_other = new BackObjEightTwo2V1(this.game,
				66.0, 135.0);
		this.fBack_object_other.add(this.fBackground_eighttwo_other);
		break;
	}
};
//원경 및 근경 위치 셋팅
Level1.prototype.setBackGroundUnit = function(aBackImage1, aBackImage2,
		aBackImage3, aWallLf, aWallRt) {
	// 원경 배경.
	this.fBack_image1_user = this.add.sprite(0.0, 0.0, aBackImage1, null,
			this.fBack_far_user);
	this.fBack_image2_user = this.add.sprite(0.0, -576.0, aBackImage2, null,
			this.fBack_far_user);
	this.fBack_image3_user = this.add.sprite(0.0, -1152.0, aBackImage3, null,
			this.fBack_far_user);

	this.fBack_image1_other = this.add.sprite(0.0, 0.0, aBackImage1, null,
			this.fBack_far_other);
	this.fBack_image2_other = this.add.sprite(0.0, -576.0, aBackImage2, null,
			this.fBack_far_other);
	this.fBack_image3_other = this.add.sprite(0.0, -1152.0, aBackImage3, null,
			this.fBack_far_other);

	// 근경 배경.
	this.fWall_Rt_user4 = this.add.sprite(512.0, -1728.0, aWallRt, null,
			this.fBack_near_user);
	this.fWall_Rt_user4.anchor.setTo(1.0, 0.0);
	this.fWall_Rt_user3 = this.add.sprite(512.0, -1152.0, aWallRt, null,
			this.fBack_near_user);
	this.fWall_Rt_user3.anchor.setTo(1.0, 0.0);
	this.fWall_Rt_user2 = this.add.sprite(512.0, -576.0, aWallRt, null,
			this.fBack_near_user);
	this.fWall_Rt_user2.anchor.setTo(1.0, 0.0);
	this.fWall_Rt_user = this.add.sprite(512.0, 0.0, aWallRt, null,
			this.fBack_near_user);
	this.fWall_Rt_user.anchor.setTo(1.0, 0.0);
	this.fWall_Lf_user4 = this.add.sprite(0.0, -1728.0, aWallLf, null,
			this.fBack_near_user);
	this.fWall_Lf_user3 = this.add.sprite(0.0, -1152.0, aWallLf, null,
			this.fBack_near_user);
	this.fWall_Lf_user2 = this.add.sprite(0.0, -576.0, aWallLf, null,
			this.fBack_near_user);
	this.fWall_Lf_user = this.add.sprite(0.0, 0.0, aWallLf, null,
			this.fBack_near_user);

	this.fWall_Rt_other4 = this.add.sprite(512.0, -1728.0, aWallRt, null,
			this.fBack_near_other);
	this.fWall_Rt_other4.anchor.setTo(1.0, 0.0);
	this.fWall_Rt_other3 = this.add.sprite(512.0, -1152.0, aWallRt, null,
			this.fBack_near_other);
	this.fWall_Rt_other3.anchor.setTo(1.0, 0.0);
	this.fWall_Rt_other2 = this.add.sprite(512.0, -576.0, aWallRt, null,
			this.fBack_near_other);
	this.fWall_Rt_other2.anchor.setTo(1.0, 0.0);
	this.fWall_Rt_other = this.add.sprite(512.0, 0.0, aWallRt, null,
			this.fBack_near_other);
	this.fWall_Rt_other.anchor.setTo(1.0, 0.0);
	this.fWall_Lf_other4 = this.add.sprite(0.0, -1728.0, aWallLf, null,
			this.fBack_near_other);
	this.fWall_Lf_other3 = this.add.sprite(0.0, -1152.0, aWallLf, null,
			this.fBack_near_other);
	this.fWall_Lf_other2 = this.add.sprite(0.0, -576.0, aWallLf, null,
			this.fBack_near_other);
	this.fWall_Lf_other = this.add.sprite(0.0, 0.0, aWallLf, null,
			this.fBack_near_other);
};
//배경 오브젝트 애니메이션 셋팅.
Level1.prototype.setPlayBackGroundObject = function() {

	// BackGround : ["랜덤", "산", "우주", "눈 덮인 산", "바다 속", "빌딩", "고목나무", "노을 지는 산",
	// "동굴", "없음"],
	switch (this.gameData.backGround) {
	case 1: // 산
	default: // 산
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_pelican_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_airplane_user.setPlay("PLAY", true, -1);

		this.fBackground_pelican_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_airplane_other.setPlay("PLAY", true, 1);
		}, this);
		break;

	case 2: // 우주
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_twotwo_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_two_user.setPlay("PLAY", true, -1);

		this.fBackground_two_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_twotwo_other.setPlay("PLAY", true, 1);
		}, this);
		break;

	case 3: // 눈 덮인 산
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_threetwo_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_three_user.setPlay("PLAY", true, -1);

		this.fBackground_three_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_threetwo_other.setPlay("PLAY", true, 1);
		}, this);
		break;

	case 4: // 바다 속
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_fourtwo_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_four_user.setPlay("PLAY", true, -1);

		this.fBackground_four_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_fourtwo_other.setPlay("PLAY", true, 1);
		}, this);
		break;

	case 5: // 빌딩
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_fivetwo_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_five_user.setPlay("PLAY", true, -1);

		this.fBackground_five_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_fivetwo_other.setPlay("PLAY", true, 1);
		}, this);
		break;

	case 6: // 고목나무
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_sixtwo_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_six_user.setPlay("PLAY", true, -1);

		this.fBackground_six_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_sixtwo_other.setPlay("PLAY", true, 1);
		}, this);
		break;

	case 7: // 노을 지는 산
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_seventwo_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_seven_user.setPlay("PLAY", true, -1);

		this.fBackground_seven_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_seventwo_other.setPlay("PLAY", true, 1);
		}, this);
		break;

	case 8: // 동굴
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_eighttwo_user.setPlay("PLAY", true, -1);
		}, this);
		this.fBackground_eight_user.setPlay("PLAY", true, -1);

		this.fBackground_eighttwo_other.setPlay("PLAY", true, 1);
		this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
			this.fBackground_eight_other.setPlay("PLAY", true, 1);
		}, this);
		break;
	}
};
//배경 초기화.
Level1.prototype.initBackGroundObject = function() {

	// BackGround : ["랜덤", "산", "우주", "눈 덮인 산", "바다 속", "빌딩", "고목나무", "노을 지는 산",
	// "동굴", "없음"],
	switch (this.gameData.backGround) {
	case 1: // 산
	default: // 산
		this.fBackground_pelican_user.visible = false;
		this.fBackground_airplane_user.visible = false;
		this.fBackground_pelican_other.visible = false;
		this.fBackground_airplane_other.visible = false;
		break;

	case 2: // 우주
		this.fBackground_twotwo_user.visible = false;
		this.fBackground_two_user.visible = false;
		this.fBackground_two_other.visible = false;
		this.fBackground_twotwo_other.visible = false;
		break;

	case 3: // 눈 덮인 산
		this.fBackground_threetwo_user.visible = false;
		this.fBackground_three_user.visible = false;
		this.fBackground_three_other.visible = false;
		this.fBackground_threetwo_other.visible = false;
		break;

	case 4: // 바다 속
		this.fBackground_fourtwo_user.visible = false;
		this.fBackground_four_user.visible = false;
		this.fBackground_four_other.visible = false;
		this.fBackground_fourtwo_other.visible = false;
		break;

	case 5: // 빌딩
		this.fBackground_fivetwo_user.visible = false;
		this.fBackground_five_user.visible = false;
		this.fBackground_five_other.visible = false;
		this.fBackground_fivetwo_other.visible = false;
		break;

	case 6: // 고목나무
		this.fBackground_sixtwo_user.visible = false;
		this.fBackground_six_user.visible = false;
		this.fBackground_six_other.visible = false;
		this.fBackground_sixtwo_other.visible = false;
		break;

	case 7: // 노을 지는 산
		this.fBackground_seventwo_user.visible = false;
		this.fBackground_seven_user.visible = false;
		this.fBackground_seven_other.visible = false;
		this.fBackground_seventwo_other.visible = false;
		break;

	case 8: // 동굴
		this.fBackground_eight_user.visible = false;
		this.fBackground_eighttwo_user.visible = false;
		this.fBackground_eight_other.visible = false;
		this.fBackground_eighttwo_other.visible = false;
		break;
	}
};

var mUserBackgroundWallY1;
var mUserBackgroundWallY2;
var mUserBackgroundWallY3;
var mUserBackgroundWallY4;
var mUserBackgroundY1;
var mUserBackgroundY2;
var mUserBackgroundY3;

var mOtherBackgroundWallY1;
var mOtherBackgroundWallY2;
var mOtherBackgroundWallY3;
var mOtherBackgroundWallY4;
var mOtherBackgroundY1;
var mOtherBackgroundY2;
var mOtherBackgroundY3;

var mIsUserResult;
var mIsOtherResult;
//유저 배경 스크롤 셋팅
Level1.prototype.scrollBackgroundUser = function() {
	if(mUserBackgroundWallY1 <= (1728 - 40) ){
		mUserBackgroundWallY1 += 40;
		mUserBackgroundWallY2 += 40;
		mUserBackgroundWallY3 += 40;
		mUserBackgroundWallY4 += 40;
	}	
	
	if(mUserBackgroundY1 <= (1152 - 30) ){
		mUserBackgroundY1 += 30;
		mUserBackgroundY2 += 30;
		mUserBackgroundY3 += 30;
	}
};
//상대 배경 스크롤 셋팅
Level1.prototype.scrollBackgroundOther = function() {
	if(mOtherBackgroundWallY1 <= (1728 - 40) ){
		mOtherBackgroundWallY1 += 40;
		mOtherBackgroundWallY2 += 40;
		mOtherBackgroundWallY3 += 40;
		mOtherBackgroundWallY4 += 40;
	}
	
	if(mOtherBackgroundY1 <= (1152 - 30) ){
		mOtherBackgroundY1 += 30;
		mOtherBackgroundY2 += 30;
		mOtherBackgroundY3 += 30;
	}
};

// Global Variable
var movTime = 10; // 단어 움직임
var makeTime = 600; // 화면에 단어가 만들어지는 시간차이
var startTime = 100; // 시작되는 시간

var coinWidth = 50; // 코인 한개당 Width
var coinHeight = 20; // 코인 한개당 Height

var gameState; // 게임 현 상태.

var isUserDrop = false;
var isUserPile = false;
var isUserRolling = false;

var isUserReqCheckWords = false;

var isOtherDrop = false;
var isOtherPile = false;
var isOtherRolling = false;

var isMakeWordDelay = 2500;
var isShowWordDelay = 200;

var mIngameFinishTime = 0; // 마지막 끝나는 시간
var mIngameFinishStartTime = 0; // 마지막 끝나는 시작 시간

// 3,2,1,Start
var startCountUserArray = [];
var startCountOtherArray = [];

var userWordType = 0;
var otherWordType = 0;

var userWordNextType = 0;
var otherWordNextType = 0;

var userCoinCount = 0;
var otherCoinCount = 0;
var coinPileMax = 7;

var onUserDiv = []; // 현재 화면에서 움직이는 div
var onUserTextField; // 현재화면에서의 텍스트 필드
var onUserTextFieldInput; // 현재화면에서의 인풋텍스트 필드

var onOtherDiv = []; // 현재 화면에서 움직이는 div
var onOtherTextField; // 현재화면에서의 텍스트 필드
var onOtherTextFieldInput; // 현재화면에서의 인풋텍스트 필드
//외부 스크립트 연결
Level1.prototype.createScript = function() {

	this.config = Config.getInstance();
	this.gameUtil = GameUtil.getInstance();
	this.gameConst = GameConst.getInstance();
	this.soundManager = SoundManager.getInstance(this);
	this.gameData = GameData.getInstance();
	this.platform = Platform.getInstance();
	this.socketManager = SocketManager.getInstance();
	this.ajaxManager = AjaxManager.getInstance();
};
//게임 룸에서 지정한 시간 초기화.
Level1.prototype.initializeTime = function() {
	this.oldTime = new Date();

	this.fTimeNum.text = that.gameData.roomPlayTime.toString() + ":00";
};
//게임 시간 계산.
Level1.prototype.processTime = function() {
	this.fTimeNum.text = this.nowTime();
};

// CHARACTER_TYPE : {"AMOGAE":0, "GIGI":1, "MOA":2, "MAMANG":3, "YUKBEE":4,
// "YAYA":5},
// 인게임 캐릭터 애니메이션 등록.
Level1.prototype.setIngameCharacterAni = function(aIsUser, aCharacterType) {
	var characterAni;
	var characterPoseAni;

	switch (aCharacterType) {
	case that.gameConst.CHARACTER_TYPE.AMOGAE:
		characterAni = new CharAmogeaIngameV3(this.game, 235.0, 436.0);
		characterPoseAni = new CharAmogeaResultV3(this.game, 235.0, 436.0);
		break;

	case that.gameConst.CHARACTER_TYPE.GIGI:
		characterAni = new CharJijiIngameV1(this.game, 235.0, 436.0);
		characterPoseAni = new CharJijiResultV1(this.game, 235.0, 436.0);
		break;

	case that.gameConst.CHARACTER_TYPE.MOA:
		characterAni = new CharMoaIngameV1(this.game, 235.0, 436.0);
		characterPoseAni = new CharMoaResultV1(this.game, 235.0, 436.0);
		break;

	case that.gameConst.CHARACTER_TYPE.MAMANG:
		characterAni = new CharMamangIngameV2(this.game, 235.0, 436.0);
		characterPoseAni = new CharMamangResultV2(this.game, 235.0, 436.0);
		break;

	case that.gameConst.CHARACTER_TYPE.YUKBEE:
		characterAni = new Char6bIngameV1(this.game, 235.0, 436.0);
		characterPoseAni = new Char6bResultV1(this.game, 235.0, 436.0);
		break;

	case that.gameConst.CHARACTER_TYPE.YAYA:
		characterAni = new CharYayaIngameV1(this.game, 235.0, 436.0);
		characterPoseAni = new CharYayaResultV1(this.game, 235.0, 436.0);
		break;

	default:
		characterAni = new CharAmogeaIngameV3(this.game, 235.0, 436.0);
		characterPoseAni = new CharAmogeaResultV3(this.game, 235.0, 436.0);
		break;
	}

	if (aIsUser === true) {
		this.fChar_aniSheet_user = characterAni;
		this.fChar_aniSheet_user_group.add(this.fChar_aniSheet_user);

		this.fChar_aniPoseSheet_user = characterPoseAni;
		this.fChar_aniSheet_user_group.add(this.fChar_aniPoseSheet_user);
	} else {
		this.fChar_aniSheet_other = characterAni;
		this.fChar_aniSheet_other_group.add(this.fChar_aniSheet_other);

		this.fChar_aniPoseSheet_other = characterPoseAni;
		this.fChar_aniSheet_other_group.add(this.fChar_aniPoseSheet_other);
	}
};
//유저 - 콤보 텍스트
Level1.prototype.createUserComboText = function() {
	this.fUserComboEffectText = new ComboTextEffectV1(this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[5]);
	this.fUserComboEffectText.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText);

	this.fUserComboEffectText1 = new ComboTextEffectV1(this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[0]);
	this.fUserComboEffectText1.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText1);

	this.fUserComboEffectText2 = new ComboTextEffectV1(this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[1]);
	this.fUserComboEffectText2.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText2);

	this.fUserComboEffectText3 = new ComboTextEffectV1(this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[2]);
	this.fUserComboEffectText3.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText3);

	this.fUserComboEffectText4 = new ComboTextEffectV1(this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[3]);
	this.fUserComboEffectText4.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText4);

	this.fUserComboEffectText5 = new ComboTextEffectV1(this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[4]);
	this.fUserComboEffectText5.visible = false;
	this.fCombo_group_user.add(this.fUserComboEffectText5);
};
//상대 - 콤보 텍스트
Level1.prototype.createOtherComboText = function() {

	this.fOtherComboEffectText = new ComboTextEffectV1(this.game, 239.0, 300.0,
			this.gameConst.ComboTextEffectNames[5]);
	this.fOtherComboEffectText.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText);

	this.fOtherComboEffectText1 = new ComboTextEffectV1(this.game, 239.0,
			300.0, this.gameConst.ComboTextEffectNames[0]);
	this.fOtherComboEffectText1.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText1);

	this.fOtherComboEffectText2 = new ComboTextEffectV1(this.game, 239.0,
			300.0, this.gameConst.ComboTextEffectNames[1]);
	this.fOtherComboEffectText2.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText2);

	this.fOtherComboEffectText3 = new ComboTextEffectV1(this.game, 239.0,
			300.0, this.gameConst.ComboTextEffectNames[2]);
	this.fOtherComboEffectText3.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText3);

	this.fOtherComboEffectText4 = new ComboTextEffectV1(this.game, 239.0,
			300.0, this.gameConst.ComboTextEffectNames[3]);
	this.fOtherComboEffectText4.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText4);

	this.fOtherComboEffectText5 = new ComboTextEffectV1(this.game, 239.0,
			300.0, this.gameConst.ComboTextEffectNames[4]);
	this.fOtherComboEffectText5.visible = false;
	this.fCombo_group_other.add(this.fOtherComboEffectText5);
};
//유저 - 게임 입장시 초기화
Level1.prototype.createInitUser = function() {
	userCoinCount = 0;
	this.userCoinCollectCount = 0;
	this.userMeterValue = 0;

	// console.log("createInitUser userCoinCount " + userCoinCount);

	this.userCoinValueTotalCount = 0;
	this.userCoinValue = 0;

	this.userScoreAniResultCount = 0;

	userWordType = that.gameConst.WordType.BASIC;
	userWordNextType = that.gameConst.WordType.BASIC;

	// this.socketManager.netResSetting();
	// this.socketManager.netReqGameReady("req_enter_room", "41", "닉네임테스트121",
	// "0", "null");

	this.userHeart = 3;
	this.setUserHeartAni();

	this.isUserComboAttack = false; // 서버값이라 false,true로 함...
	this.userComboAttackType = 0; // 서버에서 보내주는 콤보어택 타입.
	this.isWarring = false;
	// gameState = that.gameConst.GameStateType.ENTER;

	this.userComboGaugePx = 0;
	this.userComboGaugeAniPx = 0;
	
	this.isUserBoxAttack = 0;
	this.userComboBoxType = 0;

	this.userStartOn = false;
	this.otherStartOn = false;
	this.gameStartOn = false;

	this.userComboCount = 0;

	this.oldTime = new Date();

	this.fMeterValue_user.text = this.userMeterValue.toString() + "m";
	this.fMeterOutlineValue_user.text = this.userMeterValue.toString() + "m";

	this.fCoinValue_user.text = this.userCoinValue.toString();
	this.fCoinValueOutline_user.text = this.userCoinValue.toString();

	this.gameUtil.setText(this.fUserID_text, 150, 25, 'center', 'middle',
			this.gameData.userNickName);

	Level1.prototype.setCoinV1 = function(aParentObject, aX, aY) {
		var _userCoinPile = new CoinV1(this.game, aX, aY);
		aParentObject.add(_userCoinPile);
		return _userCoinPile;
	};

	this.userGenerateCoinPileAll();

	if (this.fUserPlayCoin !== undefined)
		this.fUserPlayCoin.destroy();
	if (this.fCoin_player_user !== undefined)
		this.fCoin_player_user.removeAll();

	this.fSheet_coin_eff_user.visible = false;
	this.fSheet_coinCombo_eff_user.visible = false;

	this.setVisibleUserTalkBox(false);

	this.fCrumble_group_user.visible = false;

	this.fUi_timePanel_Alert.alpha = 0;

	this.fTransImg_.visible = false;
	this.fResultEff_L.visible = false;
	this.fResultEff_S.visible = false;
	this.fResultImg.visible = false;

	// 대전 결과 화면 초기화
	this.fSucessVS.visible = false;

	this.fRUIRedPanelFV.visible = false;
	this.fRUIRedPanelSV.visible = false;

	this.fRUIInfoRFV2.visible = false;
	this.fRUIInfoRFV1.visible = false;
	this.fRUIInfoRSV2.visible = false;
	this.fRUIInfoRSV1.visible = false;

	this.fRUIDrawTitleDV.visible = false;
	this.fRUIFailTitleFV.visible = false;
	this.fRUIVicTitleSV.visible = false;

	// AI 결과 화면 초기화
	this.fSucessAI.visible = false;

	this.fRUIRedPanelSA.visible = false;
	this.fRUIRedPanelFA.visible = false;

	this.fRUIInfoRSA2.visible = false;
	this.fRUIInfoRSA1.visible = false;
	this.fRUIInfoRFA2.visible = false;
	this.fRUIInfoRFA1.visible = false;

	this.fRUIVicTitleSA.visible = false;
	this.fRUIDrawTitleDA.visible = false;
	this.fRUIFailTitleFA.visible = false;

	serverUserTextWord = "";
	userTajaTyping.value = "";
	mUserTypingText = userTajaTyping.value;

	userTajaTyping.onkeydown = this.userWordsCheck;
};
//상대 - 게임 입장시 초기화
Level1.prototype.createInitOther = function() {
	otherCoinCount = 0;
	this.otherCoinCollectCount = 0;
	this.otherMeterValue = 0;

	this.otherScoreAniResultCount = 0;
	this.otherCoinValueTotalCount = 0;
	this.otherCoinValue = 0;
	this.isOtherComboAttack = false; // 서버값이라 is이긴 하지만~~~0,1로 함
	this.otherComboAttackType = 0; // 서버에서 보내주는 콤보어택 타입.

	otherWordType = that.gameConst.WordType.BASIC;
	otherNextWordType = that.gameConst.WordType.BASIC;

	this.otherHeart = 3;
	this.setOtherHeartAni();

	this.isOtherBoxAttack = 0;
	this.otherComboBoxType = 0;

	this.otherComboCount = 0;
	this.otherComboGaugePx = 0;
	this.otherComboGaugeAniPx = 0;

	this.fMeterValue_other.text = this.otherMeterValue.toString() + "m";
	this.fMeterOutlineValue_other.text = this.otherMeterValue.toString() + "m";

	this.fCoinValue_other.text = this.otherCoinValue.toString();
	this.fCoinValueOutline_other.text = this.otherCoinValue.toString();

	this.gameUtil.setText(this.fOtherID_text, 150, 25, 'center', 'middle',
			that.gameData.otherNickName);

	if (this.fOtherPlayCoin !== undefined)
		this.fOtherPlayCoin.destroy();
	if (this.fCoin_player_other !== undefined)
		this.fCoin_player_other.removeAll();

	this.otherGenerateCoinPileAll();

	this.setOtherCoinsAni("PILE", false);

	this.fSheet_coin_eff_other.visible = false;
	this.fSheet_coinCombo_eff_other.visible = false;

	this.setVisibleOtherTalkBox(false);

	this.fCrumble_group_other.visible = false;
};

// 대전 공용 UI 처리
Level1.prototype.resultCommonVS = function() {

	// var gameResultData = that.socketManager.getResGameResult();

	this.fSucessVS.visible = true;
	this.fRUICharEffSV2.visible = true;
	this.fRUICharEffSV1.visible = true;

	this.gameUtil.setText(this.fPMeterSV1, 126, 40, 'right', 'middle',
			(that.gameData.result_coin_count * 10) + "M");

	this.gameUtil.setText(this.fPNicknameLineSV1, 270, 40, 'center', 'middle',
			that.gameData.userNickName + " 님");
	this.gameUtil.setText(this.fPNicknameSV1, 270, 40, 'center', 'middle',
			that.gameData.userNickName + " 님");

	this.gameUtil.setText(this.fPMeterSV2, 126, 40, 'right', 'middle',
			(that.gameData.result_other_coin_count * 10) + "M");

	this.gameUtil.setText(this.fPNicknameLineSV2, 270, 40, 'center', 'middle',
			that.gameData.otherNickName + " 님");
	this.gameUtil.setText(this.fPNicknameSV2, 270, 40, 'center', 'middle',
			that.gameData.otherNickName + " 님");


	var winDrawLose = that.gameData.result_win_count + "승"
			+ that.gameData.result_lose_count + "패"
			+ that.gameData.result_draw_count + "무";
	this.gameUtil.setText(this.f_PScoreSV, 274, 40, 'center', 'middle',
			winDrawLose);
};

// 대전 승리 UI 처리
Level1.prototype.resultSuccessVS = function() {
	// console.log("resultSuccessVS");
	this.soundManager.play(this.soundManager.SOUND_TYPE.Vict);
	this.fRUIVicTitleSV.visible = true; // 타이틀
	this.fRUIRedPanelSV.visible = true; // 배경

	this.fRUIInfoRFV2.visible = false; // 점수 우측 배경
	this.fRUIInfoRFV1.visible = false; // 점수 좌측 배경
	this.fRUIInfoRSV2.visible = true; // 점수 우측 배경
	this.fRUIInfoRSV1.visible = true; // 점수 좌측 배경

	this.gameUtil.setTextColor(this.fPPointSV1, '#b5f7ff', '#b5f7ff');
	this.gameUtil.setTextColor(this.fPNicknameLineSV1, '#bff2ff', '#bff2ff');
	this.gameUtil.setTextColor(this.fPPointSV2, '#b5f7ff', '#b5f7ff');
	this.gameUtil.setTextColor(this.fPNicknameLineSV2, '#bff2ff', '#bff2ff');

	this.fChar_result_aniPoseSheet_user.setPlay("RESULT_WIN");

	//한컴포인트 주석처리함.
	if (this.gameData.result_point === undefined
			|| this.gameData.result_point === null
			|| this.gameData.result_point === 0) {

	} else {
		this.setToastMessage("승리 보상으로 " + this.gameData.result_point
				+ " 한컴포인트를 획득했습니다.", 2, 85);
	}
};

// 대전 패배 UI 처리
Level1.prototype.resultLoseVS = function() {
	// console.log("Lose");
	this.soundManager.play(this.soundManager.SOUND_TYPE.Lose);
	this.fRUIFailTitleFV.visible = true; // 타이틀
	this.fRUIRedPanelFV.visible = true; // 배경

	this.fRUIInfoRSV2.visible = false; // 점수 우측 배경
	this.fRUIInfoRSV1.visible = false; // 점수 좌측 배경
	this.fRUIInfoRFV2.visible = true; // 점수 우측 배경
	this.fRUIInfoRFV1.visible = true; // 점수 좌측 배경

	this.gameUtil.setTextColor(this.fPPointSV1, '#ffc6b5', '#ffc6b5');
	this.gameUtil.setTextColor(this.fPNicknameLineSV1, '#ffc9bd', '#ffc9bd');
	this.gameUtil.setTextColor(this.fPPointSV2, '#ffc6b5', '#ffc6b5');
	this.gameUtil.setTextColor(this.fPNicknameLineSV2, '#ffc9bd', '#ffc9bd');

	this.fChar_result_aniPoseSheet_user.setPlay("RESULT_LOSE");

	//한컴 포인트 주석...
	if (this.gameData.result_point === undefined
			|| this.gameData.result_point === null
			|| this.gameData.result_point === 0) {

	} else {
		this.setToastMessage("패배 보상으로 " + this.gameData.result_point
				+ " 한컴포인트를 획득했습니다.", 2, 85);
	}
};

// 대전 무승부 UI 처리
Level1.prototype.resultDrawVS = function() {
	// console.log("resultLoseVS");
	this.soundManager.play(this.soundManager.SOUND_TYPE.Draw);
	this.fRUIDrawTitleDV.visible = true; // 타이틀
	this.fRUIRedPanelSV.visible = true; // 배경
	this.fRUIInfoRSV2.visible = true; // 점수 우측 배경
	this.fRUIInfoRSV1.visible = true; // 점수 좌측 배경

	this.gameUtil.setTextColor(this.fPPointSV1, '#b5f7ff', '#b5f7ff');
	this.gameUtil.setTextColor(this.fPNicknameLineSV1, '#bff2ff', '#bff2ff');
	this.gameUtil.setTextColor(this.fPPointSV2, '#b5f7ff', '#b5f7ff');
	this.gameUtil.setTextColor(this.fPNicknameLineSV2, '#bff2ff', '#bff2ff');

	this.fChar_result_aniPoseSheet_user.setPlay("RESULT_DRAW");

	//한컴 포인트 주석...
	if (this.gameData.result_point === undefined
			|| this.gameData.result_point === null
			|| this.gameData.result_point === 0) {

	} else {
		this.setToastMessage("무승부 보상으로 " + this.gameData.result_point
				+ " 한컴포인트를 획득했습니다.", 2, 85);
	}
};
//인게임 결과시 애니메이션 등록
Level1.prototype.setIngameResultCharacterAni = function() {
	var resultCharacterPoseAni;

	switch (that.gameData.userCharacterType) {
	case that.gameConst.CHARACTER_TYPE.AMOGAE:
		resultCharacterPoseAni = new CharAmogeaResultV3(this.game, 512.0, 292.0);
		break;

	case that.gameConst.CHARACTER_TYPE.GIGI:
		resultCharacterPoseAni = new CharJijiResultV1(this.game, 512.0, 292.0);
		break;

	case that.gameConst.CHARACTER_TYPE.MOA:
		resultCharacterPoseAni = new CharMoaResultV1(this.game, 512.0, 292.0);
		break;

	case that.gameConst.CHARACTER_TYPE.MAMANG:
		resultCharacterPoseAni = new CharMamangResultV2(this.game, 512.0, 292.0);
		break;

	case that.gameConst.CHARACTER_TYPE.YUKBEE:
		resultCharacterPoseAni = new Char6bResultV1(this.game, 512.0, 292.0);
		break;

	case that.gameConst.CHARACTER_TYPE.YAYA:
		resultCharacterPoseAni = new CharYayaResultV1(this.game, 512.0, 292.0);
		break;

	default:
		resultCharacterPoseAni = new CharAmogeaResultV3(this.game, 512.0, 292.0);
		break;
	}

	this.fChar_result_aniPoseSheet_user = resultCharacterPoseAni;

	if (that.gameData.gamePlayMode === this.gameConst.GameModeType.AI) {
		this.fCharAIAniSheetGroup.add(this.fChar_result_aniPoseSheet_user);
	} else {
		this.fCharVsAniSheetGroup.add(this.fChar_result_aniPoseSheet_user);
	}
};

// AI 공용 UI 처리
Level1.prototype.resultCommonAI = function() {
	this.fSucessAI.visible = true;

	this.fRUICharEffSA2.angle += 0.5;
	this.fRUICharEffSA1.angle -= 0.7;

	this.gameUtil.setText(this.fPMeterSA1, 102, 40, 'right', 'middle',
			this.userMeterValue + "M");
	this.gameUtil.setText(this.fPPointSA1, 102, 40, 'right', 'middle',
			this.userCoinValue + "점");

	this.gameUtil.setText(this.fPNicknameLineSA1, 270, 40, 'center', 'middle',
			"동전다줘 님");
	this.gameUtil.setText(this.fPNicknameSA1, 270, 40, 'center', 'middle',
			"동전다줘 님");

	this.gameUtil.setText(this.fPMeterSA2, 102, 40, 'right', 'middle',
			this.otherMeterValue + "M");
	this.gameUtil.setText(this.fPPointSA2, 102, 40, 'right', 'middle',
			this.otherCoinValue + "점");

	this.gameUtil.setText(this.fPNicknameLineSA2, 270, 40, 'center', 'middle',
			"동전다줘 님");
	this.gameUtil.setText(this.fPNicknameSA2, 270, 40, 'center', 'middle',
			"동전다줘 님");

	// 패배 시 닉네임 색깔 분홍색
	if (this.userCoinValue < this.otherCoinValue) {
		this.gameUtil
				.setTextColor(this.fPNicknameLineSA1, '#ffd2bb', '#ffd2bb');
		this.gameUtil
				.setTextColor(this.fPNicknameLineSA2, '#ffd2bb', '#ffd2bb');
	} else { // 승리/무승부 시 닉네임 색깔 하늘색
		this.gameUtil
				.setTextColor(this.fPNicknameLineSA1, '#bff2ff', '#bff2ff');
		this.gameUtil
				.setTextColor(this.fPNicknameLineSA2, '#bff2ff', '#bff2ff');
	}
};

// AI 승리 UI 처리
Level1.prototype.resultSuccessAI = function() {
	this.fRUIVicTitleSA.visible = true; // 타이틀
	this.fRUIRedPanelSA.visible = true; // 배경
	this.fRUIInfoRSA2.visible = true; // 점수 우측 배경
	this.fRUIInfoRSA1.visible = true; // 점수 좌측 배경

	// this.fCharMamangSheetSA.animations.play("RESULT_WIN"); // 캐릭터 승리 애니메이션
	this.fChar_result_aniPoseSheet_user.play("RESULT_WIN"); // 캐릭터 승리 애니메이션
	// this.fChar_aniPoseSheet_user.setPlay("RESULT_DRAW");
};

// AI 패배 UI 처리
Level1.prototype.resultLoseAI = function() {
	this.fRUIFailTitleFA.visible = true; // 타이틀
	this.fRUIRedPanelFA.visible = true; // 배경
	this.fRUIInfoRFA2.visible = true; // 점수 우측 배경
	this.fRUIInfoRFA1.visible = true; // 점수 좌측 배경
	// this.fCharMamangSheetSA.animations.play("RESULT_FAIL"); // 캐릭터 패배 애니메이션
	this.fChar_result_aniPoseSheet_user.play("RESULT_LOSE"); // 캐릭터 승리 애니메이션
};

// AI 무승부 UI 처리
Level1.prototype.resultDrawAI = function() {
	this.fRUIDrawTitleDA.visible = true; // 타이틀
	this.fRUIRedPanelSA.visible = true; // 배경
	this.fRUIInfoRSA2.visible = true; // 점수 우측 배경
	this.fRUIInfoRSA1.visible = true; // 점수 좌측 배경
	// this.fCharMamangSheetSA.animations.play("RESULT_DRAW"); // 캐릭터 무승부 애니메이션
	this.fChar_result_aniPoseSheet_user.play("RESULT_DRAW"); // 캐릭터 승리 애니메이션
};

// 대전 계속하기 버튼 처리
Level1.prototype.ContinueVS = function(evt) {
	// console.log("대전 계속하기 ");

	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.socketManager.netReqReGameStart("req_re_game_start",
			that.gameData.roomNumber, that.gameData.sessionID,
			that.gameData.userNickName);
	//this.setToastMessage("상대에게 요청중입니다.", 0, 0, true);
	this.setToastMessage("상대에게 요청중입니다.");
};

// 대전 나가기 버튼 처리
Level1.prototype.ExitVS = function(evt) {
	// console.log("대전 나가기 ");
	// ExitVS
	
	/* 
	JIRA ISSUE [NNRO-491] 관련 , disconnect에서 증복처리되어 필요없는 코드라고 판단하여 코멘트 처리 합니다. 
	that.socketManager.netReqGameLeaveRoom("req_game_leave_room",
			that.gameData.sessionID, that.gameData.roomNumber, 
			that.gameData.userNickName); */
	that.disableToastMessage();
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
	that.socketManager.setDisConnect();
	that.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
		that.fToastMessageGroup.visible = false;
		that.game.state.start("MenuV2");
	}, that);
	that.setToastMessage("3초후에 로비로 이동합니다.", 2.8, 0, true);
};

var mKakaoUserNickname = "";
var mKakaoVsMyWinCount = 0;
// 대전 카카오 버튼 처리
Level1.prototype.KakaoVS = function(evt) {
	// console.log("대전 카카오 ");
	// // 사용할 앱의 JavaScript 키를 설정해 주세요.
	// Kakao.init('3e786f8df14fcfc89d159421a6a7c9b6'); // test
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	sendLink();
	// // 카카오링크 버튼을 생성합니다. 처음 한번만 호출하면 됩니다.	
	that.ajaxManager.netReqLogShareKakao(that.gameData.uuid,
			that.gameData.userNickName, "", 0, 0, 0,
			that.gameData.result_score, that.gameData.result_win_count, 0, 0,
			0, netResLogShareKakaoSuccess, netResLogShareKakaoFail);
};

// 대전 페이스 북 버튼 처리
Level1.prototype.FacebookVS = function(evt) {
	// console.log("대전 페이스 북 ");
	// console.log("FacebookVS sharing...");
	// var a = Singleton.getInstance().publicMethod();
	that.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	var snsURL = "";		
	var configUrlType = that.config.getURLType();
	if (configUrlType === that.config.URL_TYPE.STG) {
		snsURL = encodeURIComponent("https://stg-typing.malangmalang.com");
	} else if (configUrlType === that.config.URL_TYPE.LIVE) {
		snsURL = encodeURIComponent("https://typing.malangmalang.com");
	} else {
		snsURL = encodeURIComponent("https://dev-typing.malangmalang.com");
	}

	window.open("http://www.facebook.com/sharer/sharer.php?u=" + snsURL);
	
	that.ajaxManager.netReqLogShareFacebook(that.gameData.uuid,
			that.gameData.userNickName, "", 0, 0, 0,
			that.gameData.result_score, that.gameData.result_win_count, 0, 0,
			0, netResLogShareFacebookSuccess, netResLogShareFacebookFail);
};

// AI 계속하기 버튼 처리
Level1.prototype.ContinueAI = function(evt) {
	// console.log("AI 계속하기 ");
};

// AI 나가기 버튼 처리
Level1.prototype.ExitAI = function(evt) {
	// console.log("AI 나가기 ");
};
// 유저 - 단어창
Level1.prototype.setUserTalkBox = function() {
	userWordType = userWordNextType;

	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	if ((that.isUserBoxAttack === true)
			&& (that.userComboBoxType === 1 || that.userComboBoxType === 2))
		this.fSheet_talkBoxCombo1_user.setPlay("NOTICE");
	else if ((that.isUserBoxAttack === true)
			&& (that.userComboBoxType === 3 || that.userComboBoxType === 4))
		this.fSheet_talkBoxCombo2_user.setPlay("NOTICE");
	else
		this.fSheet_talkBox_user.setPlay("SHOW");

	this.isUserBoxAttack = false;
	this.userComboBoxType = 0;

	// console.log("setUserTalkBox");

	if (this.fChar_aniSheet_user.animations.currentAnim.name !== "IDLE"
			&& this.fChar_aniSheet_user.animations.currentAnim.name !== "DROP_IDLE") {
		this.fChar_aniSheet_user.setPlay("IDLE");
	}
};
//상대 - 단어창
Level1.prototype.setOtherTalkBox = function() {

	otherWordType = otherWordNextType;

	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	if ((that.isOtherBoxAttack === true)
			&& (that.otherComboBoxType === 1 || that.otherComboBoxType === 2))
		this.fSheet_talkBoxCombo1_other.setPlay("NOTICE");
	else if ((that.isOtherBoxAttack === true)
			&& (that.otherComboBoxType === 3 || that.otherComboBoxType === 4))
		this.fSheet_talkBoxCombo2_other.setPlay("NOTICE");
	else
		this.fSheet_talkBox_other.setPlay("SHOW");

	this.isOtherBoxAttack = false;
	this.otherComboBoxType = 0;

	// console.log("setOtherConsoleBox")

	if (this.fChar_aniSheet_other.animations.currentAnim.name !== "IDLE"
			&& this.fChar_aniSheet_other.animations.currentAnim.name !== "DROP_IDLE") {
		this.fChar_aniSheet_other.setPlay("IDLE");
	}
};
//유저 - 단어 셋팅
Level1.prototype.setUserWord = function(delay) {

	if (that.userHeart <= 0 || that.otherHeart <= 0) {
		return;
	}

	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	// this.game.time.events.add(Phaser.Timer.SECOND * 0.5, function() {

	// if(gameState === this.gameConst.GameStateType.START)
	// {
	this.wordsManufactureUser();
	// }
	// }, this);

	this.fWordtext_user.visible = false;

	this.game.time.events
			.add(
					Phaser.Timer.SECOND * delay,
					function() {
						if (gameState === this.gameConst.GameStateType.START
								|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {
							this.setUserTalkBox();
						}

						this.game.time.events
								.add(
										Phaser.Timer.SECOND * 0.5,
										function() {
											if (gameState === this.gameConst.GameStateType.START
													|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

												// that.fWordtext_user.text =
												// serverUserTextWord;
												this.fWordtext_user.visible = true;
												this.userGenerateCoin();
											}
										}, this);
					}, this);
};
//상대 - 단어 셋팅
Level1.prototype.setOtherWord = function(delay) {

	if (that.otherHeart <= 0 || that.userHeart <= 0) {
		return;
	}

	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	// this.game.time.events.add(Phaser.Timer.SECOND * 0.5, function() {
	// if(gameState === this.gameConst.GameStateType.START){
	this.wordsManufactureOther();
	// }
	// }, this);

	that.fWordtext_other.visible = false;

	this.game.time.events
			.add(
					Phaser.Timer.SECOND * delay,
					function() {
						if (gameState === this.gameConst.GameStateType.START
								|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {
							this.setOtherTalkBox();
						}
						this.game.time.events
								.add(
										Phaser.Timer.SECOND * 0.5,
										function() {
											if (gameState === this.gameConst.GameStateType.START
													|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {
												// that.fWordtext_other.text =
												// serverOtherTextWord;
												that.fWordtext_other.visible = true;

												this.otherGenerateCoin();
											}
										}, this);
					}, this);
};
//유저 - 떨어지는 동전 생성
Level1.prototype.userGenerateCoin = function() {

	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	userCoinCount++;

	isUserDrop = false;
	isUserPile = false;
	isUserRolling = false;

	isUserReqCheckWords = false;

	// this.wordsManufactureUser();

	var _userPlayerCoin = new CoinV1(this.game, 235, -30);
	_userPlayerCoin.setDirection(userCoinCount);
	this.fCoin_player_user.add(_userPlayerCoin);
	this.fUserPlayCoin = _userPlayerCoin;

	this.fCoin_player_user.visible = true;
	this.fUserPlayCoin.setPlay("DROP_BASIC", true);


};
//상대 - 떨어지는 동전 생성
Level1.prototype.otherGenerateCoin = function() {

	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	otherCoinCount++;


	isOtherDrop = false;
	isOtherPile = false;
	isOtherRolling = false;

	this.fCoin_player_other.visible = true;
	var _otherPlayerCoin = new CoinV1(this.game, 235, -30);
	_otherPlayerCoin.setDirection(otherCoinCount);
	this.fCoin_player_other.add(_otherPlayerCoin);
	this.fOtherPlayCoin = _otherPlayerCoin;

	this.fOtherPlayCoin.setPlay("DROP_BASIC", true);
};
//유저 - 일자도 떨어지는 동전
Level1.prototype.setUserBasicDrop = function() {

	if (that.isUserComboAttack === true) {
		this.soundManager.play(this.soundManager.SOUND_TYPE.Coin_coat);
		this.fCombo_attack_effect_fly_user.setPlay("IDLE", true, 47, 239, 438,
				730, 50);
		// console.log("Level1::setUserBasicDrop ->
		// this.fCombo_attack_effect_fly_user.setPlay");

		that.isUserComboAttack = false;
		that.userComboAttackType = 0;
	}
	this.setUserComboAni();
	this.setUserDropCommon();
};
//유저 - 대각선으로 떨어지는 처리
Level1.prototype.setUserAdvenceDrop = function() {

	if (that.isUserComboAttack === true) {
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
		this.fCombo_attack_effect_fly_user.setPlay("IDLE", true, 47, 239, 438,
				730, 50);
		// console.log("Level1::setUserAdvenceDrop ->
		// this.fCombo_attack_effect_fly_user.setPlay");

		that.isUserComboAttack = false;
		that.userComboAttackType = 0;
	}

	this.userComboCount = 0;
	this.setUserComboAni();
	this.setUserDropCommon();
};
//유저 - 동전 떨어지는것 공통 처리
Level1.prototype.setUserDropCommon = function() {

	if (this.fUserPlayCoin === undefined
			|| this.fChar_aniSheet_user === undefined
			|| this.fChar_aniPoseSheet_user === undefined)
		return;

	this.fUserPlayCoin.setPlay("DROP_DIRECT", true);
	this.fChar_aniSheet_user.setPlay("JUMP_IDLE");
	this.soundManager.play(this.soundManager.SOUND_TYPE.Coin_land);
	isUserDrop = false;
	isUserPile = true;

	isUserReqCheckWords = false;

	this.wordInputEmptyUser();
	this.setVisibleUserTalkBox(false);
};

//유저 - 동전 관련 연산처리부 
Level1.prototype.processCoinUser = function() {

	if (this.fUserPlayCoin === undefined
			|| this.fChar_aniSheet_user === undefined
			|| this.fChar_aniPoseSheet_user === undefined)
		return;

	this.setUserTextAni();

	// this.setUserDrop();

	if (this.fUserPlayCoin.checkCurrentAnimation("DROP_BASIC")
			|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_1")
			|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_LEFT_2")
			|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_1")
			|| this.fUserPlayCoin.checkCurrentAnimation("DROP_ADVENCE_RIGHT_2")) {
		// console.log("Level1::processCoinUser -> isUserDrop : " + isUserDrop);
		if (isUserDrop) {
			var badCoinCount = this.getUserBadCoinCount();
			if (this.fUserPlayCoin.checkCurrentAnimation("DROP_BASIC")) {
				// console.log("Level1::processCoinUser...DROP_BASIC : ");
				isUserDrop = false;
				serverUserTextWord = "";
				this.socketManager.netReqCheckWord('req_check_word',
						that.gameData.sessionID, that.gameData.roomNumber,
						that.gameData.userNickName, 0, badCoinCount,
						this.fWordtext_user.text);
				isUserReqCheckWords = true;
			} else {
				// console.log("Level1::processCoinUser...ETC DROP_BASIC : ");
				serverUserTextWord = "";
				isUserDrop = false;
				this.socketManager.netReqCheckWord('req_check_word',
						that.gameData.sessionID, that.gameData.roomNumber,
						that.gameData.userNickName, 1, badCoinCount,
						this.fWordtext_user.text);
				isUserReqCheckWords = true;
			}
		}
	} else {
		if (this.fUserPlayCoin.checkCurrentAnimation("DROP_ROLLING")
				&& isUserRolling === false) {
			if (isUserReqCheckWords === false) {
				isUserReqCheckWords = true;
				// this.setUserWord(that.gameData.gameGenerateDelay);
				// this.setUserHeartMinus(true, false);
				this.socketManager.netReqInputWordTimeOver(
						'req_input_word_time_over', that.gameData.sessionID,
						that.gameData.roomNumber, that.gameData.userNickName);
			}
		}
	}

	if (this.fUserPlayCoin.isEndTweenPileDown) {
		this.fUserPlayCoin.isEndTweenPileDown = false;

		// console.log("PILE_DOWN");
	}

	if (this.fUserPlayCoin.checkCurrentAnimation("PILE") && isUserPile === true) {
		isUserPile = false;

		this.fUserPlayCoin.setPlay("PILE_DOWN", true);
		this.setUserCoinsAni("PILE_DOWN", true);
		this.fSheet_coin_eff_user.setPlay("PLAY");

		// this.userCoinCollectCount++;

		if (this.userComboCount > 1)
			this.fSheet_coinCombo_eff_user.setPlay("PLAY");

		this.scrollBackgroundUser();
	}
};
//유저 - 하트 차감시 처리하는 부분
Level1.prototype.setUserHeartMinus = function(aIsShake, aIsCrumble) {
	// that.userHeart--;
	that.setUserHeartAni();

	if (aIsShake)
		that.shakeTween(that.fUser, 1);

	// if (that.userComboCount > 2 && that.userComboCount <= 6) {
	if (that.isUserComboAttack === true) {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
		that.fCombo_attack_effect_fly_user.setPlay("IDLE", true, 47, 239, 438,
				730, 50);

		that.isUserComboAttack = false;
		that.userComboAttackType = 0;
	}

	// that.setOtherWordNextType(this.userComboCount);

	that.wordInputEmptyUser();
	that.setVisibleUserTalkBox(false);

	that.userComboCount = 0;
	that.endUserComboAni();
	if (that.userHeart <= 0) {
		// that.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		// that.setGameState(that.gameConst.GameStateType.INGAME_END);
		// }, that);
	} else {
		if (aIsCrumble) {

			var delay = this.gameData.playMode === that.gameConst.GameLevel.HARD ? 1
					: 1;

			that.game.time.events.add(Phaser.Timer.SECOND * delay, function() {
				that.fChar_aniSheet_user.x = 235.0;
				that.fChar_aniSheet_user.y = 100.0;
				that.fChar_aniSheet_user.setPlay("APPEAR_IDLE", true);
				that.fParachuteSheet_user.x = 235.0;
				that.fParachuteSheet_user.y = 100.0;
				that.fParachuteSheet_user.setPlay("PLAY");
				that.userGenerateCoinPileAll();
			}, that);
		}
	}
};
//상대 - 하트 차감시 처리하는 부분
Level1.prototype.setOtherHeartMinus = function(aIsShake, aIsCrumble) {
	// that.otherHeart--;
	that.setOtherHeartAni();

	if (aIsShake)
		that.shakeTween(that.fOther, 1);

	// if (that.otherComboCount > 2 && that.otherComboCount < 6) {
	if (that.isOtherComboAttack === true) {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
		that.fCombo_attack_effect_fly_other.setPlay("IDLE", true, -47, 749,
				426, 260, 67);

		that.isOtherComboAttack = false;
		that.otherComboAttackType = 0;
	}

	that.otherComboCount = 0;

	// that.setUserWordNextType(that.otherComboCount);

	// console.log("@@@Level1::setOtherHeartMinus -> setOtherHeartMinus");
	that.wordInputEmptyOther();
	that.setVisibleOtherTalkBox(false);

	that.endOtherComboAni();
	if (that.otherHeart <= 0) {
		// that.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		// that.setGameState(that.gameConst.GameStateType.INGAME_END);
		// }, this);
	} else {

		if (aIsCrumble) {

			var delay = this.gameData.playMode === that.gameConst.GameLevel.HARD ? 1
					: 1;
			that.game.time.events.add(Phaser.Timer.SECOND * delay, function() {
				that.fChar_aniSheet_other.x = 235.0;
				that.fChar_aniSheet_other.y = 100.0;
				that.fChar_aniSheet_other.setPlay("APPEAR_IDLE", true);
				that.fParachuteSheet_other.x = 235.0;
				that.fParachuteSheet_other.y = 100.0;
				that.fParachuteSheet_other.setPlay("PLAY");
				that.otherGenerateCoinPileAll();
			}, this);
		}
	}
};
//상대 - 동전 기본 일자로 떨어지는 부분 
Level1.prototype.setOtherBasicDrop = function() {

	if (that.isOtherComboAttack === true) {
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
		this.fCombo_attack_effect_fly_other.setPlay("IDLE", true, -47, 749,
				426, 260, 67);
		// console.log("Level1::setOtherBasicDrop ->
		// this.fCombo_attack_effect_fly_other.setPlay");

		that.isOtherComboAttack = false;
		that.otherComboAttackType = 0;
	}

	that.setOtherComboAni();
	that.setOtherDropCommon();
};
//상대 - 동전 대각선으로 떨어지는 부분
Level1.prototype.setOtherAdvenceDrop = function() {


	that.setOtherComboAni();

	if (that.isOtherComboAttack === true) {
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_coat);
		this.fCombo_attack_effect_fly_other.setPlay("IDLE", true, -47, 749,
				426, 260, 67);
		// console.log("Level1::setOtherAdvenceDrop ->
		// this.fCombo_attack_effect_fly_other.setPlay");

		that.isOtherComboAttack = false;
		that.otherComboAttackType = 0;
	}

	// this.otherComboCoun
	that.setOtherDropCommon();
};
//상대 - 동전 떨어지는 부분 공통
Level1.prototype.setOtherDropCommon = function() {

	if (this.fOtherPlayCoin === undefined
			|| this.fChar_aniSheet_other === undefined
			|| this.fChar_aniPoseSheet_other === undefined)
		return;

	that.fOtherPlayCoin.setPlay("DROP_DIRECT", true);
	that.fChar_aniSheet_other.setPlay("JUMP_IDLE");
	that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_land);
	isOtherDrop = false;
	isOtherPile = true;

	// console.log("@@@Level1::setOtherDropCommon -> setOtherHeartMinus");
	that.wordInputEmptyOther();
	that.setVisibleOtherTalkBox(false);
};

Level1.prototype.setOtherDrop = function () {
  if (isOtherDrop) {
    if (this.fOtherPlayCoin.checkCurrentAnimation('DROP_BASIC') || this.fOtherPlayCoin.checkCurrentAnimation('DROP_ADVENCE_LEFT_1') || this.fOtherPlayCoin.checkCurrentAnimation('DROP_ADVENCE_LEFT_2') || this.fOtherPlayCoin.checkCurrentAnimation('DROP_ADVENCE_RIGHT_1') || this.fOtherPlayCoin.checkCurrentAnimation('DROP_ADVENCE_RIGHT_2')) {
      if (this.fOtherPlayCoin.checkCurrentAnimation('DROP_BASIC')) {} else {}
    }
  }
};

//상대- 동전 연산 처리
Level1.prototype.processCoinOther = function() {
	this.setOtherTextAni();

	// this.processAI();
	// this.setOtherDrop();
	if (this.fOtherPlayCoin === undefined
			|| this.fChar_aniSheet_other === undefined
			|| this.fChar_aniSheet_other === undefined)
		return;

	if (this.fOtherPlayCoin.getEndTweenPileDown()) {
		this.fOtherPlayCoin.isEndTweenPileDown = false;

		// console.log("PILE_DOWN");
	}

	if (this.fOtherPlayCoin.checkCurrentAnimation("PILE")
			&& isOtherPile === true) {
		isOtherPile = false;

		this.fOtherPlayCoin.setPlay("PILE_DOWN", true);
		this.setOtherCoinsAni("PILE_DOWN", true);
		this.fSheet_coin_eff_other.setPlay("PLAY");

		// this.otherCoinCollectCount++;

		if (this.otherComboCount > 1)
			this.fSheet_coinCombo_eff_other.setPlay("PLAY");

		this.scrollBackgroundOther();
	}

	if (this.fOtherPlayCoin.checkCurrentAnimation("DROP_ROLLING")
			&& isOtherRolling === false) {
		isOtherRolling = true;
		// this.setOtherWord(that.gameData.gameGenerateDelay);
		// this.setOtherHeartMinus(true, false);
	}
};
//인게임 끝날시 연산부
Level1.prototype.processIngameFinish = function() {
	var nowTime = new Date();
	var gap = nowTime.getTime() - mIngameFinishStartTime.getTime();
	var sec_gap = Math.floor(((mIngameFinishTime - gap) / 1000) % 60);

	if (sec_gap <= 0) {
		// Game Ready End...
		that.setGameState(that.gameConst.GameStateType.INGAME_END_READY);
	}
};
//게임 결과 연산부
Level1.prototype.processResult = function() {

	if (this.fAddPointPanelL.visible === true
			&& this.fAddPointPanelL.animations.currentAnim.isFinished
			&& mIsUserResult === false) {
		resultUserListener();
		// console.log("resultUserListener");
	}

	if (this.fAddPointPanelR.visible === true
			&& this.fAddPointPanelR.animations.currentAnim.isFinished
			&& mIsOtherResult === false) {
		resultOtherListener();
		// console.log("resultOtherListener");
	}

	if (this.fApTxtComboLEnable.visible === true
			|| this.fApTxtHeartLEnable.visible === true) {
		if (that.gameData.result_score > this.userScoreAniResultCount) {

			var aniUserCnt = Math
					.floor((that.gameData.result_score - this.userScoreAniResultCount) / 20);
			aniUserCnt = aniUserCnt <= 0 ? 1 : aniUserCnt;
			this.userScoreAniResultCount += aniUserCnt;

			if (this.userScoreAniResultCount > that.gameData.result_score)
				this.userScoreAniResultCount = that.gameData.result_score;

			this.gameUtil.setText(this.fPPointSV1, 126, 40, 'right', 'middle',
					this.userScoreAniResultCount + "점");
		}
	}

	if (this.fApTxtComboREnable.visible === true
			|| this.fApTxtHeartREnable.visible === true) {
		if (that.gameData.result_other_score > this.otherScoreAniResultCount) {
			var aniOtherCnt = Math
					.floor((that.gameData.result_other_score - this.otherScoreAniResultCount) / 20);
			aniOtherCnt = aniOtherCnt <= 0 ? 1 : aniOtherCnt;
			this.otherScoreAniResultCount += aniOtherCnt;

			if (this.otherScoreAniResultCount > that.gameData.result_other_score)
				this.otherScoreAniResultCount = that.gameData.result_other_score;

			this.gameUtil.setText(this.fPPointSV2, 126, 40, 'right', 'middle',
					this.otherScoreAniResultCount + "점");
		}
	}
};
//동전 프리팹 연결
Level1.prototype.setCoinV1 = function(aParentObject, aX, aY) {
	var _userCoinPile = new CoinV1(this.game, aX, aY);
	aParentObject.add(_userCoinPile);
	return _userCoinPile;
};
//유저 - 쌓여있는 동전 생성
Level1.prototype.userGenerateCoinPileAll = function() {

	if (this.fCoin_container_user.length > 0) {
		if (this.fUserCoinPile1 !== undefined)
			this.fUserCoinPile1.destroy();
		if (this.fUserCoinPile2 !== undefined)
			this.fUserCoinPile2.destroy();
		if (this.fUserCoinPile3 !== undefined)
			this.fUserCoinPile3.destroy();
		if (this.fUserCoinPile4 !== undefined)
			this.fUserCoinPile4.destroy();
		if (this.fUserCoinPile5 !== undefined)
			this.fUserCoinPile5.destroy();
		if (this.fUserCoinPile6 !== undefined)
			this.fUserCoinPile6.destroy();
		if (this.fUserCoinPile7 !== undefined)
			this.fUserCoinPile7.destroy();

		if (this.fCoin_container_user !== undefined)
			this.fCoin_container_user.removeAll();
	}

	this.fUserCoinPile1 = this.setCoinV1(this.fCoin_container_user, 243.0,
			528.0);
	this.fUserCoinPile2 = this.setCoinV1(this.fCoin_container_user, 235.0,
			515.0);
	this.fUserCoinPile3 = this.setCoinV1(this.fCoin_container_user, 240.0,
			500.0);
	this.fUserCoinPile4 = this.setCoinV1(this.fCoin_container_user, 235.0,
			485.0);
	this.fUserCoinPile5 = this.setCoinV1(this.fCoin_container_user, 242.0,
			470.0);
	this.fUserCoinPile6 = this.setCoinV1(this.fCoin_container_user, 237.0,
			455.0);
	this.fUserCoinPile7 = this.setCoinV1(this.fCoin_container_user, 241.0,
			440.0);

	this.fCoin_container_user.visible = true;
	this.setUserCoinsAni("PILE", false);
};
//상대 - 쌓여있는 동전 생성
Level1.prototype.otherGenerateCoinPileAll = function() {

	if (this.fCoin_container_other.length > 0) {
		if (this.fOtherCoinPile1 !== undefined)
			this.fOtherCoinPile1.destroy();
		if (this.fOtherCoinPile2 !== undefined)
			this.fOtherCoinPile2.destroy();
		if (this.fOtherCoinPile3 !== undefined)
			this.fOtherCoinPile3.destroy();
		if (this.fOtherCoinPile4 !== undefined)
			this.fOtherCoinPile4.destroy();
		if (this.fOtherCoinPile5 !== undefined)
			this.fOtherCoinPile5.destroy();
		if (this.fOtherCoinPile6 !== undefined)
			this.fOtherCoinPile6.destroy();
		if (this.fOtherCoinPile7 !== undefined)
			this.fOtherCoinPile7.destroy();

		if (this.fCoin_container_other !== undefined)
			this.fCoin_container_other.removeAll();
	}

	this.fOtherCoinPile1 = this.setCoinV1(this.fCoin_container_other, 243.0,
			528.0);
	this.fOtherCoinPile2 = this.setCoinV1(this.fCoin_container_other, 235.0,
			515.0);
	this.fOtherCoinPile3 = this.setCoinV1(this.fCoin_container_other, 240.0,
			500.0);
	this.fOtherCoinPile4 = this.setCoinV1(this.fCoin_container_other, 235.0,
			485.0);
	this.fOtherCoinPile5 = this.setCoinV1(this.fCoin_container_other, 242.0,
			470.0);
	this.fOtherCoinPile6 = this.setCoinV1(this.fCoin_container_other, 237.0,
			455.0);
	this.fOtherCoinPile7 = this.setCoinV1(this.fCoin_container_other, 241.0,
			440.0);

	this.fCoin_container_other.visible = true;
	this.setOtherCoinsAni("PILE", false);
};

// 유저 - 타워무너지기
Level1.prototype.setUserTowerFallDown = function() {
	that.setUserHeartMinus(false, true);
	that.fChar_aniSheet_user.setPlay("DROP", true);
	that.setUserWord(that.gameData.gameGenerateDelay);
	that.game.time.events.add(Phaser.Timer.SECOND * 0.15, function() {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_des);

		if (that.fUserPlayCoin !== undefined) {
			// console.log("that.fUserPlayCoin is " + that.fUserPlayCoin);
			that.fUserPlayCoin.setPlay("FINISH", true);
		}
		that.setUserCoinsAni("CRUMBLE", true);
		that.setUserEffectCrash();
		that.game.time.events.add(Phaser.Timer.SECOND * 0.1, function() {
			that.shakeTween(that.fUser, 3);
		}, that);
		that.game.time.events.add(Phaser.Timer.SECOND * 0.5, function() {
			that.shakeTween(that.fUser, 1);
		}, that);
	}, that);
};
//유저 - 캐릭터 및 동전 전체 연산부
Level1.prototype.processUser = function() {

	if (this.fUserPlayCoin === undefined
			|| this.fChar_aniSheet_user === undefined
			|| this.fChar_aniPoseSheet_user === undefined)
		return;

	if (this.fChar_aniSheet_user.animations.currentAnim.isFinished === true
			&& this.fChar_aniSheet_user.animations.currentAnim.name === "JUMP_LANDING") {

		this.userFileSetting();

		var badCoinCount = this.getUserBadCoinCount();

		if (badCoinCount > 2) {
			this.socketManager.netReqTowerFall('req_tower_fall',
					that.gameData.sessionID, that.gameData.roomNumber,
					that.gameData.userNickName);
		} else {
			if (badCoinCount === 2)
				this.fChar_aniSheet_user.setPlay("DROP_IDLE");

			// this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_land);
			// this.setUserCoinPointAni();
			this.setUserWord(0.5);
			this.fUserPlayCoin.setPlay("FINISH");
		}
	}
};
//유저 - 콤보 공격 
Level1.prototype.processComboAttackUser = function() {
	if (this.fCombo_attack_effect_fly_user.animations.currentAnim.isFinished === true
			&& this.fCombo_attack_effect_fly_user.animations.currentAnim.name === "PLAY") {
		this.fCombo_attack_effect_explosion_user
				.setPlay("PLAY", false, 750, 50);
		this.fCombo_attack_effect_fly_user.alpha = 0;
		this.fCombo_attack_effect_fly_user.visible = false;

		this.fCombo_attack_effect_fly_user.animations.currentAnim.isFinished = false;

		// console.log("processComboAttackUser");
		// console.log("");
	}
};
//유저 - 콤보 공격
Level1.prototype.processComboAttackOther = function() {
	if (this.fCombo_attack_effect_fly_other.animations.currentAnim.isFinished === true
			&& this.fCombo_attack_effect_fly_other.animations.currentAnim.name === "PLAY") {
		this.fCombo_attack_effect_explosion_other.setPlay("PLAY", false, 260,
				67);
		this.fCombo_attack_effect_fly_other.alpha = 0;
		this.fCombo_attack_effect_fly_other.visible = false;

		this.fCombo_attack_effect_fly_other.animations.currentAnim.isFinished = false;

		// console.log("processComboAttackOther");
	}
};
//유저 - 게이지 마스크
Level1.prototype.processGaugeUser = function() {
	if (this.userComboGaugeAniPx < this.userComboGaugePx) {
		this.userComboGaugeAniPx++;
		this.fUi_comboGauge_user.mask.clear();
		this.fUi_comboGauge_user.mask = this.game.add.graphics(0, 0);
		this.fUi_comboGauge_user.mask.beginFill(0xffffff);
		this.fUi_comboGauge_user.mask.drawRect(this.fUi_comboGauge_user.x,
				this.fUi_comboGauge_user.y, this.userComboGaugeAniPx + 1,
				this.fUi_comboGauge_user.height);
		this.fUi_comboGauge_user.visible = true;
	}
};
//상대 - 게이지 마스크
Level1.prototype.processGaugeOther = function() {
	if (this.otherComboGaugeAniPx < this.otherComboGaugePx) {
		this.otherComboGaugeAniPx++;
		this.fUi_comboGauge_other.mask.clear();
		this.fUi_comboGauge_other.mask = this.game.add.graphics(0, 0);
		this.fUi_comboGauge_other.mask.beginFill(0xffffff);
		this.fUi_comboGauge_other.mask
				.drawRect(512 + this.fUi_comboGauge_other.x,
						this.fUi_comboGauge_other.y,
						this.otherComboGaugeAniPx + 1,
						this.fUi_comboGauge_other.height);
		this.fUi_comboGauge_other.visible = true;
	}
};
//유저 - 대화창 Viewer
Level1.prototype.setVisibleUserTalkBox = function(isVisible){
	this.fSheet_talkBox_user.visible = isVisible;
	this.fSheet_talkBoxCombo1_user.visible = isVisible;
	this.fSheet_talkBoxCombo2_user.visible = isVisible;
};
//상대 - 대화창 Viewer
Level1.prototype.setVisibleOtherTalkBox = function(isVisible){
	this.fSheet_talkBox_other.visible = isVisible;
	this.fSheet_talkBoxCombo1_other.visible = isVisible;
	this.fSheet_talkBoxCombo2_other.visible = isVisible;
};
//배경 초기화
Level1.prototype.initBackground = function() {
	// 원경 배경.
	this.fBack_image1_user.y = 0;
	this.fBack_image2_user.y = -576;
	this.fBack_image3_user.y = -1152;

	this.fBack_image1_other.y = 0;
	this.fBack_image2_other.y = -576;
	this.fBack_image3_other.y = -1152;

	// 근경 배경.
	this.fWall_Rt_user4.y = -1728;
	this.fWall_Rt_user3.y = -1152;
	this.fWall_Rt_user2.y = -576;
	this.fWall_Rt_user.y = 0;
	this.fWall_Lf_user4.y = -1728;
	this.fWall_Lf_user3.y = -1152;
	this.fWall_Lf_user2.y = -576;
	this.fWall_Lf_user.y = 0;

	this.fWall_Rt_other4.y = -1728;
	this.fWall_Rt_other3.y = -1152;
	this.fWall_Rt_other2.y = -576;
	this.fWall_Rt_other.y = 0;
	this.fWall_Lf_other4.y = -1728;
	this.fWall_Lf_other3.y = -1152;
	this.fWall_Lf_other2.y = -576;
	this.fWall_Lf_other.y = 0;

	mUserBackgroundWallY1 = this.fWall_Lf_user.y;
	mUserBackgroundWallY2 = this.fWall_Lf_user2.y;
	mUserBackgroundWallY3 = this.fWall_Lf_user3.y;
	mUserBackgroundWallY4 = this.fWall_Lf_user4.y;
	mUserBackgroundY1 = this.fBack_image1_user.y;
	mUserBackgroundY2 = this.fBack_image2_user.y;
	mUserBackgroundY3 = this.fBack_image3_user.y;

	mOtherBackgroundWallY1 = this.fWall_Lf_other.y;
	mOtherBackgroundWallY2 = this.fWall_Lf_other2.y;
	mOtherBackgroundWallY3 = this.fWall_Lf_other3.y;
	mOtherBackgroundWallY4 = this.fWall_Lf_other4.y;		
	mOtherBackgroundY1 = this.fBack_image1_other.y;
	mOtherBackgroundY2 = this.fBack_image2_other.y;
	mOtherBackgroundY3 = this.fBack_image3_other.y;
};
//유저 - 배경 스크롤 
Level1.prototype.processUserBackground = function() {
	if(mUserBackgroundWallY4 > this.fWall_Rt_user4.y){
		this.fWall_Rt_user4.y+=2;
		this.fWall_Lf_user4.y+=2;
	}
	
	if(mUserBackgroundWallY3 > this.fWall_Rt_user3.y){
		this.fWall_Rt_user3.y+=2;
		this.fWall_Lf_user3.y+=2;
	}
	
	if(mUserBackgroundWallY2 > this.fWall_Rt_user2.y){
		this.fWall_Rt_user2.y+=2;
		this.fWall_Lf_user2.y+=2;
	}
	
	if(mUserBackgroundWallY1 > this.fWall_Rt_user.y){
		this.fWall_Rt_user.y+=2;
		this.fWall_Lf_user.y+=2;
	}
	
	
	
	if(mUserBackgroundY1 > this.fBack_image1_user.y){
		this.fBack_image1_user.y+=2;
	}	
	
	if(mUserBackgroundY2 > this.fBack_image2_user.y){
		this.fBack_image2_user.y+=2;
	}
	
	if(mUserBackgroundY3 > this.fBack_image3_user.y){
		this.fBack_image3_user.y+=2;
	}
};
//상대 - 배경 스크롤
Level1.prototype.processOtherBackground = function() {
	if(mOtherBackgroundWallY4 > this.fWall_Rt_other4.y){
		this.fWall_Rt_other4.y+=2;
		this.fWall_Lf_other4.y+=2;
	}
	
	if(mOtherBackgroundWallY3 > this.fWall_Rt_other3.y){
		this.fWall_Rt_other3.y+=2;
		this.fWall_Lf_other3.y+=2;
	}
	
	if(mOtherBackgroundWallY2 > this.fWall_Rt_other2.y){
		this.fWall_Rt_other2.y+=2;
		this.fWall_Lf_other2.y+=2;
	}
	
	if(mOtherBackgroundWallY1 > this.fWall_Rt_other.y){
		this.fWall_Rt_other.y+=2;
		this.fWall_Lf_other.y+=2;
	}
	
	
	
	if(mOtherBackgroundY1 > this.fBack_image1_other.y){
		this.fBack_image1_other.y+=2;
	}
	
	if(mOtherBackgroundY2 > this.fBack_image2_other.y){
		this.fBack_image2_other.y+=2;
	}
	
	if(mOtherBackgroundY3 > this.fBack_image3_other.y){
		this.fBack_image3_other.y+=2;
	}
};

//상대 - 타워무너지기
Level1.prototype.setOtherTowerFallDown = function() {
	that.setOtherHeartMinus(false, true);
	that.fChar_aniSheet_other.setPlay("DROP", true);
	that.setOtherWord(that.gameData.gameGenerateDelay);

	that.game.time.events.add(Phaser.Timer.SECOND * 0.15, function() {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_des);
		if (that.fOtherPlayCoin !== undefined) {
			that.fOtherPlayCoin.setPlay("FINISH", true);
		}
		that.setOtherCoinsAni("CRUMBLE", true);
		that.setOtherEffectCrash();
		that.game.time.events.add(Phaser.Timer.SECOND * 0.1, function() {
			that.shakeTween(that.fOther, 3);
		}, that);
		that.game.time.events.add(Phaser.Timer.SECOND * 0.5, function() {
			that.shakeTween(that.fOther, 1);
		}, that);
	}, that);
};
//상대 - 프로세스 
Level1.prototype.processOther = function() {

	if (this.fOtherPlayCoin === undefined
			|| this.fChar_aniSheet_other === undefined
			|| this.fChar_aniSheet_other === undefined)
		return;
	if (this.fChar_aniSheet_other.animations.currentAnim.isFinished === true
			&& this.fChar_aniSheet_other.animations.currentAnim.name === "JUMP_LANDING") {
		this.otherFileSetting();

		var badCoinCount = this.getOtherBadCoinCount();

		if (badCoinCount > 2) {

		} else {
			// this.setOtherCoinPointAni();
			if (badCoinCount === 2)
				this.fChar_aniSheet_other.setPlay("DROP_IDLE");
			this.setOtherWord(0.5);
			this.fOtherPlayCoin.setPlay("FINISH");
		}
	}
};

/** jsUserStudy배열에서 단어 뽑아 화면에 보이기 * */
Level1.prototype.wordsManufactureUser = function() {
	this.wordInputEmptyUser();
	// this.fWordtext_user.text = userWordType === that.gameConst.WordType.BASIC
	// ? jsUserStudy[userCoinCount] : jsUserAttackStudy[ (userWordType - 1)];
	// this.fWordtext_user.text = userWordType === that.gameConst.WordType.BASIC
	// ? jsUserStudy[userCoinCount] : jsUserAttackStudy[ (userWordType - 1)];
	this.socketManager.netReqNewWord('req_new_word', that.gameData.sessionID,
			that.gameData.roomNumber, that.gameData.userNickName);

	// console.log("serverUserTextWord.text -> " + serverUserTextWord.length);
};

/** jsOtherStudy배열에서 단어 뽑아 화면에 보이기 * */
Level1.prototype.wordsManufactureOther = function() {
	// console.log("@@@Level1::wordsManufactureOther -> wordInputEmptyOther");

	// this.fWordtext_other.text = otherWordType ===
	// that.gameConst.WordType.BASIC ? jsOtherStudy[otherCoinCount] :
	// jsOtherAttackStudy[ (otherWordType - 1)];
};

var serverUserTextWord = "";
var serverOtherTextWord = "";
var mUserTypingText;

//유저 - 단어 체크
Level1.prototype.userWordsCheck = function(evt) {

	// var wordAnswer = userTajaTyping.value.trim();
	// var wordAnswer = mUserTypingText;

	// event = evt || window.event;
	// var keyID = (event.which) ? event.which : event.keyCode;
	// if (keyID >= 65 && keyID <= 90){
	// that.setToastMessage("영문 자판입니다. 한글로 바꿔주세요.", 2, false);
	// userTajaTyping.value = '';
	// that.fInputCursorSheet.x = 365;
	// return;
	// }
	var wordAnswer = userTajaTyping.value.trim();

	event = evt || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;

	if (gameState === that.gameConst.GameStateType.START
			|| gameState === that.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	if ((keyID >= 33 && keyID <= 40) || keyID == 18) {
		evt.returnValue = false;
		return;
	}

	if (keyID >= 65 && keyID <= 90) {
		that.setToastMessage("영문 자판입니다. 한글로 바꿔주세요.", 2);

		return;
	}

	if (/[a-zA-Z]/.test(evt.target.value)) {
		that.setToastMessage("영문 자판입니다. 한글로 바꿔주세요.", 2);
		evt.returnValue = false;
		evt.target.value = evt.target.value.replace(/[a-zA-Z]/g, "");

		return;
	}

	if (keyID === 32 || keyID === 13) {
		// console.log("Level1::userWordsCheck -> if (keyID === 32 || keyID ===
		// 13)");

		userTajaTyping.value = '';
		mUserTypingText = userTajaTyping.value;
		that.fInputCursorSheet.x = 365;

		if (wordAnswer === "" || wordAnswer === null) {
			return;
		}
		if (serverUserTextWord === "" || serverUserTextWord === null) {
			userTajaTyping.value = "";
			mUserTypingText = userTajaTyping.value;
			return;
		}

		// console.log("Level1::userWordsCheck -> serverUserTextWord : " +
		// serverUserTextWord);

		// console.log("wordString " + wordString);
		if (serverUserTextWord === wordAnswer) {
			that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_right);
			isUserDrop = true;
			// console.log("Level1::userWordsCheck -> serverUserTextWord ===
			// wordAnswer");
		} else {
			that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_wrong);
			// console.log("Level1::userWordsCheck -> serverUserTextWord !==
			// wordAnswer");
		}
	}
	mUserTypingText = userTajaTyping.value;
};

//단어 입력부
Level1.prototype.wordinput = function() {
	var wordAnswer = userTajaTyping.value.trim();

	userTajaTyping.value = '';
	mUserTypingText = userTajaTyping.value;
	that.fInputCursorSheet.x = 365;

	if (wordAnswer === "" || wordAnswer === null) {
		return;
	}
	if (serverUserTextWord === "" || serverUserTextWord === null) {
		userTajaTyping.value = "";
		mUserTypingText = userTajaTyping.value;
		return;
	}

	// console.log("wordString " + wordString);
	if (serverUserTextWord === wordAnswer) {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_right);
		isUserDrop = true;
	} else {
		that.soundManager.play(that.soundManager.SOUND_TYPE.Ans_wrong);
	}

	mUserTypingText = userTajaTyping.value;
};

//단어 체크함.
Level1.prototype.otherWordsCheck = function() {
	isOtherDrop = true;
};

//유저 - 단어 입력 초기화
Level1.prototype.wordInputEmptyUser = function() {
	this.fWordtext_user.text = "";
	serverUserTextWord = "";
};
//상대 - 단어 입력 초기화
Level1.prototype.wordInputEmptyOther = function() {
	this.fWordtext_other.text = "";
	serverOtherTextWord = "";
};
//유저 - 잘못 쌓인 동전 수 체크
Level1.prototype.getUserBadCoinCount = function() {
	var count = 0;

	this.fCoin_container_user.children.forEach(function(element) {
		if (element.pileStatus === "BAD")
			count++;
	});

	return count;
};
//상대 - 잘못 쌓인 동전 수 체크
Level1.prototype.getOtherBadCoinCount = function() {
	var count = 0;

	this.fCoin_container_other.children.forEach(function(element) {
		if (element.pileStatus === "BAD")
			count++;
	});

	return count;
};

//인풋 필드 설정
Level1.prototype.initUserField = function() {
	onUserTextField = "<DIV id=" + "TajaControlUser" + " style="
			+ "position:absolute;left:" + "375" + "px;top:" + "-100"
			+ "px;width:300px;height:22px;" + "focus" + ">";

	onUserTextFieldInput = "<input type="
			+ "text"
			+ " id="
			+ "userTajaTyping"
			+ " maxlength="
			+ "17"
			+ " style='border:0px; border-style : none; background-color:transparent; color : white; outline-style:none;'"
			+ " autofocus><br>" + "</div>";

	userTajaBackground.innerHTML = onUserTextField + onUserTextFieldInput;
};

//유저 - 코인 점수 애니메이션
Level1.prototype.setUserCoinPointAni = function(aTotalScore) {
	// this.game.time.events.add(Phaser.Timer.SECOND * 1, function() {
	// var comboCount = this.userComboCount < 1 ? 1 : this.userComboCount;
	// this.userCoinValueTotalCount += (10 * 1.5 * comboCount);
	// }, this);

	this.game.time.events.add(Phaser.Timer.SECOND * 1, function() {
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_score);
		this.particleUnit(this.fCoin_part1_user, this.fCoin_effect_user, 31,
				31, -70, 0, 50);
		this.particleUnit(this.fCoin_part2_user, this.fCoin_effect_user, 39,
				39, -45, -28, 100);
		this.particleUnit(this.fCoin_part3_user, this.fCoin_effect_user, 35,
				35, -10, -55, 150);
		this.particleUnit(this.fCoin_part4_user, this.fCoin_effect_user, 33,
				33, 10, -55, 200);
		this.particleUnit(this.fCoin_part5_user, this.fCoin_effect_user, 37,
				37, 45, -28, 250);
		this.particleUnit(this.fCoin_part6_user, this.fCoin_effect_user, 32,
				32, 70, 0, 300);
		this.particleUnit(this.fCoin_part7_user, this.fCoin_effect_user, 38,
				38, 45, 28, 350);
		this.particleUnit(this.fCoin_part8_user, this.fCoin_effect_user, 35,
				35, 10, 55, 400);
		this.particleUnit(this.fCoin_part9_user, this.fCoin_effect_user, 36,
				36, -10, 55, 450);
		this.particleUnit(this.fCoin_part10_user, this.fCoin_effect_user, 34,
				34, -45, 28, 500);
	}, this);

	this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		this.userCoinValueTotalCount = aTotalScore;
		this.userScoreAniResultCount = this.userCoinValueTotalCount;
	}, this);

};

//상대 - 코인 점수 애니메이션
Level1.prototype.setOtherCoinPointAni = function(aTotalScore) {
	// this.game.time.events.add(Phaser.Timer.SECOND * 1, function() {
	// var comboCount = this.otherComboCount < 1 ? 1 : this.otherComboCount;
	// this.otherCoinValueTotalCount += (10 * 1.5 * comboCount);
	// }, this);

	this.game.time.events.add(Phaser.Timer.SECOND * 1, function() {
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_score);
		this.particleUnit(this.fCoin_part1_other, this.fCoin_effect_other, 31,
				31, -70, 0, 50);
		this.particleUnit(this.fCoin_part2_other, this.fCoin_effect_other, 39,
				39, -45, -28, 100);
		this.particleUnit(this.fCoin_part3_other, this.fCoin_effect_other, 35,
				35, -10, -55, 150);
		this.particleUnit(this.fCoin_part4_other, this.fCoin_effect_other, 33,
				33, 10, -55, 200);
		this.particleUnit(this.fCoin_part5_other, this.fCoin_effect_other, 37,
				37, 45, -28, 250);
		this.particleUnit(this.fCoin_part6_other, this.fCoin_effect_other, 32,
				32, 70, 0, 300);
		this.particleUnit(this.fCoin_part7_other, this.fCoin_effect_other, 38,
				38, 45, 28, 350);
		this.particleUnit(this.fCoin_part8_other, this.fCoin_effect_other, 35,
				35, 10, 55, 400);
		this.particleUnit(this.fCoin_part9_other, this.fCoin_effect_other, 36,
				36, -10, 55, 450);
		this.particleUnit(this.fCoin_part10_other, this.fCoin_effect_other, 34,
				34, -45, 28, 500);
	}, this);

	this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
		this.otherCoinValueTotalCount = aTotalScore;
		this.otherScoreAniResultCount = this.otherCoinValueTotalCount;
	}, this);
};

//유저 - 하트 애니메이션
Level1.prototype.setUserHeartAni = function() {
	if (this.userHeart === 3) {
		this.fUi_icon_heart1_user.visible = true;
		this.fUi_icon_heart2_user.visible = true;
		this.fUi_icon_heart3_user.visible = true

		this.fUi_icon_heart1_user.setPlay("SHOW");
		this.fUi_icon_heart2_user.setPlay("SHOW");
		this.fUi_icon_heart3_user.setPlay("SHOW");
	} else if (this.userHeart === 2) {
		this.fUi_icon_heart1_user.setPlay("HIDE");
		this.fUserComboEffectText.PlayTween();
	} else if (this.userHeart === 1) {
		this.fUi_icon_heart1_user.visible = false;
		this.fUi_icon_heart2_user.setPlay("HIDE");
		this.fUserComboEffectText.PlayTween();
	} else if (this.userHeart === 0) {
		this.fUi_icon_heart1_user.visible = false;
		this.fUi_icon_heart2_user.visible = false;
		this.fUi_icon_heart3_user.setPlay("HIDE");
		this.fUserComboEffectText.PlayTween();
	}
	// console.log("this.userHeart : " + this.userHeart);

};

//상대 하트 애니메이션
Level1.prototype.setOtherHeartAni = function() {
	if (this.otherHeart === 3) {
		this.fUi_icon_heart1_other.visible = true;
		this.fUi_icon_heart2_other.visible = true;
		this.fUi_icon_heart3_other.visible = true;

		this.fUi_icon_heart1_other.setPlay("SHOW");
		this.fUi_icon_heart2_other.setPlay("SHOW");
		this.fUi_icon_heart3_other.setPlay("SHOW");
	} else if (this.otherHeart === 2) {
		this.fUi_icon_heart1_other.setPlay("HIDE");
		this.fOtherComboEffectText.PlayTween();
	} else if (this.otherHeart === 1) {
		this.fUi_icon_heart1_other.visible = false;
		this.fUi_icon_heart2_other.setPlay("HIDE");
		this.fOtherComboEffectText.PlayTween();
	} else if (this.otherHeart === 0) {
		this.fUi_icon_heart1_other.visible = false;
		this.fUi_icon_heart2_other.visible = false;
		this.fUi_icon_heart3_other.setPlay("HIDE");
		this.fOtherComboEffectText.PlayTween();
	}
	// console.log("this.otherHeart : " + this.otherHeart);

};

//유저 - 쌓여져 있는 코인 애니메이션 셋팅
Level1.prototype.setUserCoinsAni = function(aAnimationName, aIsTween) {
	// fields
	this.fCoin_container_user.children.forEach(function(element) {
		element.setPlay(aAnimationName, aIsTween);
	});
};

//상대 - 쌓여져 있는 코인 애니메이션 셋팅
Level1.prototype.setOtherCoinsAni = function(aAnimationName, aIsTween) {
	// fields
	this.fCoin_container_other.children.forEach(function(element) {
		element.setPlay(aAnimationName, aIsTween);
	});
};

//동전 서로 위치 변경함
Level1.prototype.setChangeCoinPostion = function(aCurrentObj, aPreviousObj) {
	aCurrentObj.x = aPreviousObj.x;
	aCurrentObj.y = aPreviousObj.y;
	aCurrentObj.pileStatus = aPreviousObj.pileStatus;
};
//유저 - 동전 쌓임 셋팅
Level1.prototype.userFileSetting = function() {
	this.setChangeCoinPostion(this.fUserCoinPile1, this.fUserCoinPile2);
	this.setChangeCoinPostion(this.fUserCoinPile2, this.fUserCoinPile3);
	this.setChangeCoinPostion(this.fUserCoinPile3, this.fUserCoinPile4);
	this.setChangeCoinPostion(this.fUserCoinPile4, this.fUserCoinPile5);
	this.setChangeCoinPostion(this.fUserCoinPile5, this.fUserCoinPile6);

	this.setChangeCoinPostion(this.fUserCoinPile6, this.fUserCoinPile7);
	this.setChangeCoinPostion(this.fUserCoinPile7, this.fUserPlayCoin);

	this.fUserPlayCoin.x = 235;
	this.fUserPlayCoin.y = 1000;
};
//상대 - 동전 쌓임 셋팅
Level1.prototype.otherFileSetting = function() {

	this.setChangeCoinPostion(this.fOtherCoinPile1, this.fOtherCoinPile2);
	this.setChangeCoinPostion(this.fOtherCoinPile2, this.fOtherCoinPile3);
	this.setChangeCoinPostion(this.fOtherCoinPile3, this.fOtherCoinPile4);
	this.setChangeCoinPostion(this.fOtherCoinPile4, this.fOtherCoinPile5);
	this.setChangeCoinPostion(this.fOtherCoinPile5, this.fOtherCoinPile6);

	this.setChangeCoinPostion(this.fOtherCoinPile6, this.fOtherCoinPile7);
	this.setChangeCoinPostion(this.fOtherCoinPile7, this.fOtherPlayCoin);

	this.fOtherPlayCoin.x = 235;
	this.fOtherPlayCoin.y = 1000;
};

//유저 - 콤보 애니메이션
Level1.prototype.setUserComboAni = function() {	
	var isVisible = false;
	if(this.userComboCount >= 2){
		isVisible = true;
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_com);		
		this.userComboGaugePx = (this.userComboCount - 1) * 37 + 1;
		
		if(this.userComboCount === 2){
			this.fUserComboEffectText1.PlayTween();
		} else if(this.userComboCount === 3){
			this.fUserComboEffectText2.PlayTween();
		} else if(this.userComboCount === 4){
			this.fUserComboEffectText3.PlayTween();
		} else if(this.userComboCount === 5){
			this.fUserComboEffectText4.PlayTween();
		} else if(this.userComboCount === 6){
			this.fUserComboEffectText5.PlayTween();
		}
		
	} else {
		this.userComboGaugePx = 0;
		this.userComboGaugeAniPx = 0;
	}
	
	this.fCombo_group_user.visible = isVisible;
	this.fUi_comboPanel_user.visible = isVisible;
	this.fUi_comboGauge_user.visible = isVisible;
};



//상대 - 콤보 애니메이션
Level1.prototype.setOtherComboAni = function() {	
	var isVisible = false;
	if(this.otherComboCount >= 2){
		isVisible = true;
		this.soundManager.play(that.soundManager.SOUND_TYPE.Coin_com);		
		this.otherComboGaugePx = (this.otherComboCount - 1) * 37 + 1;
		
		if(this.otherComboCount === 2){
			this.fOtherComboEffectText1.PlayTween();
		} else if(this.otherComboCount === 3){
			this.fOtherComboEffectText2.PlayTween();
		} else if(this.otherComboCount === 4){
			this.fOtherComboEffectText3.PlayTween();
		} else if(this.otherComboCount === 5){
			this.fOtherComboEffectText4.PlayTween();
		} else if(this.otherComboCount === 6){
			this.fOtherComboEffectText5.PlayTween();
		}
	} else {
		this.otherComboGaugePx = 0;
		this.otherComboGaugeAniPx = 0;
	}
	
	this.fCombo_group_other.visible = isVisible;
	this.fUi_comboPanel_other.visible = isVisible;
	this.fUi_comboGauge_other.visible = isVisible;
};
//유저 - 콤보 애니메이션 끝났을때 셋팅
Level1.prototype.endUserComboAni = function() {
	this.fUi_comboPanel_user.visible = false;
	this.fUi_comboGauge_user.visible = false;
};
//상대 - 콤보 애니메이션 끝났을때 셋팅
Level1.prototype.endOtherComboAni = function() {
	this.fUi_comboPanel_other.visible = false;
	this.fUi_comboGauge_other.visible = false;
};
//유저 - 맥스 콤보 셋팅
Level1.prototype.setUserComboMax = function() {
	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

//	if (this.userComboCount < 6)
//		return;
	if (this.fUserPlayCoin === undefined
			|| this.fChar_aniSheet_user === undefined
			|| this.fChar_aniSheet_user === undefined)
		return;

	//if (this.fUserUiComboGaugeSheetQ4.animations.currentAnim.isPlaying) {
	if(this.userComboGaugeAniPx >= this.fUi_comboGauge_user.width){
		this.fUi_comboPanel_user.visible = false;
		this.userComboGaugePx = 0;
		this.userComboGaugeAniPx = 0;
		this.fUi_comboGauge_user.visible = false;		

		this.userComboCount = 1;
	}
};
//상대 - 맥스 콤보 셋팅
Level1.prototype.setOtherComboMax = function() {
	if (gameState === this.gameConst.GameStateType.START
			|| gameState === this.gameConst.GameStateType.INGAME_FINISH) {

	} else {
		return;
	}

	//if (this.otherComboCount < 6)
	//	return;
	if (this.fOtherPlayCoin === undefined
			|| this.fChar_aniSheet_other === undefined
			|| this.fChar_aniSheet_other === undefined)
		return;

	//if (this.fOtherUiComboGaugeSheetQ4.animations.currentAnim.isPlaying) {
	if(this.otherComboGaugeAniPx >= this.fUi_comboGauge_other.width){
		this.fUi_comboPanel_other.visible = false;
		this.fUi_comboGauge_other.visible = false;

		this.otherComboGaugePx = 0;
		this.otherComboGaugeAniPx = 0;
		this.fUi_comboGauge_other.visible = false;
		
		this.otherComboCount = 1;
	}
};
// 유저 - 3,2,1 카운트 배열 설정
Level1.prototype.startCountUserArray = function() {
	// 3,2,1,Start
	startCountUserArray = [ this.fBegin_ready_user, this.fBegin_ready1_user,
			this.fBegin_ready2_user, this.fBegin_start_user ];
};
// 유저 - 3,2,1 카운트 셋팅
Level1.prototype.setStartUserCount = function() {
	this.fStart_count_user.visible = true;
	var totalTime = 1000;

	// console.log("aaa");

	for (var i = 0; i < startCountUserArray.length; i++) {

		// console.log("startCountUserArray.length " +
		// startCountUserArray.length);
		startCountUserArray[i].visible = true;
		startCountUserArray[i].alpha = 1;
		startCountUserArray[i].scale.x = 0;
		startCountUserArray[i].scale.y = 0;

		this.game.add.tween(startCountUserArray[i].scale).to({
			x : 1,
			y : 1
		}, 300, "Linear", true, (totalTime * i));
		this.game.add.tween(startCountUserArray[i]).to({
			alpha : 0
		}, 300, "Linear", true, 700 + (totalTime * i));
	}

	this.game.time.events.add(Phaser.Timer.SECOND * 3.8, function() {
		this.fChar_aniSheet_user.setPlay("IDLE");
		this.fChar_aniSheet_other.setPlay("IDLE");

		this.setPlayBackGroundObject();

	}, this);
};
//상대 - 3,2,1 카운트 배열  
Level1.prototype.startCountOtherArray = function() {
	// 3,2,1,Start
	startCountOtherArray = [ this.fBegin_ready_other, this.fBegin_ready1_other,
			this.fBegin_ready2_other, this.fBegin_start_other ];
};
//상대 - 3,2,1 카운트 셋팅
Level1.prototype.setStartOtherCount = function() {
	this.fStart_count_other.visible = true;
	var totalTime = 1000;

	// console.log("aaa");

	for (var i = 0; i < startCountOtherArray.length; i++) {

		// console.log("startCountUserArray.length " +
		// startCountOtherArray.length);
		startCountOtherArray[i].visible = true;
		startCountOtherArray[i].alpha = 1;
		startCountOtherArray[i].scale.x = 0;
		startCountOtherArray[i].scale.y = 0;

		this.game.add.tween(startCountOtherArray[i].scale).to({
			x : 1,
			y : 1
		}, 300, "Linear", true, (totalTime * i));
		this.game.add.tween(startCountOtherArray[i]).to({
			alpha : 0
		}, 300, "Linear", true, 700 + (totalTime * i));

		this.game.time.events.add(totalTime * i, function() {

			if (i === (startCountOtherArray.length - 1)) {
				this.soundManager.play(that.soundManager.SOUND_TYPE.G_Start);
			} else {
				this.soundManager
						.play(that.soundManager.SOUND_TYPE.CoDown_3_2_1);
			}

		}, this);
	}
};
//유저 - 동전 폭발 이펙트
Level1.prototype.setUserEffectCrash = function() {
	this.fCrumble_group_user.visible = true;

	this.fCrumble_group_user.children.forEach(function(element) {
		element.delay = (Math.floor(Math.random() * 3) + 3) / 9;
		element.setPlay("PLAY", false, element.delay, 0);
	});
};
//상대 - 동전 폭발 이펙트
Level1.prototype.setOtherEffectCrash = function() {
	this.fCrumble_group_other.visible = true;

	this.fCrumble_group_other.children.forEach(function(element) {
		element.delay = (Math.floor(Math.random() * 3) + 3) / 9;
		element.setPlay("PLAY", false, element.delay, 0);
	});
};
//유저 - 텍스트 애니메이션
Level1.prototype.setUserTextAni = function() {
	this.setUserMeterAni();
	this.setUserCoinValueAni();
};
//상대 - 텍스트 애니메이션
Level1.prototype.setOtherTextAni = function() {
	this.setOtherMeterAni();
	this.setOtherCoinValueAni();
};
//유저 - 높이 애니메이션
Level1.prototype.setUserMeterAni = function() {
	if ((this.userCoinCollectCount * 10) > this.userMeterValue) {
		this.userMeterValue++;

		this.fMeterValue_user.text = this.userMeterValue.toString() + "m";
		this.fMeterOutlineValue_user.text = this.userMeterValue.toString()
				+ "m";
	}
};
//상대 - 높이 애니메이션
Level1.prototype.setOtherMeterAni = function() {
	if ((this.otherCoinCollectCount * 10) > this.otherMeterValue) {
		this.otherMeterValue++;

		this.fMeterValue_other.text = this.otherMeterValue.toString() + "m";
		this.fMeterOutlineValue_other.text = this.otherMeterValue.toString()
				+ "m";
	}
};
//유저 - 점수 애니메이션
Level1.prototype.setUserCoinValueAni = function() {
	if (this.userCoinValueTotalCount > this.userCoinValue) {
		this.userCoinValue++;

		this.fCoinValue_user.text = this.userCoinValue.toString();
		this.fCoinValueOutline_user.text = this.userCoinValue.toString();
	}
};
//상대 - 점수 애니메이션
Level1.prototype.setOtherCoinValueAni = function() {
	if (this.otherCoinValueTotalCount > this.otherCoinValue) {
		this.otherCoinValue++;

		this.fCoinValue_other.text = this.otherCoinValue.toString();
		this.fCoinValueOutline_other.text = this.otherCoinValue.toString();
	}
};

// 게임 스타트 체크
function checkDelayEnableGameStart() {
	that.game.time.events.add(Phaser.Timer.SECOND * 5, function() {
		checkEnableGameStart();
	}, that);
}

// 게임
function checkEnableGameStart() {
	if (gameState === that.gameConst.GameStateType.READY) {
		// 요청...
		that.socketManager.netReqCheckRoomStatus('req_check_room',
				that.gameData.sessionID, that.gameData.roomNumber,
				that.gameData.userNickName);
	}
}

Level1.prototype.setAICorrect = function(levelLimitSecond) {

	var comboCountRate = [ [ 75, 95, 100, 100, 100, 100 ], // 1음절.
	[ 60, 90, 95, 100, 100, 100 ], // 2음절.
	[ 45, 85, 90, 95, 100, 100 ], // 3음절.
	[ 30, 80, 85, 90, 95, 100 ], // 4음절.
	[ 15, 65, 80, 90, 95, 100 ], // 5음절.

	[ 5, 45, 65, 80, 90, 100 ], // 6음절.
	[ 0, 30, 50, 70, 85, 100 ], // 8음절.
	[ 0, 10, 20, 40, 80, 100 ], // 12음절.
	[ 0, 0, 5, 15, 55, 100 ] ]; // 16음절.

	var textLength = this.fWordtext_other.text.length;
	var textIndex = 0;

	if (textLength >= 16)
		textIndex = 9;
	else if (textLength >= 12)
		textIndex = 8;
	else if (textLength >= 8)
		textIndex = 7;
	else if (textLength >= 6)
		textIndex = 6;
	else if (textLength >= 1)
		textIndex = (textLength - 1);

	// 325
	var initDelaySecond = 200;
	var secIdx = 6;
	// var combo
	var comboRateRandom = Math.floor(Math.random() * 100);

	if (comboRateRandom > comboCountRate[comboCountRate]) {
		return levelLimitSecond[levelLimitSecond.length - 1] + 300;
	} else {
		var timeRateRandom = Math.floor(Math.random() * 100);
		for (var i = 0; i < comboCountRate[textIndex].length; i++) {
			if (comboCountRate[textIndex][i] > timeRateRandom) {
				secIdx = i;
				break;
			}
		}

		// console.log("[기획] " + this.fWordtext_other.text + " 의 상대방 입력시간은 " +
		// (secIdx) + "초 ~ " + (secIdx + 1) + "초입니다.");

		if (secIdx == 6) {
			return levelLimitSecond[levelLimitSecond.length - 1] + 1000;
		} else if (secIdx === 0) {
			return Math.floor(Math.random() * levelLimitSecond[secIdx])
					+ initDelaySecond;
		} else {
			return (Math
					.floor(Math.random()
							* (levelLimitSecond[secIdx] - levelLimitSecond[secIdx - 1])) + levelLimitSecond[secIdx - 1]);
		}
	}
};


// 유저 게임 대기 상태 완료.
var netUserGameReady = 0;

// Socket CallBack Event...
function netSocketResponseAll() {
	that.socketManager.netResGameReady(netResGameReadySuccess,
			netResGameReadyFail);
	that.socketManager.netResGameStart(netResGameStartSuccess,
			netResGameStartFail);
	that.socketManager.netResCheckRoomStatus(netResCheckRoomStatusSuccess,
			netResCheckRoomStatusFail);
	that.socketManager.netResCheckGameStatus(netResCheckGameStatusSuccess,
			netResCheckGameStatusFail);
	that.socketManager.netResGameStartOtherOut(netResGameStartOtherOutSuccess,
			netResGameStartOtherOutFail);

	that.socketManager.netResUserNewWord(netResUserNewWordSuccess,
			netResUserNewWordFail);
	that.socketManager.netResOtherNewWord(netResOtherNewWordSuccess,
			netResOtherNewWordFail);

	that.socketManager.netResUserCheckWord(netResUserCheckWordSuccess,
			netResUserCheckWordFail);
	that.socketManager.netResOtherCheckWord(netResOtherCheckWordSuccess,
			netResOtherCheckWordFail);

	that.socketManager.netResUserInputWordTimeOver(
			netResInputWordTimeOverSuccess, netResInputWordTimeOverFail);
	that.socketManager.netResOtherInputWordTimeOver(
			netResOtherInputWordTimeOverSuccess,
			netResOtherInputWordTimeOverFail);

	that.socketManager.netResUserTowerFall(netResUserTowerFallSuccess,
			netResUserTowerFallFail);
	that.socketManager.netResOtherTowerFall(netResOtherTowerFallSuccess,
			netResOtherTowerFallFail);

	that.socketManager.netResUserGameLeaveRoom(netResUserGameLeaveRoomSuccess,
			netResUserGameLeaveRoomFail);
	that.socketManager.netResOtherGameLeaveRoom(
			netResOtherGameLeaveRoomSuccess, netResOtherGameLeaveRoomFail);

	that.socketManager.netResPreGameOver(netResPreGameOverSuccess,
			netResPreGameOverFail);

	that.socketManager.netResGameResult(netResResultSuccess, netResResultFail);

	that.socketManager
			.netResGameOver(netResGameOverSuccess, netResGameOverFail);

	that.socketManager.netResUserReGameStart(netResUserReGameStartSuccess,
			netResUserReGameStartFail);
	that.socketManager.netResOtherReGameStart(netResOtherReGameStartSuccess,
			netResOtherReGameStartFail);
	that.socketManager.netResReGameStart(netResReGameStartSuccess,
			netResReGameStartFail);

	that.socketManager.netResFire(netResFireSuccess, netResFireFail);

	//로비자동이동 -> 유저 선택 이동으로 변경함.
	//that.socketManager.netResGoToLobby(netResGoToLobbySuccess, netResGoToLobbyFail);
}


function netResFireSuccess(aData) {
	that.fToastMessageGroup.visible = false;
	that.game.state.start("MenuV2");	
}
function netResFireFail(aResult) {
}
// 게임 시작
// =========================================================================================
// that.socketManager.netReqGameStart();
// 성공
function netResGameReadySuccess(aData) {

	netUserGameReady = that.gameConst.NetState.COMPLETE;
}

function netResGameReadyFail(aResult) {
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2,
				0, true);
	}
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
}
// ================================================================================================

// 게임 시작 검증
// =========================================================================================
// that.socketManager.netReqCheckRoomStatus();
// 체크룸 성공
function netResCheckRoomStatusSuccess(aData) {
	checkDelayEnableGameStart();
}

// 체크룸 실패
function netResCheckRoomStatusFail(aResult) {
	// 검증 요청함.
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		if (aResult === 1604 || aResult === "1604") {
			that.socketManager.netReqCheckHowGameStatus('req_how_game',
					that.gameData.sessionID, that.gameData.roomNumber,
					that.gameData.userNickName);
		} else {
			checkDelayEnableGameStart();
		}
	}
}

// that.socketManager.netReqHowGameStatus();
// 체크게임성공
function netResCheckGameStatusSuccess(aData) {
	checkDelayEnableGameStart();
}

// 체크게임실패
function netResCheckGameStatusFail(aResult) {
	// 로비가기
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		if (aResult === 1704 || aResult === "1704") {
			that.disableToastMessage();
			that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);

			that.socketManager.setDisConnect();
			that.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
				that.fToastMessageGroup.visible = false;
				that.game.state.start("MenuV2");
				// that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Lob);
			}, that);
			that.setToastMessage("상대방이 나갔습니다. 3초후에 로비로 이동합니다.", 2.8, 0, true);
		} else {
			checkDelayEnableGameStart();
		}
	}
}
// =========================================================================================

// 게임 시작
// =========================================================================================
// that.socketManager.netReqGameStart();
// 성공
function netResGameStartSuccess(aData) {
	if (netUserGameReady === that.gameConst.NetState.COMPLETE) {

		that.socketManager.isPlay = true;

		// 게임 시작함.
		that.setGameState(that.gameConst.GameStateType.START);
		that.disableToastMessage();
	}
}

function netResGameStartFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	// 로비가기
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		that.disableToastMessage();
	}
}

// ================================================================================================

// 게임 시작 실패
// =========================================================================================
// that.socketManager.netReqGameStartFail();
// 성공
function netResGameStartOtherOutSuccess(aData) {
	// that.setGameState(that.gameConst.GameStateType.START);
	that.disableToastMessage();
	that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
	that.socketManager.setDisConnect();

	that.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
		that.fToastMessageGroup.visible = false;
		that.game.state.start("MenuV2");
		// that.soundManager.play(that.soundManager.SOUND_TYPE.Coin_Lob);
	}, that);

	that.setToastMessage("상대방이 나갔습니다. 3초후에 로비로 이동합니다.", 2.8, 0, true);
}

function netResGameStartOtherOutFail(aResult) {
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		that.disableToastMessage();
	}

}

// ================================================================================================

// 새 단어 요청
// =======================================================================================
// that.socketManager.netReqNewWord();
// 유저성공
function netResUserNewWordSuccess(aData) {
	// console.log("netResUserNewWordSuccess is " + aData.new_word);

	that.wordInputEmptyUser();

	serverUserTextWord = aData.new_word;
	that.fWordtext_user.text = serverUserTextWord;
	that.isUserBoxAttack = aData.combo_attack;
	that.userComboBoxType = aData.combo_attack_type;
}

// 유저실패
function netResUserNewWordFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		// that.disableToastMessage();
	}
}

// 상대방성공
function netResOtherNewWordSuccess(aData) {

	that.wordInputEmptyOther();

	serverOtherTextWord = aData.new_word;
	that.fWordtext_other.text = serverOtherTextWord;
	that.isOtherBoxAttack = aData.combo_attack;
	that.otherComboBoxType = aData.combo_attack_type;
}

// 상대방실패
function netResOtherNewWordFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		// that.disableToastMessage();
	}
}
// =================================================================================================

// 단어 입력 요청
// =======================================================================================
// that.socketManager.netReqCheckWord();
// 유저성공
function netResUserCheckWordSuccess(aData) {
	// isUserDrop = true;
	that.userComboCount = aData.combo_count;
	that.isUserComboAttack = aData.is_combo_attack;
	that.userComboAttackType = aData.combo_attack_type;
	that.userCoinCollectCount = aData.coin_tower_count;
	// that.userCoinValueTotalCount = aData.total_score;

	if (that.fUserPlayCoin.checkCurrentAnimation("DROP_ROLLING") === true) {
		that.fUserPlayCoin.setStop();
		isUserReqCheckWords = false;
		// console.log("LEVEL1::netResUserCheckWordSuccess -> DROP_ROLLING");
	}

	if (aData.bad_coin_count <= 2) {
		that.setUserCoinPointAni(aData.total_score);
	}

	if (aData.coin_line_type === 0) {
		that.setUserBasicDrop();
	} else if (aData.coin_line_type === 1) {
		that.setUserAdvenceDrop();
	}
}

// 유저실패
function netResUserCheckWordFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	// console.log("단어입력 유저 실패...");
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		// that.disableToastMessage();
	}

	isUserReqCheckWords = false;
}

// 상대방성공
function netResOtherCheckWordSuccess(aData) {
	// isOtherDrop = true;

	// word
	// get_combo_attack : 0 ( 콤보 얻기 실패 ) 1 ( 콤보 얻기 성공 )
	// combo_count
	// is_combo_attack : 0 (콤보 공격 안함 ) : 1 (콤보 공격 함)
	// combo_attack_type : 1(공격 타입 3) 2(공격 타입 4) 3(공격 타입5) 4(공격 타입6)
	// coin_tower_count :

	that.otherComboCount = aData.combo_count;
	that.isOtherComboAttack = aData.is_combo_attack;
	that.otherComboAttackType = aData.combo_attack_type;
	that.otherCoinCollectCount = aData.coin_tower_count;
	// that.otherCoinValueTotalCount = aData.total_score;

	if (aData.bad_coin_count <= 2) {
		that.setOtherCoinPointAni(aData.total_score);
	}

	if (aData.coin_line_type === 0) {
		that.setOtherBasicDrop();
	} else if (aData.coin_line_type === 1) {
		that.setOtherAdvenceDrop();
	}
}

// 상대방실패
function netResOtherCheckWordFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	// console.log("단어입력 상대방 실패...");
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		// that.disableToastMessage();
	}
}
// =================================================================================================

// 게임 30초전 종료 받기
// =================================================================================
// that.socketManager.netReqPreGameOver();
// 성공
function netResPreGameOverSuccess(aData) {
	// 30초전 성공...
	if (that.isWarring === false) {
		that.isWarring = true;

		that.soundManager.play(that.soundManager.SOUND_TYPE.Time_danger);

		var tween = that.game.add.tween(that.fUi_timePanel_Alert).to({
			alpha : 1
		}, 500, "Linear", true, 0, -1);
		tween.yoyo(true, 100);
	}
}

// 실패
function netResPreGameOverFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
	} else {
		// that.disableToastMessage();
	}
}
// =================================================================================================

// 결과창 요청
// =========================================================================================
// that.socketManager.netReqResult();
// 유저성공
function netResResultSuccess(aData) {

	console.log(aData);

	that.gameData.result_score = aData.score;
	that.gameData.result_coin_count = aData.coin_count;
	that.gameData.result_win_count = aData.win_count;
	that.gameData.result_lose_count = aData.lose_count;
	that.gameData.result_draw_count = aData.draw_count;
	that.gameData.result_draw = aData.draw;
	that.gameData.result_other_score = aData.other_score;
	that.gameData.result_other_coin_count = aData.other_coin_count;
	that.gameData.result_other_win_count = aData.other_win_count;
	that.gameData.result_other_lose_count = aData.other_lose_count;
	that.gameData.result_other_draw_count = aData.other_draw_count;
	that.gameData.result_win = aData.win;
	that.gameData.result_point = aData.point;

  mKakaoUserNickname = that.gameData.userNickName;
	mKakaoVsMyWinCount = that.gameData.result_win_count;
	// data 넣기..
	that.setGameState(that.gameConst.GameStateType.INGAME_END_ANIMATION);

	that.socketManager.isPlay = false;

	// that.disableToastMessage();
}

// 유저실패
function netResResultFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		// that.setToastMessage(that.gameConst.getPopupServerMessage(aResult),
		// 2);
		// setTimeout(window.close(), 1200);
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueExitListener);
	} else {
		that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueListener);
	}
	// that.disableToastMessage();
}

// //상대방성공
// function netResOtherResultSuccess(aData){
//	
// }
//
// //상대방실패
// function netResOtherResultFail(aResult){
// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
// that.gameConst.getPopupServerMessage(aResult));
// }
// =================================================================================================

// 게임 종료 패킷
// =======================================================================================
// that.socketManager.netReqGameOver();
// 유저성공
function netResGameOverSuccess(aData) {
	// 유저 게임 종료
	that.setGameState(that.gameConst.GameStateType.INGAME_FINISH);
}

// 유저실패
function netResGameOverFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
		// that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueExitListener);
	} else {
		// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueListener);
	}
}
// =================================================================================================

// 단어 입력 타임 아웃
// ===================================================================================
// that.socketManager.netReqInputWordTimeOver();
// 유저성공
function netResInputWordTimeOverSuccess(aData) {
	that.userComboCount = aData.combo_count;
	that.userHeart = aData.heart_count;
	that.isUserComboAttack = aData.is_combo_attack;
	that.userComboAttackType = aData.combo_attack_type;

	that.setUserWord(that.gameData.gameGenerateDelay);
	that.setUserHeartMinus(true, false);
}

// 유저실패
function netResInputWordTimeOverFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
		// that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueExitListener);
	} else {
		// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueListener);
	}
}

// 상대방성공
function netResOtherInputWordTimeOverSuccess(aData) {
	that.otherComboCount = aData.combo_count;
	that.otherHeart = aData.heart_count;
	that.isOtherComboAttack = aData.is_combo_attack;
	that.otherComboAttackType = aData.combo_attack_type;

	that.setOtherWord(that.gameData.gameGenerateDelay);
	that.setOtherHeartMinus(true, false);
}

// 상대방실패
function netResOtherInputWordTimeOverFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
		// that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueExitListener);
	} else {
		// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueListener);
	}
}
// =================================================================================================

// 콤보 타임 아웃
// ===================================================================================
// that.socketManager.netReqInputWordTimeOver();
// 유저성공
function netResComboStateSuccess(aData) {

}

// 유저실패
function netResComboStateFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
}

// 상대방성공
function netResClearComboSuccess(aData) {

}

// 상대방실패
function netResClearComboFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
}

// 상대방성공
function netResAttackComboSuccess(aData) {

}

// 상대방실패
function netResAttackComboFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
}
// =================================================================================================

// 타워무너지기
// ========================================================================================
// that.socketManager.netReqTowerFall();
// 유저성공
function netResUserTowerFallSuccess(aData) {
	that.userHeart = aData.heart_count;
	that.userComboCount = aData.combo_count;
	that.isUserComboAttack = aData.is_combo_attack;
	that.userComboAttackType = aData.combo_attack_type;

	that.setUserTowerFallDown();
}

// 유저실패
function netResUserTowerFallFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
		// that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueExitListener);
	} else {
		// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueListener);
	}
}

// 상대방성공
function netResOtherTowerFallSuccess(aData) {
	that.otherHeart = aData.heart_count;
	that.otherComboCount = aData.combo_count;
	that.isOtherComboAttack = aData.is_combo_attack;
	that.otherComboAttackType = aData.combo_attack_type;
	that.setOtherTowerFallDown();
}

// 상대방실패
function netResOtherTowerFallFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	if (checkSetGameDisconnect(aResult) === true) {
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 3,
				0, true);
		setTimeout(window.close(), 3000);
		// that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueExitListener);
	} else {
		// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueListener);
	}
}
// =================================================================================================

// 방 나가기
// ========================================================================================
// 방 유저 나가기 성공.
function netResUserGameLeaveRoomSuccess(aData) {
	// gotoMenuFromResult("3초후에 로비로 이동합니다.");
}

// 방 유저 나가기 실패.
function netResUserGameLeaveRoomFail(aResult) {
	// gotoMenuFromResult("3초후에 로비로 이동합니다.");
}

// 방 인원 나가기 성공.
function netResOtherGameLeaveRoomSuccess(aData) {
	//gotoMenuFromResult("상대방이 나갔습니다. 3초후에 로비로 이동합니다.");
	that.setToastMessage("상대방이 나갔습니다.", 2);
}

// 방 인원 나가기 실패.
function netResOtherGameLeaveRoomFail(aResult) {
	//gotoMenuFromResult("상대방이 나갔습니다. 3초후에 로비로 이동합니다.");
	that.setToastMessage("상대방이 나갔습니다.", 2);
}
// 방 나가기
// ========================================================================================

function gotoMenuFromResult(aStringMessage) {

	if (gameState === that.gameConst.GameStateType.RESULT
			|| gameState === that.gameConst.GameStateType.OUTGAME_END) {
		that.disableToastMessage();
		that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
		that.socketManager.setDisConnect();
		that.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
			that.fToastMessageGroup.visible = false;
			that.game.state.start("MenuV2");
		}, that);
		that.setToastMessage(aStringMessage, 2.8, 0, true);
	}
}

// 게임 재 시작
// ========================================================================================
// that.socketManager.netReqTowerFall();
// 유저 게임 재시작

function netResUserReGameStartSuccess(aData) {
	// 게임 재 시작 유저 성공시...
}

// 유저게임 재시작 실패
function netResUserReGameStartFail(aResult) {
	// that.setCommonPopup(that.gameConst.PopupType.RED_ONE_BUTTON,
	// that.gameConst.getPopupServerMessage(aResult));
	that.disableToastMessage();
	if (checkSetGameDisconnect(aResult) === true) {
		// that.setToastMessage(that.gameConst.getPopupServerMessage(aResult),
		// 2);
		// setTimeout(window.close(), 1200);
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueExitListener);
	} else {
		// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueListener);
		//that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2, 0, true);
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2);
	}
	// 게임 재 시작 유저 실패시...
}

// 상대 게임 재시작
function netResOtherReGameStartSuccess(aData) {
	// 게임 재 시작 상대 성공시...
	that.setToastMessage("상대방이 계속하기를 선택했습니다.", 2);
}

// 상대게임 재시작 실패
function netResOtherReGameStartFail(aResult) {
	that.disableToastMessage();
	if (checkSetGameDisconnect(aResult) === true) {
		// that.setToastMessage(that.gameConst.getPopupServerMessage(aResult),
		// 2);
		// setTimeout(window.close(), 1200);
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueExitListener);
	} else {
		// that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
		// confirmBlueListener);
		//that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2, 0, true);
		that.setToastMessage(that.gameConst.getPopupServerMessage(aResult), 2);
	}
	// 게임 재 시작 유저 실패시...

}

// 게임 재 시작
function netResReGameStartSuccess(aData) {
	// 게임 재 시작 성공시...
	that.disableToastMessage();
	// that.game.state.start("RegameV1");
	that.setGameState(that.gameConst.GameStateType.ENTER);
}

// 게임 재 시작실패.
function netResReGameStartFail(aResult) {
	// 게임 재 시작 실패시...
	if (checkSetGameDisconnect(aResult) === true) {
		// that.setToastMessage(that.gameConst.getPopupServerMessage(aResult),
		// 2);
		// setTimeout(window.close(), 1200);
		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueExitListener);
	} else {
		that.setOneBluePopup(that.gameConst.getPopupServerMessage(aResult),
				confirmBlueListener);
	}
	// 게임 재 시작 유저 실패시...
	that.disableToastMessage();
}
// =================================================================================================

// 로비로 가기
// =================================================================================================
// that.socketManager.netReqInputWordTimeOver();
// 유저성공
//function netResGoToLobbySuccess(aData) {
//	that.disableToastMessage();
//	that.soundManager.stop(that.soundManager.SOUND_TYPE.Coin_Music);
//
//	that.socketManager.setDisConnect();
//	that.game.time.events.add(Phaser.Timer.SECOND * 3, function() {
//		that.fToastMessageGroup.visible = false;
//		that.game.state.start("MenuV2");		
//	}, that);
//	that.setToastMessage("게임이 끝났습니다. 3초후에 로비로 이동합니다.", 2.8, 0, true);	
	
	//console.log("gotoLobby Success");
//}

// 유저실패
//function netResGoToLobbyFail(aResult) {
//	if (checkSetGameDisconnect(aResult) === true) {
//		that.setOneBlueExitPopup(that.gameConst.getPopupServerMessage(aResult),
//				confirmBlueExitListener);
//	} else {
//
//	}
	//console.log("gotoLobby Fail");
//}
// =================================================================================================

// 페이스북 전송 관련 - ajax~!!
// =================================================================================================
// 로그 관련...
function netResLogShareFacebookSuccess(aData) {
	// console.log("netResLogShareFacebookSuccess 으로 로그가 쌓였습니다.");
}

function netResLogShareFacebookFail(aResult) {
	// console.log("netResLogShareFacebookFail 으로 로그가 안 쌓였습니다.");
}
// =================================================================================================

// 카카오 전송 관련 - ajax~!!
// =================================================================================================
// 로그 관련...
function netResLogShareKakaoSuccess(aData) {
	// console.log("netResLogShareKakaoSuccess 으로 로그가 쌓였습니다.");
}

function netResLogShareKakaoFail(aResult) {
	// console.log("netResLogShareKakaoFail 으로 로그가 안 쌓였습니다.");
}
// =================================================================================================

// 토스트 메세지
Level1.prototype.setToastMessage = function(aExplan, aSecTime, aY,
		aIsInputEnable) {
	var isInputEnabled = true;
	that.fToastMessageGroup.visible = true;

	that.gameUtil.setText(this.fToastMessageText, 0, 28, "center", "middle",
			aExplan);

	if (aIsInputEnable === undefined || aIsInputEnable === null
			|| aIsInputEnable === 0) {
		that.fNotRayCast1.inputEnabled = false;
	} else {
		that.fNotRayCast1.inputEnabled = true;
	}

	if (aY === undefined || aY === null || aY === 0) {
		that.fUIToaster.y = 238;
		that.fToastMessageText.y = 238 + 12;
	} else {
		that.fUIToaster.y = aY;
		that.fToastMessageText.y = aY + 12;
	}

	if (aSecTime === undefined || aSecTime === null || aSecTime === 0) {

	} else {
		that.game.time.events.add(Phaser.Timer.SECOND * aSecTime, function() {
			that.fToastMessageGroup.visible = false;
			// that.fNotRayCast1.inputEnabled = false;
		}, that);
	}
};

// 토스트 메세지
Level1.prototype.disableToastMessage = function() {
	that.fToastMessageGroup.visible = false;
};

// 네트웍 커넥트 체크
function checkSetGameDisconnect(aResult) {
	if (aResult === 202 || aResult === 303 || aResult === 401
			|| aResult === 501 || aResult === 606 || aResult === 1001
			|| aResult === 701 || aResult === 801 || aResult === 901
			|| aResult === 1201 || aResult === 1301 || aResult === 1401
			|| aResult === 1501 || aResult === 1601 || aResult === 1701) {
		return true;
	}
	return false;
}

// 확인 버튼만 있는 팝업창
Level1.prototype.setOneBluePopup = function(aExplan, aConfirm) {
	this.fPopupPublicB.visible = true;
	this.fTransImg703.inputEnabled = true;

	this.fPopupBtnCheck3.visible = true;
	this.fPopupBtnNo.visible = false;
	this.fPopupBtnYes.visible = false;

	this.gameUtil.setText(this.fContentsText, 0, 28, "center", "middle",
			aExplan);

	this.fPopupBtnCheck3.events.onInputDown.addOnce(aConfirm, this);
};

// 확인/취소 버튼이 있는 팝업창
Level1.prototype.setTwoBluePopup = function(aExplan, aConfirm, aCancel) {
	this.fPopupPublicB.visible = true;
	this.fTransImg703.inputEnabled = true;

	this.fPopupBtnCheck3.visible = false;
	this.fPopupBtnNo.visible = true;
	this.fPopupBtnYes.visible = true;

	this.gameUtil.setText(this.fContentsText, 0, 28, "center", "middle",
			aExplan);

	this.fPopupBtnYes.events.onInputDown.addOnce(aConfirm, this);
	this.fPopupBtnNo.events.onInputDown.addOnce(aCancel, this);
};

function confirmBlueListener() {
	// console.log("confirmBlueListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicB.visible = false;
}

Level1.prototype.cancelBlueListener = function() {
	// console.log("cancelBlueListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicB.visible = false;
};

// 확인 버튼만 있는 윈도우 종료 팝업창
Level1.prototype.setOneRedExitPopup = function(aExplan, aConfirm) {
	this.fPopupPublicRExit.visible = true;
	this.fTransImg704_Exit.inputEnabled = true;
	this.fPublicBtnExit2_Exit.visible = true;
	this.fPopupBtnCheck4_Exit.visible = true;
	this.fPopupBtnNoR_Exit.visible = false;
	this.fPopupBtnYesR_Exit.visible = false;

	this.gameUtil.setText(this.fContentsText2_Exit, 0, 28, "center", "middle",
			aExplan);
	this.fPopupBtnCheck4_Exit.events.onInputDown.addOnce(aConfirm, this);
};

// 확인 버튼만 있는 블루 윈도우 종료 팝업창
Level1.prototype.setOneBlueExitPopup = function(aExplan, aConfirm) {
	this.soundManager.play(that.soundManager.SOUND_TYPE.Popup);
	this.fPopupPublicBExit.visible = true;
	this.fTransImg704_BExit.inputEnabled = true;
	this.fPublicBtnExit2_BExit.visible = true;
	this.fPopupBtnCheck4_BExit.visible = true;
	this.fPopupBtnNoR_BExit.visible = false;
	this.fPopupBtnYesR_BExit.visible = false;

	this.gameUtil.setText(this.fContentsText2_BExit, 0, 28, "center", "middle",
			aExplan);
	this.fPopupBtnCheck4_BExit.events.onInputDown.addOnce(aConfirm, this);

};
// 확인 버튼만 있는 팝업창
Level1.prototype.setOneRedPopup = function(aExplan, aConfirm) {
	this.fPopupPublicR.visible = true;
	this.fTransImg704.inputEnabled = true;

	this.fPopupBtnCheck4.visible = true;
	this.fPopupBtnNoR.visible = false;
	this.fPopupBtnYesR.visible = false;

	this.gameUtil.setText(this.fContentsText2, 0, 28, "center", "middle",
			aExplan);
	this.fPopupBtnCheck3.events.onInputDown.addOnce(aConfirm, this);
};

// 확인/취소 버튼이 있는 팝업창
Level1.prototype.setTwoRedPopup = function(aExplan, aConfirm, aCancel) {
	this.fPopupPublicR.visible = true;
	this.fTransImg704.inputEnabled = true;

	this.fPopupBtnCheck4.visible = false;
	this.fPopupBtnNoR.visible = true;
	this.fPopupBtnYesR.visible = true;

	this.gameUtil.setText(this.fContentsText2, 0, 28, "center", "middle",
			aExplan);

	this.fPopupBtnYesR.events.onInputDown.addOnce(aConfirm, this);
	this.fPopupBtnNoR.events.onInputDown.addOnce(aCancel, this);
};
//레드 강제롱료 확인 리스너
function confirmRedExitListener() {
	// console.log("confirmGameExitListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicRExit.visible = false;
	self.close();
}
//레드 강제롱료 취소 리스너
Level1.prototype.cancelRedExitListener = function() {
	// console.log("cancelRedExitListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicRExit.visible = false;
	self.close();
};
//블루 강제롱료 확인 리스너
function confirmBlueExitListener() {
	// console.log("confirmGameBlueExitListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicBExit.visible = false;
	self.close();
}
//블루 강제롱료 취소 리스터
Level1.prototype.cancelBlueExitListener = function() {
	// console.log("cancelBlueExitListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	this.fPopupPublicBExit.visible = false;
	self.close();
};
//레드 확인 리스너
function confirmRedListener() {
	// console.log("confirmRedListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	that.fPopupPublicR.visible = false;
}
//레드 취소 리스터
Level1.prototype.cancelRedListener = function() {
	// console.log("cancelRedListener");
	this.soundManager.play(that.soundManager.SOUND_TYPE.Click);
	that.fPopupPublicR.visible = false;
};
//현재 시간 계산
Level1.prototype.nowTime = function() {
	var nowTime = new Date();
	var gap = nowTime.getTime() - this.oldTime.getTime();

	var roomPlayTime = (that.gameData.roomPlayTime * 60000);

	var sec_gap = Math.floor(((roomPlayTime - gap) / 1000) % 60);
	var min_gap = Math.floor((roomPlayTime - gap) / 1000 / 60);

	var sec_gap_str = sec_gap.toString();
	var min_gap_str = min_gap.toString();

	if (sec_gap < 10)
		sec_gap_str = "0" + sec_gap_str;
	if (min_gap < 10)
		min_gap_str = "0" + min_gap_str;

	if (sec_gap <= 0 && min_gap <= 0) {
		return "00:00";
	}

	// if (min_gap <= 0 && sec_gap <= 20 && this.isWarring === false) {
	// this.isWarring = true;
	//
	// var tween = this.game.add.tween(this.fUi_timePanel_Alert).to({
	// alpha : 1
	// }, 500, "Linear", true, 0, -1);
	// tween.yoyo(true, 100);
	// }

	// if (sec_gap <= 0 && min_gap <= 0) {
	// this.game.time.events.add(Phaser.Timer.SECOND * 2, function() {
	// that.setGameState(that.gameConst.GameStateType.INGAME_END);
	// }, this);
	// }

	return min_gap_str + ":" + sec_gap_str;
};

Level1.prototype.setEffectAttackFly = function() {

};

// 진동 체인 애니
Level1.prototype.shakeTween = function(aTweenObject, strength) {
	var tweenA = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x + (5 * strength),
		y : aTweenObject.y + (5 * strength)
	}, 10, "Linear");
	var tweenB = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x,
		y : aTweenObject.y
	}, 10, "Linear");
	var tweenC = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x + (2 * strength),
		y : aTweenObject.y + (2 * strength)
	}, 10, "Linear");
	var tweenD = this.game.add.tween(aTweenObject).to({
		x : aTweenObject.x,
		y : aTweenObject.y
	}, 10, "Linear");
	tweenA.chain(tweenB.chain(tweenC.chain(tweenD))).start();
};
//파티클 유닛 애니
Level1.prototype.particleUnit = function(aTweenObject, aEndEffectObject,
		aTargetX, aTargetY, aWidth, aHeight, aSpeed) {
	var randX = Math.floor(Math.random() * 30) - 15 + aWidth;
	var randY = Math.floor(Math.random() * 30) - 15 + aHeight;

	aTweenObject.x = aTweenObject.initX;
	aTweenObject.y = aTweenObject.initY;

	aTweenObject.scale.x = 1;
	aTweenObject.scale.y = 1;

	aTweenObject.visible = true;
	aTweenObject.alpha = 0;

	var tweenA = this.game.add.tween(aTweenObject).to({
		alpha : 1,
		x : aTweenObject.x + randX,
		y : aTweenObject.y + randY
	}, 500, "Quart.easeIn", false);
	var tweenB = this.game.add.tween(aTweenObject).to({
		x : aTargetX,
		y : aTargetY
	}, 700 - aSpeed, "Quart.easeIn", false, 200);

	tweenA.chain(tweenB).start();
	tweenB.onComplete.add(function() {
		aTweenObject.visible = false;
		aEndEffectObject.setPlay("SHOW", false);
	}, this);
};
