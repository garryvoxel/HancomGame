// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)

/**
 * BaseCharacterGame
 * 
 * @param {Phaser.Game}
 *            aGame A reference to the currently running game.
 * @param {Number}
 *            aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number}
 *            aY The y coordinate (in world space) to position the Sprite at.
 * @param {any}
 *            aKey This is the image or texture used by the Sprite during
 *            rendering. It can be a string which is a reference to the Cache
 *            entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any}
 *            aFrame If this Sprite is using part of a sprite sheet or texture
 *            atlas you can specify the exact frame to use by giving a string or
 *            numeric index.
 */
function BaseCharacterGame(aGame, aX, aY, aKey, aFrame) {
	this.beforeCreate();

	var pKey = aKey === undefined ? null : aKey;
	var pFrame = aFrame === undefined ? null : aFrame;

	Phaser.Sprite.call(this, aGame, aX, aY, pKey, pFrame);

	this.afterCreate();
}

/** @type Phaser.Sprite */
var BaseCharacterGame_proto = Object.create(Phaser.Sprite.prototype);
BaseCharacterGame.prototype = BaseCharacterGame_proto;
BaseCharacterGame.prototype.constructor = BaseCharacterGame;

BaseCharacterGame.prototype.beforeCreate = function() {

};

BaseCharacterGame.prototype.afterCreate = function() {
	
};

BaseCharacterGame.prototype.setPlay = function(aAnimaitonName) {
	if (this === undefined || this.animations === undefined) {
		console.log("BaseCharacterGame SetPlay undefined!!!");
		return;
	}
	
	if (this.visible === false)
		this.visible = true;
	if (this.alpha === 0)
		this.alpha = 1;

	switch (aAnimaitonName) {
	case "IDLE":
		this.animations.play("IDLE");
		break;
	case "RIGHT":
		this.animations.play("RIGHT");
		break;
	case "WRONG":
		this.animations.play("WRONG");
		break;
	}

//	console.log("BaseCharacterGame aAnimaitonName is " + aAnimaitonName);
};

BaseCharacterGame.prototype.update = function() {
	// 기존함수테스트
	this.gameProcess();
};

BaseCharacterGame.prototype.gameProcess = function() {
	this.processCharacter();
	this.animationOnComplete();
};

BaseCharacterGame.prototype.processCharacter = function() {

};

BaseCharacterGame.prototype.getCurAnimationName = function() {
	return this.animations.currentAnim.name;
};

BaseCharacterGame.prototype.checkCurrentAnimation = function(aAnimation) {
	var returnValue = this.animations.currentAnim.name === aAnimation ? true : false;
	return returnValue;
};

BaseCharacterGame.prototype.checkEndFrame = function(aAnimationName) {
	var returnValue = ((aAnimationName === this.animations.currentAnim.name) && this.animations.currentAnim.isFinished) ? true : false;
	return returnValue;
};

BaseCharacterGame.prototype.animationOnComplete = function() {
	if (this.animations.currentAnim.isFinished === false)
		return;

	switch (this.animations.currentAnim.name) {
	case "IDLE":
		this.setPlay("IDLE");
		break;
	case "RIGHT":
		this.setPlay("IDLE");
		break;
	case "WRONG":
		this.setPlay("IDLE");
		break;
	}
};