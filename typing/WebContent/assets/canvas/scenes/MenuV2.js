// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)

/**
 * MenuV2.
 */
function MenuV2() {

	Phaser.State.call(this);
	this.beforeConstruct();
	this.afterConstruct();

}

/** @type Phaser.State */
var MenuV2_proto = Object.create(Phaser.State.prototype);
MenuV2.prototype = MenuV2_proto;
MenuV2.prototype.constructor = MenuV2;

MenuV2.prototype.init = function() {

	this.beforeInit();

	this.afterInit();

};

MenuV2.prototype.preload = function() {

	this.beforePreload();

	this.afterPreload();

};

MenuV2.prototype.create = function() {

	this.beforeCreate();

	var _root = this.add.group();

	var _Main = this.add.group(_root);

	var _Back = this.add.group(_Main);

	this.add.tileSprite(0.0, 0.0, 168.96833038330078, 137.9376983642578,
			'WBasePanel', null, _Back);

	var _CharSheetUserGroup = this.add.group(_Back);

	this.add.sprite(0.0, 0.0, 'MenuPanelB', null, _Back);

	var _StageInfo11 = this.add.group(_Main);

	var _Step18 = this.add.group(_StageInfo11);
	_Step18.position.setTo(593.0, 191.0);

	var _StepBtn18 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step18);

	var _StepBtnSelect18 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, null, 1, null, null,
			_Step18);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step18);

	this.add.sprite(223.0, 177.0, 'TxtImgStep8', null, _Step18);

	var _StepComplete18 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step18);

	var _Step17 = this.add.group(_StageInfo11);
	_Step17.position.setTo(393.0, 191.0);

	var _StepBtn17 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step17);

	var _StepBtnSelect17 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, null, 1, null, null,
			_Step17);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step17);

	this.add.sprite(223.0, 177.0, 'TxtImgStep7', null, _Step17);

	var _StepComplete17 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step17);

	var _Step16 = this.add.group(_StageInfo11);
	_Step16.position.setTo(193.0, 191.0);

	var _StepBtn16 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step16);

	var _StepBtnSelect16 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, null, 1, null, null,
			_Step16);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step16);

	this.add.sprite(223.0, 177.0, 'TxtImgStep6', null, _Step16);

	var _StepComplete16 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step16);

	var _Step15 = this.add.group(_StageInfo11);
	_Step15.position.setTo(-7.0, 191.0);

	var _StepBtn15 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step15);

	var _StepBtnSelect15 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, null, 1, null, null,
			_Step15);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step15);

	this.add.sprite(223.0, 177.0, 'TxtImgStep5', null, _Step15);

	var _StepComplete15 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step15);

	var _Step14 = this.add.group(_StageInfo11);
	_Step14.position.setTo(593.0, -7.0);

	var _StepBtn14 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step14);

	var _StepBtnSelect14 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, null, 1, null, null,
			_Step14);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step14);

	this.add.sprite(223.0, 177.0, 'TxtImgStep4', null, _Step14);

	var _StepComplete14 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step14);

	var _Step13 = this.add.group(_StageInfo11);
	_Step13.position.setTo(393.0, -7.0);

	var _StepBtn13 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step13);

	var _StepBtnSelect13 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, null, 1, null, null,
			_Step13);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step13);

	this.add.sprite(223.0, 177.0, 'TxtImgStep3', null, _Step13);

	var _StepComplete13 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step13);

	var _Step12 = this.add.group(_StageInfo11);
	_Step12.position.setTo(193.0, -7.0);

	var _StepBtn12 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step12);

	var _StepBtnSelect12 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, null, 1, null, null,
			_Step12);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step12);

	this.add.sprite(223.0, 177.0, 'TxtImgStep2', null, _Step12);

	var _StepComplete12 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step12);

	var _Step11 = this.add.group(_StageInfo11);
	_Step11.position.setTo(-7.0, -7.0);

	var _StepBtn11 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step11);

	var _StepBtnSelect11 = this.add.button(197.0, 160.0, 'StepBtn',
			this.SeatPracticeMenuSelectButton, this, 1, 1, 1, 1, _Step11);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step11);

	this.add.sprite(223.0, 177.0, 'TxtImgStep1', null, _Step11);

	var _StepComplete11 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step11);

	var _KeyStepGroup09 = this.add.group(_StageInfo11);
	_KeyStepGroup09.position.setTo(5.0, -12.0);

	this.add.sprite(491.0, 464.0, 'KeyStep26e', null, _KeyStepGroup09);

	this.add.sprite(237.0, 464.0, 'KeyStep5', null, _KeyStepGroup09);

	this.add.sprite(883.0, 248.0, 'KeyStep4', null, _KeyStepGroup09);

	this.add.sprite(665.0, 248.0, 'KeyStep3', null, _KeyStepGroup09);

	this.add.sprite(429.0, 248.0, 'KeyStep2', null, _KeyStepGroup09);

	this.add.sprite(233.0, 257.0, 'KeyStep1', null, _KeyStepGroup09);

	var _KeyStepGroup10 = this.add.group(_StageInfo11);
	_KeyStepGroup10.position.setTo(5.0, -12.0);

	this.add.sprite(482.0, 464.0, 'KeyStep6', null, _KeyStepGroup10);

	this.add.sprite(237.0, 464.0, 'KeyStep5', null, _KeyStepGroup10);

	this.add.sprite(883.0, 248.0, 'KeyStep4', null, _KeyStepGroup10);

	this.add.sprite(665.0, 248.0, 'KeyStep3', null, _KeyStepGroup10);

	this.add.sprite(429.0, 248.0, 'KeyStep2', null, _KeyStepGroup10);

	this.add.sprite(233.0, 257.0, 'KeyStep1', null, _KeyStepGroup10);

	var _KeyStepGroup11 = this.add.group(_StageInfo11);

	this.add.sprite(818.0, 434.0, 'KeyStep8', null, _KeyStepGroup11);

	this.add.sprite(634.0, 434.0, 'KeyStep7', null, _KeyStepGroup11);

	this.add.sprite(487.0, 452.0, 'KeyStep6', null, _KeyStepGroup11);

	this.add.sprite(242.0, 452.0, 'KeyStep5', null, _KeyStepGroup11);

	this.add.sprite(888.0, 236.0, 'KeyStep4', null, _KeyStepGroup11);

	this.add.sprite(670.0, 236.0, 'KeyStep3', null, _KeyStepGroup11);

	this.add.sprite(434.0, 236.0, 'KeyStep2', null, _KeyStepGroup11);

	this.add.sprite(238.0, 245.0, 'KeyStep1', null, _KeyStepGroup11);

	var _KeyStepGroup12 = this.add.group(_StageInfo11);

	this.add.sprite(842.0, 443.0, 'KeyStep28', null, _KeyStepGroup12);

	this.add.sprite(618.0, 443.0, 'KeyStep27', null, _KeyStepGroup12);

	this.add.sprite(427.0, 425.0, 'KeyStep26', null, _KeyStepGroup12);

	this.add.sprite(283.0, 443.0, 'KeyStep25', null, _KeyStepGroup12);

	this.add.sprite(842.0, 227.0, 'KeyStep24', null, _KeyStepGroup12);

	this.add.sprite(679.0, 236.0, 'KeyStep23', null, _KeyStepGroup12);

	this.add.sprite(434.0, 236.0, 'KeyStep22', null, _KeyStepGroup12);

	this.add.sprite(238.0, 245.0, 'KeyStep1', null, _KeyStepGroup12);

	var _KeyStepGroup13 = this.add.group(_StageInfo11);

	this.add.sprite(827.0, 425.0, 'KeyStepS81', null, _KeyStepGroup13);

	this.add.sprite(618.0, 425.0, 'KeyStepS71', null, _KeyStepGroup13);

	this.add.sprite(427.0, 425.0, 'KeyStepS6', null, _KeyStepGroup13);

	this.add.sprite(283.0, 443.0, 'KeyStepS5', null, _KeyStepGroup13);

	this.add.sprite(842.0, 227.0, 'KeyStepS41', null, _KeyStepGroup13);

	this.add.sprite(679.0, 236.0, 'KeyStepS3', null, _KeyStepGroup13);

	this.add.sprite(434.0, 236.0, 'KeyStepS2', null, _KeyStepGroup13);

	this.add.sprite(238.0, 245.0, 'KeyStepS1', null, _KeyStepGroup13);

	var _KeyStepGroup14 = this.add.group(_StageInfo11);

	this.add.sprite(842.0, 452.0, 'KeyStepS82', null, _KeyStepGroup14);

	this.add.sprite(618.0, 425.0, 'KeyStepS72', null, _KeyStepGroup14);

	this.add.sprite(427.0, 425.0, 'KeyStepS6', null, _KeyStepGroup14);

	this.add.sprite(283.0, 443.0, 'KeyStepS5', null, _KeyStepGroup14);

	this.add.sprite(842.0, 227.0, 'KeyStepS42', null, _KeyStepGroup14);

	this.add.sprite(679.0, 236.0, 'KeyStepS3', null, _KeyStepGroup14);

	this.add.sprite(434.0, 236.0, 'KeyStepS2', null, _KeyStepGroup14);

	this.add.sprite(238.0, 245.0, 'KeyStepS1', null, _KeyStepGroup14);

	this.add.sprite(192.0, 71.0, 'StageTxtInfo1', null, _StageInfo11);

	this.add.text(197.0, 15.0, '자리 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo11);

	var _StageInfo12 = this.add.group(_Main);

	this.add.sprite(174.0, 184.0, 'InputKeyboardBack', null, _StageInfo12);

	var _Stage1SelectCursor = this.add.sprite(400.0, 188.0,
			'Stage1SelectCursor', null, _StageInfo12);

	var _TweenTextGroup = this.add.group(_StageInfo12);

	var _WordLine2 = this.add.group(_TweenTextGroup);
	_WordLine2.position.setTo(212.0, 191.0);

	var _SingleWord25 = this.add.text(652.0, 9.0, 'ㅏ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine2);

	var _SingleWord24 = this.add.text(507.0, 9.0, 'ㅓ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine2);

	var _SingleWord23 = this.add.text(362.0, 9.0, 'ㄹ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine2);

	var _SingleWord22 = this.add.text(217.0, 9.0, 'ㄴ', {
		"font" : "54px 나눔고딕",
		"fill" : "#42e6d9",
		"align" : "center"
	}, _WordLine2);

	var _SingleWord21 = this.add.text(72.0, 9.0, 'ㅇ', {
		"font" : "54px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _WordLine2);

	var _WordLine3 = this.add.group(_TweenTextGroup);
	_WordLine3.position.setTo(212.0, 291.0);

	var _SingleWord35 = this.add.text(652.0, 9.0, 'ㅏ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine3);

	var _SingleWord34 = this.add.text(507.0, 9.0, 'ㅓ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine3);

	var _SingleWord33 = this.add.text(362.0, 9.0, 'ㄹ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine3);

	var _SingleWord32 = this.add.text(217.0, 9.0, 'ㄴ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine3);

	var _SingleWord31 = this.add.text(72.0, 9.0, 'ㅇ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine3);

	var _ShowTextGroup = this.add.group(_StageInfo12);

	var _WordLine1 = this.add.group(_ShowTextGroup);
	_WordLine1.position.setTo(212.0, 191.0);

	var _SingleWord15 = this.add.text(652.0, 9.0, ';', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine1);

	var _SingleWord14 = this.add.text(507.0, 9.0, 'ㅓ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine1);

	var _SingleWord13 = this.add.text(362.0, 9.0, 'ㄹ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine1);

	var _SingleWord12 = this.add.text(217.0, 9.0, 'ㄴ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine1);

	var _SingleWord11 = this.add.text(72.0, 9.0, 'ㅇ', {
		"font" : "54px 나눔고딕",
		"align" : "center"
	}, _WordLine1);

	var _TxtImgCho1 = this.add.sprite(70.0, 2.0, 'TxtImgCho', null, _WordLine1);

	var _TxtImgJong1 = this.add.sprite(70.0, 51.0, 'TxtImgJong', null,
			_WordLine1);

	var _TxtImgCho2 = this.add
			.sprite(215.0, 2.0, 'TxtImgCho', null, _WordLine1);

	var _TxtImgJong2 = this.add.sprite(215.0, 51.0, 'TxtImgJong', null,
			_WordLine1);

	var _TxtImgCho3 = this.add
			.sprite(360.0, 2.0, 'TxtImgCho', null, _WordLine1);

	var _TxtImgJong3 = this.add.sprite(360.0, 51.0, 'TxtImgJong', null,
			_WordLine1);

	var _TxtImgCho4 = this.add
			.sprite(505.0, 2.0, 'TxtImgCho', null, _WordLine1);

	var _TxtImgJong4 = this.add.sprite(505.0, 51.0, 'TxtImgJong', null,
			_WordLine1);

	var _TxtImgCho5 = this.add
			.sprite(650.0, 2.0, 'TxtImgCho', null, _WordLine1);

	var _TxtImgJong5 = this.add.sprite(650.0, 51.0, 'TxtImgJong', null,
			_WordLine1);

	this.add.sprite(150.0, 60.0, 'InputKeyboard', null, _StageInfo12);

	var _SelectRedKey122 = this.add.sprite(830.0, 430.0, 'SelectRedKey3', null,
			_StageInfo12);

	var _SelectRedKey121 = this.add.sprite(211.0, 430.0, 'SelectRedKey2', null,
			_StageInfo12);

	var _SelectRedKey12 = this.add.sprite(542.0, 331.0, 'SelectRedKey1', null,
			_StageInfo12);

	var _KeyTxtkor = this.add.sprite(207.0, 277.0, 'KeyTxtkor1', null,
			_StageInfo12);

	var _KeyTxtEn = this.add.sprite(207.0, 277.0, 'KeyTxtEn1', null,
			_StageInfo12);

	var _ProcessGauge12 = this.add.tileSprite(237.0, 165.0, 100.0, 6.0,
			'WBasePanel2', null, _StageInfo12);
	_ProcessGauge12.tint = 0xffbc00;

	var _WrongTypingGauge12 = this.add.tileSprite(517.0, 165.0, 100.0, 6.0,
			'WBasePanel2', null, _StageInfo12);
	_WrongTypingGauge12.tint = 0x00e6ed;

	var _AccuracyGauge12 = this.add.tileSprite(780.0, 165.0, 100.0, 6.0,
			'WBasePanel2', null, _StageInfo12);
	_AccuracyGauge12.tint = 0xce5fff;

	var _ProcessPersent12 = this.add.text(344.0, 148.0, '100%', {
		"font" : "18px 나눔고딕"
	}, _StageInfo12);

	var _WrongTypingNum12 = this.add.text(623.0, 147.0, '999', {
		"font" : "18px 나눔고딕"
	}, _StageInfo12);

	var _Accuracy12 = this.add.text(887.0, 148.0, '100 %', {
		"font" : "18px 나눔고딕"
	}, _StageInfo12);

	var _StepSetGroup12 = this.add.group(_StageInfo12);
	_StepSetGroup12.position.setTo(196.0, 73.0);

	var _StepSetNum121 = this.add.button(116.0, 7.0, 'StepSetNum1',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _StepSetNum122 = this.add.button(155.0, 7.0, 'StepSetNum2',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _StepSetNum123 = this.add.button(194.0, 7.0, 'StepSetNum3',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _StepSetNum124 = this.add.button(233.0, 7.0, 'StepSetNum4',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _StepSetNum125 = this.add.button(272.0, 7.0, 'StepSetNum5',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _StepSetNum126 = this.add.button(311.0, 7.0, 'StepSetNum6',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _StepSetNum127 = this.add.button(350.0, 7.0, 'StepSetNum7',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _StepSetNum128 = this.add.button(389.0, 7.0, 'StepSetNum8',
			this.SeatPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup12);

	var _HandToggle = this.add.button(779.0, 74.0, 'HandToggle',
			this.SeatPracticeFingerButton, this, null, 0, null, null,
			_StageInfo12);

	this.add.text(197.0, 15.0, '자리 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo12);

	var _StageInfo21 = this.add.group(_Main);

	var _Step28 = this.add.group(_StageInfo21);
	_Step28.position.setTo(593.0, 191.0);

	var _StepBtn28 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step28);

	var _StepBtnSelect28 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step28);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step28);

	this.add.sprite(223.0, 177.0, 'TxtImgStep8', null, _Step28);

	var _StepComplete28 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step28);

	var _Step27 = this.add.group(_StageInfo21);
	_Step27.position.setTo(393.0, 191.0);

	var _StepBtn27 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step27);

	var _StepBtnSelect27 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step27);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step27);

	this.add.sprite(223.0, 177.0, 'TxtImgStep7', null, _Step27);

	var _StepComplete27 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step27);

	var _Step26 = this.add.group(_StageInfo21);
	_Step26.position.setTo(193.0, 191.0);

	var _StepBtn26 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step26);

	var _StepBtnSelect26 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step26);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step26);

	this.add.sprite(223.0, 177.0, 'TxtImgStep6', null, _Step26);

	var _StepComplete26 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step26);

	var _Step25 = this.add.group(_StageInfo21);
	_Step25.position.setTo(-7.0, 191.0);

	var _StepBtn25 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step25);

	var _StepBtnSelect25 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step25);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step25);

	this.add.sprite(223.0, 177.0, 'TxtImgStep5', null, _Step25);

	var _StepComplete25 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step25);

	var _Step24 = this.add.group(_StageInfo21);
	_Step24.position.setTo(593.0, -7.0);

	var _StepBtn24 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step24);

	var _StepBtnSelect24 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step24);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step24);

	this.add.sprite(223.0, 177.0, 'TxtImgStep4', null, _Step24);

	var _StepComplete24 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step24);

	var _Step23 = this.add.group(_StageInfo21);
	_Step23.position.setTo(393.0, -7.0);

	var _StepBtn23 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step23);

	var _StepBtnSelect23 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step23);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step23);

	this.add.sprite(223.0, 177.0, 'TxtImgStep3', null, _Step23);

	var _StepComplete23 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step23);

	var _Step22 = this.add.group(_StageInfo21);
	_Step22.position.setTo(193.0, -7.0);

	var _StepBtn22 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step22);

	var _StepBtnSelect22 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step22);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step22);

	this.add.sprite(223.0, 177.0, 'TxtImgStep2', null, _Step22);

	var _StepComplete22 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step22);

	var _Step21 = this.add.group(_StageInfo21);
	_Step21.position.setTo(-7.0, -7.0);

	var _StepBtn21 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, 2, 0, 0, 0, _Step21);

	var _StepBtnSelect21 = this.add.button(197.0, 160.0, 'StepBtn',
			this.WordPracticeMenuSelectButton, this, null, 1, null, null,
			_Step21);

	this.add.sprite(222.0, 231.0, 'LittleKeyboard', null, _Step21);

	this.add.sprite(223.0, 177.0, 'TxtImgStep1', null, _Step21);

	var _StepComplete21 = this.add.button(214.0, 307.0, 'StepCompleteSheet',
			null, this, null, 0, null, null, _Step21);

	var _KeyStepGroup19 = this.add.group(_StageInfo21);
	_KeyStepGroup19.position.setTo(5.0, -12.0);

	this.add.sprite(491.0, 464.0, 'KeyStep6', null, _KeyStepGroup19);

	this.add.sprite(237.0, 464.0, 'KeyStep5', null, _KeyStepGroup19);

	this.add.sprite(883.0, 248.0, 'KeyStep4', null, _KeyStepGroup19);

	this.add.sprite(665.0, 248.0, 'KeyStep3', null, _KeyStepGroup19);

	this.add.sprite(429.0, 248.0, 'KeyStep2', null, _KeyStepGroup19);

	this.add.sprite(233.0, 257.0, 'KeyStep1', null, _KeyStepGroup19);

	var _KeyStepGroup20 = this.add.group(_StageInfo21);
	_KeyStepGroup20.position.setTo(1.0, 0.0);

	this.add.sprite(486.0, 452.0, 'KeyStep6', null, _KeyStepGroup20);

	this.add.sprite(241.0, 452.0, 'KeyStep5', null, _KeyStepGroup20);

	this.add.sprite(887.0, 236.0, 'KeyStep4', null, _KeyStepGroup20);

	this.add.sprite(669.0, 236.0, 'KeyStep3', null, _KeyStepGroup20);

	this.add.sprite(433.0, 236.0, 'KeyStep2', null, _KeyStepGroup20);

	this.add.sprite(237.0, 245.0, 'KeyStep1', null, _KeyStepGroup20);

	var _KeyStepGroup21 = this.add.group(_StageInfo21);
	_KeyStepGroup21.position.setTo(5.0, -12.0);

	this.add.sprite(813.0, 446.0, 'KeyStep8', null, _KeyStepGroup21);

	this.add.sprite(629.0, 446.0, 'KeyStep7', null, _KeyStepGroup21);

	this.add.sprite(482.0, 464.0, 'KeyStep6', null, _KeyStepGroup21);

	this.add.sprite(237.0, 464.0, 'KeyStep5', null, _KeyStepGroup21);

	this.add.sprite(883.0, 248.0, 'KeyStep4', null, _KeyStepGroup21);

	this.add.sprite(665.0, 248.0, 'KeyStep3', null, _KeyStepGroup21);

	this.add.sprite(429.0, 248.0, 'KeyStep2', null, _KeyStepGroup21);

	this.add.sprite(233.0, 257.0, 'KeyStep1', null, _KeyStepGroup21);

	var _KeyStepGroup22 = this.add.group(_StageInfo21);
	_KeyStepGroup22.position.setTo(5.0, -12.0);

	this.add.sprite(837.0, 455.0, 'KeyStep28', null, _KeyStepGroup22);

	this.add.sprite(613.0, 455.0, 'KeyStep27', null, _KeyStepGroup22);

	this.add.sprite(422.0, 437.0, 'KeyStep26', null, _KeyStepGroup22);

	this.add.sprite(278.0, 455.0, 'KeyStep25', null, _KeyStepGroup22);

	this.add.sprite(837.0, 239.0, 'KeyStep24', null, _KeyStepGroup22);

	this.add.sprite(674.0, 248.0, 'KeyStep23', null, _KeyStepGroup22);

	this.add.sprite(429.0, 248.0, 'KeyStep22', null, _KeyStepGroup22);

	this.add.sprite(233.0, 257.0, 'KeyStep1', null, _KeyStepGroup22);

	var _KeyStepGroup23 = this.add.group(_StageInfo21);

	this.add.sprite(827.0, 425.0, 'KeyStepS81', null, _KeyStepGroup23);

	this.add.sprite(618.0, 425.0, 'KeyStepS71', null, _KeyStepGroup23);

	this.add.sprite(427.0, 425.0, 'KeyStepS6', null, _KeyStepGroup23);

	this.add.sprite(283.0, 443.0, 'KeyStepS5', null, _KeyStepGroup23);

	this.add.sprite(842.0, 227.0, 'KeyStepS41', null, _KeyStepGroup23);

	this.add.sprite(679.0, 236.0, 'KeyStepS3', null, _KeyStepGroup23);

	this.add.sprite(434.0, 236.0, 'KeyStepS2', null, _KeyStepGroup23);

	this.add.sprite(238.0, 245.0, 'KeyStepS1', null, _KeyStepGroup23);

	var _KeyStepGroup24 = this.add.group(_StageInfo21);

	this.add.sprite(842.0, 452.0, 'KeyStepS82', null, _KeyStepGroup24);

	this.add.sprite(618.0, 425.0, 'KeyStepS72', null, _KeyStepGroup24);

	this.add.sprite(427.0, 425.0, 'KeyStepS6', null, _KeyStepGroup24);

	this.add.sprite(283.0, 443.0, 'KeyStepS5', null, _KeyStepGroup24);

	this.add.sprite(842.0, 227.0, 'KeyStepS42', null, _KeyStepGroup24);

	this.add.sprite(679.0, 236.0, 'KeyStepS3', null, _KeyStepGroup24);

	this.add.sprite(434.0, 236.0, 'KeyStepS2', null, _KeyStepGroup24);

	this.add.sprite(238.0, 245.0, 'KeyStepS1', null, _KeyStepGroup24);

	this.add.sprite(192.0, 71.0, 'StageTxtInfo2', null, _StageInfo21);

	this.add.text(197.0, 15.0, '낱말 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo21);

	var _StageInfo22 = this.add.group(_Main);

	this.add.sprite(175.0, 184.0, 'InputKeyboardBack', null, _StageInfo22);

	var _Stage2SelectCursor = this.add.sprite(235.0, 188.0,
			'Stage2SelectCursor', null, _StageInfo22);
	_Stage2SelectCursor.scale.setTo(1.15, 1.0);

	var _TweenTextGroup2 = this.add.group(_StageInfo22);

	var _WordsLine2 = this.add.group(_TweenTextGroup2);
	_WordsLine2.position.setTo(155.0, 190.0);

	var _SingleWordsMe25 = this.add.text(666.0, 42.0, '편견', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWordsMe24 = this.add.text(521.5, 42.0, '모래', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWordsMe23 = this.add.text(377.0, 42.0, '짜장면', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWordsMe22 = this.add.text(232.5, 42.0, '여닫다라', {
		"font" : "24px 나눔고딕",
		"fill" : "#42e6d9",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWordsMe21 = this.add.text(88.0, 42.0, '고래', {
		"font" : "24px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWords25 = this.add.text(666.0, 8.0, '편견', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWords24 = this.add.text(521.5, 8.0, '모래', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWords23 = this.add.text(377.0, 8.0, '짜장면', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWords22 = this.add.text(232.5, 8.0, '여닫다라', {
		"font" : "24px 나눔고딕",
		"fill" : "#42e6d9",
		"align" : "center"
	}, _WordsLine2);

	var _SingleWords21 = this.add.text(88.0, 8.0, '고래', {
		"font" : "24px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _WordsLine2);

	var _WordsLine3 = this.add.group(_TweenTextGroup2);
	_WordsLine3.position.setTo(155.0, 290.0);

	var _SingleWordsMe35 = this.add.text(666.0, 42.0, '편견', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWordsMe34 = this.add.text(521.5, 42.0, '모래', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWordsMe33 = this.add.text(377.0, 42.0, '짜장면', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWordsMe32 = this.add.text(232.5, 42.0, '여닫다라', {
		"font" : "24px 나눔고딕",
		"fill" : "#42e6d9",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWordsMe31 = this.add.text(88.0, 42.0, '고래', {
		"font" : "24px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWords35 = this.add.text(666.0, 8.0, '편견', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWords34 = this.add.text(521.5, 8.0, '모래', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWords33 = this.add.text(377.0, 8.0, '짜장면', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWords32 = this.add.text(232.5, 8.0, '여닫다라', {
		"font" : "24px 나눔고딕",
		"fill" : "#42e6d9",
		"align" : "center"
	}, _WordsLine3);

	var _SingleWords31 = this.add.text(88.0, 8.0, '고래', {
		"font" : "24px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _WordsLine3);

	var _ShowTextGroup2 = this.add.group(_StageInfo22);

	var _WordsLine1 = this.add.group(_ShowTextGroup2);
	_WordsLine1.position.setTo(155.0, 190.0);

	var _SingleWordsMe15 = this.add.text(666.0, 42.0, '편견', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWordsMe14 = this.add.text(521.5, 42.0, '모래', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWordsMe13 = this.add.text(377.0, 42.0, '짜장면', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWordsMe12 = this.add.text(232.5, 42.0, '여닫다라', {
		"font" : "24px 나눔고딕",
		"fill" : "#42e6d9",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWordsMe11 = this.add.text(88.0, 42.0, '고래', {
		"font" : "24px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWords15 = this.add.text(666.0, 8.0, '편견', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWords14 = this.add.text(521.5, 8.0, '모래', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWords13 = this.add.text(377.0, 8.0, '짜장면', {
		"font" : "24px 나눔고딕",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWords12 = this.add.text(232.5, 8.0, '여닫다라', {
		"font" : "24px 나눔고딕",
		"fill" : "#42e6d9",
		"align" : "center"
	}, _WordsLine1);

	var _SingleWords11 = this.add.text(88.0, 8.0, '고래', {
		"font" : "24px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _WordsLine1);

	var _WordInputCursor = this.add.sprite(243.0, 231.0, 'InputCursor', null,
			_StageInfo22);
	_WordInputCursor.scale.setTo(1.0, 1.5);

	var _WordInputCursorAni = new PrefabInputCursor(this.game, 243.0, 231.0);
	_StageInfo22.add(_WordInputCursorAni);

	this.add.sprite(150.0, 60.0, 'InputKeyboard', null, _StageInfo22);

	var _SelectRedKey222 = this.add.sprite(830.0, 430.0, 'SelectRedKey3', null,
			_StageInfo22);

	var _SelectRedKey221 = this.add.sprite(211.0, 430.0, 'SelectRedKey2', null,
			_StageInfo22);

	var _SelectRedKey22 = this.add.sprite(542.0, 331.0, 'SelectRedKey1', null,
			_StageInfo22);

	var _KeyTxtkor22 = this.add.sprite(207.0, 277.0, 'KeyTxtkor1', null,
			_StageInfo22);

	var _KeyTxtEn22 = this.add.sprite(207.0, 277.0, 'KeyTxtEn1', null,
			_StageInfo22);

	var _ProcessGauge22 = this.add.tileSprite(237.0, 165.0, 100.0, 6.0,
			'WBasePanel2', null, _StageInfo22);
	_ProcessGauge22.tint = 0xffbc00;

	var _WrongTypingGauge22 = this.add.tileSprite(517.0, 165.0, 100.0, 6.0,
			'WBasePanel2', null, _StageInfo22);
	_WrongTypingGauge22.tint = 0x00e6ed;

	var _AccuracyGauge22 = this.add.tileSprite(780.0, 165.0, 100.0, 6.0,
			'WBasePanel2', null, _StageInfo22);
	_AccuracyGauge22.tint = 0xce5fff;

	var _ProcessPersent22 = this.add.text(344.0, 148.0, '100%', {
		"font" : "18px 나눔고딕"
	}, _StageInfo22);

	var _WrongTypingNum22 = this.add.text(622.0, 148.0, '999', {
		"font" : "18px 나눔고딕"
	}, _StageInfo22);

	var _Accuracy22 = this.add.text(887.0, 148.0, '100%', {
		"font" : "18px 나눔고딕"
	}, _StageInfo22);

	var _StepSetGroup22 = this.add.group(_StageInfo22);
	_StepSetGroup22.position.setTo(196.0, 73.0);

	var _StepSetNum221 = this.add.button(116.0, 7.0, 'StepSetNum1',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _StepSetNum222 = this.add.button(155.0, 7.0, 'StepSetNum2',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _StepSetNum223 = this.add.button(194.0, 7.0, 'StepSetNum3',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _StepSetNum224 = this.add.button(233.0, 7.0, 'StepSetNum4',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _StepSetNum225 = this.add.button(272.0, 7.0, 'StepSetNum5',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _StepSetNum226 = this.add.button(311.0, 7.0, 'StepSetNum6',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _StepSetNum227 = this.add.button(350.0, 7.0, 'StepSetNum7',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _StepSetNum228 = this.add.button(389.0, 7.0, 'StepSetNum8',
			this.WordPracticeSelectButton, this, null, 0, null, null,
			_StepSetGroup22);

	var _HandToggle2 = this.add.button(779.0, 74.0, 'HandToggle',
			this.WordPracticeFingerButton, this, null, 0, null, null,
			_StageInfo22);

	this.add.text(197.0, 15.0, '낱말 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo22);

	var _StageInfo31 = this.add.group(_Main);

	var _ListBox1 = this.add.group(_StageInfo31);
	_ListBox1.position.setTo(190.0, 263.0);

	var _Stage31StepBtn1 = this.add.button(0.0, 0.0, 'StepBtn',
			this.ShortPracticeMenuSelectButton, this, 2, 0, 0, 0, _ListBox1);

	this.add.sprite(50.0, 77.0, 'ShortWordTypeIcon1', null, _ListBox1);

	this.add.text(26.0, 19.0, '모든 문장', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _ListBox1);

	var _ListBox2 = this.add.group(_StageInfo31);
	_ListBox2.position.setTo(390.0, 263.0);

	var _Stage31StepBtn2 = this.add.button(0.0, 0.0, 'StepBtn',
			this.ShortPracticeMenuSelectButton, this, 2, 0, 0, 0, _ListBox2);

	this.add.sprite(50.0, 77.0, 'ShortWordTypeIcon2', null, _ListBox2);

	this.add.text(27.0, 19.0, '역사/문화', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _ListBox2);

	var _ListBox3 = this.add.group(_StageInfo31);
	_ListBox3.position.setTo(590.0, 263.0);

	var _Stage31StepBtn3 = this.add.button(0.0, 0.0, 'StepBtn',
			this.ShortPracticeMenuSelectButton, this, 2, 0, 0, 0, _ListBox3);

	this.add.sprite(50.0, 77.0, 'ShortWordTypeIcon3', null, _ListBox3);

	this.add.text(26.0, 19.0, '속담/명언', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _ListBox3);

	var _ListBox4 = this.add.group(_StageInfo31);
	_ListBox4.position.setTo(790.0, 263.0);

	var _Stage31StepBtn4 = this.add.button(0.0, 0.0, 'StepBtn',
			this.ShortPracticeMenuSelectButton, this, 2, 0, 0, 0, _ListBox4);

	this.add.sprite(50.0, 77.0, 'ShortWordTypeIcon4', null, _ListBox4);

	this.add.text(27.0, 19.0, '기타', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _ListBox4);

	this.add.sprite(192.0, 111.0, 'StageTxtInfo3', null, _StageInfo31);

	this.add.text(196.0, 15.0, '짧은 글 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo31);

	var _BtnShortWordEvent = this.add.button(818.0, 489.0, 'BtnShortWordEvent',
			this.ShortEventButton, this, 1, 0, 0, 0, _StageInfo31);

	var _StageInfo32 = this.add.group(_Main);

	this.add.sprite(192.0, 155.0, 'Stage3InputPanel', null, _StageInfo32);

	this.add.sprite(212.0, 258.0, 'Stage3SelectCursor', null, _StageInfo32);

	this.add.sprite(225.0, 403.0, 'Stage3UpArrowIcon', null, _StageInfo32);

	var _ShortWordList11 = this.add.text(272.0, 230.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#ffffff",
				"align" : "center"
			}, _StageInfo32);

	var _ShortWordList12 = this.add.text(272.0, 267.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#ffffff",
				"align" : "center"
			}, _StageInfo32);

	var _ShortWordList21 = this.add.text(272.0, 317.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#001c58",
				"align" : "center"
			}, _StageInfo32);

	var _ShortWordList22 = this.add.text(272.0, 353.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#ffffff",
				"align" : "center"
			}, _StageInfo32);

	var _ShortWordList3 = this.add.text(272.0, 403.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#20a5f9",
				"align" : "center"
			}, _StageInfo32);

	var _ShortWordList4 = this.add.text(272.0, 433.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#20a5f9",
				"align" : "center"
			}, _StageInfo32);

	var _ShortWordList5 = this.add.text(272.0, 463.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#20a5f9",
				"align" : "center"
			}, _StageInfo32);

	var _ShortWordList6 = this.add.text(272.0, 493.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#20a5f9",
				"align" : "center"
			}, _StageInfo32);

	var _ShortInputCursor = this.add.sprite(272.0, 353.0, 'InputCursor', null,
			_StageInfo32);
	_ShortInputCursor.scale.setTo(1.0, 1.3);

	var _ShortInputCursorAni = new PrefabInputCursor(this.game, 272.0, 351.0);
	_StageInfo32.add(_ShortInputCursorAni);

	var _ProcessGauge32 = this.add.tileSprite(237.0, 194.0, 50.0, 6.0,
			'WBasePanel2', null, _StageInfo32);
	_ProcessGauge32.tint = 0xffbc00;

	var _NowGauge32 = this.add.tileSprite(398.0, 194.0, 50.0, 6.0,
			'WBasePanel2', null, _StageInfo32);
	_NowGauge32.tint = 0xff5a00;

	var _BestGauge32 = this.add.tileSprite(541.0, 194.0, 50.0, 6.0,
			'WBasePanel2', null, _StageInfo32);
	_BestGauge32.tint = 0x7fff00;

	var _GoalGauge32 = this.add.tileSprite(684.0, 194.0, 50.0, 6.0,
			'WBasePanel2', null, _StageInfo32);
	_GoalGauge32.tint = 0x00c0ff;

	var _AccuracyGauge32 = this.add.tileSprite(827.0, 194.0, 50.0, 6.0,
			'WBasePanel2', null, _StageInfo32);
	_AccuracyGauge32.tint = 0xce5fff;

	var _ProcessPersent32 = this.add.text(299.0, 177.0, '100%', {
		"font" : "18px 나눔고딕"
	}, _StageInfo32);

	var _Now32 = this.add.text(459.0, 177.0, '999', {
		"font" : "18px 나눔고딕"
	}, _StageInfo32);

	var _Best32 = this.add.text(601.0, 177.0, '999', {
		"font" : "18px 나눔고딕"
	}, _StageInfo32);

	var _Goal32 = this.add.text(744.0, 177.0, '999', {
		"font" : "18px 나눔고딕"
	}, _StageInfo32);

	var _Accuracy32 = this.add.text(889.0, 177.0, '100%', {
		"font" : "18px 나눔고딕"
	}, _StageInfo32);

	this.add.sprite(192.0, 71.0, 'StageTxtInfo3', null, _StageInfo32);

	this.add.text(196.0, 15.0, '짧은 글 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo32);

	var _StageInfo41 = this.add.group(_Main);

	this.add.sprite(192.0, 185.0, 'TapPanelImg', null, _StageInfo41);

	var _ListTapLoad41 = this.add.button(565.0, 156.0, 'ListTapLoad',
			this.LongPracticeMenuToggle, this, null, 0, null, null,
			_StageInfo41);

	var _ListTapSelect341 = this.add.button(317.0, 156.0, 'ListTapSelect3',
			this.LongPracticeMenuToggle, this, null, 0, null, null,
			_StageInfo41);

	var _ListTapSelect41 = this.add.button(441.0, 156.0, 'ListTapSelect',
			this.LongPracticeMenuToggle, this, null, 0, null, null,
			_StageInfo41);

	var _ListTapSelect241 = this.add.button(193.0, 156.0, 'ListTapSelect2',
			this.LongPracticeMenuToggle, this, null, 0, null, null,
			_StageInfo41);

	this.add.button(460.0, 502.0, 'ListBtnTest',
			this.LongPracticeMenuTestButton, this, 1, 0, 0, 0, _StageInfo41);

	var _ListBtnPractice41 = this.add.button(590.0, 502.0, 'ListBtnPractice',
			this.LongPracticeMenuSelectButton, this, 1, 0, 0, 0, _StageInfo41);

	var _TapStorySelect = this.add.group(_StageInfo41);
	_TapStorySelect.position.setTo(-24.0, 0.0);

	var _ListBtnLeftArrow41 = this.add.button(246.0, 310.0, 'ListBtnLeftArrow',
			this.LongPracticeMenuLeftButton, this, 1, 0, 0, 0, _TapStorySelect);

	var _ListBtnRightArrow41 = this.add.button(924.0, 310.0,
			'ListBtnRightArrow', this.LongPracticeMenuRightButton, this, 1, 0,
			0, 0, _TapStorySelect);

	var _LongWordSetList6 = this.add.group(_TapStorySelect);
	_LongWordSetList6.position.setTo(321.0, 405.0);

	var _ListBtnBar6 = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList6);

	var _ListbarPracticeComplete6 = this.add.sprite(414.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList6);

	var _ListbarTestComplete6 = this.add.sprite(496.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList6);

	var _ListTitleTxt6 = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList6);

	var _LongWordSetList5 = this.add.group(_TapStorySelect);
	_LongWordSetList5.position.setTo(321.0, 368.0);

	var _ListBtnBar5 = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList5);

	var _ListbarPracticeComplete5 = this.add.sprite(414.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList5);

	var _ListbarTestComplete5 = this.add.sprite(496.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList5);

	var _ListTitleTxt5 = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList5);

	var _LongWordSetList4 = this.add.group(_TapStorySelect);
	_LongWordSetList4.position.setTo(321.0, 331.0);

	var _ListBtnBar4 = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList4);

	var _ListbarPracticeComplete4 = this.add.sprite(414.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList4);

	var _ListbarTestComplete4 = this.add.sprite(496.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList4);

	var _ListTitleTxt4 = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList4);

	var _LongWordSetList3 = this.add.group(_TapStorySelect);
	_LongWordSetList3.position.setTo(321.0, 294.0);

	var _ListBtnBar3 = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList3);

	var _ListbarPracticeComplete3 = this.add.sprite(414.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList3);

	var _ListbarTestComplete3 = this.add.sprite(496.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList3);

	var _ListTitleTxt3 = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList3);

	var _LongWordSetList2 = this.add.group(_TapStorySelect);
	_LongWordSetList2.position.setTo(321.0, 257.0);

	var _ListBtnBar2 = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList2);

	var _ListbarPracticeComplete2 = this.add.sprite(414.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList2);

	var _ListbarTestComplete2 = this.add.sprite(496.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList2);

	var _ListTitleTxt2 = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList2);

	var _LongWordSetList1 = this.add.group(_TapStorySelect);
	_LongWordSetList1.position.setTo(321.0, 220.0);

	var _ListBtnBar1 = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, 0, 0,
			_LongWordSetList1);

	var _ListbarPracticeComplete1 = this.add.sprite(414.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList1);

	var _ListbarTestComplete1 = this.add.sprite(496.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList1);

	var _ListTitleTxt1 = this.add.text(32.0, 7.0, '이 나라 사람들에 대해 아시나요?', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList1);

	var _PageNum41 = this.add.text(602.0, 454.0, '2/10', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748",
		"align" : "center"
	}, _TapStorySelect);

	var _ListBtnTestResult41 = this.add.button(809.0, 450.0,
			'ListBtnTestResult', this.LongPracticeMenuTestResultButton, this,
			1, 0, 0, 0, _TapStorySelect);

	var _TapStoryCall = this.add.group(_StageInfo41);
	_TapStoryCall.position.setTo(-24.0, 0.0);

	var _ListBtnLeftArrow41T = this.add.button(246.0, 310.0,
			'ListBtnLeftArrow', this.LongPracticeMenuLeftButton, this, 1, 0, 0,
			0, _TapStoryCall);

	var _ListBtnRightArrow41T = this.add.button(924.0, 310.0,
			'ListBtnRightArrow', this.LongPracticeMenuRightButton, this, 1, 0,
			0, 0, _TapStoryCall);

	var _LongWordSetList6T = this.add.group(_TapStoryCall);
	_LongWordSetList6T.position.setTo(321.0, 405.0);

	var _ListBtnBar6T = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList6T);

	var _ListbarPracticeComplete6T = this.add.sprite(292.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList6T);

	var _ListbarTestComplete6T = this.add.sprite(378.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList6T);

	var _ListTitleTxt6T = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList6T);

	var _ListBtnListDel6T = this.add.button(493.0, 3.0, 'ListBtnListDel',
			this.LongPracticeMenuDeleteButton, this, 1, 0, 0, 0,
			_LongWordSetList6T);

	var _LongWordSetList5T = this.add.group(_TapStoryCall);
	_LongWordSetList5T.position.setTo(321.0, 368.0);

	var _ListBtnBar5T = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList5T);

	var _ListbarPracticeComplete5T = this.add.sprite(292.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList5T);

	var _ListbarTestComplete5T = this.add.sprite(378.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList5T);

	var _ListTitleTxt5T = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList5T);

	var _ListBtnListDel5T = this.add.button(493.0, 3.0, 'ListBtnListDel',
			this.LongPracticeMenuDeleteButton, this, 1, 0, 0, 0,
			_LongWordSetList5T);

	var _LongWordSetList4T = this.add.group(_TapStoryCall);
	_LongWordSetList4T.position.setTo(321.0, 331.0);

	var _ListBtnBar4T = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList4T);

	var _ListbarPracticeComplete4T = this.add.sprite(292.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList4T);

	var _ListbarTestComplete4T = this.add.sprite(378.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList4T);

	var _ListTitleTxt4T = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList4T);

	var _ListBtnListDel4T = this.add.button(493.0, 3.0, 'ListBtnListDel',
			this.LongPracticeMenuDeleteButton, this, 1, 0, 0, 0,
			_LongWordSetList4T);

	var _LongWordSetList3T = this.add.group(_TapStoryCall);
	_LongWordSetList3T.position.setTo(321.0, 294.0);

	var _ListBtnBar3T = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList3T);

	var _ListbarPracticeComplete3T = this.add.sprite(292.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList3T);

	var _ListbarTestComplete3T = this.add.sprite(378.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList3T);

	var _ListTitleTxt3T = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList3T);

	var _ListBtnListDel3T = this.add.button(493.0, 3.0, 'ListBtnListDel',
			this.LongPracticeMenuDeleteButton, this, 1, 0, 0, 0,
			_LongWordSetList3T);

	var _LongWordSetList2T = this.add.group(_TapStoryCall);
	_LongWordSetList2T.position.setTo(321.0, 257.0);

	var _ListBtnBar2T = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList2T);

	var _ListbarPracticeComplete2T = this.add.sprite(292.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList2T);

	var _ListbarTestComplete2T = this.add.sprite(378.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList2T);

	var _ListTitleTxt2T = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList2T);

	var _ListBtnListDel2T = this.add.button(493.0, 3.0, 'ListBtnListDel',
			this.LongPracticeMenuDeleteButton, this, 1, 0, 0, 0,
			_LongWordSetList2T);

	var _LongWordSetList1T = this.add.group(_TapStoryCall);
	_LongWordSetList1T.position.setTo(321.0, 220.0);

	var _ListBtnBar1T = this.add.button(0.0, 0.0, 'ListBtnBar',
			this.LongPracticeMenuTitleButton, this, 2, 0, null, null,
			_LongWordSetList1T);

	var _ListbarPracticeComplete1T = this.add.sprite(292.0, 5.0,
			'ListbarPracticeComplete', null, _LongWordSetList1T);

	var _ListbarTestComplete1T = this.add.sprite(378.0, 5.0,
			'ListbarTestComplete', null, _LongWordSetList1T);

	var _ListTitleTxt1T = this.add.text(32.0, 7.0, '메밀꽃 필 무렵', {
		"font" : "14px 나눔고딕"
	}, _LongWordSetList1T);

	var _ListBtnListDel1T = this.add.button(493.0, 3.0, 'ListBtnListDel',
			this.LongPracticeMenuDeleteButton, this, 1, 0, 0, 0,
			_LongWordSetList1T);

	var _PageNum41T = this.add.text(602.0, 454.0, '2/10', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748",
		"align" : "center"
	}, _TapStoryCall);

	var _ListBtnTestResult41T = this.add.button(809.0, 450.0,
			'ListBtnTestResult', this.LongPracticeMenuTestResultButton, this,
			1, 0, 0, 0, _TapStoryCall);

	var _ListBtnListCall41T = this.add.button(319.0, 450.0, 'ListBtnListCall',
			this.LongPracticeMenuCallButton, this, 1, 0, 0, 0, _TapStoryCall);

	var _ListBtnTitleChange41T = this.add.button(415.0, 450.0,
			'ListBtnTitleChange', this.LongPracticeMenuTitleChangeButton, this,
			1, 0, 0, 0, _TapStoryCall);

	var _UtfCheckText = this.add.text(323.0, 200.0,
			'※ TXT 파일 규격이 틀릴 경우 글씨가 깨져서 출력됩니다.(정상 규격 : UTF-8)', {
				"font" : "13px 나눔고딕",
				"fill" : "#20a5f9"
			}, _TapStoryCall);

	this.add.sprite(192.0, 71.0, 'StageTxtInfo4', null, _StageInfo41);

	this.add.text(198.0, 15.0, '긴 글 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo41);

	var _StageInfo42 = this.add.group(_Main);

	this.add.sprite(192.0, 126.0, 'Stage4UpsetPanel', null, _StageInfo42);

	this.add.sprite(245.0, 229.0, 'Stage4InputPanel', null, _StageInfo42);

	this.add.sprite(245.0, 315.0, 'Stage4InputPanel', null, _StageInfo42);

	this.add.sprite(245.0, 401.0, 'Stage4InputPanel', null, _StageInfo42);

	this.add.sprite(245.0, 487.0, 'Stage4InputPanel', null, _StageInfo42);

	var _Stage4SelectCursor = this.add.sprite(245.0, 229.0,
			'Stage4SelectCursor', null, _StageInfo42);

	var _LongWordList11 = this.add.text(272.0, 202.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"align" : "center"
			}, _StageInfo42);

	var _LongWordList12 = this.add.text(272.0, 238.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#ffffff",
				"align" : "center"
			}, _StageInfo42);

	var _LongWordList21 = this.add.text(272.0, 288.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"align" : "center"
			}, _StageInfo42);

	var _LongWordList22 = this.add.text(272.0, 324.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#ffffff",
				"align" : "center"
			}, _StageInfo42);

	var _LongWordList31 = this.add.text(272.0, 374.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"align" : "center"
			}, _StageInfo42);

	var _LongWordList32 = this.add.text(272.0, 410.0,
			'자리 연습처럼 단계별로 연습할 수 있으며,', {
				"font" : "18px 나눔고딕",
				"fill" : "#ffffff",
				"align" : "center"
			}, _StageInfo42);

	var _LongWordList41 = this.add
			.text(
					272.0,
					460.0,
					'There was once a shoemaker, who, through no fault of his own, became',
					{
						"font" : "18px 나눔고딕",
						"align" : "center"
					}, _StageInfo42);

	var _LongWordList42 = this.add
			.text(
					272.0,
					496.0,
					'There was once a shoemaker, who, through no fault of his own, became',
					{
						"font" : "18px 나눔고딕",
						"fill" : "#ffffff",
						"align" : "center"
					}, _StageInfo42);

	var _LongInputCursor = this.add.sprite(272.0, 238.0, 'InputCursor', null,
			_StageInfo42);
	_LongInputCursor.scale.setTo(1.0, 1.3);

	var _LongInputCursorAni = new PrefabInputCursor(this.game, 272.0, 236.0);
	_StageInfo42.add(_LongInputCursorAni);

	var _NowGauge42 = this.add.tileSprite(398.0, 165.0, 50.0, 6.0,
			'WBasePanel2', null, _StageInfo42);
	_NowGauge42.tint = 0xff5a00;

	var _ProcessGauge42 = this.add.tileSprite(237.0, 165.0, 50.0, 6.0,
			'WBasePanel2', null, _StageInfo42);
	_ProcessGauge42.tint = 0xce5fff;

	var _ProcessPersent42 = this.add.text(299.0, 148.0, '100%', {
		"font" : "18px 나눔고딕"
	}, _StageInfo42);

	var _Now42 = this.add.text(459.0, 148.0, '999', {
		"font" : "18px 나눔고딕"
	}, _StageInfo42);

	var _Stage4PageNum = this.add.text(837.0, 156.0, '1쪽 / 총 50쪽', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _StageInfo42);

	var _Stage4Source = this.add.text(550.0, 156.0, '출처 : 김소월 시 김소월 시', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _StageInfo42);

	this.add.sprite(463.0, 64.0, 'Stage3TimePanel', null, _StageInfo42);

	var _TimeNum42 = this.add.text(603.0, 83.0, '30:00', {
		"font" : "24px 나눔고딕"
	}, _StageInfo42);

	this.add.text(198.0, 15.0, '긴 글 연습', {
		"font" : "bold 24px 나눔고딕",
		"fill" : "#363636",
		"align" : "center"
	}, _StageInfo42);

	var _UpPanelInfo = this.add.group(_Main);

	var _OptionBtnWhole = this.add.button(957.0, 0.0, 'OptionBtn11',
			this.WindowSizeButton, this, 1, 0, 0, 0, _UpPanelInfo);

	var _OptionBtnSmall = this.add.button(957.0, 0.0, 'OptionBtn12',
			this.WindowSizeButton, this, 1, 0, 0, 0, _UpPanelInfo);

	this.add.button(889.0, 0.0, 'OptionBtn2', this.HelpButton, this, 1, 0, 0,
			0, _UpPanelInfo);

	var _OptionBtn2 = this.add.button(821.0, 0.0, 'OptionBtn3',
			this.SettingButton, this, 1, 0, 0, 0, _UpPanelInfo);

	var _OptionBtn3 = this.add.button(821.0, 0.0, 'OptionBtn4',
			this.GoBackButton, this, 1, 0, 0, 0, _UpPanelInfo);

	var _StageUserPracticeSet = this.add.group(_UpPanelInfo);
	_StageUserPracticeSet.position.setTo(326.0, 10.0);

	var _StageUserStepPracticeSet = this.add.group(_StageUserPracticeSet);
	_StageUserStepPracticeSet.position.setTo(123.0, 22.0);

	this.add.sprite(-10.0, -21.0, 'PracticeInfo2', null,
			_StageUserStepPracticeSet);

	var _StageUserStepSet = this.add.text(0.0, 0.0, '속담 / 명언', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _StageUserStepPracticeSet);

	var _VankTitle = this.add.group(_StageUserPracticeSet);
	_VankTitle.position.setTo(123.0, 22.0);

	var _PracticeInfo3 = this.add.sprite(-10.0, -21.0, 'PracticeInfo3', null,
			_VankTitle);

	var _VankUserStepSet = this.add.text(0.0, 0.0, '속담 / 명언', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _VankTitle);

	this.add.sprite(0.0, 0.0, 'PracticeInfo1', null, _StageUserPracticeSet);

	var _StageUserTypingSet = this.add.text(9.0, 22.0, '세벌식', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _StageUserPracticeSet);

	var _LeftPanelInfo = this.add.group(_Main);

	var _MenuTapBtn = this.add.button(0.0, 261.0, 'MenuTapBtn1',
			this.SeatPracticeButton, this, null, 0, null, null, _LeftPanelInfo);

	var _MenuTapBtn1 = this.add.button(0.0, 317.0, 'MenuTapBtn2',
			this.WordPracticeButton, this, null, 0, null, null, _LeftPanelInfo);

	var _MenuTapBtn2 = this.add
			.button(0.0, 373.0, 'MenuTapBtn3', this.ShortPracticeButton, this,
					null, 0, null, null, _LeftPanelInfo);

	var _MenuTapBtn3 = this.add.button(0.0, 429.0, 'MenuTapBtn4',
			this.LongPracticeButton, this, null, 0, null, null, _LeftPanelInfo);

	var _BtnMyPage = this.add.button(21.0, 212.0, 'BtnMyPage',
			this.MyPageButton, this, null, null, null, null, _LeftPanelInfo);

	var _NicknameTxt = this.add.text(76.0, 191.0, '최대닉네임', {
		"font" : "13px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _LeftPanelInfo);

	var _PointValueTxt = this.add.text(75.0, 138.0, '34820', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _LeftPanelInfo);

	var _HandImgs = this.add.group(_Main);

	var _PopupGroup = this.add.group(_root);

	var _PopupTransPanel = this.add.tileSprite(0.0, 0.0, 1024.0, 576.0,
			'BBasePanel', null, _PopupGroup);
	_PopupTransPanel.alpha = 0.7;

	var _PublicP = this.add.group(_PopupGroup);

	this.add.sprite(359.0, 188.0, 'PopupPanelNormal', null, _PublicP);

	var _PopupBtn_No = this.add.button(570.0, 340.0, 'PopupBtn_No', null, this,
			1, 0, 0, 0, _PublicP);

	var _PopupBtn_Yes = this.add.button(440.0, 340.0, 'PopupBtn_Yes', null,
			this, 1, 0, 0, 0, _PublicP);

	var _PopupBtn_Ok = this.add.button(506.0, 340.0, 'PopupBtn_Ok', null, this,
			1, 0, 0, 0, _PublicP);

	var _PublicInfoTxt = this.add.text(564.0, 285.0,
			'진행중이던 긴 글 연습이 있습니다.\n이어서 하시겠습니까?', {
				"font" : "18px 나눔고딕",
				"align" : "center"
			}, _PublicP);

	this.add.text(394.0, 205.0, '알림', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _PublicP);

	var _PopupBtn_X = this.add.button(704.0, 196.0, 'PopupBtn_X', null, this,
			1, 0, 0, 0, _PublicP);

	var _GuideHelp = this.add.group(_PopupGroup);

	this.add.sprite(207.0, 83.0, 'PopupPanelHelpInfo', null, _GuideHelp);

	var _TajaHelpContentGroup = this.add.group(_GuideHelp);

	this.add.button(753.0, 90.0, 'PopupBtn_X', this.SetHelpExitPopup, this, 1,
			0, 0, 0, _GuideHelp);

	var _HelpRightArrow = this.add.button(701.0, 221.0, 'ListBtnRightArrow',
			this.HelpMoveRight, this, 1, 0, 0, 0, _GuideHelp);

	var _HelpLeftArrow = this.add.button(272.0, 221.0, 'ListBtnLeftArrow',
			this.HelpMoveLeft, this, 1, 0, 0, 0, _GuideHelp);

	var _PageTxt = this.add.text(501.0, 463.0, '1 / 1', {
		"font" : "14px 나눔고딕",
		"align" : "center"
	}, _GuideHelp);

	this.add.text(242.0, 100.0, '도움말', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _GuideHelp);

	var _SettingP = this.add.group(_PopupGroup);

	this.add.sprite(213.0, 130.0, 'PopupPanelSetup', null, _SettingP);

	var _SetPopupBtn_X = this.add.button(746.0, 138.0, 'PopupBtn_X',
			this.SetSettingExitPopup, this, 1, 0, 0, 0, _SettingP);

	var _GroupSetOp4 = this.add.group(_SettingP);
	_GroupSetOp4.position.setTo(212.0, 88.0);

	var _SetBtnLeftArrow4 = this.add.button(327.0, 276.0, 'SetBtnLeftArrow',
			this.SettingFinger, this, 1, 0, 0, 0, _GroupSetOp4);

	var _SetBtnRightArrow4 = this.add.button(507.0, 276.0, 'SetBtnRightArrow',
			this.SettingFinger, this, 1, 0, 0, 0, _GroupSetOp4);

	var _TxtSetOp4 = this.add.text(419.0, 286.0, '켜기', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _GroupSetOp4);
	_TxtSetOp4.anchor.setTo(-0.5, 0.0);

	var _GroupSetOp3 = this.add.group(_SettingP);
	_GroupSetOp3.position.setTo(212.0, 88.0);

	var _SetBtnLeftArrow3 = this.add.button(53.0, 276.0, 'SetBtnLeftArrow',
			this.MoveSettingSoundLeft, this, 1, 0, 0, 0, _GroupSetOp3);

	var _SetBtnRightArrow3 = this.add.button(233.0, 276.0, 'SetBtnRightArrow',
			this.MoveSettingSoundRight, this, 1, 0, 0, 0, _GroupSetOp3);

	var _TxtSetOp3 = this.add.text(163.0, 287.0, '50', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _GroupSetOp3);

	var _GroupSetOp2 = this.add.group(_SettingP);
	_GroupSetOp2.position.setTo(212.0, 88.0);

	var _SetBtnLeftArrow2 = this.add.button(327.0, 163.0, 'SetBtnLeftArrow',
			this.MoveSettingLangLeft, this, 1, 0, 0, 0, _GroupSetOp2);

	var _SetBtnRightArrow2 = this.add.button(507.0, 163.0, 'SetBtnRightArrow',
			this.MoveSettingLangRight, this, 1, 0, 0, 0, _GroupSetOp2);

	var _TxtSetOp2 = this.add.text(419.0, 173.0, '한글', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _GroupSetOp2);
	_TxtSetOp2.anchor.setTo(-0.5, 0.0);

	var _GroupSetOp1 = this.add.group(_SettingP);
	_GroupSetOp1.position.setTo(212.0, 88.0);

	var _TxtSetOp1 = this.add.text(163.0, 173.0, '두벌식', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff"
	}, _GroupSetOp1);

	var _SetBtnLeftArrow = this.add.button(53.0, 163.0, 'SetBtnLeftArrow',
			this.MoveSettingKindLeft, this, 1, 0, 0, 0, _GroupSetOp1);

	var _SetBtnRightArrow = this.add.button(233.0, 163.0, 'SetBtnRightArrow',
			this.MoveSettingKindRight, this, 1, 0, 0, 0, _GroupSetOp1);

	this.add.text(249.0, 146.0, '설정', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _SettingP);

	var _ResultP = this.add.group(_PopupGroup);

	this.add.sprite(257.0, 113.0, 'PopupPanelResult', null, _ResultP);

	var _ResultPopupBtn_Ok = this.add.button(453.0, 405.0, 'PopupBtn_Ok', null,
			this, 1, 0, 0, 0, _ResultP);

	var _ResultGroupPieceButton = this.add.group(_ResultP);

	var _ResultPopupBtn_StopP = this.add.button(583.0, 405.0, 'PopupBtn_Stop',
			null, this, 1, 0, 0, 0, _ResultGroupPieceButton);

	var _PopupBtn_AgainP = this.add.button(453.0, 405.0, 'PopupBtn_Again',
			null, this, 1, 0, 0, 0, _ResultGroupPieceButton);

	var _ResultPopupBtn_ContinueP = this.add.button(323.0, 405.0,
			'PopupBtn_Continue', null, this, 1, 0, 0, 0,
			_ResultGroupPieceButton);

	var _ResultGroupLongShortButton = this.add.group(_ResultP);

	var _ResultPopupBtn_Stop = this.add.button(517.0, 405.0, 'PopupBtn_Stop',
			null, this, 1, 0, 0, 0, _ResultGroupLongShortButton);

	var _ResultPopupBtn_Continue = this.add.button(387.0, 405.0,
			'PopupBtn_GoContinue', null, this, 1, 0, 0, 0,
			_ResultGroupLongShortButton);

	var _ResultGroupLongTestButton = this.add.group(_ResultP);

	var _ResultPopupBtn_TestStop = this.add
			.button(517.0, 405.0, 'PopupBtn_Stop', null, this, 1, 0, 0, 0,
					_ResultGroupLongTestButton);

	var _ResultPopupBtn_SendMail = this.add.button(387.0, 405.0,
			'PopupBtn_SendResult', null, this, 1, 0, 0, 0,
			_ResultGroupLongTestButton);

	var _ResultNicknameTxt = this.add.text(426.0, 297.0,
			'Guest_lyzFCy 님의 연습 결과', {
				"font" : "17px 나눔고딕",
				"fill" : "#2b3748",
				"align" : "center"
			}, _ResultP);

	var _ResultGroupPieceWord = this.add.group(_ResultP);

	this.add.sprite(277.0, 326.0, 'ResultAtb1', null, _ResultGroupPieceWord);

	var _ResultPracticeValueP = this.add.text(647.0, 362.0, '00분01초', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupPieceWord);

	var _ResultAccuracyValueP = this.add.text(538.0, 362.0, '100%', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupPieceWord);

	var _ResultWrongValueP = this.add.text(427.0, 362.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupPieceWord);

	var _ResultWholeValueP = this.add.text(317.0, 362.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupPieceWord);

	var _ResultTitleTxtP1 = this.add.text(292.0, 130.0, '자리 연습 결과', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupPieceWord);

	var _ResultTitleTxtP2 = this.add.text(294.0, 129.0, '낱말 연습 결과', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupPieceWord);

	var _ResultGroupShortWord = this.add.group(_ResultP);

	this.add.sprite(277.0, 326.0, 'ResultAtb2', null, _ResultGroupShortWord);

	var _ResultPracticeValueS = this.add.text(637.0, 362.0, '00분01초', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupShortWord);

	var _ResultAccuracyValueS = this.add.text(484.0, 362.0, '100%', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupShortWord);

	var _ResultFastValueS = this.add.text(327.0, 362.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupShortWord);

	this.add.text(294.0, 129.0, '짧은 글 연습 결과', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupShortWord);

	var _ResultGroupLongWord = this.add.group(_ResultP);

	this.add.sprite(277.0, 326.0, 'ResultAtb3', null, _ResultGroupLongWord);

	var _ResultPracticeValueL = this.add.text(637.0, 362.0, '00분01초', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupLongWord);

	var _ResultAccuracyValueL = this.add.text(484.0, 362.0, '100%', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupLongWord);

	var _ResultMeanValueL = this.add.text(327.0, 362.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupLongWord);

	var _ResultTitleTxtL = this.add.text(294.0, 129.0, '긴 글 연습 결과', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _ResultGroupLongWord);

	var _ChaIconYaya = this.add.sprite(461.0, 183.0, 'ChaIconYaya', null,
			_ResultP);

	var _ResultPopupBtn_X = this.add.button(702.0, 119.0, 'PopupBtn_X', null,
			this, 1, 0, 0, 0, _ResultP);

	var _BResultP = this.add.group(_PopupGroup);

	this.add.sprite(174.0, 52.0, 'BResultLisrPanel', null, _BResultP);

	var _BResultListGroup1 = this.add.group(_BResultP);

	var _BResultListDate1 = this.add.text(427.0, 157.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup1);

	var _BResultListPage1 = this.add.text(541.0, 157.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup1);

	var _BResultListValue1 = this.add.text(685.0, 157.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup1);

	var _BResultListPersent1 = this.add.text(777.0, 157.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup1);

	var _BResultListName1 = new FlowingLetterV1(this.game, _BResultListGroup1);
	_BResultListName1.position.setTo(209.0, 157.0);

	var _BResultListGroup2 = this.add.group(_BResultP);

	var _BResultListDate2 = this.add.text(427.0, 187.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup2);

	var _BResultListPage2 = this.add.text(541.0, 187.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup2);

	var _BResultListValue2 = this.add.text(685.0, 187.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup2);

	var _BResultListPersent2 = this.add.text(777.0, 187.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup2);

	var _BResultListName2 = new FlowingLetterV1(this.game, _BResultListGroup2);
	_BResultListName2.position.setTo(209.0, 187.0);

	var _BResultListGroup3 = this.add.group(_BResultP);

	var _BResultListDate3 = this.add.text(427.0, 217.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup3);

	var _BResultListPage3 = this.add.text(541.0, 217.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup3);

	var _BResultListValue3 = this.add.text(685.0, 217.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup3);

	var _BResultListPersent3 = this.add.text(777.0, 217.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup3);

	var _BResultListName3 = new FlowingLetterV1(this.game, _BResultListGroup3);
	_BResultListName3.position.setTo(209.0, 217.0);

	var _BResultListGroup4 = this.add.group(_BResultP);

	var _BResultListDate4 = this.add.text(427.0, 247.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup4);

	var _BResultListPage4 = this.add.text(541.0, 247.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup4);

	var _BResultListValue4 = this.add.text(685.0, 247.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup4);

	var _BResultListPersent4 = this.add.text(777.0, 247.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup4);

	var _BResultListName4 = new FlowingLetterV1(this.game, _BResultListGroup4);
	_BResultListName4.position.setTo(209.0, 247.0);

	var _BResultListGroup5 = this.add.group(_BResultP);

	var _BResultListDate5 = this.add.text(427.0, 277.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup5);

	var _BResultListPage5 = this.add.text(541.0, 277.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup5);

	var _BResultListValue5 = this.add.text(685.0, 277.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup5);

	var _BResultListPersent5 = this.add.text(777.0, 277.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup5);

	var _BResultListName5 = new FlowingLetterV1(this.game, _BResultListGroup5);
	_BResultListName5.position.setTo(209.0, 277.0);

	var _BResultListGroup6 = this.add.group(_BResultP);

	var _BResultListDate6 = this.add.text(427.0, 307.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup6);

	var _BResultListPage6 = this.add.text(541.0, 307.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup6);

	var _BResultListValue6 = this.add.text(685.0, 307.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup6);

	var _BResultListPersent6 = this.add.text(777.0, 307.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup6);

	var _BResultListName6 = new FlowingLetterV1(this.game, _BResultListGroup6);
	_BResultListName6.position.setTo(209.0, 307.0);

	var _BResultListGroup7 = this.add.group(_BResultP);

	var _BResultListDate7 = this.add.text(427.0, 337.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup7);

	var _BResultListPage7 = this.add.text(541.0, 337.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup7);

	var _BResultListValue7 = this.add.text(685.0, 337.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup7);

	var _BResultListPersent7 = this.add.text(777.0, 337.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup7);

	var _BResultListName7 = new FlowingLetterV1(this.game, _BResultListGroup7);
	_BResultListName7.position.setTo(209.0, 337.0);

	var _BResultListGroup8 = this.add.group(_BResultP);

	var _BResultListDate8 = this.add.text(427.0, 367.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup8);

	var _BResultListPage8 = this.add.text(541.0, 367.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup8);

	var _BResultListValue8 = this.add.text(685.0, 367.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup8);

	var _BResultListPersent8 = this.add.text(777.0, 367.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup8);

	var _BResultListName8 = new FlowingLetterV1(this.game, _BResultListGroup8);
	_BResultListName8.position.setTo(209.0, 367.0);

	var _BResultListGroup9 = this.add.group(_BResultP);

	var _BResultListDate9 = this.add.text(427.0, 397.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup9);

	var _BResultListPage9 = this.add.text(541.0, 397.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup9);

	var _BResultListValue9 = this.add.text(685.0, 397.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup9);

	var _BResultListPersent9 = this.add.text(777.0, 397.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup9);

	var _BResultListName9 = new FlowingLetterV1(this.game, _BResultListGroup9);
	_BResultListName9.position.setTo(209.0, 397.0);

	var _BResultListGroup10 = this.add.group(_BResultP);

	var _BResultListDate10 = this.add.text(427.0, 427.0, '2018-12-31', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup10);

	var _BResultListPage10 = this.add.text(541.0, 427.0, '999/999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup10);

	var _BResultListValue10 = this.add.text(685.0, 427.0, '9999', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup10);

	var _BResultListPersent10 = this.add.text(777.0, 427.0, '58  %', {
		"font" : "14px 나눔고딕",
		"fill" : "#2b3748"
	}, _BResultListGroup10);

	var _BResultListName10 = new FlowingLetterV1(this.game, _BResultListGroup10);
	_BResultListName10.position.setTo(209.0, 427.0);

	this.add.button(462.0, 465.0, 'PopupBtn_Ok', this.SetTestResultExitPopup,
			this, 1, 0, 0, 0, _BResultP);

	this.add.text(210.0, 69.0, '검정 결과', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _BResultP);

	this.add.button(785.0, 60.0, 'PopupBtn_X', this.SetTestResultExitPopup,
			this, 1, 0, 0, 0, _BResultP);

	var _ChangeTitleP = this.add.group(_PopupGroup);

	this.add.sprite(359.0, 188.0, 'PopupPanelNormal', null, _ChangeTitleP);

	this.add.button(570.0, 340.0, 'PopupBtn_Cancel',
			this.SetChangeTitleExitPopup, this, 1, 0, 0, 0, _ChangeTitleP);

	this.add.button(440.0, 340.0, 'PopupBtn_Ok',
			this.SetChangeTitleConfirmPopup, this, 1, 0, 0, 0, _ChangeTitleP);

	this.add.sprite(384.0, 285.0, 'PopupInputField', null, _ChangeTitleP);

	var _InputFieldtext = this.add.text(404.0, 295.0, '변경전 제목', {
		"font" : "18px 나눔고딕",
		"fill" : "#ffffff"
	}, _ChangeTitleP);

	var _InputCursor = new PrefabInputCursor(this.game, 404.0, 292.0);
	_ChangeTitleP.add(_InputCursor);

	this.add.sprite(501.0, 258.0, 'TxtImgChangeTitle', null, _ChangeTitleP);

	this.add.text(394.0, 205.0, '제목 변경', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _ChangeTitleP);

	this.add.button(704.0, 196.0, 'PopupBtn_X', this.SetChangeTitleExitPopup,
			this, 1, 0, 0, 0, _ChangeTitleP);

	var _SendResultPoint = this.add.group(_PopupGroup);

	this.add
			.sprite(233.0, 36.0, 'PopupPanelResultSend', null, _SendResultPoint);

	var _SendContentPanelP4 = this.add.tileSprite(369.0, 218.0,
			388.65521240234375, 189.0, 'WBasePanel', null, _SendResultPoint);
	_SendContentPanelP4.alpha = 0.0;

	var _SendContentPanelP3 = this.add.tileSprite(380.0, 175.0, 445.0, 30.0,
			'WBasePanel', null, _SendResultPoint);
	_SendContentPanelP3.alpha = 0.0;

	var _SendContentPanelP2 = this.add.tileSprite(380.0, 135.0, 367.0, 30.0,
			'WBasePanel', null, _SendResultPoint);
	_SendContentPanelP2.alpha = 0.0;

	var _SendContentPanelP1 = this.add.tileSprite(380.0, 96.0, 367.0, 30.0,
			'WBasePanel', null, _SendResultPoint);
	_SendContentPanelP1.alpha = 0.0;

	var _InputCursorC5 = new PrefabInputCursor(this.game, 380.0, 316.0);
	_SendResultPoint.add(_InputCursorC5);

	var _NoticeSmallContentTxt1 = this.add
			.text(
					379.0,
					423.0,
					'본 메일은 발신전용 메일이므로 타자검정 결과에 대한 상세 내용은 타자\n검정 발신자에게 직접 문의하시기 바랍니다. 타자검정과 관련한 기술적 \n문의사항은 \"문의하기\"를 통해 연락주시기 바랍니다. [문의하기]',
					{
						"font" : "12px 나눔고딕"
					}, _SendResultPoint);

	var _SendSemiContentC5 = this.add.text(380.0, 323.0,
			'100자 이내로 내용을 입력해 주세요.', {
				"font" : "12px 나눔고딕",
				"fill" : "#ffffff"
			}, _SendResultPoint);

	var _SendSemiContentC4 = this.add.text(379.0, 223.0,
			'게임닉네임 :\n학교정보 :\n연습한 글 :\n평균타수 :\n정확도 : ', {
				"font" : "12px 나눔고딕",
				"fill" : "#2b3748"
			}, _SendResultPoint);

	var _SendSemiContentC45 = this.add.text(379.0, 279.0, '정확도 :', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748"
	}, _SendResultPoint);

	var _SendSemiContentC44 = this.add.text(379.0, 265.0, '평균타수 :', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748"
	}, _SendResultPoint);

	var _SendSemiContentC43 = this.add.text(379.0, 251.0, '연습한 글 :', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748"
	}, _SendResultPoint);

	var _SendSemiContentC42 = this.add.text(379.0, 237.0, '학교정보 :', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748"
	}, _SendResultPoint);

	var _SendSemiContentC41 = this.add.text(379.0, 223.0, '게임닉네임 :', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748"
	}, _SendResultPoint);

	var _SendSemiContentC3 = this.add.text(380.0, 184.0,
			'[한컴 타자연습] 게임닉네임 님의 타자 검정 결과 공유', {
				"font" : "12px 나눔고딕",
				"fill" : "#2b3748"
			}, _SendResultPoint);

	var _SendSemiContentC2 = this.add.text(383.0, 145.0, '메일주소를 입력하세요.', {
		"font" : "12px 나눔고딕",
		"fill" : "#ffffff"
	}, _SendResultPoint);

	this.add.text(380.0, 105.0, '한컴타자연습 <typing-noreply@malangmalang.com>', {
		"font" : "12px 나눔고딕",
		"fill" : "#2b3748"
	}, _SendResultPoint);

	this.add.text(270.0, 52.0, '결과전송', {
		"font" : "23px 나눔고딕",
		"fill" : "#ffffff"
	}, _SendResultPoint);

	var _SendResultPopupBtnX = this.add.button(727.0, 44.0, 'PopupBtn_X',
			this.SetTestResultSendExitButton, this, 1, 0, 0, 0,
			_SendResultPoint);

	var _PopupBtn_Cancels = this.add.button(518.0, 482.0, 'PopupBtn_Cancels',
			null, this, 1, 0, 0, 0, _SendResultPoint);

	var _PopupBtn_Send = this.add.button(388.0, 482.0, 'PopupBtn_Send', null,
			this, 1, 0, 0, 0, _SendResultPoint);

	var _InputCursorC2 = new PrefabInputCursor(this.game, 380.0, 139.0);
	_SendResultPoint.add(_InputCursorC2);

	var _HyperLink = this.add.button(378.0, 422.0, 'WBasePanel',
			this.HyperLinkButton, this, null, null, null, null,
			_SendResultPoint);
	_HyperLink.scale.setTo(36.0, 6.0);
	_HyperLink.alpha = 0.0;
	_HyperLink.renderable = false;

	var _ToastMessageGroup = this.add.group(_root);

	this.add.sprite(0.0, 238.0, 'UIToaster', null, _ToastMessageGroup);

	var _ToastMessageText = this.add.text(465.0, 250.0, '토스트 메시지', {
		"font" : "20px 나눔고딕",
		"fill" : "#ffffff",
		"align" : "center"
	}, _ToastMessageGroup);

	var _ToastTransPanel = this.add.tileSprite(0.0, 0.0, 1024.0, 576.0,
			'BBasePanel', null, _ToastMessageGroup);
	_ToastTransPanel.alpha = 0.0;

	// fields

	this.fMain = _Main;
	this.fCharSheetUserGroup = _CharSheetUserGroup;
	this.fStageInfo11 = _StageInfo11;
	this.fStep18 = _Step18;
	this.fStepBtn18 = _StepBtn18;
	this.fStepBtnSelect18 = _StepBtnSelect18;
	this.fStepComplete18 = _StepComplete18;
	this.fStep17 = _Step17;
	this.fStepBtn17 = _StepBtn17;
	this.fStepBtnSelect17 = _StepBtnSelect17;
	this.fStepComplete17 = _StepComplete17;
	this.fStepBtn16 = _StepBtn16;
	this.fStepBtnSelect16 = _StepBtnSelect16;
	this.fStepComplete16 = _StepComplete16;
	this.fStepBtn15 = _StepBtn15;
	this.fStepBtnSelect15 = _StepBtnSelect15;
	this.fStepComplete15 = _StepComplete15;
	this.fStepBtn14 = _StepBtn14;
	this.fStepBtnSelect14 = _StepBtnSelect14;
	this.fStepComplete14 = _StepComplete14;
	this.fStepBtn13 = _StepBtn13;
	this.fStepBtnSelect13 = _StepBtnSelect13;
	this.fStepComplete13 = _StepComplete13;
	this.fStepBtn12 = _StepBtn12;
	this.fStepBtnSelect12 = _StepBtnSelect12;
	this.fStepComplete12 = _StepComplete12;
	this.fStepBtn11 = _StepBtn11;
	this.fStepBtnSelect11 = _StepBtnSelect11;
	this.fStepComplete11 = _StepComplete11;
	this.fKeyStepGroup09 = _KeyStepGroup09;
	this.fKeyStepGroup10 = _KeyStepGroup10;
	this.fKeyStepGroup11 = _KeyStepGroup11;
	this.fKeyStepGroup12 = _KeyStepGroup12;
	this.fKeyStepGroup13 = _KeyStepGroup13;
	this.fKeyStepGroup14 = _KeyStepGroup14;
	this.fStageInfo12 = _StageInfo12;
	this.fStage1SelectCursor = _Stage1SelectCursor;
	this.fTweenTextGroup = _TweenTextGroup;
	this.fSingleWord25 = _SingleWord25;
	this.fSingleWord24 = _SingleWord24;
	this.fSingleWord23 = _SingleWord23;
	this.fSingleWord22 = _SingleWord22;
	this.fSingleWord21 = _SingleWord21;
	this.fSingleWord35 = _SingleWord35;
	this.fSingleWord34 = _SingleWord34;
	this.fSingleWord33 = _SingleWord33;
	this.fSingleWord32 = _SingleWord32;
	this.fSingleWord31 = _SingleWord31;
	this.fShowTextGroup = _ShowTextGroup;
	this.fSingleWord15 = _SingleWord15;
	this.fSingleWord14 = _SingleWord14;
	this.fSingleWord13 = _SingleWord13;
	this.fSingleWord12 = _SingleWord12;
	this.fSingleWord11 = _SingleWord11;
	this.fTxtImgCho1 = _TxtImgCho1;
	this.fTxtImgJong1 = _TxtImgJong1;
	this.fTxtImgCho2 = _TxtImgCho2;
	this.fTxtImgJong2 = _TxtImgJong2;
	this.fTxtImgCho3 = _TxtImgCho3;
	this.fTxtImgJong3 = _TxtImgJong3;
	this.fTxtImgCho4 = _TxtImgCho4;
	this.fTxtImgJong4 = _TxtImgJong4;
	this.fTxtImgCho5 = _TxtImgCho5;
	this.fTxtImgJong5 = _TxtImgJong5;
	this.fSelectRedKey122 = _SelectRedKey122;
	this.fSelectRedKey121 = _SelectRedKey121;
	this.fSelectRedKey12 = _SelectRedKey12;
	this.fKeyTxtkor = _KeyTxtkor;
	this.fKeyTxtEn = _KeyTxtEn;
	this.fProcessGauge12 = _ProcessGauge12;
	this.fWrongTypingGauge12 = _WrongTypingGauge12;
	this.fAccuracyGauge12 = _AccuracyGauge12;
	this.fProcessPersent12 = _ProcessPersent12;
	this.fWrongTypingNum12 = _WrongTypingNum12;
	this.fAccuracy12 = _Accuracy12;
	this.fStepSetNum121 = _StepSetNum121;
	this.fStepSetNum122 = _StepSetNum122;
	this.fStepSetNum123 = _StepSetNum123;
	this.fStepSetNum124 = _StepSetNum124;
	this.fStepSetNum125 = _StepSetNum125;
	this.fStepSetNum126 = _StepSetNum126;
	this.fStepSetNum127 = _StepSetNum127;
	this.fStepSetNum128 = _StepSetNum128;
	this.fHandToggle = _HandToggle;
	this.fStageInfo21 = _StageInfo21;
	this.fStep28 = _Step28;
	this.fStepBtn28 = _StepBtn28;
	this.fStepBtnSelect28 = _StepBtnSelect28;
	this.fStepComplete28 = _StepComplete28;
	this.fStep27 = _Step27;
	this.fStepBtn27 = _StepBtn27;
	this.fStepBtnSelect27 = _StepBtnSelect27;
	this.fStepComplete27 = _StepComplete27;
	this.fStepBtn26 = _StepBtn26;
	this.fStepBtnSelect26 = _StepBtnSelect26;
	this.fStepComplete26 = _StepComplete26;
	this.fStepBtn25 = _StepBtn25;
	this.fStepBtnSelect25 = _StepBtnSelect25;
	this.fStepComplete25 = _StepComplete25;
	this.fStepBtn24 = _StepBtn24;
	this.fStepBtnSelect24 = _StepBtnSelect24;
	this.fStepComplete24 = _StepComplete24;
	this.fStepBtn23 = _StepBtn23;
	this.fStepBtnSelect23 = _StepBtnSelect23;
	this.fStepComplete23 = _StepComplete23;
	this.fStepBtn22 = _StepBtn22;
	this.fStepBtnSelect22 = _StepBtnSelect22;
	this.fStepComplete22 = _StepComplete22;
	this.fStepBtn21 = _StepBtn21;
	this.fStepBtnSelect21 = _StepBtnSelect21;
	this.fStepComplete21 = _StepComplete21;
	this.fKeyStepGroup19 = _KeyStepGroup19;
	this.fKeyStepGroup20 = _KeyStepGroup20;
	this.fKeyStepGroup21 = _KeyStepGroup21;
	this.fKeyStepGroup22 = _KeyStepGroup22;
	this.fKeyStepGroup23 = _KeyStepGroup23;
	this.fKeyStepGroup24 = _KeyStepGroup24;
	this.fStageInfo22 = _StageInfo22;
	this.fStage2SelectCursor = _Stage2SelectCursor;
	this.fTweenTextGroup2 = _TweenTextGroup2;
	this.fSingleWordsMe25 = _SingleWordsMe25;
	this.fSingleWordsMe24 = _SingleWordsMe24;
	this.fSingleWordsMe23 = _SingleWordsMe23;
	this.fSingleWordsMe22 = _SingleWordsMe22;
	this.fSingleWordsMe21 = _SingleWordsMe21;
	this.fSingleWords25 = _SingleWords25;
	this.fSingleWords24 = _SingleWords24;
	this.fSingleWords23 = _SingleWords23;
	this.fSingleWords22 = _SingleWords22;
	this.fSingleWords21 = _SingleWords21;
	this.fSingleWordsMe35 = _SingleWordsMe35;
	this.fSingleWordsMe34 = _SingleWordsMe34;
	this.fSingleWordsMe33 = _SingleWordsMe33;
	this.fSingleWordsMe32 = _SingleWordsMe32;
	this.fSingleWordsMe31 = _SingleWordsMe31;
	this.fSingleWords35 = _SingleWords35;
	this.fSingleWords34 = _SingleWords34;
	this.fSingleWords33 = _SingleWords33;
	this.fSingleWords32 = _SingleWords32;
	this.fSingleWords31 = _SingleWords31;
	this.fShowTextGroup2 = _ShowTextGroup2;
	this.fSingleWordsMe15 = _SingleWordsMe15;
	this.fSingleWordsMe14 = _SingleWordsMe14;
	this.fSingleWordsMe13 = _SingleWordsMe13;
	this.fSingleWordsMe12 = _SingleWordsMe12;
	this.fSingleWordsMe11 = _SingleWordsMe11;
	this.fSingleWords15 = _SingleWords15;
	this.fSingleWords14 = _SingleWords14;
	this.fSingleWords13 = _SingleWords13;
	this.fSingleWords12 = _SingleWords12;
	this.fSingleWords11 = _SingleWords11;
	this.fWordInputCursor = _WordInputCursor;
	this.fWordInputCursorAni = _WordInputCursorAni;
	this.fSelectRedKey222 = _SelectRedKey222;
	this.fSelectRedKey221 = _SelectRedKey221;
	this.fSelectRedKey22 = _SelectRedKey22;
	this.fKeyTxtkor22 = _KeyTxtkor22;
	this.fKeyTxtEn22 = _KeyTxtEn22;
	this.fProcessGauge22 = _ProcessGauge22;
	this.fWrongTypingGauge22 = _WrongTypingGauge22;
	this.fAccuracyGauge22 = _AccuracyGauge22;
	this.fProcessPersent22 = _ProcessPersent22;
	this.fWrongTypingNum22 = _WrongTypingNum22;
	this.fAccuracy22 = _Accuracy22;
	this.fStepSetNum221 = _StepSetNum221;
	this.fStepSetNum222 = _StepSetNum222;
	this.fStepSetNum223 = _StepSetNum223;
	this.fStepSetNum224 = _StepSetNum224;
	this.fStepSetNum225 = _StepSetNum225;
	this.fStepSetNum226 = _StepSetNum226;
	this.fStepSetNum227 = _StepSetNum227;
	this.fStepSetNum228 = _StepSetNum228;
	this.fHandToggle2 = _HandToggle2;
	this.fStageInfo31 = _StageInfo31;
	this.fStage31StepBtn1 = _Stage31StepBtn1;
	this.fStage31StepBtn2 = _Stage31StepBtn2;
	this.fStage31StepBtn3 = _Stage31StepBtn3;
	this.fStage31StepBtn4 = _Stage31StepBtn4;
	this.fBtnShortWordEvent = _BtnShortWordEvent;
	this.fStageInfo32 = _StageInfo32;
	this.fShortWordList11 = _ShortWordList11;
	this.fShortWordList12 = _ShortWordList12;
	this.fShortWordList21 = _ShortWordList21;
	this.fShortWordList22 = _ShortWordList22;
	this.fShortWordList3 = _ShortWordList3;
	this.fShortWordList4 = _ShortWordList4;
	this.fShortWordList5 = _ShortWordList5;
	this.fShortWordList6 = _ShortWordList6;
	this.fShortInputCursor = _ShortInputCursor;
	this.fShortInputCursorAni = _ShortInputCursorAni;
	this.fProcessGauge32 = _ProcessGauge32;
	this.fNowGauge32 = _NowGauge32;
	this.fBestGauge32 = _BestGauge32;
	this.fGoalGauge32 = _GoalGauge32;
	this.fAccuracyGauge32 = _AccuracyGauge32;
	this.fProcessPersent32 = _ProcessPersent32;
	this.fNow32 = _Now32;
	this.fBest32 = _Best32;
	this.fGoal32 = _Goal32;
	this.fAccuracy32 = _Accuracy32;
	this.fStageInfo41 = _StageInfo41;
	this.fListTapLoad41 = _ListTapLoad41;
	this.fListTapSelect341 = _ListTapSelect341;
	this.fListTapSelect41 = _ListTapSelect41;
	this.fListTapSelect241 = _ListTapSelect241;
	this.fListBtnPractice41 = _ListBtnPractice41;
	this.fTapStorySelect = _TapStorySelect;
	this.fListBtnLeftArrow41 = _ListBtnLeftArrow41;
	this.fListBtnRightArrow41 = _ListBtnRightArrow41;
	this.fListBtnBar6 = _ListBtnBar6;
	this.fListbarPracticeComplete6 = _ListbarPracticeComplete6;
	this.fListbarTestComplete6 = _ListbarTestComplete6;
	this.fListTitleTxt6 = _ListTitleTxt6;
	this.fListBtnBar5 = _ListBtnBar5;
	this.fListbarPracticeComplete5 = _ListbarPracticeComplete5;
	this.fListbarTestComplete5 = _ListbarTestComplete5;
	this.fListTitleTxt5 = _ListTitleTxt5;
	this.fListBtnBar4 = _ListBtnBar4;
	this.fListbarPracticeComplete4 = _ListbarPracticeComplete4;
	this.fListbarTestComplete4 = _ListbarTestComplete4;
	this.fListTitleTxt4 = _ListTitleTxt4;
	this.fListBtnBar3 = _ListBtnBar3;
	this.fListbarPracticeComplete3 = _ListbarPracticeComplete3;
	this.fListbarTestComplete3 = _ListbarTestComplete3;
	this.fListTitleTxt3 = _ListTitleTxt3;
	this.fListBtnBar2 = _ListBtnBar2;
	this.fListbarPracticeComplete2 = _ListbarPracticeComplete2;
	this.fListbarTestComplete2 = _ListbarTestComplete2;
	this.fListTitleTxt2 = _ListTitleTxt2;
	this.fListBtnBar1 = _ListBtnBar1;
	this.fListbarPracticeComplete1 = _ListbarPracticeComplete1;
	this.fListbarTestComplete1 = _ListbarTestComplete1;
	this.fListTitleTxt1 = _ListTitleTxt1;
	this.fPageNum41 = _PageNum41;
	this.fListBtnTestResult41 = _ListBtnTestResult41;
	this.fTapStoryCall = _TapStoryCall;
	this.fListBtnLeftArrow41T = _ListBtnLeftArrow41T;
	this.fListBtnRightArrow41T = _ListBtnRightArrow41T;
	this.fListBtnBar6T = _ListBtnBar6T;
	this.fListbarPracticeComplete6T = _ListbarPracticeComplete6T;
	this.fListbarTestComplete6T = _ListbarTestComplete6T;
	this.fListTitleTxt6T = _ListTitleTxt6T;
	this.fListBtnListDel6T = _ListBtnListDel6T;
	this.fListBtnBar5T = _ListBtnBar5T;
	this.fListbarPracticeComplete5T = _ListbarPracticeComplete5T;
	this.fListbarTestComplete5T = _ListbarTestComplete5T;
	this.fListTitleTxt5T = _ListTitleTxt5T;
	this.fListBtnListDel5T = _ListBtnListDel5T;
	this.fListBtnBar4T = _ListBtnBar4T;
	this.fListbarPracticeComplete4T = _ListbarPracticeComplete4T;
	this.fListbarTestComplete4T = _ListbarTestComplete4T;
	this.fListTitleTxt4T = _ListTitleTxt4T;
	this.fListBtnListDel4T = _ListBtnListDel4T;
	this.fListBtnBar3T = _ListBtnBar3T;
	this.fListbarPracticeComplete3T = _ListbarPracticeComplete3T;
	this.fListbarTestComplete3T = _ListbarTestComplete3T;
	this.fListTitleTxt3T = _ListTitleTxt3T;
	this.fListBtnListDel3T = _ListBtnListDel3T;
	this.fListBtnBar2T = _ListBtnBar2T;
	this.fListbarPracticeComplete2T = _ListbarPracticeComplete2T;
	this.fListbarTestComplete2T = _ListbarTestComplete2T;
	this.fListTitleTxt2T = _ListTitleTxt2T;
	this.fListBtnListDel2T = _ListBtnListDel2T;
	this.fListBtnBar1T = _ListBtnBar1T;
	this.fListbarPracticeComplete1T = _ListbarPracticeComplete1T;
	this.fListbarTestComplete1T = _ListbarTestComplete1T;
	this.fListTitleTxt1T = _ListTitleTxt1T;
	this.fListBtnListDel1T = _ListBtnListDel1T;
	this.fPageNum41T = _PageNum41T;
	this.fListBtnTestResult41T = _ListBtnTestResult41T;
	this.fListBtnListCall41T = _ListBtnListCall41T;
	this.fListBtnTitleChange41T = _ListBtnTitleChange41T;
	this.fUtfCheckText = _UtfCheckText;
	this.fStageInfo42 = _StageInfo42;
	this.fStage4SelectCursor = _Stage4SelectCursor;
	this.fLongWordList11 = _LongWordList11;
	this.fLongWordList12 = _LongWordList12;
	this.fLongWordList21 = _LongWordList21;
	this.fLongWordList22 = _LongWordList22;
	this.fLongWordList31 = _LongWordList31;
	this.fLongWordList32 = _LongWordList32;
	this.fLongWordList41 = _LongWordList41;
	this.fLongWordList42 = _LongWordList42;
	this.fLongInputCursor = _LongInputCursor;
	this.fLongInputCursorAni = _LongInputCursorAni;
	this.fNowGauge42 = _NowGauge42;
	this.fProcessGauge42 = _ProcessGauge42;
	this.fProcessPersent42 = _ProcessPersent42;
	this.fNow42 = _Now42;
	this.fStage4PageNum = _Stage4PageNum;
	this.fStage4Source = _Stage4Source;
	this.fTimeNum42 = _TimeNum42;
	this.fOptionBtnWhole = _OptionBtnWhole;
	this.fOptionBtnSmall = _OptionBtnSmall;
	this.fOptionBtn2 = _OptionBtn2;
	this.fOptionBtn3 = _OptionBtn3;
	this.fStageUserPracticeSet = _StageUserPracticeSet;
	this.fStageUserStepPracticeSet = _StageUserStepPracticeSet;
	this.fStageUserStepSet = _StageUserStepSet;
	this.fVankTitle = _VankTitle;
	this.fPracticeInfo3 = _PracticeInfo3;
	this.fVankUserStepSet = _VankUserStepSet;
	this.fStageUserTypingSet = _StageUserTypingSet;
	this.fMenuTapBtn = _MenuTapBtn;
	this.fMenuTapBtn1 = _MenuTapBtn1;
	this.fMenuTapBtn2 = _MenuTapBtn2;
	this.fMenuTapBtn3 = _MenuTapBtn3;
	this.fBtnMyPage = _BtnMyPage;
	this.fNicknameTxt = _NicknameTxt;
	this.fPointValueTxt = _PointValueTxt;
	this.fHandImgs = _HandImgs;
	this.fPopupGroup = _PopupGroup;
	this.fPopupTransPanel = _PopupTransPanel;
	this.fPublicP = _PublicP;
	this.fPopupBtn_No = _PopupBtn_No;
	this.fPopupBtn_Yes = _PopupBtn_Yes;
	this.fPopupBtn_Ok = _PopupBtn_Ok;
	this.fPublicInfoTxt = _PublicInfoTxt;
	this.fPopupBtn_X = _PopupBtn_X;
	this.fGuideHelp = _GuideHelp;
	this.fTajaHelpContentGroup = _TajaHelpContentGroup;
	this.fHelpRightArrow = _HelpRightArrow;
	this.fHelpLeftArrow = _HelpLeftArrow;
	this.fPageTxt = _PageTxt;
	this.fSettingP = _SettingP;
	this.fSetPopupBtn_X = _SetPopupBtn_X;
	this.fSetBtnLeftArrow4 = _SetBtnLeftArrow4;
	this.fSetBtnRightArrow4 = _SetBtnRightArrow4;
	this.fTxtSetOp4 = _TxtSetOp4;
	this.fSetBtnLeftArrow3 = _SetBtnLeftArrow3;
	this.fSetBtnRightArrow3 = _SetBtnRightArrow3;
	this.fTxtSetOp3 = _TxtSetOp3;
	this.fSetBtnLeftArrow2 = _SetBtnLeftArrow2;
	this.fSetBtnRightArrow2 = _SetBtnRightArrow2;
	this.fTxtSetOp2 = _TxtSetOp2;
	this.fTxtSetOp1 = _TxtSetOp1;
	this.fSetBtnLeftArrow = _SetBtnLeftArrow;
	this.fSetBtnRightArrow = _SetBtnRightArrow;
	this.fResultP = _ResultP;
	this.fResultPopupBtn_Ok = _ResultPopupBtn_Ok;
	this.fResultGroupPieceButton = _ResultGroupPieceButton;
	this.fResultPopupBtn_StopP = _ResultPopupBtn_StopP;
	this.fPopupBtn_AgainP = _PopupBtn_AgainP;
	this.fResultPopupBtn_ContinueP = _ResultPopupBtn_ContinueP;
	this.fResultGroupLongShortButton = _ResultGroupLongShortButton;
	this.fResultPopupBtn_Stop = _ResultPopupBtn_Stop;
	this.fResultPopupBtn_Continue = _ResultPopupBtn_Continue;
	this.fResultGroupLongTestButton = _ResultGroupLongTestButton;
	this.fResultPopupBtn_TestStop = _ResultPopupBtn_TestStop;
	this.fResultPopupBtn_SendMail = _ResultPopupBtn_SendMail;
	this.fResultNicknameTxt = _ResultNicknameTxt;
	this.fResultGroupPieceWord = _ResultGroupPieceWord;
	this.fResultPracticeValueP = _ResultPracticeValueP;
	this.fResultAccuracyValueP = _ResultAccuracyValueP;
	this.fResultWrongValueP = _ResultWrongValueP;
	this.fResultWholeValueP = _ResultWholeValueP;
	this.fResultTitleTxtP1 = _ResultTitleTxtP1;
	this.fResultTitleTxtP2 = _ResultTitleTxtP2;
	this.fResultGroupShortWord = _ResultGroupShortWord;
	this.fResultPracticeValueS = _ResultPracticeValueS;
	this.fResultAccuracyValueS = _ResultAccuracyValueS;
	this.fResultFastValueS = _ResultFastValueS;
	this.fResultGroupLongWord = _ResultGroupLongWord;
	this.fResultPracticeValueL = _ResultPracticeValueL;
	this.fResultAccuracyValueL = _ResultAccuracyValueL;
	this.fResultMeanValueL = _ResultMeanValueL;
	this.fResultTitleTxtL = _ResultTitleTxtL;
	this.fChaIconYaya = _ChaIconYaya;
	this.fResultPopupBtn_X = _ResultPopupBtn_X;
	this.fBResultP = _BResultP;
	this.fBResultListDate1 = _BResultListDate1;
	this.fBResultListPage1 = _BResultListPage1;
	this.fBResultListValue1 = _BResultListValue1;
	this.fBResultListPersent1 = _BResultListPersent1;
	this.fBResultListName1 = _BResultListName1;
	this.fBResultListDate2 = _BResultListDate2;
	this.fBResultListPage2 = _BResultListPage2;
	this.fBResultListValue2 = _BResultListValue2;
	this.fBResultListPersent2 = _BResultListPersent2;
	this.fBResultListName2 = _BResultListName2;
	this.fBResultListDate3 = _BResultListDate3;
	this.fBResultListPage3 = _BResultListPage3;
	this.fBResultListValue3 = _BResultListValue3;
	this.fBResultListPersent3 = _BResultListPersent3;
	this.fBResultListName3 = _BResultListName3;
	this.fBResultListDate4 = _BResultListDate4;
	this.fBResultListPage4 = _BResultListPage4;
	this.fBResultListValue4 = _BResultListValue4;
	this.fBResultListPersent4 = _BResultListPersent4;
	this.fBResultListName4 = _BResultListName4;
	this.fBResultListDate5 = _BResultListDate5;
	this.fBResultListPage5 = _BResultListPage5;
	this.fBResultListValue5 = _BResultListValue5;
	this.fBResultListPersent5 = _BResultListPersent5;
	this.fBResultListName5 = _BResultListName5;
	this.fBResultListDate6 = _BResultListDate6;
	this.fBResultListPage6 = _BResultListPage6;
	this.fBResultListValue6 = _BResultListValue6;
	this.fBResultListPersent6 = _BResultListPersent6;
	this.fBResultListName6 = _BResultListName6;
	this.fBResultListDate7 = _BResultListDate7;
	this.fBResultListPage7 = _BResultListPage7;
	this.fBResultListValue7 = _BResultListValue7;
	this.fBResultListPersent7 = _BResultListPersent7;
	this.fBResultListName7 = _BResultListName7;
	this.fBResultListDate8 = _BResultListDate8;
	this.fBResultListPage8 = _BResultListPage8;
	this.fBResultListValue8 = _BResultListValue8;
	this.fBResultListPersent8 = _BResultListPersent8;
	this.fBResultListName8 = _BResultListName8;
	this.fBResultListDate9 = _BResultListDate9;
	this.fBResultListPage9 = _BResultListPage9;
	this.fBResultListValue9 = _BResultListValue9;
	this.fBResultListPersent9 = _BResultListPersent9;
	this.fBResultListName9 = _BResultListName9;
	this.fBResultListDate10 = _BResultListDate10;
	this.fBResultListPage10 = _BResultListPage10;
	this.fBResultListValue10 = _BResultListValue10;
	this.fBResultListPersent10 = _BResultListPersent10;
	this.fBResultListName10 = _BResultListName10;
	this.fChangeTitleP = _ChangeTitleP;
	this.fInputFieldtext = _InputFieldtext;
	this.fInputCursor = _InputCursor;
	this.fSendResultPoint = _SendResultPoint;
	this.fSendContentPanelP4 = _SendContentPanelP4;
	this.fSendContentPanelP2 = _SendContentPanelP2;
	this.fInputCursorC5 = _InputCursorC5;
	this.fNoticeSmallContentTxt1 = _NoticeSmallContentTxt1;
	this.fSendSemiContentC5 = _SendSemiContentC5;
	this.fSendSemiContentC4 = _SendSemiContentC4;
	this.fSendSemiContentC45 = _SendSemiContentC45;
	this.fSendSemiContentC44 = _SendSemiContentC44;
	this.fSendSemiContentC43 = _SendSemiContentC43;
	this.fSendSemiContentC42 = _SendSemiContentC42;
	this.fSendSemiContentC41 = _SendSemiContentC41;
	this.fSendSemiContentC3 = _SendSemiContentC3;
	this.fSendSemiContentC2 = _SendSemiContentC2;
	this.fSendResultPopupBtnX = _SendResultPopupBtnX;
	this.fPopupBtn_Cancels = _PopupBtn_Cancels;
	this.fPopupBtn_Send = _PopupBtn_Send;
	this.fInputCursorC2 = _InputCursorC2;
	this.fHyperLink = _HyperLink;
	this.fToastMessageGroup = _ToastMessageGroup;
	this.fToastMessageText = _ToastMessageText;
	this.fToastTransPanel = _ToastTransPanel;
	this.afterCreate();

};

/* --- end generated code --- */

MenuV2.prototype.beforeConstruct = function() {

};

MenuV2.prototype.afterConstruct = function() {
};

MenuV2.prototype.beforeInit = function() {

};

MenuV2.prototype.afterInit = function() {
	this.initUserField();
};

MenuV2.prototype.beforePreload = function() {

};

MenuV2.prototype.afterPreload = function() {
	this.game.stage.disableVisibilityChange = true;
};

MenuV2.prototype.beforeCreate = function() {
	that = this;
	this.createScript();

	// 크롬인지 ie인지 체크
	var agent = navigator.userAgent.toLowerCase();
	if (agent.indexOf("chrome") != -1) {
		mGameStartAgent = this.gameConst.GameAgentType.CHROM;
	} else {
		mGameStartAgent = this.gameConst.GameAgentType.IE;
	}
};

var mGameStartAgent = 0; // 어떤 브라우저인지 체크
var mGameStartState = 0; // 에디터에서 실행할 때와 빌드해서 웹에서 실행할 때를 구분

MenuV2.prototype.afterCreate = function() {
	this.fPopupGroup.visible = false;
	this.fStageInfo11.visible = false;
	this.fStageInfo12.visible = false;
	this.fStageInfo21.visible = false;
	this.fStageInfo22.visible = false;
	this.fStageInfo31.visible = false;
	this.fStageInfo32.visible = false;
	this.fStageInfo41.visible = false;
	this.fStageInfo42.visible = false;
	this.fHandImgs.visible = false;

	this.fOptionBtn3.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fToastMessageGroup.visible = false;

	this.fOptionBtnSmall.visible = false;

	this.fKeyStepGroup09.visible = false;
	this.fKeyStepGroup10.visible = false;
	this.fKeyStepGroup11.visible = false;
	this.fKeyStepGroup12.visible = false;
	this.fKeyStepGroup13.visible = false;
	this.fKeyStepGroup14.visible = false;

	// 0509 긴글 목록 제거관련 버튼 주석처리
	this.fSetBtnLeftArrow.visible = false;
	this.fSetBtnRightArrow.visible = false;

	this.AddAudio();

	// this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
	this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
	// this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.NO_SCALE;

	// 에디터에서 실행할때와 빌드해서 웹에서 실행할 때를 구분
	// mGameStartState = this.gameConst.GameStartType.EDIT;
	mGameStartState = this.gameConst.GameStartType.WEB;

	that.ajaxManager.netReqReadTajaContents(1, 1,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);
	that.ajaxManager.netReqReadTajaContents(2, 1,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);
	that.ajaxManager.netReqReadTajaContents(1, 2,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);
	that.ajaxManager.netReqReadTajaContents(2, 2,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);
	that.ajaxManager.netReqReadTajaContents(1, 3,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);
	that.ajaxManager.netReqReadTajaContents(2, 3,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);
	that.ajaxManager.netReqReadTajaContents(1, 4,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);
	that.ajaxManager.netReqReadTajaContents(2, 4,
			netReqReadTajaContentsSuccess, netReqReadTajaContentsFail);

	if (mGameStartState === this.gameConst.GameStartType.WEB) {
		setSessionIDLogin();
	} else if (mGameStartState === this.gameConst.GameStartType.EDIT) {
		// that.gameConst.sessionID = "678bc94e-5e4f-4d2b-aaa0-35f13bf107a4";
		this.SetIngameCharacterAni(this.gameConst.userCharacterType); // 캐릭터
																		// 타입..
		this.fCharSheetUser.visible = true;
		this.fCharSheetUser.setPlay("IDLE");

		this.gameUtil.setText(this.fNicknameTxt, 0, 0, "center", "top",
				this.gameConst.userNickName); // 닉네임..
		that.gameConst.uuid = 2219;
		// that.gameConst.uuid = 0;

		that.ajaxManager.netReqRequestGameResult(that.gameConst.uuid,
				netResRequestGameResultSuccess, netResRequestGameResultFail);
		that.ajaxManager.netReqRequestTypingSetup(that.gameConst.uuid,
				netResRequestTypingSetupSuccess, netResRequestTypingSetupFail);
		that.ajaxManager.netReqRequestTypingPosPractice(that.gameConst.uuid,
				netResRequestTypingPosPracticeSuccess,
				netResRequestTypingPosPracticeFail);
	}

	this.fWordInputCursor.visible = false;
	this.fWordInputCursorAni.visible = true;
	this.fWordInputCursorAni.animations.play("PLAY");

	this.TajaConfigDataLoad();
	this.TajaScoreDataLoad();

	this.KeyboardInit();

	this.StageInfo();

	this.createFingerImage();

	this.InitTasuStatistics();

	mLongMenuSavePage = 1;
	mGameWordType = this.gameConst.GameWordType.NONE;

	this.SeatPracticeCreate();
	this.WordPracticeCreate();
	this.ShortPracticeCreate();
	this.LongPracticeCreate();
};

// 사운드 처리 변수
var click_sound; // 버튼 클릭
var typing_err; // 틀린 경우
var typing_back; // back 키 누를 경우
var typing_Music; // 메뉴 배경음
var typing_key; // 키 누를 경우
var popup_sound; // 팝업창
var typing_ent; // 맞는 경우
var tog_sound; // 토글 클릭

// 사운드 추가
MenuV2.prototype.AddAudio = function() {
	click_sound = this.add.audio('click_sound');
	typing_err = this.add.audio('typing_err');
	typing_back = this.add.audio('typing_back');
	typing_Music = this.add.audio('typing_Music');
	typing_key = this.add.audio('typing_key');
	popup_sound = this.add.audio('popup_sound');
	typing_ent = this.add.audio('typing_ent');
	tog_sound = this.add.audio('tog_sound');
};

// 타자 통계 데이터 초기화
MenuV2.prototype.InitTasuStatistics = function() {
	for (var i = 0; i < 4; i++) {
		for (var j = 0; j < 47; j++) {
			mTajaHangulTasu[i][j] = 0;
			mTajaHangulRight[i][j] = 0;
			mTajaHangulSpeed[i][j] = 0;
		}
	}

	for (var i = 0; i < 2; i++) {
		for (var j = 0; j < 47; j++) {
			mTajaEnglishTasu[i][j] = 0;
			mTajaEnglishRight[i][j] = 0;
			mTajaEnglishSpeed[i][j] = 0;
		}
	}

	for (var i = 0; i < 4; i++) {
		for (var j = 0; j < 8; j++) {
			mTajaHangulFingerRight[i][j] = 0;
			mTajaHangulFingerSpeed[i][j] = 0;
		}
	}

	for (var i = 0; i < 2; i++) {
		for (var j = 0; j < 8; j++) {
			mTajaEnglishFingerRight[i][j] = 0;
			mTajaEnglishFingerSpeed[i][j] = 0;
		}
	}
};

MenuV2.prototype.update = function() {
	if (mTajaGameScore !== undefined) {
		this.gameUtil.setText(this.fPointValueTxt, 0, 0, "center", "top",
				mTajaGameScore);
	}

	if (mTajaGameHanEngKey === 1) {
		mTajaGamePopupType = 10;
		this.SetPublicPopup(1, "영문상태입니다. 한글로 바꿔주세요.", null,
				this.TajaGameHanEngConfirm);
	} else if (mTajaGameHanEngKey === 2) {
		mTajaGamePopupType = 10;
		this.SetPublicPopup(1, "한글상태입니다. 영문으로 바꿔주세요.", null,
				this.TajaGameHanEngConfirm);
	} else if (mTajaGameHanEngKey === 3) {
		mTajaGamePopupType = 10;
		that.SetPublicPopup(1, "한영키를 바꿔주세요.", null, this.TajaGameHanEngConfirm);
	}

	// 전체화면 누를 경우 버튼 이미지 변경
	if ((document.fullScreenElement !== undefined && document.fullScreenElement === null)
			|| (document.msFullscreenElement !== undefined && document.msFullscreenElement === null)
			|| (document.mozFullScreen !== undefined && !document.mozFullScreen)
			|| (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) {
		this.fOptionBtnSmall.visible = false;
		this.fOptionBtnWhole.visible = true;
	} else {
		this.fOptionBtnSmall.visible = true;
		this.fOptionBtnWhole.visible = false;
	}

	this.gameProcess();
};

// 한영키 변환 팝업창 처리
MenuV2.prototype.TajaGameHanEngConfirm = function() {
	if (mGameStateType === this.gameConst.GameStateType.SEAT) {
		userTajaTyping.value = "";
	} else if (mGameStateType === this.gameConst.GameStateType.WORD) {
		userTajaTyping.value = mWordInputText;
	} else if (mGameStateType === this.gameConst.GameStateType.SHORT) {
		userTajaTyping.value = mShortInputText;
	} else if (mGameStateType === this.gameConst.GameStateType.LONG) {
		userTajaTyping.value = mLongInputText;
	}

	mTajaGameHanEngKey = 0;
	this.SetPublicExitPopup();
};

var mGameStateType = 0; // 자리연습, 낱말 연습, 짧은글 연습, 긴글 연습 상태 처리
var mGameWordType = 0; // 자리연습, 낱말 연습, 짧은글 연습, 긴글 연습 상태 처리
var mIsTajaTypingFocus = false; // 타자 타이핑 포커스 유무
var mTajaLanguageType = 0; // 한글인지 영문인지 구분
var mTajaHangulType = 0; // 한글 글자판 구분
var mTajaEnglishType = 0; // 영문 글자판 구분
var mTajaFingerShow = true; // 키보드 손가락 활성화 여부
var mTajaSoundVolume = 50; // 사운드 볼륨
var mCharacterAniState = 0; // 캐릭터 애니메이션 상태

var mIsTajaCheckEnter = false; // 타자 키보드 입력 시 엔터 체크

var mTajaGameTimeStartFlag = false; // 타자 시작시 타임 동작
var mTajaGameStartTime = 0; // 타자 시작 시간 저장
var mTajaGameTime = 0; // 타자 시간 저장

var mTajaGameStatTime = 0; // 타자 통계 시간
var mTajaGameStatStartTime = 0; // 타자 통계 시작 시간

var mTajaGameScore = 0; // 타자 점수 저장
var mTajaGameSaveScore = 0; // 타자 점수 서버 저장

var mTajaContentsLongHanDatas; // 타자 컨텐츠 한글 긴글 저장
var mTajaContentsLongEngDatas; // 타자 컨텐츠 영어 긴글 저장
var mTajaContentsLongConceptHanDatas; // 타자 컨텐츠 한글 긴글 저장
var mTajaContentsLongConceptEngDatas; // 타자 컨텐츠 영어 긴글 저장
var mTajaContentsShortHanDatas; // 타자 컨텐츠 한글 짧은 글 저장
var mTajaContentsShortEngDatas; // 타자 컨텐츠 영어 짧은 글 저장
var mTajaContentsLongHanVankDatas; // 타자 컨텐츠 한글 긴글 반크 저장
var mTajaContentsLongEngVankDatas; // 타자 컨텐츠 영어 긴글 반크 저장

var mTajaGamePopupType = 0; // 팝업창 처리 시
var mTajaGameHanEngKey = 0; // 한영키 변경 시 상태 저장 (1 : 영문 -> 한글, 2 : 한글 -> 영문, 3 :
							// 세벌식일 경우 한영키)

var mTajaGameTajaSpeed = 0; // 통계 타자속도
var mTajaGameTajaSpeedCount = 0; // 통계 타자속도 몇번 했는지

var mTajaGameEngCheckStr = /[^a-zA-Z0-9-_=+\|;:'",./?{}!()@#$%^&*~`<>\[\] ]/g; // 영문에서
																				// 한글이
																				// 들어오는
																				// 경우
																				// 체크

var mTajaStartTime; // 로그 타자 시작 시간 처리
var mTajaGameKeyCode = 0; // 세벌식 초성 종성 구분 처리 위해 키보드 키 값 저장

// 설정값 저장
var mTajaConfigDatas = {
	queue : [ {
		lang : 0,
		hanType : 0,
		engType : 0,
		finger : 1,
		volum : 50
	} ]
};

var mTajaHangulFingerJaso = [
		[
				[ "1", "ㅂ", "ㅁ", "ㅋ", "!", "ㅃ", "", "" ], // 두벌식 왼손 소지
				[ "2", "ㅈ", "ㄴ", "ㅌ", "@", "ㅉ", "", "" ], // 두벌식 왼손 약지
				[ "3", "ㄷ", "ㅇ", "ㅊ", "#", "ㄸ", "", "" ], // 두벌식 왼손 중지
				[ "4", "ㄱ", "ㄹ", "ㅍ", "5", "ㅅ", "ㅎ", "ㅠ", "$", "ㄲ", "", "",
						"%", "ㅆ", "", "" ], // 두벌식 왼손 검지
				[ "6", "ㅛ", "ㅗ", "ㅜ", "7", "ㅕ", "ㅓ", "ㅡ", "^", "", "", "", "&",
						"", "", "" ], // 두벌식 오른손 검지
				[ "8", "ㅑ", "ㅏ", ",", "*", "", "", "" ], // 두벌식 오른손 중지
				[ "9", "ㅐ", "ㅣ", ".", "(", "ㅒ", "", "<" ], // 두벌식 오른손 약지
				[ "0", "ㅔ", ";", "/", "-", "[", "'", "=", "]", ")", "ㅖ", ":",
						"?", "_", "{", "\"", "+", "}", "\\", "|" ] ], // 두벌식
																		// 오른손
																		// 소지
		[
				[ "ㅎ", "ㅅ", "ㅇ", "ㅁ", "ㅈ", "ㅍ", "ㄷ", "ㅊ" ], // 세벌식390 왼손 소지
				[ "ㅆ", "ㄹ", "ㄴ", "ㄱ", "@", "ㅌ", "ㄶ", "ㅄ" ], // 세벌식390 왼손 약지
				[ "ㅂ", "ㅕ", "ㅣ", "ㅔ", "#", "ㅋ", "ㄺ", "ㄻ" ], // 세벌식390 왼손 중지
				[ "ㅛ", "ㅐ", "ㅏ", "ㅗ", "ㅠ", "ㅓ", "ㅡ", "ㅜ", "$", "ㅒ", "ㄲ", "ㅀ",
						"%", ";", "/", "!" ], // 세벌식390 왼손 검지
				[ "ㅑ", "ㄹ", "ㄴ", "ㅅ", "ㅖ", "ㄷ", "ㅇ", "ㅎ", "^", "<", "'", "0",
						"&", "7", "4", "1" ], // 세벌식390 오른손 검지
				[ "ㅢ", "ㅁ", "ㄱ", ",", "*", "8", "5", "2" ], // 세벌식390 오른손 중지
				[ "ㅜ", "ㅊ", "ㅈ", ".", "(", "9", "6", "3" ], // 세벌식390 오른손 약지
				[ "ㅋ", "ㅍ", "ㅂ", "ㅗ", "-", "[", "ㅌ", "=", "]", ")", ">", ":",
						"?", "_", "{", "\"", "+", "}", "\\" ] ], // 세벌식390
																	// 오른손 소지
		[
				[ "ㅎ", "ㅅ", "ㅇ", "ㅁ", "!", "", "", "-" ], // 세벌식 순아래 왼손 소지
				[ "ㅆ", "ㄹ", "ㄴ", "ㄱ", "@", "", "[", "=" ], // 세벌식 순아래 왼손 약지
				[ "ㅂ", "ㅕ", "ㅣ", "ㅔ", "#", "", "]", "\\" ], // 세벌식 순아래 왼손 중지
				[ "ㅛ", "ㅐ", "ㅏ", "ㅗ", "ㅠ", "ㅓ", "ㅡ", "ㅜ", "$", "", "", "", "%",
						";", "/", "!" ], // 세벌식 순아래 왼손 검지
				[ "ㅑ", "ㄹ", "ㄴ", "ㅅ", "ㅖ", "ㄷ", "ㅇ", "ㅎ", "^", "<", "'", "0",
						"&", "7", "4", "1" ], // 세벌식 순아래 오른손 검지
				[ "ㅢ", "ㅁ", "ㄱ", ",", "*", "8", "5", "2" ], // 세벌식 순아래 오른손 중지
				[ "ㅋ", "ㅊ", "ㅈ", ".", "(", "9", "6", "3" ], // 세벌식 순아래 오른손 약지
				[ "ㅒ", "ㅍ", "ㅂ", "ㄷ", "ㅈ", "ㅌ", "ㅌ", "ㅊ", "ㅍ", ")", ">", ":",
						"?", "-", "{", "\"", "+", "}", "ㅋ", "|" ] ], // 세벌식
																		// 순아래
																		// 오른손
																		// 소지
		[
				[ "ㅎ", "ㅅ", "ㅇ", "ㅁ", "ㄲ", "ㅍ", "ㄷ", "ㅊ" ], // 세벌식 최종 왼손 소지
				[ "ㅆ", "ㄹ", "ㄴ", "ㄱ", "ㄺ", "ㅌ", "ㄶ", "ㅄ" ], // 세벌식 최종 왼손 약지
				[ "ㅂ", "ㅕ", "ㅣ", "ㅔ", "ㅈ", "ㄵ", "ㄼ", "ㅋ" ], // 세벌식 최종 왼손 중지
				[ "ㅛ", "ㅐ", "ㅏ", "ㅗ", "ㅠ", "ㅓ", "ㅡ", "ㅜ", "ㄿ", "ㅀ", "ㄻ", "ㄳ",
						"ㄾ", "ㄽ", "ㅒ", "?" ], // 세벌식 최종 왼손 검지
				[ "ㅑ", "ㄹ", "ㄴ", "ㅅ", "ㅖ", "ㄷ", "ㅇ", "ㅎ", "=", "5", "0", "-",
						"“", "6", "1", "\"" ], // 세벌식 최종 오른손 검지
				[ "ㅢ", "ㅁ", "ㄱ", ",", "”", "7", "2", "" ], // 세벌식 최종 오른손 중지
				[ "ㅜ", "ㅊ", "ㅈ", ".", "'", "8", "3", "" ], // 세벌식 최종 오른손 약지
				[ "ㅋ", "ㅍ", "ㅂ", "ㅗ", ")", "(", "ㅌ", ">", "<", "~", "9", "4",
						"!", ";", "%", "·", "+", "/", ":", "\\" ] ] ]; // 세벌식
																		// 최종
																		// 오른손
																		// 소지
// 손가락 위치별 키보드값 저장
var mTajaHangulFingerJasoCode = [
		[ 49, 81, 65, 90, 49, 81, 65, 90 ], // 왼손 소지
		[ 50, 87, 83, 88, 50, 87, 83, 88 ], // 왼손 약지
		[ 51, 69, 68, 67, 51, 69, 68, 67 ], // 왼손 중지
		[ 52, 82, 70, 86, 53, 84, 71, 66, 52, 82, 70, 86, 53, 84, 71, 66 ], // 왼손
																			// 검지
		[ 54, 89, 72, 78, 55, 85, 74, 77, 54, 89, 72, 78, 55, 85, 74, 77 ], // 오른손
																			// 검지
		[ 56, 73, 75, 44, 56, 73, 75, 60 ], // 오른손 중지
		[ 57, 79, 76, 46, 57, 79, 76, 62 ], // 오른손 약지
		[ 48, 80, 59, 47, 45, 91, 39, 61, 93, 48, 80, 58, 63, 95, 123, 34, 43,
				125, 92, 124 ] ]; // 오른손 소지 // 오른손 소지
// 키보드 위치별 자소 저장
var mTajaHangulJaso = [
		[ "`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=",
				"\\", // 두벌식
				"ㅂ", "ㅈ", "ㄷ", "ㄱ", "ㅅ", "ㅛ", "ㅕ", "ㅑ", "ㅐ", "ㅔ", "[", "]",
				"ㅁ", "ㄴ", "ㅇ", "ㄹ", "ㅎ", "ㅗ", "ㅓ", "ㅏ", "ㅣ", ";", "'", "ㅋ",
				"ㅌ", "ㅊ", "ㅍ", "ㅠ", "ㅜ", "ㅡ", ",", ".", "/" ],
		[ "`", "ㅎ", "ㅆ", "ㅂ", "ㅛ", "ㅠ", "ㅑ", "ㅖ", "ㅢ", "ㅜ", "ㅋ", "-", "=",
				"\\", // 세벌식 390
				"ㅅ", "ㄹ", "ㅕ", "ㅐ", "ㅓ", "ㄹ", "ㄷ", "ㅁ", "ㅊ", "ㅍ", "[", "]",
				"ㅇ", "ㄴ", "ㅣ", "ㅏ", "ㅡ", "ㄴ", "ㅇ", "ㄱ", "ㅈ", "ㅂ", "ㅌ", "ㅁ",
				"ㄱ", "ㅔ", "ㅗ", "ㅜ", "ㅅ", "ㅎ", ",", ".", "ㅗ" ],
		[ "`", "ㅎ", "ㅆ", "ㅂ", "ㅛ", "ㅠ", "ㅑ", "ㅖ", "ㅢ", "ㅋ", "ㅒ", "ㅈ", "ㅊ", "ㅋ", // 세벌식
																				// 순아래
		"ㅅ", "ㄹ", "ㅕ", "ㅐ", "ㅓ", "ㄹ", "ㄷ", "ㅁ", "ㅊ", "ㅍ", "ㅌ", "ㅍ", "ㅇ", "ㄴ",
				"ㅣ", "ㅏ", "ㅡ", "ㄴ", "ㅇ", "ㄱ", "ㅈ", "ㅂ", "ㅌ", "ㅁ", "ㄱ", "ㅔ",
				"ㅗ", "ㅜ", "ㅅ", "ㅎ", ",", ".", "ㄷ" ],
		[ "`", "ㅎ", "ㅆ", "ㅂ", "ㅛ", "ㅠ", "ㅑ", "ㅖ", "ㅢ", "ㅜ", "ㅋ", ")", ">", ":", // 세벌식
																				// 최종
		"ㅅ", "ㄹ", "ㅕ", "ㅐ", "ㅓ", "ㄹ", "ㄷ", "ㅁ", "ㅊ", "ㅍ", "(", "<", "ㅇ", "ㄴ",
				"ㅣ", "ㅏ", "ㅡ", "ㄴ", "ㅇ", "ㄱ", "ㅈ", "ㅂ", "ㅌ", "ㅁ", "ㄱ", "ㅔ",
				"ㅗ", "ㅜ", "ㅅ", "ㅎ", ",", ".", "ㅗ" ] ];
// 키보드 위치별 자소 키값 저장
var mTajaHangulJasoCode = [ 192, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 189,
		187, 220, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 219, 221, 65, 83, 68,
		70, 71, 72, 74, 75, 76, 186, 222, 90, 88, 67, 86, 66, 78, 77, 188, 190,
		191 ];
var mTajaHangulTasu = [ [], [], [], [] ]; // 통계 한글 타수
var mTajaHangulRight = [ [], [], [], [] ]; // 통계 한글 정타
var mTajaHangulSpeed = [ [], [], [], [] ]; // 통계 한글 속도
var mTajaHangulFingerRight = [ [], [], [], [] ]; // 통계 한글 손가락 정타
var mTajaHangulFingerSpeed = [ [], [], [], [] ]; // 통계 한글 손가락 속도

var mTajaEnglishFingerAlphabet = [ [ [ "1", "Q", "A", "Z" ], // 쿼티 왼손 소지
[ "2", "W", "S", "X" ], // 쿼티 왼손 약지
[ "3", "E", "D", "C" ], // 쿼티 왼손 중지
[ "4", "R", "F", "V", "5", "T", "G", "B" ], // 쿼티 왼손 검지
[ "6", "Y", "H", "N", "7", "U", "J", "M" ], // 쿼티 오른손 검지
[ "8", "I", "K", "," ], // 쿼티 오른손 중지
[ "9", "O", "L", "." ], // 쿼티 오른손 약지
[ "0", "P", ";", "/", "-", "[", "'", "+", "]" ] ], // 쿼티 오른손 소지
[ [ "1", "'", "A", ";", "!", "", "\"", ":" ], // 드보락 왼손 소지
[ "2", ",", "O", "Q", "@", "<" ], // 드보락 왼손 약지
[ "3", ".", "E", "J", "#", ">" ], // 드보락 왼손 중지
[ "4", "P", "U", "K", "5", "Y", "I", "X" ], // 드보락 왼손 검지
[ "6", "F", "D", "B", "7", "G", "H", "M" ], // 드보락 오른손 검지
[ "8", "C", "T", "W", "*" ], // 드보락 오른손 중지
[ "9", "R", "N", "V", "(" ], // 드보락 오른손 약지
[ "0", "L", "S", "Z", ")", "[", "/", "-", "]", "=" ] ] ]; // 드보락 오른손 소지

var mTajaEnglishAlphabet = [
		[ "`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=",
				"\\", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[",
				"]", "A", "S", "D", "F", "G", "H", "J", "K", "L", ";", "'",
				"Z", "X", "C", "V", "B", "N", "M", ",", ".", "/" ], // 쿼티
		[ "`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "[", "]",
				"\\", "'", ",", ".", "P", "Y", "F", "G", "C", "R", "L", "/",
				"=", "A", "O", "E", "U", "I", "D", "H", "T", "N", "S", "-",
				";", "Q", "J", "K", "X", "B", "M", "W", "V", "Z" ] ]; // 드보락
var mTajaEnglishTasu = [ [], [] ]; // 통계 영어 타수
var mTajaEnglishRight = [ [], [] ]; // 통계 영어 정타
var mTajaEnglishSpeed = [ [], [] ]; // 통계 영어 속도
var mTajaEnglishFingerRight = [ [], [] ]; // 통계 영어 손가락 정타
var mTajaEnglishFingerSpeed = [ [], [] ]; // 통계 영어 손가락 속도

MenuV2.prototype.createScript = function() {
	this.gameUtil = GameUtil.getInstance();
	this.gameConst = GameConst.getInstance();
	this.ajaxManager = AjaxManager.getInstance();
	this.config = Config.getInstance();
};

MenuV2.prototype.gameProcess = function() {
	if (mIsTajaTypingFocus === false) {
		userTajaTyping.focus();
	}

	if (mGameStateType === this.gameConst.GameStateType.SEAT) {
		this.SeatGameProcess();
	} else if (mGameStateType === this.gameConst.GameStateType.WORD) {
		this.WordGameProcess();
	} else if (mGameStateType === this.gameConst.GameStateType.SHORT) {
		this.ShortGameProcess();
	} else if (mGameStateType === this.gameConst.GameStateType.LONG) {
		if (this.fChangeTitleP.visible === true) {
			this.SetChangeTitleText();
		} else if (this.fSendResultPoint.visible === true) {
			this.SendResultProcess();
		} else {
			this.LongGameProcess();
		}
	}

	if (this.fSendResultPoint.visible === true) {
		this.SendResultProcess();
	}

	this.CharacterAnimation();
};

// 화면 상단 정보 표시
MenuV2.prototype.StageInfo = function() {

	this.fStageUserStepPracticeSet.visible = false;
	this.fVankTitle.visible = false;
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			this.fStageUserTypingSet.text = "두벌식 표준     ";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			this.fStageUserTypingSet.text = "세벌식 390     ";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			this.fStageUserTypingSet.text = "세벌식 순아래     ";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			this.fStageUserTypingSet.text = "세벌식 최종     ";
		}
	} else {
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			this.fStageUserTypingSet.text = "쿼티     ";
		} else if (mTajaEnglishType === this.gameConst.EnglishType.DVORAK) {
			this.fStageUserTypingSet.text = "드보락     ";
		}
	}

	// 짧은 글 연습 일 경우
	var shortTitleText = [ "모든 문장", "역사/문화", "속담/명언", "기타", "이벤트" ];
	if (mGameStateType === this.gameConst.GameStateType.SHORT
			&& this.fStageInfo32.visible === true) {
		this.fStageUserStepPracticeSet.visible = true;
		this.fStageUserStepSet.text = shortTitleText[mShortPracticsSelect];
	}

	// 글자판텍스트 x좌표 값 처리
	if (mGameStateType === this.gameConst.GameStateType.SEAT
			|| mGameStateType === this.gameConst.GameStateType.WORD) {
		this.fStageUserPracticeSet.x = 326;
	} else if (mGameStateType === this.gameConst.GameStateType.SHORT) {
		this.fStageUserPracticeSet.x = 326 + 40;
	} else if (mGameStateType === this.gameConst.GameStateType.LONG) {
		this.fStageUserPracticeSet.x = 326 + 15;
		this.fStageUserStepPracticeSet.visible = false;

		this.fVankTitle.visible = true;
	}
};

MenuV2.prototype.initUserField = function() {
	onUserTextField = "<div id=" + "TajaControlUser" + " style="
			+ "position:absolute;left:" + "375" + "px;top:" + "-100"
			+ "px;width:300px;height:22px;" + "focus" + ">";

	onUserTextFieldInput = "<input type="
			+ "text"
			+ " id="
			+ "userTajaTyping"
			+ " style='ime-mode: auto; border:0px; border-style : none; background-color:transparent; color : white; outline-style:none;'"
			+ " onpaste=\"javascript:return false;\"" + " autofocus><br>"
			+ "</div>";

	userTajaBackground.innerHTML = onUserTextField + onUserTextFieldInput;
};

// 마이페이지 버튼
MenuV2.prototype.MyPageButton = function() {
	this.playAudio(click_sound, mTajaSoundVolume, false);
	this.OpenWindowMyPage();
};

// 웹사이트 마이 페이지
MenuV2.prototype.OpenWindowMyPage = function() {
	window
			.open(
					that.config.getWebpageAPIURL() + "mypage/",
					"한컴타자새창",
					"width=1366, height=800, toolbar=yes, menubar=yes, scrollbars=yes, resizable=yes");

	if ((document.fullScreenElement !== undefined && document.fullScreenElement === null)
			|| (document.msFullscreenElement !== undefined && document.msFullscreenElement === null)
			|| (document.mozFullScreen !== undefined && !document.mozFullScreen)
			|| (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) {
	} else {
		if (document.cancelFullScreen) {
			document.cancelFullScreen();
		} else if (document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if (document.webkitCancelFullScreen) {
			document.webkitCancelFullScreen();
		} else if (document.msExitFullscreen) {
			document.msExitFullscreen();
		}
	}
};

// 창크기 버튼
MenuV2.prototype.WindowSizeButton = function() {
	this.playAudio(click_sound, mTajaSoundVolume, false);
	this.toggleFullScreen(document.body);
};

// 풀 스크린 처리
MenuV2.prototype.toggleFullScreen = function(elem) {
	if ((document.fullScreenElement !== undefined && document.fullScreenElement === null)
			|| (document.msFullscreenElement !== undefined && document.msFullscreenElement === null)
			|| (document.mozFullScreen !== undefined && !document.mozFullScreen)
			|| (document.webkitIsFullScreen !== undefined && !document.webkitIsFullScreen)) {
		if (elem.requestFullScreen) {
			elem.requestFullScreen();
		} else if (elem.mozRequestFullScreen) {
			elem.mozRequestFullScreen();
		} else if (elem.webkitRequestFullScreen) {
			elem.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
		} else if (elem.msRequestFullscreen) {
			elem.msRequestFullscreen();
		}
	} else {
		if (document.cancelFullScreen) {
			document.cancelFullScreen();
		} else if (document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if (document.webkitCancelFullScreen) {
			document.webkitCancelFullScreen();
		} else if (document.msExitFullscreen) {
			document.msExitFullscreen();
		}
	}
};

// 도움말 버튼
MenuV2.prototype.HelpButton = function() {
	this.SetHelpPopup();
};

// 설정 버튼
MenuV2.prototype.SettingButton = function() {
	this.SetSettingPopup();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 돌아가기 버튼
MenuV2.prototype.GoBackButton = function() {
	if (mGameStateType === this.gameConst.GameStateType.SEAT) {
		this.SeatPracticeButton();
	} else if (mGameStateType === this.gameConst.GameStateType.WORD) {
		this.WordPracticeButton();
	} else if (mGameStateType === this.gameConst.GameStateType.SHORT) {
		this.ShortPracticeButton();
	} else if (mGameStateType === this.gameConst.GameStateType.LONG) {
		this.LongPracticeButton();
	}
};

// 자리 연습 버튼
MenuV2.prototype.SeatPracticeButton = function() {
	this.SetPracticeLog();

	if (this.fStageInfo11.visible === false) {
		this.SeatPracticeHide();
		this.WordPracticeShow();
		this.ShortPracticeShow();
		this.LongPracticeShow();

		this.SeatPracticeInit();
	}

	this.fHandImgs.visible = false;
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 버튼
MenuV2.prototype.WordPracticeButton = function() {
	this.SetPracticeLog();

	if (this.fStageInfo21.visible === false) {
		this.SeatPracticeShow();
		this.WordPracticeHide();
		this.ShortPracticeShow();
		this.LongPracticeShow();

		this.WordPracticeInit();
	}

	this.fHandImgs.visible = false;
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 짦은글 연습 버튼
MenuV2.prototype.ShortPracticeButton = function() {
	this.SetPracticeLog();

	if (this.fStageInfo31.visible === false) {
		this.SeatPracticeShow();
		this.WordPracticeShow();
		this.ShortPracticeHide();
		this.LongPracticeShow();

		this.ShortPracticeInit();
	}

	this.fHandImgs.visible = false;
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 연습 버튼
MenuV2.prototype.LongPracticeButton = function() {
	this.SetPracticeLog();

	if (mGameStateType !== this.gameConst.GameStateType.LONG) {
		var continueValue = this.LongContinueRead();
		mLongPracticsSelect = continueValue[0];
		mLongShowPage = continueValue[2];
		console.log('페이지값', continueValue[2]);
		if (mLongShowPage > 0) {
			this.SetPublicPopup(2, "진행중이던 긴 글 연습이 있습니다.\n이어서 하시겠습니까?",
					this.ContinueConfirm, this.ContinueCancel);
		}

		if (mLongPracticsSelect === 0) { // 문화/예술
			this.LongPracticeMenuTabSelectInit();
		} else if (mLongPracticsSelect === 1) { // 불러온 글
			this.LongPracticeMenuTabCallInit();
		} else if (mLongPracticsSelect === 2) { // 반크
			this.LongPracticeMenuTabVankInit();
		} else if (mLongPracticsSelect === 3) { // 개념원리
			this.LongPracticeMenuTabConceptInit();
		}
	}

	if (this.fStageInfo41.visible === false) {
		this.SeatPracticeShow();
		this.WordPracticeShow();
		this.ShortPracticeShow();
		this.LongPracticeHide();

		this.LongPracticeInit();
	}

	this.fHandImgs.visible = false;
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 버튼이 안 눌리게 하고 이미지 변경
MenuV2.prototype.SeatPracticeHide = function() {
	this.fMenuTapBtn.setFrames(1, 1, 1, 1);

	this.fStageInfo11.visible = true;
	this.fStageInfo12.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	mGameWordType = this.gameConst.GameWordType.NONE;

	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 자리 연습 버튼이 눌리게 하고 이미지 변경
MenuV2.prototype.SeatPracticeShow = function() {
	this.fMenuTapBtn.setFrames(0, 0, 0, 0);

	this.fStageInfo11.visible = false;
	this.fStageInfo12.visible = false;
};

// 낱말 연습 버튼이 안 눌리게 하고 이미지 변경
MenuV2.prototype.WordPracticeHide = function() {
	this.fMenuTapBtn1.setFrames(1, 1, 1, 1);

	this.fStageInfo21.visible = true;
	this.fStageInfo22.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	mGameWordType = this.gameConst.GameWordType.NONE;

	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 낱말 연습 버튼이 눌리게 하고 이미지 변경
MenuV2.prototype.WordPracticeShow = function() {
	this.fMenuTapBtn1.setFrames(0, 0, 0, 0);

	this.fStageInfo21.visible = false;
	this.fStageInfo22.visible = false;

	mGameWordType = this.gameConst.GameWordType.NONE;
};

// 짧은글 연습 버튼이 안 눌리게 하고 이미지 변경
MenuV2.prototype.ShortPracticeHide = function() {
	this.fMenuTapBtn2.setFrames(1, 1, 1, 1);

	this.fStageInfo31.visible = true;
	this.fStageInfo32.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	mGameWordType = this.gameConst.GameWordType.NONE;

	this.ShortPracticeEventButtonShow();

	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 짧은글 연습 이벤트 버튼 활성화 유무 체크
MenuV2.prototype.ShortPracticeEventButtonShow = function() {
	this.fBtnShortWordEvent.visible = false;

	// if(mTajaLanguageType === that.gameConst.LanguageType.HANGUL){
	// if(that.mTajaContentsShortHanDatas != undefined){
	// this.fBtnShortWordEvent.visible = true;
	// }
	// }else{
	// if(that.mTajaContentsShortEngDatas != undefined){
	// this.fBtnShortWordEvent.visible = true;
	// }
	// }
	console.log("The Btn is Disappear...")
};

// 짧은글 연습 버튼이 눌리게 하고 이미지 변경
MenuV2.prototype.ShortPracticeShow = function() {
	this.fMenuTapBtn2.setFrames(0, 0, 0, 0);

	this.fStageInfo31.visible = false;
	this.fStageInfo32.visible = false;

	mGameWordType = this.gameConst.GameWordType.NONE;
};

// 긴글 연습 버튼이 안 눌리게 하고 이미지 변경
MenuV2.prototype.LongPracticeHide = function() {
	this.fMenuTapBtn3.setFrames(1, 1, 1, 1);

	this.fStageInfo41.visible = true;
	this.fStageInfo42.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	if (that.gameConst.uuid != 0) {
		this.fListBtnTestResult41.visible = true;
		this.fListBtnTestResult41T.visible = true;
	} else {
		this.fListBtnTestResult41.visible = false;
		this.fListBtnTestResult41T.visible = false;
	}

	mGameWordType = this.gameConst.GameWordType.NONE;

	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 긴글 연습 버튼이 눌리게 하고 이미지 변경
MenuV2.prototype.LongPracticeShow = function() {
	this.fMenuTapBtn3.setFrames(0, 0, 0, 0);

	this.fStageInfo41.visible = false;
	this.fStageInfo42.visible = false;

	mGameWordType = this.gameConst.GameWordType.NONE;
};

// 캐릭터 애니메이션 처리
MenuV2.prototype.CharacterAnimation = function() {
	if (mCharacterAniState !== 0) {
		if (this.fCharSheetUser.animations.currentAnim.name === "IDLE") {
			if (mCharacterAniState === 1) {
				this.fCharSheetUser.setPlay("RIGHT");
			} else if (mCharacterAniState === 2) {
				this.fCharSheetUser.setPlay("WRONG");
			}
		}

		if (mCharacterAniState === 1) {
			if (mGameStateType !== this.gameConst.GameStateType.SEAT) {
				this.playAudio(typing_ent, mTajaSoundVolume, false);
			}
		} else if (mCharacterAniState === 2) {
			this.playAudio(typing_err, mTajaSoundVolume, false);
		}

		mCharacterAniState = 0;
	}
};

// 자판 초기화
MenuV2.prototype.KeyboardInit = function() {
	document.getElementById("userTajaTyping").style.imeMode = "disabled";
	userTajaTyping.blur();

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		setTimeout(
				function() {
					if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
						ohiChange('Ko', '2-KSX5002');
					} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
						ohiChange('Ko', '3-90');
					} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
						ohiChange('Ko', '3-sun1990');
					} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
						ohiChange('Ko', '3-91');
					}
				}, 100);
	} else {
		setTimeout(function() {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				ohiChange('En', 'qwerty');
			} else {
				ohiChange('En', 'dvorak');
			}
		}, 100);
	}
};

/**
 * 자리 연습
 */

// 단계별 출력 텍스트 처리
var mSeatHanOneStep = [ "ㅁ", "ㄴ", "ㅇ", "ㄹ", "ㅓ", "ㅏ", "ㅣ", ";" ];
var mSeatHanTwoStep = [ "ㅂ", "ㅈ", "ㄷ", "ㄱ" ];
var mSeatHanThreeStep = [ "ㅅ", "ㅛ", "ㅎ", "ㅗ", "ㅠ", "ㅜ" ];
var mSeatHanFourStep = [ "ㅕ", "ㅑ", "ㅐ", "ㅔ" ];
var mSeatHanFiveStep = [ "ㅋ", "ㅌ", "ㅊ", "ㅍ" ];
var mSeatHanSixStep = [ "ㅜ", "ㅡ", ",", "." ];
var mSeatHanSevenStep = [ "ㅂ", "ㅈ", "ㄷ", "ㄱ", "ㅅ", "ㅃ", "ㅉ", "ㄸ", "ㄲ", "ㅆ" ];
var mSeatHanEightStep = [ "ㅕ", "ㅑ", "ㅐ", "ㅔ", "ㅒ", "ㅖ" ];

var mSeatHan390OneStep = [ "ㅇ", "ㄴ", "ㅣ", "ㅏ", "ㅇ", "ㄱ", "ㅈ", "ㅂ", "ㄷ", "ㄶ",
		"ㄺ", "ㄲ" ]; // 2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2
var mSeatHan390TwoStep = [ "ㅅ", "ㄹ", "ㅕ", "ㅐ", "ㅓ", "ㅍ", "ㅌ", "ㅋ", "ㅒ" ]; // 2,
																			// 2,
																			// 0,
																			// 0,
																			// 0,
																			// 2,
																			// 2,
																			// 2, 0
var mSeatHan390ThreeStep = [ "ㄹ", "ㄷ", "ㅁ", "ㅊ", "ㅍ", "ㅋ" ]; // 1, 1, 1, 1,
																// 1, 1
var mSeatHan390FourStep = [ "ㅜ", "ㅡ", "ㅁ", "ㄱ", "ㅔ", "ㅗ", "ㅜ", "ㅗ" ]; // 0, 0,
																		// 2, 2,
																		// 0, 0,
																		// 0, 0
var mSeatHan390FiveStep = [ "ㄴ", "ㅇ", "ㅂ", "ㅌ", "ㅅ", "ㅎ" ]; // 1, 1, 1, 1, 1, 1
var mSeatHan390SixStep = [ "ㅎ", "ㅆ", "ㅂ", "-", "=", "ㅅ", "ㄹ", "[", "]", "ㅇ",
		"ㄴ", "ㅁ", "ㄱ", ".", "ㅛ", "ㅠ", "ㅑ", "ㅖ", "ㅈ" ]; // 2, 2, 2, 0, 0, 2, 2,
														// 0, 0, 2, 2, 2, 2, 0,
														// 0, 0, 0, 0, 2
var mSeatHan390SevenStep = [ "ㄴ", "ㅇ", "ㅎ", ",", "ㅗ", "'" ]; // 1, 1, 1, 0,
																// 0, 0
var mSeatHan390EightStep = [ "ㅡ", "ㅁ", "ㄱ", "ㅔ", "ㅗ", "ㅊ", "ㅄ", "ㄻ", "ㅀ" ]; // 0,
																			// 2,
																			// 2,
																			// 0,
																			// 0,
																			// 2,
																			// 2,
																			// 2, 2

var mSeatHanSoonOneStep = [ "ㅇ", "ㄴ", "ㅣ", "ㅏ", "ㅇ", "ㄱ", "ㅈ", "ㅂ" ]; // 2, 2,
																		// 0, 0,
																		// 1, 1,
																		// 1, 1
var mSeatHanSoonTwoStep = [ "ㅅ", "ㄹ", "ㅕ", "ㅐ", "ㅓ" ]; // 2, 2, 0, 0, 0
var mSeatHanSoonThreeStep = [ "ㄹ", "ㄷ", "ㅁ", "ㅊ", "ㅍ" ]; // 1, 1, 1, 1, 1
var mSeatHanSoonFourStep = [ "ㅋ", "ㅡ", "ㅁ", "ㄱ", "ㅔ", "ㅗ", "ㅜ", "ㄷ" ]; // 1, 0,
																		// 2, 2,
																		// 0, 0,
																		// 0, 2
var mSeatHanSoonFiveStep = [ "ㄴ", "ㅇ", "ㅂ", "ㅌ", "ㅅ", "ㅎ" ]; // 1, 1, 1, 1,
																// 1, 1
var mSeatHanSoonSixStep = [ "ㅎ", "ㅆ", "ㅂ", "ㅈ", "ㅊ", "ㅅ", "ㄹ", "ㅌ", "ㅍ", "ㅋ",
		"." ]; // 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0
var mSeatHanSoonSevenStep = [ "ㅑ", "ㅖ", "ㅢ", "ㅇ", ",", "ㄷ", "4" ]; // 0, 0, 0,
																	// 1, 0, 2,
																	// 0
var mSeatHanSoonEightStep = [ "ㅎ", "ㅆ", "ㅂ", "ㅛ", "ㅠ", "!", "@", "#", "$", "%" ]; // 2,
																					// 2,
																					// 2,
																					// 0,
																					// 0,
																					// 0,
																					// 0,
																					// 0,
																					// 0, 0

var mSeatHanFinalOneStep = [ "ㅇ", "ㄴ", "ㅣ", "ㅏ", "ㅇ", "ㄱ", "ㅈ", "ㅂ", "ㄷ", "ㄶ",
		"ㄼ", "ㄻ" ]; // 2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2
var mSeatHanFinalTwoStep = [ "ㅅ", "ㄹ", "ㅕ", "ㅐ", "ㅓ", "ㅍ", "ㅌ", "ㄵ", "ㅀ", "ㄽ" ]; // 2,
																					// 2,
																					// 0,
																					// 0,
																					// 0,
																					// 2,
																					// 2,
																					// 2,
																					// 2, 2
var mSeatHanFinalThreeStep = [ "ㄹ", "ㄷ", "ㅁ", "ㅊ", "ㅍ" ]; // 1, 1, 1, 1, 1
var mSeatHanFinalFourStep = [ "ㅜ", "ㅋ", "ㅡ", "ㅁ", "ㄱ", "ㅔ", "ㅗ", "ㅜ", "ㅗ", "'",
		"~", "ㅒ", "ㅊ", "ㅄ", "ㅋ", "ㄳ", "?", "!" ]; // 0, 1, 0, 2, 2, 0, 0, 0,
													// 0, 0, 0, 0, 2, 2, 2, 2,
													// 0, 0
var mSeatHanFinalFiveStep = [ "ㄴ", "ㅇ", "ㅂ", "ㅌ", "ㅅ", "ㅎ" ]; // 1, 1, 1, 1,
																// 1, 1
var mSeatHanFinalSixStep = [ "ㅎ", "ㅆ", "ㅂ", ")", ">", "ㅅ", "ㄹ", "(", "<", ":",
		".", "ㄲ", "ㄺ", "ㅈ", ";", "+", "ㅍ", "ㅌ", "%", "/", "\\" ]; // 2, 2, 2,
																	// 0, 0, 2,
																	// 2, 0, 0,
																	// 0, 0, 2,
																	// 2, 2, 0,
																	// 0, 2, 2,
																	// 0, 0, 0
var mSeatHanFinalSevenStep = [ "ㅑ", "ㅖ", "ㅢ", "ㄴ", ",", "0" ]; // 0, 0, 0, 1,
																// 0, 1
var mSeatHanFinalEightStep = [ "ㅁ", "ㄱ", "ㅔ", "ㅗ", "ㅜ", "ㅊ", "ㅄ", "ㅋ", "ㄳ" ]; // 2,
																				// 2,
																				// 0,
																				// 0,
																				// 0,
																				// 2,
																				// 2,
																				// 2, 2

// 세벌식 키보드 키 코드 값 정리
var mSeatHan390KeyCode = [ [ 65, 83, 68, 70, 74, 75, 76, 186, 65, 83, 68, 70 ],
		[ 81, 87, 69, 82, 84, 81, 87, 69, 82 ], [ 89, 85, 73, 79, 80, 48 ],
		[ 57, 71, 90, 88, 67, 86, 66, 191 ], [ 72, 74, 186, 222, 78, 77 ],
		[ 49, 50, 51, 189, 187, 81, 87, 219, 221, 65, 83, 90, 88, 190, 49 ],
		[ 72, 74, 77, 188, 191, 72 ], [ 71, 90, 88, 67, 86, 90, 88, 67, 86 ] ];

var mSeatHanSoonKeyCode = [
		[ 65, 83, 68, 70, 74, 75, 76, 186 ],
		[ 81, 87, 69, 82, 84 ],
		[ 89, 85, 73, 79, 80 ],
		[ 57, 71, 90, 88, 67, 86, 66, 191 ],
		[ 72, 74, 186, 222, 78, 77 ],
		[ 49, 50, 51, 189, 187, 81, 87, 219, 221, 220, 190, 49, 50, 51, 189,
				187, 81, 87, 219, 221, 220 ], [ 54, 55, 56, 74, 188, 191, 74 ],
		[ 49, 50, 51, 52, 53, 49, 50, 51, 52, 53 ] ];

var mSeatHanFinalKeyCode = [
		[ 65, 83, 68, 70, 74, 75, 76, 186, 65, 83, 68, 70 ],
		[ 81, 87, 69, 82, 84, 81, 87, 69, 82, 84 ],
		[ 89, 85, 73, 79, 80 ],
		[ 57, 48, 71, 90, 88, 67, 86, 66, 191, 57, 48, 71, 90, 88, 67, 86, 66,
				191 ],
		[ 72, 74, 186, 222, 78, 77 ],
		[ 49, 50, 51, 189, 187, 81, 87, 219, 221, 220, 190, 49, 50, 51, 189,
				187, 81, 87, 219, 221, 220 ], [ 54, 55, 56, 72, 188, 72 ],
		[ 90, 88, 67, 86, 66, 90, 88, 67, 86 ] ];
// 세벌식390 모음중에 종성이면 0, 초성이면 1
var mSeatHan390KeyChoSung = [ [ 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 1, 1, 1, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ];
// 세벌식390 자음이면 0, 모음중에 종성이면 1, 초성이면 2
var mSeatHan390KeyChoJong = [ [ 2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 ],
		[ 2, 2, 0, 0, 0, 2, 2, 2, 0 ], [ 1, 1, 1, 1, 1, 1 ],
		[ 0, 0, 2, 2, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1 ],
		[ 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2 ],
		[ 1, 1, 1, 0, 0, 0 ], [ 0, 2, 2, 0, 0, 2, 2, 2, 2 ] ];
// 세벌식 순아래 모음중에 종성이면 0, 초성이면 1
var mSeatHanSoonKeyChoSung = [ [ 0, 0, 0, 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0 ],
		[ 1, 1, 1, 1, 1 ], [ 1, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1 ],
		[ 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0 ], [ 0, 0, 0, 1, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ];
// 세벌식 순아래 자음이면 0, 모음중에 종성이면 1, 초성이면 2
var mSeatHanSoonKeyChoJong = [ [ 2, 2, 0, 0, 1, 1, 1, 1 ], [ 2, 2, 0, 0, 0 ],
		[ 1, 1, 1, 1, 1 ], [ 1, 0, 2, 2, 0, 0, 0, 2 ], [ 1, 1, 1, 1, 1, 1 ],
		[ 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0 ], [ 0, 0, 0, 1, 0, 2, 0 ],
		[ 2, 2, 2, 0, 0, 0, 0, 0, 0, 0 ] ];
// 세벌식 최종 모음중에 종성이면 0, 초성이면 1
var mSeatHanFinalKeyChoSung = [ [ 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1 ],
		[ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 1, 1, 1, 1, 1, 1 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 1, 0, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ];
// 세벌식 최종 자음이면 0, 모음중에 종성이면 1, 초성이면 2
var mSeatHanFinalKeyChoJong = [ [ 2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 ],
		[ 2, 2, 0, 0, 0, 2, 2, 2, 2, 2 ], [ 1, 1, 1, 1, 1 ],
		[ 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0 ],
		[ 1, 1, 1, 1, 1, 1 ],
		[ 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0 ],
		[ 0, 0, 0, 1, 0, 0 ], [ 2, 2, 0, 0, 0, 2, 2, 2, 2 ] ];
// 쿼티일 경우 단계별 처리
var mSeatEngOneStep = [ "A", "S", "D", "F", "J", "K", "L", ";" ];
var mSeatEngTwoStep = [ "Q", "W", "E", "R" ];
var mSeatEngThreeStep = [ "T", "Y", "G", "H", "B", "N" ];
var mSeatEngFourStep = [ "U", "I", "O", "P" ];
var mSeatEngFiveStep = [ "Z", "X", "C", "V" ];
var mSeatEngSixStep = [ "N", "M", ",", "." ];
// 드보락일 경우 단계별 처리
var mSeatEngDvorakOneStep = [ "A", "O", "E", "U", "H", "T", "N", "S" ];
var mSeatEngDvorakTwoStep = [ "'", ",", ".", "P" ];
var mSeatEngDvorakThreeStep = [ "Y", "F", "I", "D", "X", "B" ];
var mSeatEngDvorakFourStep = [ "G", "C", "R", "L" ];
var mSeatEngDvorakFiveStep = [ ";", "Q", "J", "K" ];
var mSeatEngDvorakSixStep = [ "M", "W", "V", "Z" ];

// 키보드 위치 XY 좌표
var mSeatOneStepFingerX = [ 301, 352, 402, 453, 604, 655, 705, 756 ];
var mSeatOneStepFingerY = [ 380, 380, 380, 380, 380, 380, 380, 380 ];
var mSeatTwoStepFingerX = [ 289, 340, 390, 441 ];
var mSeatTwoStepFingerY = [ 331, 331, 331, 331 ];
var mSeatThreeStepFingerX = [ 491, 542, 503, 554, 527, 578 ];
var mSeatThreeStepFingerY = [ 331, 331, 380, 380, 430, 430 ];
var mSeatFourStepFingerX = [ 592, 643, 693, 743 ];
var mSeatFourStepFingerY = [ 331, 331, 331, 331 ];
var mSeatFiveStepFingerX = [ 325, 376, 426, 477 ];
var mSeatFiveStepFingerY = [ 430, 430, 430, 430 ];
var mSeatSixStepFingerX = [ 578, 628, 679, 729 ];
var mSeatSixStepFingerY = [ 430, 430, 430, 430 ];
var mSeatSevenStepFingerX = [ 289, 340, 390, 441, 491, 289, 340, 390, 441, 491 ];
var mSeatSevenStepFingerY = [ 331, 331, 331, 331, 331, 331, 331, 331, 331, 331 ];
var mSeatEightStepFingerX = [ 592, 643, 693, 743, 693, 743 ];
var mSeatEightStepFingerY = [ 331, 331, 331, 331, 331, 331 ];

// 드보락 키보드 위치 XY 좌표
var mSeatDvoSixStepFingerX = [ 628, 679, 729, 780 ];
var mSeatDvoSixStepFingerY = [ 430, 430, 430, 430 ];

// 세벌식 390 키보드 위치 XY 좌표
var mSeat390OneStepFingerX = [ 301, 352, 402, 453, 604, 655, 705, 756, 301,
		352, 402, 453 ];
var mSeat390OneStepFingerY = [ 380, 380, 380, 380, 380, 380, 380, 380, 380,
		380, 380, 380 ];
var mSeat390TwoStepFingerX = [ 289, 340, 390, 441, 491, 289, 340, 390, 441 ];
var mSeat390TwoStepFingerY = [ 331, 331, 331, 331, 331, 331, 331, 331, 331 ];
var mSeat390ThreeStepFingerX = [ 542, 592, 643, 693, 743, 717 ];
var mSeat390ThreeStepFingerY = [ 331, 331, 331, 331, 331, 281 ];
var mSeat390FourStepFingerX = [ 666, 503, 325, 376, 426, 477, 527, 780 ];
var mSeat390FourStepFingerY = [ 281, 380, 430, 430, 430, 430, 430, 430 ];
var mSeat390FiveStepFingerX = [ 554, 604, 756, 806, 578, 628 ];
var mSeat390FiveStepFingerY = [ 380, 380, 380, 380, 430, 430 ];
var mSeat390SixStepFingerX = [ 262, 312, 363, 767, 817, 289, 340, 794, 844,
		301, 352, 325, 376, 729, 413, 464, 514, 565, 262 ];
var mSeat390SixStepFingerY = [ 281, 281, 281, 281, 281, 331, 331, 331, 331,
		380, 380, 430, 430, 430, 281, 281, 281, 281, 281 ];
var mSeat390SevenStepFingerX = [ 554, 604, 628, 679, 780, 554 ];
var mSeat390SevenStepFingerY = [ 380, 380, 430, 430, 430, 380 ];
var mSeat390EightStepFingerX = [ 503, 325, 376, 426, 477, 325, 376, 426, 477 ];
var mSeat390EightStepFingerY = [ 380, 430, 430, 430, 430, 430, 430, 430, 430 ];

// 세벌식 순아래 키보드 위치 XY 좌표
var mSeatSoonOneStepFingerX = [ 301, 352, 402, 453, 604, 655, 705, 756 ];
var mSeatSoonOneStepFingerY = [ 380, 380, 380, 380, 380, 380, 380, 380 ];
var mSeatSoonTwoStepFingerX = [ 289, 340, 390, 441, 491 ];
var mSeatSoonTwoStepFingerY = [ 331, 331, 331, 331, 331 ];
var mSeatSoonThreeStepFingerX = [ 542, 592, 643, 693, 743 ];
var mSeatSoonThreeStepFingerY = [ 331, 331, 331, 331, 331 ];
var mSeatSoonFourStepFingerX = [ 666, 503, 325, 376, 426, 477, 527, 780 ];
var mSeatSoonFourStepFingerY = [ 281, 380, 430, 430, 430, 430, 430, 430 ];
var mSeatSoonFiveStepFingerX = [ 554, 604, 756, 806, 578, 628 ];
var mSeatSoonFiveStepFingerY = [ 380, 380, 380, 380, 430, 430 ];
var mSeatSoonSixStepFingerX = [ 262, 312, 363, 767, 817, 289, 340, 794, 844,
		894, 729 ];
var mSeatSoonSixStepFingerY = [ 281, 281, 281, 281, 281, 331, 331, 331, 331,
		331, 430 ];
var mSeatSoonSevenStepFingerX = [ 514, 565, 615, 604, 679, 780, 604 ];
var mSeatSoonSevenStepFingerY = [ 281, 281, 281, 380, 430, 430, 380 ];
var mSeatSoonEightStepFingerX = [ 262, 312, 363, 413, 464, 262, 312, 363, 413,
		464 ];
var mSeatSoonEightStepFingerY = [ 281, 281, 281, 281, 281, 281, 281, 281, 281,
		281 ];

// 세벌식 최종 키보드 위치 XY 좌표
var mSeatFinalOneStepFingerX = [ 301, 352, 402, 453, 604, 655, 705, 756, 301,
		352, 402, 453 ];
var mSeatFinalOneStepFingerY = [ 380, 380, 380, 380, 380, 380, 380, 380, 380,
		380, 380, 380 ];
var mSeatFinalTwoStepFingerX = [ 289, 340, 390, 441, 491, 289, 340, 390, 441,
		491 ];
var mSeatFinalTwoStepFingerY = [ 331, 331, 331, 331, 331, 331, 331, 331, 331,
		331 ];
var mSeatFinalThreeStepFingerX = [ 542, 592, 643, 693, 743 ];
var mSeatFinalThreeStepFingerY = [ 331, 331, 331, 331, 331 ];
var mSeatFinalFourStepFingerX = [ 666, 717, 503, 325, 376, 426, 477, 527, 780,
		666, 717, 503, 325, 376, 426, 477, 527, 780 ];
var mSeatFinalFourStepFingerY = [ 281, 281, 380, 430, 430, 430, 430, 430, 430,
		281, 281, 380, 430, 430, 430, 430, 430, 430 ];
var mSeatFinalFiveStepFingerX = [ 554, 604, 756, 806, 578, 628 ];
var mSeatFinalFiveStepFingerY = [ 380, 380, 380, 380, 430, 430 ];
var mSeatFinalSixStepFingerX = [ 262, 312, 363, 767, 817, 289, 340, 794, 844,
		894, 729, 262, 312, 363, 767, 817, 289, 340, 794, 844, 894 ];
var mSeatFinalSixStepFingerY = [ 281, 281, 281, 281, 281, 331, 331, 331, 331,
		331, 430, 281, 281, 281, 281, 281, 331, 331, 331, 331, 380 ];
var mSeatFinalSevenStepFingerX = [ 514, 565, 615, 554, 679, 554 ];
var mSeatFinalSevenStepFingerY = [ 281, 281, 281, 380, 430, 380 ];
var mSeatFinalEightStepFingerX = [ 325, 376, 426, 477, 527, 325, 376, 426, 477 ];
var mSeatFinalEightStepFingerY = [ 430, 430, 430, 430, 430, 430, 430, 430, 430 ];

// 각 스텝별 눌릴 키 최대 갯수
var mSeatKeyStepCount = [ 8, 4, 6, 4, 4, 4, 10, 6 ];
var mSeatThreeKeyStepCount = [ 8, 5, 5, 8, 6, 14, 5, 9 ];
var mSeatSoonKeyStepCount = [ 8, 5, 5, 8, 6, 11, 7, 10 ];
var mSeatFinalKeyStepCount = [ 8, 5, 5, 9, 6, 11, 6, 9 ];

// 키보드 손가락 모양
var mFingerHanOneStep = [ "a", "s", "d", "f", "j", "k", "l", "ss" ];
var mFingerHanTwoStep = [ "q", "w", "e", "r" ];
var mFingerHanThreeStep = [ "t", "y", "g", "h", "b", "n" ];
var mFingerHanFourStep = [ "u", "i", "o", "p" ];
var mFingerHanFiveStep = [ "z", "x", "c", "v" ];
var mFingerHanSixStep = [ "n", "m", ",", "jum" ];
var mFingerHanSevenStep = [ "q", "w", "e", "r", "t", "sQ", "sW", "sE", "sR",
		"sT" ];
var mFingerHanEightStep = [ "u", "i", "o", "p", "sO", "sP" ];

// 드보락 키보드 손가락 모양
var mFingerDvoSixStep = [ "m", ",", "jum", "slash" ];

// 세벌식 390 키보드 손가락 모양
var mFingerHan390OneStep = [ "a", "s", "d", "f", "j", "k", "l", "ss", "sA",
		"sS", "sD", "sF" ];
var mFingerHan390TwoStep = [ "q", "w", "e", "r", "t", "sQ", "sW", "sE", "sR" ];
var mFingerHan390ThreeStep = [ "y", "u", "i", "o", "p", "0" ];
var mFingerHan390FourStep = [ "9", "g", "z", "x", "c", "v", "b", "slash" ];
var mFingerHan390FiveStep = [ "h", "j", "ss", "'", "n", "m" ];
var mFingerHan390SixStep = [ "1", "2", "3", "-", "=", "q", "w", "[", "]", "a",
		"s", "z", "x", "jum", "4", "5", "6", "7", "s1" ];
var mFingerHan390SevenStep = [ "h", "j", "m", ",", "slash", "sH" ];
var mFingerHan390EightStep = [ "g", "z", "x", "c", "v", "sZ", "sX", "sC", "sV" ];

// 세벌식 순아래 키보드 손가락 모양
var mFingerHanSoonOneStep = [ "a", "s", "d", "f", "j", "k", "l", "ss" ];
var mFingerHanSoonTwoStep = [ "q", "w", "e", "r", "t" ];
var mFingerHanSoonThreeStep = [ "y", "u", "i", "o", "p" ];
var mFingerHanSoonFourStep = [ "9", "g", "z", "x", "c", "v", "b", "slash" ];
var mFingerHanSoonFiveStep = [ "h", "j", "ss", "'", "n", "m" ];
var mFingerHanSoonSixStep = [ "1", "2", "3", "-", "=", "q", "w", "[", "]",
		"bSlash", "jum" ];
var mFingerHanSoonSevenStep = [ "6", "7", "8", "j", ",", "slash", "sJ" ];
var mFingerHanSoonEightStep = [ "1", "2", "3", "4", "5", "s1", "s2", "s3",
		"s4", "s5" ];

// 세벌식 최종 키보드 손가락 모양
var mFingerHanFinalOneStep = [ "a", "s", "d", "f", "j", "k", "l", "ss", "sA",
		"sS", "sD", "sF" ];
var mFingerHanFinalTwoStep = [ "q", "w", "e", "r", "t", "sQ", "sW", "sE", "sR",
		"sT" ];
var mFingerHanFinalThreeStep = [ "y", "u", "i", "o", "p" ];
var mFingerHanFinalFourStep = [ "9", "0", "g", "z", "x", "c", "v", "b",
		"slash", "", "", "sG", "sZ", "sX", "sC", "sV", "sB", "" ];
var mFingerHanFinalFiveStep = [ "h", "j", "ss", "'", "n", "m" ];
var mFingerHanFinalSixStep = [ "1", "2", "3", "-", "=", "q", "w", "[", "]",
		"bSlash", "jum", "s1", "s2", "s3", "s-", "s=", "sQ", "sW", "s[", "s]",
		"" ];
var mFingerHanFinalSevenStep = [ "6", "7", "8", "h", ",", "sH" ];
var mFingerHanFinalEightStep = [ "z", "x", "c", "v", "b", "sZ", "sX", "sC",
		"sV" ];

// 자리 키 위치 저장
var mSeatShowKeyArray = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ];
var mSeatIsChangeText = false; // 자리 키 하나 눌릴때 마다 이동할 경우
var mSeatIsStepText = false; // 한 페이지 5개를 처리 한 후 이동할 경우

var mSeatShowTextArray = []; // 한 페이지에 5개를 화면에 보여준다.
var mSeatTweenTextArray = []; // 5개를 다 처리 한 후 위로 올라가는 텍스트 연출을 위해 화면에 보여준다.

var mSeatShowChoArray = []; // 세벌식일 경우 초성인지 텍스트를 표시
var mSeatShowJongArray = []; // 세벌식일 경우 종성인지 텍스트를 표시

var mSeatKeyboardUserCount = 0; // 자리 키 하나씩 처리를 위한 카운트

var mSeatPracticeMenuCompleteArray = []; // 자리 연습 메뉴 완료 이미지
var mSeatPracticeMenuSelectArray = []; // 자리 연습 메뉴 선택 이미지
var mSeatPracticeMenuSelectBtnArray = []; // 자리 연습 메뉴 선택 버튼
var mSeatPracticeSelectBtnArray = []; // 자리 연습 게임 내 상단 선택 이미지

var mSeatPracticsSelect = 0; // 자리 연습 선택 위치 저장
var mSeatPracticsChangeSelect = 0; // 자리 연습 선택 위치 임시 저장

var mSeatPracticsProcess = 0; // 진행도
var mSeatPracticsWrong = 0; // 오타수
var mSeatPracticsRight = 0; // 정타수
var mSeatPracticsAccuracy = 0; // 정확도
var mSeatPracticsTotalWord = 0; // 전체 타수

var mSeatHanCompleteSave = [ [ 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 자리연습 스텝 완료 체크(두벌식, 세벌식 390, 세벌식 순아래,
										// 세벌식 최종)
var mSeatEngCompleteSave = [ [ 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 자리연습 스텝 완료 체크(쿼티, 드보락)

var mSeatIsProcess = false; // 키 누를 경우 update에서 한번만 처리 하도록

var mFingerImageName = 'a'; // 현재 손가락 이미지 이름

// 자리 연습
MenuV2.prototype.SeatPracticeCreate = function() {
	mSeatShowTextArray = [ this.fSingleWord11, this.fSingleWord12,
			this.fSingleWord13, this.fSingleWord14, this.fSingleWord15 ];
	mSeatTweenTextArray = [ this.fSingleWord21, this.fSingleWord22,
			this.fSingleWord23, this.fSingleWord24, this.fSingleWord25,
			this.fSingleWord31, this.fSingleWord32, this.fSingleWord33,
			this.fSingleWord34, this.fSingleWord35 ];

	// 초성/종성 텍스트 이미지 현재 사용 안함
	mSeatShowChoArray = [ this.fTxtImgCho1, this.fTxtImgCho2, this.fTxtImgCho3,
			this.fTxtImgCho4, this.fTxtImgCho5 ];
	mSeatShowJongArray = [ this.fTxtImgJong1, this.fTxtImgJong2,
			this.fTxtImgJong3, this.fTxtImgJong4, this.fTxtImgJong5 ];

	mSeatPracticeMenuCompleteArray = [ this.fStepComplete11,
			this.fStepComplete12, this.fStepComplete13, this.fStepComplete14,
			this.fStepComplete15, this.fStepComplete16, this.fStepComplete17,
			this.fStepComplete18 ];
	mSeatPracticeMenuSelectArray = [ this.fStepBtnSelect11,
			this.fStepBtnSelect12, this.fStepBtnSelect13,
			this.fStepBtnSelect14, this.fStepBtnSelect15,
			this.fStepBtnSelect16, this.fStepBtnSelect17, this.fStepBtnSelect18 ];
	mSeatPracticeMenuSelectBtnArray = [ this.fStepBtn11, this.fStepBtn12,
			this.fStepBtn13, this.fStepBtn14, this.fStepBtn15, this.fStepBtn16,
			this.fStepBtn17, this.fStepBtn18 ];
	mSeatPracticeSelectBtnArray = [ this.fStepSetNum121, this.fStepSetNum122,
			this.fStepSetNum123, this.fStepSetNum124, this.fStepSetNum125,
			this.fStepSetNum126, this.fStepSetNum127, this.fStepSetNum128 ];

	// 자리 연습 메뉴 완료 이미지 비활성화
	for (var i = 0; i < mSeatShowChoArray.length; i++) {
		mSeatShowChoArray[i].visible = false;
		mSeatShowChoArray[i].x = 62 + (i * 145);
		mSeatShowJongArray[i].visible = false;
		mSeatShowJongArray[i].x = 62 + (i * 145);
	}

	// 자리 연습 메뉴 완료 이미지 비활성화
	for (var i = 0; i < mSeatPracticeMenuCompleteArray.length; i++) {
		mSeatPracticeMenuCompleteArray[i].visible = true;
		mSeatPracticeMenuCompleteArray[i].inputEnabled = false;
	}

	// 자리 연습 메뉴 선택 이미지 인덱스 처리 및 선택한 메뉴는 활성화 나머지는 비활성화
	for (var i = 0; i < mSeatPracticeMenuSelectArray.length; i++) {
		mSeatPracticeMenuSelectArray[i].index = i;
		if (mSeatPracticsSelect == i) {
			mSeatPracticeMenuSelectArray[i].visible = true;
		} else {
			mSeatPracticeMenuSelectArray[i].visible = false;
		}
	}

	// 자리 연습 메뉴 선택 버튼 인덱스 처리
	for (var i = 0; i < mSeatPracticeMenuSelectBtnArray.length; i++) {
		mSeatPracticeMenuSelectBtnArray[i].index = i;
	}

	// 자리 연습 게임 내 상단 선택 버튼 인덱스 처리
	for (var i = 0; i < mSeatPracticeSelectBtnArray.length; i++) {
		mSeatPracticeSelectBtnArray[i].index = i;
	}

	mSeatPracticsSelect = 0;

	this.fSelectRedKey12.visible = false; // 키보드 버튼 활성화 이미지
	this.fSelectRedKey121.visible = false; // 키보드 좌측 시프트 키 활성화 이미지
	this.fSelectRedKey122.visible = false; // 키보드 우측 시프트 키 활성화 이미지
};

// 자리 연습 초기화
MenuV2.prototype.SeatPracticeInit = function() {
	mGameStateType = this.gameConst.GameStateType.SEAT;

	this.StageInfo();
	this.SeatLanguageTypeInfo();

	// 자리 연습 메뉴 완료 이미지 비활성화
	for (var i = 0; i < mSeatPracticeMenuCompleteArray.length; i++) {
		var complete = 0;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			complete = parseInt(mSeatHanCompleteSave[mTajaHangulType][i]);
		} else {
			complete = parseInt(mSeatEngCompleteSave[mTajaEnglishType][i]);
		}
		if (complete === 0) {
			mSeatPracticeMenuCompleteArray[i].setFrames(0, 0, 0, 0);
		} else if (complete === 1) {
			mSeatPracticeMenuCompleteArray[i].setFrames(1, 1, 1, 1);
		}
	}

	// 자리 연습 메뉴 선택 이미지 인덱스 처리 및 선택한 메뉴는 활성화 나머지는 비활성화
	for (var i = 0; i < mSeatPracticeMenuSelectArray.length; i++) {
		if (mSeatPracticsSelect == i) {
			mSeatPracticeMenuSelectArray[i].visible = true;
		} else {
			mSeatPracticeMenuSelectArray[i].visible = false;
		}
	}

	this.fTweenTextGroup.y = -1000;
	this.fShowTextGroup.y = 0;

	// 자리 연습 단계별 모음/자음 위치 저장
	for (var i = 0; i < mSeatShowKeyArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			mSeatShowKeyArray[i] = Math
					.floor((Math.random() * mSeatThreeKeyStepCount[mSeatPracticsSelect]));
		} else if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			mSeatShowKeyArray[i] = Math
					.floor((Math.random() * mSeatSoonKeyStepCount[mSeatPracticsSelect]));
		} else if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			mSeatShowKeyArray[i] = Math
					.floor((Math.random() * mSeatFinalKeyStepCount[mSeatPracticsSelect]));
		} else {
			mSeatShowKeyArray[i] = Math
					.floor((Math.random() * mSeatKeyStepCount[mSeatPracticsSelect]));
		}
	}

	// 자리 연습 위로 올라가는 연출을 위해 텍스트 출력
	for (var i = 0; i < mSeatTweenTextArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			this.gameUtil.setText(mSeatTweenTextArray[i], 14, 0, "center",
					"top", this.GetSeatHanStepWords(i));
		} else {
			this.gameUtil.setText(mSeatTweenTextArray[i], 14, 0, "center",
					"top", this.GetSeatEngStepWords(i));
		}

		if (i < 5) {
			mSeatTweenTextArray[i].fill = '#ffffff';
		} else {
			mSeatTweenTextArray[i].fill = '#000000';
		}
	}

	// 자리 연습 보여주는 텍스트 출력
	for (var i = 0; i < mSeatShowTextArray.length; i++) {
		var textY = this.GetShowTextY(i);
		this.gameUtil.setText(mSeatShowTextArray[i], 14, textY, "center",
				"middle", mSeatTweenTextArray[i].text);
		if (i === 0) {
			mSeatShowTextArray[i].fill = '#2b3748';
		} else {
			mSeatShowTextArray[i].fill = '#fff151';
		}

		// 두벌식이 아닌 경우에만 초성, 종성 텍스트 출력 현재 사용 안함.
		this.DrawShowChoJong(i);
	}

	// 한글일 경우 8개, 영문일 경우 6개 활성화 한다.
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		for (var i = 0; i < mSeatPracticeSelectBtnArray.length; i++) {
			mSeatPracticeSelectBtnArray[i].visible = true;
		}

		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			this.fKeyStepGroup11.visible = true;
			this.fKeyStepGroup12.visible = false;
			this.fKeyStepGroup13.visible = false;
			this.fKeyStepGroup14.visible = false;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			this.fKeyStepGroup11.visible = false;
			this.fKeyStepGroup12.visible = true;
			this.fKeyStepGroup13.visible = false;
			this.fKeyStepGroup14.visible = false;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			this.fKeyStepGroup11.visible = false;
			this.fKeyStepGroup12.visible = false;
			this.fKeyStepGroup13.visible = true;
			this.fKeyStepGroup14.visible = false;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			this.fKeyStepGroup11.visible = false;
			this.fKeyStepGroup12.visible = false;
			this.fKeyStepGroup13.visible = false;
			this.fKeyStepGroup14.visible = true;
		}

		this.fKeyStepGroup09.visible = false;
		this.fKeyStepGroup10.visible = false;

		this.fStep17.visible = true;
		this.fStep18.visible = true;
	} else {
		for (var i = 0; i < mSeatPracticeSelectBtnArray.length; i++) {
			if (i < 6) {
				mSeatPracticeSelectBtnArray[i].visible = true;
			} else {
				mSeatPracticeSelectBtnArray[i].visible = false;
			}
		}

		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			this.fKeyStepGroup09.visible = false;
			this.fKeyStepGroup10.visible = true;
		} else if (mTajaEnglishType === this.gameConst.EnglishType.DVORAK) {
			this.fKeyStepGroup09.visible = true;
			this.fKeyStepGroup10.visible = false;
		}

		this.fKeyStepGroup11.visible = false;
		this.fKeyStepGroup12.visible = false;
		this.fKeyStepGroup13.visible = false;
		this.fKeyStepGroup14.visible = false;

		this.fStep17.visible = false;
		this.fStep18.visible = false;
	}

	this.SeatPracticeDrawFinger();

	mTajaGamePopupType = 0;
	mSeatPracticsProcess = 0; // 진행도
	mSeatPracticsWrong = 0; // 오타수
	mSeatPracticsRight = 0; // 정타수
	mSeatPracticsAccuracy = 0; // 정확도
	mSeatPracticsTotalWord = 0;

	mLongMenuSavePage = 1;
	mLongMenuSaveTitleSelect = 0;

	userTajaTyping.value = "";
	mIsTajaTypingFocus = false;
	mSeatIsChangeText = false;
	mSeatIsStepText = false;
	mSeatKeyboardUserCount = 0;
	mTajaGameTimeStartFlag = false;
	this.fStage1SelectCursor.visible = true;
	this.fStage1SelectCursor.x = 245; // 선택 박스 초기 x좌표값
	this.fSelectRedKey12.visible = true;
	var finger = this.GetStepFinger(mSeatKeyboardUserCount);
	this.fSelectRedKey12.x = finger[0];
	this.fSelectRedKey12.y = finger[1];

	// 키보드 시프트 이미지 처리
	var shift = this.CheckStepShiftFinger(mSeatKeyboardUserCount);
	if (shift === 1) {
		this.fSelectRedKey121.visible = true;
		this.fSelectRedKey122.visible = false;
	} else if (shift === 2) {
		this.fSelectRedKey121.visible = false;
		this.fSelectRedKey122.visible = true;
	} else {
		this.fSelectRedKey121.visible = false;
		this.fSelectRedKey122.visible = false;
	}

	// 손가락 이미지 처리
	mFingerImageName = this.GetStepImageFinger(mSeatKeyboardUserCount);
	this.setFingerImage(mFingerImageName);

	mTajaGameStatStartTime = new Date();

	userTajaTyping.onkeypress = null;
	userTajaTyping.onkeyup = this.SeatUserWordsCheck;
	userTajaTyping.onkeydown = this.SeatUserWordsCheckDown;
};

// 한글인지 영문인지 확인 후 키보드 표시
MenuV2.prototype.SeatLanguageTypeInfo = function() {
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		this.fKeyTxtkor.visible = true;
		this.fKeyTxtEn.visible = false;

		var keyTxtkor = "KeyTxtkor1";
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			keyTxtkor = "KeyTxtkor1";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			keyTxtkor = "KeyTxtkor2";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			keyTxtkor = "KeyTxtkor3";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			keyTxtkor = "KeyTxtkor4";
		}
		this.fKeyTxtkor.loadTexture(keyTxtkor, 0);
	} else {
		this.fKeyTxtkor.visible = false;
		this.fKeyTxtEn.visible = true;

		var keyTxtEn = "KeyTxtEn1";
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			keyTxtEn = "KeyTxtEn1";
		} else if (mTajaEnglishType === this.gameConst.EnglishType.DVORAK) {
			keyTxtEn = "KeyTxtEn2";
		}
		this.fKeyTxtEn.loadTexture(keyTxtEn, 0);
	}
};

MenuV2.prototype.DrawShowChoJong = function(i) {
	mSeatShowChoArray[i].visible = false;
	mSeatShowJongArray[i].visible = false;
};

// 초성/종성 텍스트 위 아래로 출력 처리
MenuV2.prototype.GetShowTextY = function(i) {
	var textY = 60;
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
		if (mSeatHan390KeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 0) {
			textY = 60;
		} else if (mSeatHan390KeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 1) {
			textY = 30;
		} else if (mSeatHan390KeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 2) {
			textY = 90;
		}
	} else if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		if (mSeatHanSoonKeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 0) {
			textY = 60;
		} else if (mSeatHanSoonKeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 1) {
			textY = 30;
		} else if (mSeatHanSoonKeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 2) {
			textY = 90;
		}
	} else if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
		if (mSeatHanFinalKeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 0) {
			textY = 60;
		} else if (mSeatHanFinalKeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 1) {
			textY = 30;
		} else if (mSeatHanFinalKeyChoJong[mSeatPracticsSelect][mSeatShowKeyArray[i]] === 2) {
			textY = 90;
		}
	} else {
		textY = 60;
	}

	return textY;
};

// 자리 연습 update 처리
MenuV2.prototype.SeatGameProcess = function() {
	this.SeatPracticeInfoProcess();

	// 맞으면 다음 모음/자음으로 넘어가는 처리
	if (mSeatIsStepText === true) {
		mSeatIsStepText = false;

		var finger = this.GetStepFinger(mSeatKeyboardUserCount);
		this.fSelectRedKey12.x = finger[0];
		this.fSelectRedKey12.y = finger[1];

		var shift = this.CheckStepShiftFinger(mSeatKeyboardUserCount);
		if (shift === 1) {
			this.fSelectRedKey121.visible = true;
			this.fSelectRedKey122.visible = false;
		} else if (shift === 2) {
			this.fSelectRedKey121.visible = false;
			this.fSelectRedKey122.visible = true;
		} else {
			this.fSelectRedKey121.visible = false;
			this.fSelectRedKey122.visible = false;
		}

		for (var i = 0; i < mSeatShowTextArray.length; i++) {
			if (mSeatKeyboardUserCount < i) {
				mSeatShowTextArray[i].fill = '#fff151';
			} else if (mSeatKeyboardUserCount === i) {
				mSeatShowTextArray[i].fill = '#2b3748';
			} else {
				mSeatShowTextArray[i].fill = '#ffffff';
			}
		}

		mFingerImageName = this.GetStepImageFinger(mSeatKeyboardUserCount);
		this.setFingerImage(mFingerImageName);

		this.fStage1SelectCursor.x += 145;
	}

	// 한줄(5개)을 다 입력 완료 후 처리
	if (mSeatIsChangeText === true) {
		// 연습 완료 창 출력
		if (mSeatPracticsProcess >= this.gameConst.InputTotalCount) {
			if (mSeatPracticsAccuracy >= 70) {
				mTajaGameScore += 10;
				mTajaGameSaveScore += 10;
			}
			this.TajaScoreDataSave();
			mTajaGamePopupType = 2;
			this.SetPieceResultPopup(2, this.gameConst.InputTotalCount,
					mSeatPracticsWrong, mSeatPracticsAccuracy, mTajaGameTime,
					this.SeatPracticeContinueButton,
					this.SeatPracticeAgainButton, this.SeatPracticeStopButton);
			this.SeatPracticeHanComPoint();
			this.SendStartEndGameLog(1, mSeatPracticsSelect + 1, 0, 1);
		} else { // 다음 자음/모음 처리
			this.fStage1SelectCursor.visible = false;
			for (var i = 0; i < mSeatShowTextArray.length; i++) {
				if (mSeatKeyboardUserCount < i) {
					mSeatShowTextArray[i].fill = '#fff151';
				} else if (mSeatKeyboardUserCount === i) {
					mSeatShowTextArray[i].fill = '#2b3748';
				} else {
					mSeatShowTextArray[i].fill = '#ffffff';
				}
			}

			for (var i = 0; i < mSeatShowTextArray.length; i++) {
				this.gameUtil.setText(mSeatShowTextArray[i], 14, 0, "center",
						"top", mSeatTweenTextArray[i + 5].text);
			}

			this.fSelectRedKey12.visible = false;
			this.fSelectRedKey121.visible = false;
			this.fSelectRedKey122.visible = false;
			this.fShowTextGroup.y = -1000;
			userTajaTyping.blur();

			this.SeatPlayTween();
		}

		mIsTajaTypingFocus = true;
		mSeatIsChangeText = false;
	} else {
		if (mTajaGameTimeStartFlag === true) {
			this.nowTime();
		}
	}

	// 키를 누를 경우 키 사운드 처리
	if (mSeatIsProcess === true && this.fStageInfo12.visible === true) {
		mSeatIsProcess = false;
		if (this.fPopupGroup.visible === false) {
			this.playAudio(typing_key, mTajaSoundVolume, false);
		}
	}

	// 팝업창이 뜰 경우 ESC 처리
	if (this.game.input.keyboard.isDown(Phaser.Keyboard.ESC)) {
		if (this.fStageInfo12.visible === true) {
			if (mTajaGamePopupType === 1) {
				this.SeatExitButton();
			} else if (mTajaGamePopupType === 2) {
				this.SeatPracticeStopButton();
			} else if (mTajaGamePopupType === 3) {
				this.SeatPracticeConfirmButton();
			} else if (mTajaGamePopupType === 4) {
				this.SetPublicExitPopup();
			} else if (mTajaGamePopupType === 10) {
				this.TajaGameHanEngConfirm();
			} else {
				this.GoBackButton();
			}
		}

		mTajaGamePopupType = 0;
		this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	}
};

// 자리 연습 한컴 포인트 처리
MenuV2.prototype.SeatPracticeHanComPoint = function() {
	 console.log("SeatPracticeHanComPoint!!!!!!!!!!!!!!!!");
	if (mSeatPracticsAccuracy >= this.gameConst.TypingAccuracy) {
		// console.log("this.gameConst.TypingAccuracy ::: " +
		// this.gameConst.TypingAccuracy);
		if (that.gameConst.uuid != 0) {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				if (mSeatHanCompleteSave[mTajaHangulType][mSeatPracticsSelect] === 0) {
					that.SetToastMessage(
							"연습 완료 보상으로 " + 10 + "한컴 포인트를 획득했습니다.", 2);
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							10, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
					console.log("========= 한글 한컴포인트 적립 완료!!! ========");
				} else {
					// that.SetToastMessage("연습 완료 보상으로 " + 10 + "한컴 포인트를
					// 획득했습니다.", 2);
					console.log("========= 이미 완료한 단계 입니다!!! ========");
				}
			} else {
				if (mSeatEngCompleteSave[mTajaEnglishType][mSeatPracticsSelect] === 0) {
					that.SetToastMessage(
							"연습 완료 보상으로 " + 10 + "한컴 포인트를 획득했습니다.", 2);
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							10, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
					console.log("========= 영문 한컴포인트 적립 완료!!! ========");
				} else {
					// that.SetToastMessage("연습 완료 보상으로 " + 10 + "한컴 포인트를
					// 획득했습니다.", 2);
					console.log("========= 이미 완료한 단계 입니다!!! ========");
				}
			}
		}
	}
};

// 자리 연습 완료후 계속 버튼
MenuV2.prototype.SeatPracticeContinueButton = function() {
	this.SetLongResultExitPopup();

	if (mSeatPracticsAccuracy < this.gameConst.TypingAccuracy) {
		mTajaGamePopupType = 3;
		this.SetPublicPopup(1, "목표 정확도에 미달하여\n현재 단계를 다시 연습합니다.", null,
				this.SeatPracticeConfirmButton);
	} else {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mSeatHanCompleteSave[mTajaHangulType][mSeatPracticsSelect] = 1;
		} else {
			mSeatEngCompleteSave[mTajaEnglishType][mSeatPracticsSelect] = 1;
		}
		this.SeatCompleteSave();
		mSeatPracticsSelect++;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			if (mSeatPracticsSelect > 7)
				mSeatPracticsSelect = 0;
		} else {
			if (mSeatPracticsSelect > 5)
				mSeatPracticsSelect = 0;
		}

		for (var i = 0; i < mSeatPracticeSelectBtnArray.length; i++) {
			if (mSeatPracticsSelect === i) {
				mSeatPracticeSelectBtnArray[i].setFrames(1, 1, 1, 1);
				mSeatPracticeSelectBtnArray[i].inputEnabled = false;
			} else {
				var complete = 0;
				if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
					complete = mSeatHanCompleteSave[mTajaHangulType][i];
				} else {
					complete = mSeatEngCompleteSave[mTajaEnglishType][i];
				}

				if (complete === 1) {
					mSeatPracticeSelectBtnArray[i].setFrames(2, 2, 2, 2);
				} else {
					mSeatPracticeSelectBtnArray[i].setFrames(0, 0, 0, 0);
				}
				mSeatPracticeSelectBtnArray[i].inputEnabled = true;
			}
		}

		this.SeatPracticeInit();
		this.SetTajaGameStartTime();
	}

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 다시 하기 버튼
MenuV2.prototype.SeatPracticeAgainButton = function() {
	if (mSeatPracticsAccuracy >= this.gameConst.TypingAccuracy) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mSeatHanCompleteSave[mTajaHangulType][mSeatPracticsSelect] = 1;
		} else {
			mSeatEngCompleteSave[mTajaEnglishType][mSeatPracticsSelect] = 1;
		}
		this.SeatCompleteSave();
	}

	this.SetLongResultExitPopup();
	this.SeatPracticeInit();
	this.SetTajaGameStartTime();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 완료후 그만 버튼
MenuV2.prototype.SeatPracticeStopButton = function() {
	// 완료 처리 저장
	if (mSeatPracticsAccuracy >= this.gameConst.TypingAccuracy) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mSeatHanCompleteSave[mTajaHangulType][mSeatPracticsSelect] = 1;
		} else {
			mSeatEngCompleteSave[mTajaEnglishType][mSeatPracticsSelect] = 1;
		}

		this.SeatCompleteSave();
	}

	this.SetLongResultExitPopup();

	mIsTajaTypingFocus = false;
	mGameWordType = this.gameConst.GameWordType.NONE;

	this.fStageInfo11.visible = true;
	this.fStageInfo12.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	this.fHandImgs.visible = false;

	this.SeatPracticeInit();

	this.playAudio(click_sound, mTajaSoundVolume, false);
	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 자리 연습 완료후 확인 버튼
MenuV2.prototype.SeatPracticeConfirmButton = function() {
	this.SetPublicExitPopup();
	this.SeatPracticeInit();
	this.SetTajaGameStartTime();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 선택 버튼
MenuV2.prototype.SeatPracticeMenuSelectButton = function(target) {
	mSeatPracticsSelect = target.index;

	this.fStageInfo11.visible = false;
	this.fStageInfo12.visible = true;

	this.fOptionBtn3.visible = true;
	this.fOptionBtn2.visible = false;

	for (var i = 0; i < mSeatPracticeSelectBtnArray.length; i++) {
		if (mSeatPracticsSelect === i) {
			mSeatPracticeSelectBtnArray[i].setFrames(1, 1, 1, 1);
			mSeatPracticeSelectBtnArray[i].inputEnabled = false;
		} else {
			var complete = 0;
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				complete = mSeatHanCompleteSave[mTajaHangulType][i];
			} else {
				complete = mSeatEngCompleteSave[mTajaEnglishType][i];
			}

			if (complete === 1) {
				mSeatPracticeSelectBtnArray[i].setFrames(2, 2, 2, 2);
			} else {
				mSeatPracticeSelectBtnArray[i].setFrames(0, 0, 0, 0);
			}
			mSeatPracticeSelectBtnArray[i].inputEnabled = true;
		}
	}

	mGameWordType = this.gameConst.GameWordType.SEAT;
	this.SeatPracticeInit();

	this.SetTajaGameStartTime();
	typing_Music.stop();
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 선택 버튼
MenuV2.prototype.SeatPracticeSelectButton = function(target) {
	if (mSeatPracticsSelect === target.index)
		return;

	mTajaGamePopupType = 1;
	this.SetPublicPopup(2, "현재 단계를 그만두고\n선택한 단계를 시작할까요?", this.SeatNextButton,
			this.SeatExitButton);

	mSeatPracticsChangeSelect = target.index;

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 다음 단계로 넘어가기
MenuV2.prototype.SeatNextButton = function() {
	this.SendStartEndGameLog(1, mSeatPracticsSelect + 1, 0, 0);

	this.SetPublicExitPopup();

	mSeatPracticsSelect = mSeatPracticsChangeSelect;
	mSeatPracticsChangeSelect = 0;

	for (var i = 0; i < mSeatPracticeSelectBtnArray.length; i++) {
		if (mSeatPracticsSelect === i) {
			mSeatPracticeSelectBtnArray[i].setFrames(1, 1, 1, 1);
			mSeatPracticeSelectBtnArray[i].inputEnabled = false;
		} else {
			var complete = 0;
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				complete = mSeatHanCompleteSave[mTajaHangulType][i];
			} else {
				complete = mSeatEngCompleteSave[mTajaEnglishType][i];
			}

			if (complete === 1) {
				mSeatPracticeSelectBtnArray[i].setFrames(2, 2, 2, 2);
			} else {
				mSeatPracticeSelectBtnArray[i].setFrames(0, 0, 0, 0);
			}
			mSeatPracticeSelectBtnArray[i].inputEnabled = true;
		}
	}

	this.SeatPracticeInit();
	this.SetTajaGameStartTime();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 현재 단계 그대로 유지
MenuV2.prototype.SeatExitButton = function() {
	this.SetPublicExitPopup();

	mSeatPracticsChangeSelect = 0;
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 손가락 활성화 유무
MenuV2.prototype.SeatPracticeFingerButton = function() {
	if (mTajaFingerShow === true) {
		mTajaFingerShow = false;
	} else {
		mTajaFingerShow = true;
	}

	this.setFingerImage(mFingerImageName);
	this.SeatPracticeDrawFinger();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 자리 연습 손가락 그리기
MenuV2.prototype.SeatPracticeDrawFinger = function() {
	if (mTajaFingerShow === true) {
		this.fHandToggle.setFrames(1, 1, 1, 1);
	} else {
		this.fHandToggle.setFrames(0, 0, 0, 0);
	}
};

// 정확도, 진행도, 오타수 정보 출력
MenuV2.prototype.SeatPracticeInfoProcess = function() {
	// 정확도 (현 단계에서 입력한 정타 개수) / (현단계의 전체 입력할 자소)
	if (mSeatPracticsProcess !== 0) {
		mSeatPracticsAccuracy = parseInt(mSeatPracticsRight
				/ mSeatPracticsTotalWord * 100);
		if (mSeatPracticsAccuracy < 0) {
			mSeatPracticsAccuracy = 0;
		}
	}
	this.gameUtil.setText(this.fAccuracy12, 0, 24, "left", "top",
			mSeatPracticsAccuracy + "%");

	var accuracyGauge = 0;
	if (mSeatPracticsProcess !== 0) {
		accuracyGauge = mSeatPracticsRight / mSeatPracticsTotalWord;
		if (accuracyGauge > 1) {
			accuracyGauge = 1;
		} else if (accuracyGauge < 0) {
			accuracyGauge = 0;
		}
	}
	this.fAccuracyGauge12.scale.x = accuracyGauge;

	// 진행도
	var process = parseInt(mSeatPracticsProcess
			/ this.gameConst.InputTotalCount * 100);
	if (process < 0) {
		process = 0;
	} else if (process > 100) {
		process = 100;
	}
	this.gameUtil.setText(this.fProcessPersent12, 0, 24, "left", "top", process
			+ "%");

	var processGauge = mSeatPracticsProcess / this.gameConst.InputTotalCount;
	if (processGauge > 1) {
		processGauge = 1;
	}
	this.fProcessGauge12.scale.x = processGauge;

	// 오타수
	this.gameUtil.setText(this.fWrongTypingNum12, 0, 24, "left", "top",
			mSeatPracticsWrong);
	var wrongGauge = mSeatPracticsWrong * 0.01;
	if (wrongGauge > 1) {
		wrongGauge = 1;
	}
	this.fWrongTypingGauge12.scale.x = wrongGauge;
};

// 자리 연습 스텝별 저장되어 있는 한글 모음/자음 텍스트를 가지고 온다.
MenuV2.prototype.GetSeatHanStepWords = function(index) {
	var word = "";

	switch (mSeatPracticsSelect) {
	case 0:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanOneStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390OneStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonOneStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalOneStep[mSeatShowKeyArray[index]];
		}
		break;
	case 1:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanTwoStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390TwoStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonTwoStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalTwoStep[mSeatShowKeyArray[index]];
		}
		break;
	case 2:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanThreeStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390ThreeStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonThreeStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalThreeStep[mSeatShowKeyArray[index]];
		}
		break;
	case 3:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanFourStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390FourStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonFourStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalFourStep[mSeatShowKeyArray[index]];
		}
		break;
	case 4:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanFiveStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390FiveStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonFiveStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalFiveStep[mSeatShowKeyArray[index]];
		}
		break;
	case 5:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanSixStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390SixStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonSixStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalSixStep[mSeatShowKeyArray[index]];
		}
		break;
	case 6:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanSevenStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390SevenStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonSevenStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalSevenStep[mSeatShowKeyArray[index]];
		}
		break;
	case 7:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanEightStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390EightStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonEightStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalEightStep[mSeatShowKeyArray[index]];
		}
		break;
	default:
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mSeatHanOneStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mSeatHan390OneStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mSeatHanSoonOneStep[mSeatShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mSeatHanFinalOneStep[mSeatShowKeyArray[index]];
		}
		break;
	}

	return word;
};

// 자리 연습 스텝별 저장되어 있는 영문 알파벳을 읽어온다.
MenuV2.prototype.GetSeatEngStepWords = function(index) {
	var word = "";

	switch (mSeatPracticsSelect) {
	case 0:
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mSeatEngOneStep[mSeatShowKeyArray[index]];
		} else {
			word = mSeatEngDvorakOneStep[mSeatShowKeyArray[index]];
		}
		break;
	case 1:
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mSeatEngTwoStep[mSeatShowKeyArray[index]];
		} else {
			word = mSeatEngDvorakTwoStep[mSeatShowKeyArray[index]];
		}
		break;
	case 2:
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mSeatEngThreeStep[mSeatShowKeyArray[index]];
		} else {
			word = mSeatEngDvorakThreeStep[mSeatShowKeyArray[index]];
		}
		break;
	case 3:
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mSeatEngFourStep[mSeatShowKeyArray[index]];
		} else {
			word = mSeatEngDvorakFourStep[mSeatShowKeyArray[index]];
		}
		break;
	case 4:
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mSeatEngFiveStep[mSeatShowKeyArray[index]];
		} else {
			word = mSeatEngDvorakFiveStep[mSeatShowKeyArray[index]];
		}
		break;
	case 5:
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mSeatEngSixStep[mSeatShowKeyArray[index]];
		} else {
			word = mSeatEngDvorakSixStep[mSeatShowKeyArray[index]];
		}
		break;
	default:
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mSeatEngOneStep[mSeatShowKeyArray[index]];
		} else {
			word = mSeatEngDvorakOneStep[mSeatShowKeyArray[index]];
		}
		break;
	}

	return word;
};

// 자리 연습 복자음일 경우 shift 활성화를 체크한다.
MenuV2.prototype.CheckStepShiftFinger = function(index) {
	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
		if (mSeatPracticsSelect === 0) {
			if (mSeatShowKeyArray[index] >= 8 && mSeatShowKeyArray[index] <= 11) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (mSeatPracticsSelect === 7) {
			if (mSeatShowKeyArray[index] >= 5 && mSeatShowKeyArray[index] <= 8) {
				return 2; // 우측 시프트 키 활성화
			}
		}
	} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		if (mSeatPracticsSelect === 6) {
			if (mSeatShowKeyArray[index] >= 6) {
				return 1; // 좌측 시프트 키 활성화
			}
		} else if (mSeatPracticsSelect === 7) {
			if (mSeatShowKeyArray[index] >= 5 && mSeatShowKeyArray[index] <= 9) {
				return 2; // 우측 시프트 키 활성화
			}
		}
	} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
		if (mSeatPracticsSelect === 6) {
			if (mSeatShowKeyArray[index] >= 5) {
				return 1; // 좌측 시프트 키 활성화
			}
		} else if (mSeatPracticsSelect === 7) {
			if (mSeatShowKeyArray[index] >= 5 && mSeatShowKeyArray[index] <= 8) {
				return 2; // 우측 시프트 키 활성화
			}
		}
	} else {
		if (mSeatPracticsSelect === 6) {
			if (mSeatShowKeyArray[index] >= 5 && mSeatShowKeyArray[index] <= 9) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (mSeatPracticsSelect === 7) {
			if (mSeatShowKeyArray[index] >= 4 && mSeatShowKeyArray[index] <= 5) {
				return 1; // 좌측 시프트 키 활성화
			}
		}
	}

	return 0;
};

// 자리 연습 키보드에서 손가락 활성화 위치를 가지고 온다.
MenuV2.prototype.GetStepFinger = function(index) {
	var finger = [];

	switch (mSeatPracticsSelect) {
	case 0:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390OneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390OneStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonOneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonOneStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalOneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalOneStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatOneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatOneStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	case 1:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390TwoStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390TwoStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonTwoStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonTwoStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalTwoStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalTwoStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatTwoStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatTwoStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	case 2:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390ThreeStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390ThreeStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonThreeStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonThreeStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalThreeStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalThreeStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatThreeStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatThreeStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	case 3:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390FourStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390FourStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonFourStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonFourStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalFourStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalFourStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatFourStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFourStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	case 4:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390FiveStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390FiveStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonFiveStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonFiveStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalFiveStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalFiveStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatFiveStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFiveStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	case 5:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390SixStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390SixStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonSixStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonSixStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalSixStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalSixStepFingerY[mSeatShowKeyArray[index]];
		} else {
			if (mTajaLanguageType === that.gameConst.LanguageType.ENGLISH
					&& mTajaEnglishType === that.gameConst.EnglishType.DVORAK) {
				finger[0] = mSeatDvoSixStepFingerX[mSeatShowKeyArray[index]];
				finger[1] = mSeatDvoSixStepFingerY[mSeatShowKeyArray[index]];
			} else {
				finger[0] = mSeatSixStepFingerX[mSeatShowKeyArray[index]];
				finger[1] = mSeatSixStepFingerY[mSeatShowKeyArray[index]];
			}
		}
		break;
	case 6:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390SevenStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390SevenStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonSevenStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonSevenStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalSevenStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalSevenStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatSevenStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSevenStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	case 7:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390EightStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390EightStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonEightStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonEightStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalEightStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalEightStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatEightStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatEightStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	default:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390OneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeat390OneStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonOneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatSoonOneStepFingerY[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalOneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatFinalOneStepFingerY[mSeatShowKeyArray[index]];
		} else {
			finger[0] = mSeatOneStepFingerX[mSeatShowKeyArray[index]];
			finger[1] = mSeatOneStepFingerY[mSeatShowKeyArray[index]];
		}
		break;
	}

	return finger;
};

// 자리 연습 키보드에서 손가락 활성화 위치를 가지고 온다.
MenuV2.prototype.GetStepImageFinger = function(index) {
	var finger = '';

	switch (mSeatPracticsSelect) {
	case 0:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390OneStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonOneStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalOneStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanOneStep[mSeatShowKeyArray[index]];
		}
		break;
	case 1:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390TwoStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonTwoStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalTwoStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanTwoStep[mSeatShowKeyArray[index]];
		}
		break;
	case 2:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390ThreeStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonThreeStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalThreeStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanThreeStep[mSeatShowKeyArray[index]];
		}
		break;
	case 3:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390FourStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonFourStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalFourStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanFourStep[mSeatShowKeyArray[index]];
		}
		break;
	case 4:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390FiveStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonFiveStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalFiveStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanFiveStep[mSeatShowKeyArray[index]];
		}
		break;
	case 5:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390SixStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonSixStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalSixStep[mSeatShowKeyArray[index]];
		} else {
			if (mTajaLanguageType === that.gameConst.LanguageType.ENGLISH
					&& mTajaEnglishType === that.gameConst.EnglishType.DVORAK) {
				finger = mFingerDvoSixStep[mSeatShowKeyArray[index]];
			} else {
				finger = mFingerHanSixStep[mSeatShowKeyArray[index]];
			}
		}
		break;
	case 6:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390SevenStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonSevenStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalSevenStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanSevenStep[mSeatShowKeyArray[index]];
		}
		break;
	case 7:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390EightStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonEightStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalEightStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanEightStep[mSeatShowKeyArray[index]];
		}
		break;
	default:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390OneStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonOneStep[mSeatShowKeyArray[index]];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalOneStep[mSeatShowKeyArray[index]];
		} else {
			finger = mFingerHanOneStep[mSeatShowKeyArray[index]];
		}
		break;
	}

	return finger;
};

// 키보드 DOWN일 경우 처리
MenuV2.prototype.SeatUserWordsCheckDown = function(evt) {
	if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
			&& (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390
					|| mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE || mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL)) {
		mTajaGame390HanReturn = false;
		if (evt.keyCode === 229) {
			mTajaGame390HanReturn = true;
		}
	}
};

// 키보드 UP일 경우 처리
MenuV2.prototype.SeatUserWordsCheck = function(evt) {
	var wordAnswer = userTajaTyping.value.substring(0, 1).toUpperCase();
	var wordString = "";
	var wordIsCheck = false;

	if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
			&& get_ohi_type() === true) {
		mTajaGameHanEngKey = 3;
		mTajaGame390HanReturn = false;
		evt.returnValue = false;
		return false;
	}

	if (mGameWordType !== 1 || that.fPopupGroup.visible === true) {
		evt.returnValue = false;
		return false;
	}

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		for (var i = 0; i < wordAnswer.length; i++) {
			ch = escape(wordAnswer.charAt(i)); // ISO-Latin-1 문자셋으로 변경
			if (ch.substring(0, 2) === '%u') {
				if (ch.substring(2, 4) === '00') {
					wordIsCheck = false;
				} else {
					wordIsCheck = true; // 한글
				}
			} else if (ch.substring(0, 1) === '%') {
				if (parseInt(ch.substring(1, 3), 16) > 127
						|| (parseInt(ch.substring(1, 3), 16) >= 58 && parseInt(
								ch.substring(1, 3), 16) <= 62)
						|| parseInt(ch.substring(1, 3), 16) === 44
						|| parseInt(ch.substring(1, 3), 16) === 91
						|| parseInt(ch.substring(1, 3), 16) === 92
						|| parseInt(ch.substring(1, 3), 16) === 40
						|| parseInt(ch.substring(1, 3), 16) === 41
						|| parseInt(ch.substring(1, 3), 16) === 93
						|| parseInt(ch.substring(1, 3), 16) === 35
						|| parseInt(ch.substring(1, 3), 16) === 37
						|| parseInt(ch.substring(1, 3), 16) === 33
						|| parseInt(ch.substring(1, 3), 16) === 36) {
					wordIsCheck = true; // 한글
				} else {
					wordIsCheck = false;
				}
			} else {
				if (ch.substring(0, 1) === '.' | ch.substring(0, 1) === ','
						| ch.substring(0, 1) === '-'
						| ch.substring(0, 1) === '0'
						| ch.substring(0, 1) === '4'
						| ch.substring(0, 1) === '@') {
					wordIsCheck = true;
				} else {
					wordIsCheck = false;
				}
			}
		}

		if (mGameStartAgent === that.gameConst.GameAgentType.CHROM) {
			var testWord = wordAnswer[wordAnswer.length - 1];
			var check = /[a-zA-Z]/;
			if (check.test(testWord) && testWord !== undefined) {
				mTajaGameHanEngKey = 1;
			}
		}
	} else {
		for (var i = 0; i < wordAnswer.length; i++) {
			ch = escape(wordAnswer.charAt(i)); // ISO-Latin-1 문자셋으로 변경
			if (ch.substring(0, 2) === '%u') {
				if (ch.substring(2, 4) === '00') {
					wordIsCheck = true;
				} else {
					wordIsCheck = false; // 한글
				}
			} else if (ch.substring(0, 1) === '%') {
				if (parseInt(ch.substring(1, 3), 16) > 127) {
					wordIsCheck = false; // 한글
				} else {
					wordIsCheck = true;
				}
			} else {
				wordIsCheck = true;
			}
		}

		if (mGameStartAgent === that.gameConst.GameAgentType.CHROM) {
			var testWord = wordAnswer[wordAnswer.length - 1];
			var check = /[ㄱ-ㅎㅏ-ㅣ가-힣]/;
			if (check.test(testWord) && testWord !== undefined) {
				mTajaGameHanEngKey = 2;
			}
		}
	}

	// 키보드를 누른 총 갯수를 계산한다.
	if (wordAnswer.length > 0 && wordIsCheck === true) {
		mSeatPracticsTotalWord++;
	}

	if (mTajaGameTimeStartFlag === false && wordAnswer.length > 0) {
		mTajaGameTimeStartFlag = true;
		mTajaGameStartTime = new Date();
	}

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		wordString = that.GetSeatHanStepWords(mSeatKeyboardUserCount);
	} else {
		wordString = that.GetSeatEngStepWords(mSeatKeyboardUserCount);
	}

	if (wordIsCheck === true) {
		if (that.IsUserWordRightWrong(wordAnswer, wordString, evt.keyCode) === true) {
			mSeatKeyboardUserCount++;
			if (mSeatKeyboardUserCount > 4) {
				mSeatIsChangeText = true;
			} else {
				mSeatIsStepText = true;
			}
			mSeatPracticsProcess++;
			mSeatPracticsRight++;
			mCharacterAniState = 1;
			mTajaGameScore += 1;
			mTajaGameSaveScore += 1;
		} else {
			mSeatPracticsWrong++;
			mCharacterAniState = 2;
		}
	}

	mTajaGame390HanReturn = false;
	userTajaTyping.value = "";
	userTajaTyping.blur();

	// 통계 처리
	var nowTime = new Date();
	mTajaGameStatTime = nowTime.getTime() - mTajaGameStatStartTime.getTime();
	mTajaGameStatStartTime = new Date();

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, wordAnswer, evt.keyCode) === true) {
				mTajaHangulTasu[mTajaHangulType][i]++;
				break;
			}
		}

		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, wordAnswer, evt.keyCode) === true
					&& wordAnswer === wordString) {
				mTajaHangulRight[mTajaHangulType][i]++;
				mTajaHangulSpeed[mTajaHangulType][i] += parseInt((1000 * 60)
						/ mTajaGameStatTime);
				for (var j = 0; j < mTajaHangulFingerJaso[mTajaHangulType].length; j++) {
					for (var k = 0; k < mTajaHangulFingerJaso[mTajaHangulType][j].length; k++) {
						if (that.IsStatUserWordFingerRightWrong(j, k,
								wordAnswer, evt.keyCode) === true) {
							mTajaHangulFingerRight[mTajaHangulType][j]++;
							mTajaHangulFingerSpeed[mTajaHangulType][j] += parseInt((1000 * 60)
									/ mTajaGameStatTime);
							break;
						}
					}
				}
				break;
			}
		}
	} else {
		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (mTajaEnglishAlphabet[mTajaEnglishType][i] === wordAnswer
					.toUpperCase()) {
				mTajaEnglishTasu[mTajaEnglishType][i]++;
				break;
			}
		}

		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (mTajaEnglishAlphabet[mTajaEnglishType][i] === wordAnswer
					.toUpperCase()
					&& wordAnswer === wordString) {
				mTajaEnglishRight[mTajaEnglishType][i]++;
				mTajaEnglishSpeed[mTajaEnglishType][i] += parseInt((1000 * 60)
						/ mTajaGameStatTime);
				for (var j = 0; j < mTajaEnglishFingerAlphabet[mTajaEnglishType].length; j++) {
					for (var k = 0; k < mTajaEnglishFingerAlphabet[mTajaEnglishType][j].length; k++) {
						if (mTajaEnglishFingerAlphabet[mTajaEnglishType][j][k] === wordAnswer
								.toUpperCase()) {
							mTajaEnglishFingerRight[mTajaEnglishType][j]++;
							mTajaEnglishFingerSpeed[mTajaEnglishType][j] += parseInt((1000 * 60)
									/ mTajaGameStatTime);
							break;
						}
					}
				}
				break;
			}
		}
	}

	mSeatIsProcess = true;
};

// 입력해야 될 값과 입력된 값을 비교한다.(세벌식일 경우 키보드 키값을 가지고 와서 비교한다.)
MenuV2.prototype.IsUserWordRightWrong = function(aWordAnswer, aWordString,
		aKeyCode) {
	var isRightWrong = false;

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
		if (aWordAnswer === aWordString
				&& aKeyCode === mSeatHan390KeyCode[mSeatPracticsSelect][mSeatShowKeyArray[mSeatKeyboardUserCount]]) {
			isRightWrong = true;
		}
	} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		if (aWordAnswer === aWordString
				&& aKeyCode === mSeatHanSoonKeyCode[mSeatPracticsSelect][mSeatShowKeyArray[mSeatKeyboardUserCount]]) {
			isRightWrong = true;
		}
	} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
		if (aWordAnswer === aWordString
				&& aKeyCode === mSeatHanFinalKeyCode[mSeatPracticsSelect][mSeatShowKeyArray[mSeatKeyboardUserCount]]) {
			isRightWrong = true;
		}
	} else {
		if (aWordAnswer === aWordString) {
			isRightWrong = true;
		}
	}

	return isRightWrong;
};

// 통계에서 사용할 자소 분리 처리 (세벌식일 경우 키보드 키 값을 가지고 와서 한번 더 비교한다.)
MenuV2.prototype.IsStatUserWordRightWrong = function(aIndex, aWordString,
		aKeyCode) {
	var isRightWrong = false;

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390
					|| mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE || mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL)) {
		if (mTajaHangulJaso[mTajaHangulType][aIndex] === aWordString
				&& aKeyCode === mTajaHangulJasoCode[aIndex]) {
			isRightWrong = true;
		}
	} else {
		if (mTajaHangulJaso[mTajaHangulType][aIndex] === aWordString) {
			isRightWrong = true;
		}
	}

	return isRightWrong;
};

// 통계에서 사용할 손가락 별 빠르기 자소분리 처리
MenuV2.prototype.IsStatUserWordFingerRightWrong = function(aJ, aK, aWordString,
		aKeyCode) {
	var isRightWrong = false;

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390
					|| mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE || mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL)) {
		if (mTajaHangulFingerJaso[mTajaHangulType][aJ][aK] === aWordString
				&& aKeyCode === mTajaHangulFingerJasoCode[aJ][aK]) {
			isRightWrong = true;
		}
	} else {
		if (mTajaHangulFingerJaso[mTajaHangulType][aJ][aK] === aWordString) {
			isRightWrong = true;
		}
	}

	return isRightWrong;
};

// 입력해야 될 텍스트를 가지고 온다.
MenuV2.prototype.GetUserCheckWord = function() {
	switch (mSeatPracticsSelect) {
	case 0:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390OneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		} else {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				wordString = mSeatEngOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else {
				wordString = mSeatEngDvorakOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	case 1:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanTwoStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390TwoStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonTwoStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalTwoStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		} else {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				wordString = mSeatEngTwoStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else {
				wordString = mSeatEngDvorakTwoStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	case 2:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanThreeStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390ThreeStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonThreeStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalThreeStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		} else {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				wordString = mSeatEngThreeStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else {
				wordString = mSeatEngDvorakThreeStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	case 3:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanFourStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390FourStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonFourStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalFourStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		} else {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				wordString = mSeatEngFourStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else {
				wordString = mSeatEngDvorakFourStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	case 4:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanFiveStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390FiveStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonFiveStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalFiveStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		} else {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				wordString = mSeatEngFiveStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else {
				wordString = mSeatEngDvorakFiveStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	case 5:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanSixStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390SixStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonSixStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalSixStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		} else {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				wordString = mSeatEngSixStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else {
				wordString = mSeatEngDvorakSixStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	case 6:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanSevenStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390SevenStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonSevenStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalSevenStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	case 7:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanEightStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390EightStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonEightStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalEightStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	default:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
				wordString = mSeatHanOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
				wordString = mSeatHan390OneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordString = mSeatHanSoonOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordString = mSeatHanFinalOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		} else {
			if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
				wordString = mSeatEngOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			} else {
				wordString = mSeatEngDvorakOneStep[mSeatShowKeyArray[mSeatKeyboardUserCount]];
			}
		}
		break;
	}

	return wordString;
};

//
MenuV2.prototype.SeatPlayTween = function() {
	this.fTweenTextGroup.y = 0;
	this.fTweenTextGroup.tweenA = this.game.add.tween(this.fTweenTextGroup).to(
			{
				y : this.fTweenTextGroup.y - 100
			}, 100, "Quart.easeOut");
	this.fTweenTextGroup.tweenA.start();
	this.fTweenTextGroup.tweenA.onComplete.addOnce(this.SeatEndTweenPlay, this);
};

//
MenuV2.prototype.SeatEndTweenPlay = function() {
	this.fTweenTextGroup.y = -1000;
	this.fShowTextGroup.y = 0;
	this.SeatChangeKeyboard();
};

//
MenuV2.prototype.SeatChangeKeyboard = function() {
	this.fStage1SelectCursor.visible = true;
	mIsTajaTypingFocus = false;

	for (var i = 0; i < mSeatShowTextArray.length; i++) {
		var textY = this.GetShowTextY(i + 5);
		this.gameUtil.setText(mSeatShowTextArray[i], 14, textY, "center",
				"middle", mSeatTweenTextArray[i + 5].text);
		mSeatShowKeyArray[i] = mSeatShowKeyArray[i + 5];

		// 두벌식이 아닌 경우에만 초성, 종성 텍스트 출력
		this.DrawShowChoJong(i);
	}

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
		mSeatShowKeyArray[5] = Math
				.floor((Math.random() * mSeatThreeKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[6] = Math
				.floor((Math.random() * mSeatThreeKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[7] = Math
				.floor((Math.random() * mSeatThreeKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[8] = Math
				.floor((Math.random() * mSeatThreeKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[9] = Math
				.floor((Math.random() * mSeatThreeKeyStepCount[mSeatPracticsSelect]));
	} else if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		mSeatShowKeyArray[5] = Math
				.floor((Math.random() * mSeatSoonKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[6] = Math
				.floor((Math.random() * mSeatSoonKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[7] = Math
				.floor((Math.random() * mSeatSoonKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[8] = Math
				.floor((Math.random() * mSeatSoonKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[9] = Math
				.floor((Math.random() * mSeatSoonKeyStepCount[mSeatPracticsSelect]));
	} else if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
		mSeatShowKeyArray[5] = Math
				.floor((Math.random() * mSeatFinalKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[6] = Math
				.floor((Math.random() * mSeatFinalKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[7] = Math
				.floor((Math.random() * mSeatFinalKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[8] = Math
				.floor((Math.random() * mSeatFinalKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[9] = Math
				.floor((Math.random() * mSeatFinalKeyStepCount[mSeatPracticsSelect]));
	} else {
		mSeatShowKeyArray[5] = Math
				.floor((Math.random() * mSeatKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[6] = Math
				.floor((Math.random() * mSeatKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[7] = Math
				.floor((Math.random() * mSeatKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[8] = Math
				.floor((Math.random() * mSeatKeyStepCount[mSeatPracticsSelect]));
		mSeatShowKeyArray[9] = Math
				.floor((Math.random() * mSeatKeyStepCount[mSeatPracticsSelect]));
	}

	for (var i = 5; i < mSeatTweenTextArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			this.gameUtil.setText(mSeatTweenTextArray[i], 14, 24, "center",
					"top", this.GetSeatHanStepWords(i));
		} else {
			this.gameUtil.setText(mSeatTweenTextArray[i], 14, 24, "center",
					"top", this.GetSeatEngStepWords(i));
		}
	}

	this.fStage1SelectCursor.x = 245;
	mSeatKeyboardUserCount = 0;

	this.fSelectRedKey12.visible = true;
	var finger = this.GetStepFinger(mSeatKeyboardUserCount);
	this.fSelectRedKey12.x = finger[0];
	this.fSelectRedKey12.y = finger[1];

	var shift = this.CheckStepShiftFinger(mSeatKeyboardUserCount);
	if (shift === 1) {
		this.fSelectRedKey121.visible = true;
		this.fSelectRedKey122.visible = false;
	} else if (shift === 2) {
		this.fSelectRedKey121.visible = false;
		this.fSelectRedKey122.visible = true;
	} else {
		this.fSelectRedKey121.visible = false;
		this.fSelectRedKey122.visible = false;
	}

	for (var i = 0; i < mSeatShowTextArray.length; i++) {
		if (i === 0) {
			mSeatShowTextArray[i].fill = '#2b3748';
		} else {
			mSeatShowTextArray[i].fill = '#fff151';
		}
	}

	mFingerImageName = this.GetStepImageFinger(mSeatKeyboardUserCount);
	this.setFingerImage(mFingerImageName);
};

// 자리 연습 스텝 저장
MenuV2.prototype.SeatCompleteSave = function() {
	var languageType = this.GetGameLanguageType();
	that.ajaxManager.netReqWriteTypingPosPractice(that.gameConst.uuid,
			mSeatPracticsSelect, languageType, 1,
			this.netResWriteTypingPosPracticeSuccess,
			this.netResWriteTypingPosPracticeFail);
};

// 자리 연습 스텝 저장 성공
MenuV2.prototype.netResWriteTypingPosPracticeSuccess = function(aData) {
	console.log("netResWriteTypingPosPracticeSuccess = " + aData.result);
};

// 자리 연습 스텝 실패
MenuV2.prototype.netResWriteTypingPosPracticeFail = function(aResult) {
	console.log("netResWriteTypingPosPracticeFail = " + aResult);
};

/**
 * 낱말 연습
 */

var mWordPracticeHangulData = []; // 낱말 한글 두벌식 텍스트 데이터 저장
var mWordPracticeHangul390Data = []; // 낱말 한글 세벌식 390 텍스트 데이터 저장
var mWordPracticeHangulSoonData = []; // 낱말 한글 세벌식 순아래 텍스트 데이터 저장
var mWordPracticeHangulFinalData = []; // 낱말 한글 세벌식 최종 텍스트 데이터 저장
var mWordPracticeEnglishData = []; // 낱말 영문 쿼티 텍스트 데이터 저장
var mWordPracticeEnglishDvoData = []; // 낱말 영문 드보락 텍스트 데이터 저장

var mWordPracticeMenuCompleteArray = []; // 낱말 연습 메뉴 완료 이미지
var mWordPracticeMenuSelectArray = []; // 낱말 연습 메뉴 선택 이미지
var mWordPracticeMenuSelectBtnArray = []; // 낱말 연습 메뉴 선택 버튼
var mWordPracticeSelectBtnArray = []; // 낱말 연습 게임 내 상단 선택 이미지

var mWordPracticsSelect = 0; // 낱말 메뉴 선택 인덱스
var mWordPracticsChangeSelect = 0; // 낱말 메뉴 선택 인덱스 임시 저장

var mWordShowTextArray = []; // 보여주는 단어 텍스트 배열
var mWordMeShowTextArray = []; // 입력되는 단어 텍스트 배열
var mWordTweenTextArray = []; // 숨겨져 있는 단어 텍스트 배열
var mWordMeTweenTextArray = []; // 숨겨져 있는 입력 단어 텍스트 배열

var mWordKeyboardUserCount = 0; // 한줄에서 단어 위치 저장

var mWordPracticsProcess = 0; // 전체 단어중 현재 몇개 입력됐는지 카운트
var mWordPracticsWrong = 0; // 틀린 단어 카운트
var mWordPracticsAccuracy = 0; // 현재 정확도 처리

var mWordShowKeyArray = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ]; // 나올 단어 인덱스
																	// 저장
var mWordIsChangeText = false; // 한줄 완료 체크
var mWordIsStepText = false; // 단어 하나 체크

var mWordCurrentSave = ""; // 자소 분리할 단어 저장
var mWordHangulJaso = []; // 단어 자소 분리 저장
var mWordHangulJasoCount = 0; // 단어 자소 분리 카운트

var mWordHanCompleteSave = [ [ 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 낱말연습 스텝 완료 체크
var mWordEngCompleteSave = [ [ 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 낱말연습 스텝 완료 체크

var mWordIsProcess = false; // 키 누를 경우 한번만 처리하기 위해
var mWordInputText = ""; // 입력된 텍스트 값 저장
var mWordIsBackSound = false; // back 키 클릭 시 사운드 처리

// 낱말 연습
MenuV2.prototype.WordPracticeCreate = function() {
	mWordShowTextArray = [ this.fSingleWords11, this.fSingleWords12,
			this.fSingleWords13, this.fSingleWords14, this.fSingleWords15 ];
	mWordMeShowTextArray = [ this.fSingleWordsMe11, this.fSingleWordsMe12,
			this.fSingleWordsMe13, this.fSingleWordsMe14, this.fSingleWordsMe15 ];
	mWordTweenTextArray = [ this.fSingleWords21, this.fSingleWords22,
			this.fSingleWords23, this.fSingleWords24, this.fSingleWords25,
			this.fSingleWords31, this.fSingleWords32, this.fSingleWords33,
			this.fSingleWords34, this.fSingleWords35 ];
	mWordMeTweenTextArray = [ this.fSingleWordsMe21, this.fSingleWordsMe22,
			this.fSingleWordsMe23, this.fSingleWordsMe24,
			this.fSingleWordsMe25, this.fSingleWordsMe31,
			this.fSingleWordsMe32, this.fSingleWordsMe33,
			this.fSingleWordsMe34, this.fSingleWordsMe35 ];

	mWordPracticeMenuCompleteArray = [ this.fStepComplete21,
			this.fStepComplete22, this.fStepComplete23, this.fStepComplete24,
			this.fStepComplete25, this.fStepComplete26, this.fStepComplete27,
			this.fStepComplete28 ];
	mWordPracticeMenuSelectArray = [ this.fStepBtnSelect21,
			this.fStepBtnSelect22, this.fStepBtnSelect23,
			this.fStepBtnSelect24, this.fStepBtnSelect25,
			this.fStepBtnSelect26, this.fStepBtnSelect27, this.fStepBtnSelect28 ];
	mWordPracticeMenuSelectBtnArray = [ this.fStepBtn21, this.fStepBtn22,
			this.fStepBtn23, this.fStepBtn24, this.fStepBtn25, this.fStepBtn26,
			this.fStepBtn27, this.fStepBtn28 ];
	mWordPracticeSelectBtnArray = [ this.fStepSetNum221, this.fStepSetNum222,
			this.fStepSetNum223, this.fStepSetNum224, this.fStepSetNum225,
			this.fStepSetNum226, this.fStepSetNum227, this.fStepSetNum228 ];

	for (var i = 0; i < mWordPracticeMenuCompleteArray.length; i++) {
		mWordPracticeMenuCompleteArray[i].visible = true;
		mWordPracticeMenuCompleteArray[i].inputEnabled = false;
	}

	for (var i = 0; i < mWordPracticeMenuSelectArray.length; i++) {
		mWordPracticeMenuSelectArray[i].index = i;
		if (mWordPracticsSelect == i) {
			mWordPracticeMenuSelectArray[i].visible = true;
		} else {
			mWordPracticeMenuSelectArray[i].visible = false;
		}
	}

	for (var i = 0; i < mWordPracticeMenuSelectBtnArray.length; i++) {
		mWordPracticeMenuSelectBtnArray[i].index = i;
	}

	for (var i = 0; i < mWordPracticeSelectBtnArray.length; i++) {
		mWordPracticeSelectBtnArray[i].index = i;
	}

	this.WordPracticeReadHangulData();
	this.WordPracticeReadEnglishData();

	mWordPracticsSelect = 0;
};

// 한글 낱말 데이터를 읽어온다.
MenuV2.prototype.WordPracticeReadHangulData = function() {
	var hanData = this.game.cache.getText('wordhan1');
	mWordPracticeHangulData[0] = hanData.split('\n');
	hanData = this.game.cache.getText('wordhan2');
	mWordPracticeHangulData[1] = hanData.split('\n');
	hanData = this.game.cache.getText('wordhan3');
	mWordPracticeHangulData[2] = hanData.split('\n');
	hanData = this.game.cache.getText('wordhan4');
	mWordPracticeHangulData[3] = hanData.split('\n');
	hanData = this.game.cache.getText('wordhan5');
	mWordPracticeHangulData[4] = hanData.split('\n');
	hanData = this.game.cache.getText('wordhan6');
	mWordPracticeHangulData[5] = hanData.split('\n');
	hanData = this.game.cache.getText('wordhan7');
	mWordPracticeHangulData[6] = hanData.split('\n');
	hanData = this.game.cache.getText('wordhan8');
	mWordPracticeHangulData[7] = hanData.split('\n');

	hanData = this.game.cache.getText('word390han1');
	mWordPracticeHangul390Data[0] = hanData.split('\n');
	hanData = this.game.cache.getText('word390han2');
	mWordPracticeHangul390Data[1] = hanData.split('\n');
	hanData = this.game.cache.getText('word390han3');
	mWordPracticeHangul390Data[2] = hanData.split('\n');
	hanData = this.game.cache.getText('word390han4');
	mWordPracticeHangul390Data[3] = hanData.split('\n');
	hanData = this.game.cache.getText('word390han5');
	mWordPracticeHangul390Data[4] = hanData.split('\n');
	hanData = this.game.cache.getText('word390han6');
	mWordPracticeHangul390Data[5] = hanData.split('\n');
	hanData = this.game.cache.getText('word390han7');
	mWordPracticeHangul390Data[6] = hanData.split('\n');
	hanData = this.game.cache.getText('word390han8');
	mWordPracticeHangul390Data[7] = hanData.split('\n');

	hanData = this.game.cache.getText('word_soon_han1');
	mWordPracticeHangulSoonData[0] = hanData.split('\n');
	hanData = this.game.cache.getText('word_soon_han2');
	mWordPracticeHangulSoonData[1] = hanData.split('\n');
	hanData = this.game.cache.getText('word_soon_han3');
	mWordPracticeHangulSoonData[2] = hanData.split('\n');
	hanData = this.game.cache.getText('word_soon_han4');
	mWordPracticeHangulSoonData[3] = hanData.split('\n');
	hanData = this.game.cache.getText('word_soon_han5');
	mWordPracticeHangulSoonData[4] = hanData.split('\n');
	hanData = this.game.cache.getText('word_soon_han6');
	mWordPracticeHangulSoonData[5] = hanData.split('\n');
	hanData = this.game.cache.getText('word_soon_han7');
	mWordPracticeHangulSoonData[6] = hanData.split('\n');
	hanData = this.game.cache.getText('word_soon_han8');
	mWordPracticeHangulSoonData[7] = hanData.split('\n');

	hanData = this.game.cache.getText('word_fin_han1');
	mWordPracticeHangulFinalData[0] = hanData.split('\n');
	hanData = this.game.cache.getText('word_fin_han2');
	mWordPracticeHangulFinalData[1] = hanData.split('\n');
	hanData = this.game.cache.getText('word_fin_han3');
	mWordPracticeHangulFinalData[2] = hanData.split('\n');
	hanData = this.game.cache.getText('word_fin_han4');
	mWordPracticeHangulFinalData[3] = hanData.split('\n');
	hanData = this.game.cache.getText('word_fin_han5');
	mWordPracticeHangulFinalData[4] = hanData.split('\n');
	hanData = this.game.cache.getText('word_fin_han6');
	mWordPracticeHangulFinalData[5] = hanData.split('\n');
	hanData = this.game.cache.getText('word_fin_han7');
	mWordPracticeHangulFinalData[6] = hanData.split('\n');
	hanData = this.game.cache.getText('word_fin_han8');
	mWordPracticeHangulFinalData[7] = hanData.split('\n');
};

// 영문 낱말 데이터를 읽어온다.
MenuV2.prototype.WordPracticeReadEnglishData = function() {
	var engData = this.game.cache.getText('wordeng1');
	mWordPracticeEnglishData[0] = engData.split('\n');
	engData = this.game.cache.getText('wordeng2');
	mWordPracticeEnglishData[1] = engData.split('\n');
	engData = this.game.cache.getText('wordeng3');
	mWordPracticeEnglishData[2] = engData.split('\n');
	engData = this.game.cache.getText('wordeng4');
	mWordPracticeEnglishData[3] = engData.split('\n');
	engData = this.game.cache.getText('wordeng5');
	mWordPracticeEnglishData[4] = engData.split('\n');
	engData = this.game.cache.getText('wordeng6');
	mWordPracticeEnglishData[5] = engData.split('\n');

	engData = this.game.cache.getText('dvo_word1');
	mWordPracticeEnglishDvoData[0] = engData.split('\n');
	engData = this.game.cache.getText('dvo_word2');
	mWordPracticeEnglishDvoData[1] = engData.split('\n');
	engData = this.game.cache.getText('dvo_word3');
	mWordPracticeEnglishDvoData[2] = engData.split('\n');
	engData = this.game.cache.getText('dvo_word4');
	mWordPracticeEnglishDvoData[3] = engData.split('\n');
	engData = this.game.cache.getText('dvo_word5');
	mWordPracticeEnglishDvoData[4] = engData.split('\n');
	engData = this.game.cache.getText('dvo_word6');
	mWordPracticeEnglishDvoData[5] = engData.split('\n');
};

// 낱말 연습 초기화
MenuV2.prototype.WordPracticeInit = function() {
	mGameStateType = this.gameConst.GameStateType.WORD;

	this.StageInfo();
	this.WordLanguageTypeInfo();

	// 낱말 완료 이미지 처리
	for (var i = 0; i < mWordPracticeMenuCompleteArray.length; i++) {
		var complete = 0;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			complete = parseInt(mWordHanCompleteSave[mTajaHangulType][i]);
		} else {
			complete = parseInt(mWordEngCompleteSave[mTajaEnglishType][i]);
		}

		if (complete === 0) {
			mWordPracticeMenuCompleteArray[i].setFrames(0, 0, 0, 0);
		} else if (complete === 1) {
			mWordPracticeMenuCompleteArray[i].setFrames(1, 1, 1, 1);
		}
	}

	// 현재 선택된 메뉴 이미지 활성화 처리
	for (var i = 0; i < mWordPracticeMenuSelectArray.length; i++) {
		if (mWordPracticsSelect == i) {
			mWordPracticeMenuSelectArray[i].visible = true;
		} else {
			mWordPracticeMenuSelectArray[i].visible = false;
		}
	}

	// 숨겨진 입력된 텍스트 색깔 처리
	for (var i = 0; i < mWordMeTweenTextArray.length; i++) {
		this.gameUtil
				.setText(mWordMeTweenTextArray[i], 0, 0, "left", "top", "");
		if (i < 5) {
			mWordMeTweenTextArray[i].fill = '#ffffff';
		} else {
			mWordMeTweenTextArray[i].fill = '#000000';
		}
	}

	// 보여주는 단어 인덱스 저장
	for (var i = 0; i < mWordShowKeyArray.length; i++) {
		var wordCount = 0;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
				wordCount = mWordPracticeHangulData[mWordPracticsSelect].length;
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
				wordCount = mWordPracticeHangul390Data[mWordPracticsSelect].length;
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordCount = mWordPracticeHangulSoonData[mWordPracticsSelect].length;
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordCount = mWordPracticeHangulFinalData[mWordPracticsSelect].length;
			}
		} else {
			if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
				wordCount = mWordPracticeEnglishData[mWordPracticsSelect].length;
			} else {
				wordCount = mWordPracticeEnglishDvoData[mWordPracticsSelect].length;
			}
		}
		mWordShowKeyArray[i] = Math.floor((Math.random() * wordCount));
	}

	// 숨겨져 있는 입력해야하는 단어 텍스트 색깔 처리
	for (var i = 0; i < mWordTweenTextArray.length; i++) {
		this.gameUtil.setText(mWordTweenTextArray[i], 0, 0, "left", "top", this
				.GetWordStepWords(i));
		if (i < 5) {
			mWordTweenTextArray[i].fill = '#ffffff';
		} else {
			mWordTweenTextArray[i].fill = '#000000';
		}
	}

	// 입력해야하는 단어 텍스트 색깔 처리
	for (var i = 0; i < mWordShowTextArray.length; i++) {
		this.gameUtil.setText(mWordShowTextArray[i], 0, 0, "left", "top",
				mWordTweenTextArray[i].text);
		mWordShowTextArray[i].clearColors();
		if (i === 0) {
			mWordShowTextArray[i].fill = '#2b3748';
		} else {
			mWordShowTextArray[i].fill = '#fff151';
		}
	}

	// 입력되어진 단어 텍스트 색깔 처리
	for (var i = 0; i < mWordMeShowTextArray.length; i++) {
		this.gameUtil.setText(mWordMeShowTextArray[i], 0, 0, "left", "top", "");
		if (i === 0) {
			mWordMeShowTextArray[i].fill = '#2b3748';
		} else {
			mWordMeShowTextArray[i].fill = '#fff151';
		}
	}

	// 한글일 경우 8개, 영문일 경우 6개 활성화 한다.
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		for (var i = 0; i < mWordPracticeSelectBtnArray.length; i++) {
			mWordPracticeSelectBtnArray[i].visible = true;
		}

		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			this.fKeyStepGroup21.visible = true;
			this.fKeyStepGroup22.visible = false;
			this.fKeyStepGroup23.visible = false;
			this.fKeyStepGroup24.visible = false;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			this.fKeyStepGroup21.visible = false;
			this.fKeyStepGroup22.visible = true;
			this.fKeyStepGroup23.visible = false;
			this.fKeyStepGroup24.visible = false;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			this.fKeyStepGroup21.visible = false;
			this.fKeyStepGroup22.visible = false;
			this.fKeyStepGroup23.visible = true;
			this.fKeyStepGroup24.visible = false;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			this.fKeyStepGroup21.visible = false;
			this.fKeyStepGroup22.visible = false;
			this.fKeyStepGroup23.visible = false;
			this.fKeyStepGroup24.visible = true;
		}

		this.fKeyStepGroup19.visible = false;
		this.fKeyStepGroup20.visible = false;

		this.fStep27.visible = true;
		this.fStep28.visible = true;
	} else {
		for (var i = 0; i < mWordPracticeSelectBtnArray.length; i++) {
			if (i < 6) {
				mWordPracticeSelectBtnArray[i].visible = true;
			} else {
				mWordPracticeSelectBtnArray[i].visible = false;
			}
		}

		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			this.fKeyStepGroup19.visible = false;
			this.fKeyStepGroup20.visible = true;
		} else if (mTajaEnglishType === this.gameConst.EnglishType.DVORAK) {
			this.fKeyStepGroup19.visible = true;
			this.fKeyStepGroup20.visible = false;
		}

		this.fKeyStepGroup21.visible = false;
		this.fKeyStepGroup22.visible = false;
		this.fKeyStepGroup23.visible = false;
		this.fKeyStepGroup24.visible = false;

		this.fStep27.visible = false;
		this.fStep28.visible = false;
	}

	this.WordPracticeDrawFinger();

	mWordCurrentSave = mWordShowTextArray[0].text;

	if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
		mWordHangulJaso = this.GetHangulToJaso(mWordCurrentSave);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
		mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
		mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
	}

	mIsTajaTypingFocus = false;
	mWordIsChangeText = false;
	mWordIsStepText = false;
	mTajaGameTimeStartFlag = false;
	mTajaGamePopupType = 0;
	mWordPracticsProcess = 0;
	mWordPracticsWrong = 0;
	mWordPracticsAccuracy = 0;
	mWordKeyboardUserCount = 0;
	mWordHangulJasoCount = 0;
	userTajaTyping.value = "";
	mWordInputText = "";

	mLongMenuSavePage = 1;
	mLongMenuSaveTitleSelect = 0;

	this.fTweenTextGroup2.y = -1000;
	this.fShowTextGroup2.y = 0;

	this.fStage2SelectCursor.visible = true;
	this.fStage2SelectCursor.x = 235;

	this.fSelectRedKey22.visible = true;
	this.fSelectRedKey221.visible = false;
	this.fSelectRedKey222.visible = false;

	mFingerImageName = this.GetStepImageFinger(mWordKeyboardUserCount);
	this.setFingerImage(mFingerImageName);

	mTajaGameStatStartTime = new Date();

	if (mGameStartAgent === that.gameConst.GameAgentType.CHROM) {
		userTajaTyping.onkeypress = null;
		userTajaTyping.onkeyup = this.WordUserWordsCheck;
		userTajaTyping.onkeydown = this.WordUserWordsCheck;
	} else {
		userTajaTyping.onkeypress = null;
		userTajaTyping.onkeyup = this.WordUserWordsCheck;
		userTajaTyping.onkeydown = this.WordUserWordsCheck;
	}
};

// 한글인지 영문인지 확인 후 키보드 표시
MenuV2.prototype.WordLanguageTypeInfo = function() {
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		this.fKeyTxtkor22.visible = true;
		this.fKeyTxtEn22.visible = false;

		var keyTxtkor = "KeyTxtkor1";
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			keyTxtkor = "KeyTxtkor1";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			keyTxtkor = "KeyTxtkor2";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			keyTxtkor = "KeyTxtkor3";
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			keyTxtkor = "KeyTxtkor4";
		}
		this.fKeyTxtkor22.loadTexture(keyTxtkor, 0);
	} else {
		this.fKeyTxtkor22.visible = false;
		this.fKeyTxtEn22.visible = true;

		var keyTxtEn = "KeyTxtEn1";
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			keyTxtEn = "KeyTxtEn1";
		} else if (mTajaEnglishType === this.gameConst.EnglishType.DVORAK) {
			keyTxtEn = "KeyTxtEn2";
		}
		this.fKeyTxtEn22.loadTexture(keyTxtEn, 0);
	}
};

// 낱말 연습 처리
MenuV2.prototype.WordGameProcess = function() {
	this.WordPracticeInfoProcess();

	// 통계에 따른 한글 자소/영문 알파벳 저장
	if (mWordIsProcess === true && this.fStageInfo22.visible === true) {
		mWordIsProcess = false;
		if (this.fPopupGroup.visible === false) {
			this.playAudio(typing_key, mTajaSoundVolume, false);
		}
		this.WordTasuStatistics();
	}

	// 낱말 하나씩 넘어갈때 처리
	if (mWordIsStepText === true) {
		mWordIsStepText = false;

		var inputWord = mWordInputText;
		mWordMeShowTextArray[mWordKeyboardUserCount - 1].text = inputWord;

		if (mWordKeyboardUserCount < mWordShowTextArray.length) {
			mWordShowTextArray[mWordKeyboardUserCount - 1].clearColors();
		}

		for (var i = 0; i < mWordShowTextArray.length; i++) {
			if (mWordKeyboardUserCount < i) {
				mWordShowTextArray[i].fill = '#fff151';
			} else if (mWordKeyboardUserCount === i) {
				mWordShowTextArray[i].fill = '#2b3748';
			} else {
				for (var j = 0; j < mWordShowTextArray[i].text.length; j++) {
					if (mWordShowTextArray[i].text[j] === mWordMeShowTextArray[i].text[j]) {
						mWordShowTextArray[i].addColor('#ffffff', j);
					} else {
						mWordShowTextArray[i].addColor('#ff0000', j);
					}
				}
			}
		}

		for (var i = 0; i < mWordMeShowTextArray.length; i++) {
			if (mWordKeyboardUserCount < i) {
				mWordMeShowTextArray[i].fill = '#fff151';
			} else if (mWordKeyboardUserCount === i) {
				mWordMeShowTextArray[i].fill = '#2b3748';
			} else {
				mWordMeShowTextArray[i].fill = '#ffffff';
			}
		}

		if (mWordKeyboardUserCount <= 4) {
			mWordCurrentSave = mWordShowTextArray[mWordKeyboardUserCount].text;
		} else {
			mWordCurrentSave = mWordShowTextArray[4].text;
		}

		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			mWordHangulJaso = this.GetHangulToJaso(mWordCurrentSave);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
		}

		this.fStage2SelectCursor.x += 145;
		mWordInputText = "";
		userTajaTyping.value = "";
	}

	// 낱말 한줄을 다 입력 후 다음 줄로 넘어가는 처리
	if (mWordIsChangeText === true) {
		var inputWord = mWordInputText;
		if (mWordKeyboardUserCount >= 0 && mWordKeyboardUserCount <= 4) {
			mWordMeShowTextArray[mWordKeyboardUserCount - 1].text = inputWord;
		}
		// 낱말 입력 완료 처리
		if (mWordPracticsProcess >= this.gameConst.InputTotalCount) {
			if (mWordPracticsAccuracy >= 70) {
				mTajaGameScore += 20;
				mTajaGameSaveScore += 20;
			}
			this.TajaScoreDataSave();
			mTajaGamePopupType = 2;
			this.SetPieceResultPopup(2, this.gameConst.InputTotalCount,
					mWordPracticsWrong, mWordPracticsAccuracy, mTajaGameTime,
					this.WordPracticeContinueButton,
					this.WordPracticeAgainButton, this.WordPracticeStopButton);
			this.WordPracticeHanComPoint();
			this.SendStartEndGameLog(2, mWordPracticsSelect + 1, 0, 1);
		} else {
			this.fStage2SelectCursor.visible = false;
			for (var i = 0; i < mWordShowTextArray.length; i++) {
				if (mWordKeyboardUserCount < i) {
					mWordShowTextArray[i].fill = '#fff151';
				} else if (mWordKeyboardUserCount === i) {
					mWordShowTextArray[i].fill = '#2b3748';
				} else {
					mWordShowTextArray[i].fill = '#ffffff';
				}
			}

			for (var i = 0; i < mWordShowTextArray.length; i++) {
				this.gameUtil.setText(mWordShowTextArray[i], 0, 0, "left",
						"top", mWordTweenTextArray[i + 5].text);
				mWordShowTextArray[i].clearColors();
			}

			for (var i = 0; i < mWordMeShowTextArray.length; i++) {
				this.gameUtil.setText(mWordMeTweenTextArray[i], 0, 0, "left",
						"top", mWordMeShowTextArray[i].text);
			}

			for (var i = 0; i < mWordMeShowTextArray.length; i++) {
				this.gameUtil.setText(mWordMeShowTextArray[i], 0, 0, "left",
						"top", "");
			}

			this.fWordInputCursor.visible = false;
			this.fWordInputCursorAni.visible = false;
			this.fSelectRedKey22.visible = false;
			this.fSelectRedKey221.visible = false;
			this.fSelectRedKey222.visible = false;
			this.fShowTextGroup2.y = -1000;
			mWordInputText = "";
			userTajaTyping.value = "";
			userTajaTyping.blur();

			this.WordPlayTween();
		}

		mIsTajaTypingFocus = true;
		mWordIsChangeText = false;
	} else {
		if (mTajaGameTimeStartFlag === true) {
			this.nowTime();
		}
	}

	if (mIsTajaTypingFocus === false) {
		var inputWord = mWordInputText;
		if (mWordKeyboardUserCount < 5) {
			mWordMeShowTextArray[mWordKeyboardUserCount].text = inputWord;
			this.WordPracticeFingerFind(inputWord);

			// 커서 표시
			var ctx = mWordMeShowTextArray[mWordKeyboardUserCount].canvas
					.getContext("2d");
			var text = ctx.measureText(inputWord); // TextMetrics object
			this.fWordInputCursor.x = 155
					+ mWordMeShowTextArray[mWordKeyboardUserCount].x
					+ text.width;
			this.fWordInputCursorAni.x = 156
					+ mWordMeShowTextArray[mWordKeyboardUserCount].x
					+ text.width;
		} else {
			// 여기로 들어오면 안됩니다.
			console.log("mWordKeyboardUserCount = " + mWordKeyboardUserCount);
		}
	}

	if (mWordIsBackSound === true && this.fStageInfo22.visible === true) {
		mWordIsBackSound = false;
		this.playAudio(typing_back, mTajaSoundVolume, false);
	}

	if (this.game.input.keyboard.isDown(Phaser.Keyboard.ESC)) {
		if (this.fStageInfo22.visible === true) {
			if (mTajaGamePopupType === 1) {
				this.WordExitButton();
			} else if (mTajaGamePopupType === 2) {
				this.WordPracticeStopButton();
			} else if (mTajaGamePopupType === 3) {
				this.WordPracticeConfirmButton();
			} else if (mTajaGamePopupType === 10) {
				this.TajaGameHanEngConfirm();
			} else {
				this.GoBackButton();
			}
		}

		mTajaGamePopupType = 0;
		this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	}
};

// 낱말 연습 글쇠별 타수 통계 처리
MenuV2.prototype.WordTasuStatistics = function() {
	if (mWordInputText.length <= 0) {
		return;
	}

	var nowTime = new Date();
	mTajaGameStatTime = nowTime.getTime() - mTajaGameStatStartTime.getTime();
	mTajaGameStatStartTime = new Date();

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		var jaso = "";
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			jaso = this.GetHangulToJaso(mWordInputText);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			jaso = this.GetHangulSebelToJaso(mWordInputText, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			jaso = this.GetHangulSebelToJaso(mWordInputText, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			jaso = this.GetHangulSebelToJaso(mWordInputText, 0);
		}
		var jasoLength = jaso.length - 1;
		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, jaso[jasoLength],
					mTajaGameKeyCode) === true) {
				mTajaHangulTasu[mTajaHangulType][i]++;
				break;
			}
		}

		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			jaso = this
					.GetHangulToJaso(mWordInputText[mWordInputText.length - 1]);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			jaso = this.GetHangulSebelToJaso(
					mWordInputText[mWordInputText.length - 1], 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			jaso = this.GetHangulSebelToJaso(
					mWordInputText[mWordInputText.length - 1], 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			jaso = this.GetHangulSebelToJaso(
					mWordInputText[mWordInputText.length - 1], 0);
		}
		jasoLength = jaso.length - 1;
		if (mWordCurrentSave.length >= mWordInputText.length)
			if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
				wordJaso = this
						.GetHangulToJaso(mWordCurrentSave[mWordInputText.length - 1]);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
				wordJaso = this.GetHangulSebelToJaso(
						mWordCurrentSave[mWordInputText.length - 1], 0);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordJaso = this.GetHangulSebelToJaso(
						mWordCurrentSave[mWordInputText.length - 1], 0);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordJaso = this.GetHangulSebelToJaso(
						mWordCurrentSave[mWordInputText.length - 1], 0);
			} else
				wordJaso = "";

		if (wordJaso.length < jaso.length) {
			if (mWordCurrentSave.length > mWordInputText.length) {
				var addJaso = "";
				if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
					addJaso = this
							.GetHangulToJaso(mWordCurrentSave[mWordInputText.length]);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
					addJaso = this.GetHangulSebelToJaso(
							mWordCurrentSave[mWordInputText.length], 0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
					addJaso = this.GetHangulSebelToJaso(
							mWordCurrentSave[mWordInputText.length], 0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
					addJaso = this.GetHangulSebelToJaso(
							mWordCurrentSave[mWordInputText.length], 0);
				}
				wordJaso += addJaso[0];
			}
		}
		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, jaso[jasoLength],
					mTajaGameKeyCode) === true
					&& jaso[jasoLength] === wordJaso[jasoLength]) {
				mTajaHangulRight[mTajaHangulType][i]++;
				mTajaHangulSpeed[mTajaHangulType][i] += parseInt((1000 * 60)
						/ mTajaGameStatTime);
				for (var j = 0; j < mTajaHangulFingerJaso[mTajaHangulType].length; j++) {
					for (var k = 0; k < mTajaHangulFingerJaso[mTajaHangulType][j].length; k++) {
						if (that.IsStatUserWordFingerRightWrong(j, k,
								jaso[jasoLength], mTajaGameKeyCode) === true) {
							mTajaHangulFingerRight[mTajaHangulType][j]++;
							mTajaHangulFingerSpeed[mTajaHangulType][j] += parseInt((1000 * 60)
									/ mTajaGameStatTime);
							break;
						}
					}
				}
				break;
			}
		}
	} else {
		var jasoLength = mWordInputText.length - 1;
		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (mWordInputText[jasoLength] !== undefined) {
				if (mTajaEnglishAlphabet[mTajaEnglishType][i] === mWordInputText[jasoLength]
						.toUpperCase()) {
					mTajaEnglishTasu[mTajaEnglishType][i]++;
					break;
				}
			}
		}

		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (mWordInputText[jasoLength] !== undefined) {
				if (mTajaEnglishAlphabet[mTajaEnglishType][i] === mWordInputText[jasoLength]
						.toUpperCase()
						&& mWordInputText[jasoLength] === mWordCurrentSave[jasoLength]) {
					mTajaEnglishRight[mTajaEnglishType][i]++;
					mTajaEnglishSpeed[mTajaEnglishType][i] += parseInt((1000 * 60)
							/ mTajaGameStatTime);
					for (var j = 0; j < mTajaEnglishFingerAlphabet[mTajaEnglishType].length; j++) {
						for (var k = 0; k < mTajaEnglishFingerAlphabet[mTajaEnglishType][j].length; k++) {
							if (mTajaEnglishFingerAlphabet[mTajaEnglishType][j][k] === mWordInputText[jasoLength]
									.toUpperCase()) {
								mTajaEnglishFingerRight[mTajaEnglishType][j]++;
								mTajaEnglishFingerSpeed[mTajaEnglishType][j] += parseInt((1000 * 60)
										/ mTajaGameStatTime);
								break;
							}
						}
					}
					break;
				}
			}
		}
	}
};

// 낱말 한컴 포인트
MenuV2.prototype.WordPracticeHanComPoint = function() {
	if (mWordPracticsAccuracy >= this.gameConst.TypingAccuracy) {
		if (that.gameConst.uuid != 0) {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				if (mWordHanCompleteSave[mTajaHangulType][mWordPracticsSelect] === 0) {
					that.SetToastMessage("연습 완료 보상으로 " + 20
							+ " 한컴 포인트를 획득했습니다.", 2);
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							20, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
					console.log("========= 한글 한컴포인트 적립 완료!!! ========");
				} else {
					console.log("========= 이미 완료한 단계 입니다!!! ========");
				}
			} else {
				if (mWordEngCompleteSave[mTajaEnglishType][mWordPracticsSelect] === 0) {
					that.SetToastMessage("연습 완료 보상으로 " + 20
							+ " 한컴 포인트를 획득했습니다.", 2);
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							20, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
					console.log("========= 영문 한컴포인트 적립 완료!!! ========");
				} else {
					console.log("========= 이미 완료한 단계 입니다!!! ========");
				}
			}
		}
	}
};

// 낱말 연습 완료후 계속 버튼
MenuV2.prototype.WordPracticeContinueButton = function() {
	this.SetLongResultExitPopup();

	if (mWordPracticsAccuracy < this.gameConst.TypingAccuracy) {
		mTajaGamePopupType = 3;
		this.SetPublicPopup(1, "목표 정확도에 미달하여\n현재 단계를 다시 연습합니다.", null,
				this.WordPracticeConfirmButton);
	} else {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mWordHanCompleteSave[mTajaHangulType][mWordPracticsSelect] = 1;
		} else {
			mWordEngCompleteSave[mTajaEnglishType][mWordPracticsSelect] = 1;
		}
		this.WordCompleteSave();
		mWordPracticsSelect++;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			if (mWordPracticsSelect > 7)
				mWordPracticsSelect = 0;
		} else {
			if (mWordPracticsSelect > 5)
				mWordPracticsSelect = 0;
		}

		for (var i = 0; i < mWordPracticeSelectBtnArray.length; i++) {
			if (mWordPracticsSelect === i) {
				mWordPracticeSelectBtnArray[i].setFrames(1, 1, 1, 1);
				mWordPracticeSelectBtnArray[i].inputEnabled = false;
			} else {
				var complete = 0;
				if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
					complete = mWordHanCompleteSave[mTajaHangulType][i];
				} else {
					complete = mWordEngCompleteSave[mTajaEnglishType][i];
				}

				if (complete === 1) {
					mWordPracticeSelectBtnArray[i].setFrames(2, 2, 2, 2);
				} else {
					mWordPracticeSelectBtnArray[i].setFrames(0, 0, 0, 0);
				}
				mWordPracticeSelectBtnArray[i].inputEnabled = true;
			}
		}

		this.WordPracticeInit();
		this.SetTajaGameStartTime();
	}

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 다시하기 버튼
MenuV2.prototype.WordPracticeAgainButton = function() {
	if (mWordPracticsAccuracy >= this.gameConst.TypingAccuracy) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mWordHanCompleteSave[mTajaHangulType][mWordPracticsSelect] = 1;
		} else {
			mWordEngCompleteSave[mTajaEnglishType][mWordPracticsSelect] = 1;
		}
		this.WordCompleteSave();
	}

	this.SetLongResultExitPopup();
	this.WordPracticeInit();
	this.SetTajaGameStartTime();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 완료후 그만 버튼
MenuV2.prototype.WordPracticeStopButton = function() {
	if (mWordPracticsAccuracy >= this.gameConst.TypingAccuracy) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mWordHanCompleteSave[mTajaHangulType][mWordPracticsSelect] = 1;
		} else {
			mWordEngCompleteSave[mTajaEnglishType][mWordPracticsSelect] = 1;
		}
		this.WordCompleteSave();
	}

	this.SetLongResultExitPopup();

	this.fStageInfo21.visible = true;
	this.fStageInfo22.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	this.fHandImgs.visible = false;

	this.WordPracticeInit();

	mGameWordType = this.gameConst.GameWordType.NONE;
	this.playAudio(click_sound, mTajaSoundVolume, false);
	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 낱말 연습 완료후 확인 버튼
MenuV2.prototype.WordPracticeConfirmButton = function() {
	this.SetPublicExitPopup();
	this.WordPracticeInit();
	this.SetTajaGameStartTime();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 손가락 이미지 위치 처리
MenuV2.prototype.WordPracticeFingerFind = function(inputWord) {
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		for (var i = 0; i < mWordCurrentSave.length; i++) {
			if (mWordCurrentSave[i] === inputWord[i]
					|| inputWord[i] === undefined || i >= inputWord.length - 1) {
				mWordShowTextArray[mWordKeyboardUserCount].addColor('#2b3748',
						i);
			} else {
				mWordShowTextArray[mWordKeyboardUserCount].addColor('#ff0000',
						i);
			}
		}

		var jasoCount = "";
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			jasoCount = this.GetHangulToJaso(inputWord);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			jasoCount = this.GetHangulSebelToJaso(inputWord, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			jasoCount = this.GetHangulSebelToJaso(inputWord, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			jasoCount = this.GetHangulSebelToJaso(inputWord, 0);
		}
		mWordHangulJasoCount = jasoCount.length;
		var fingerFind = this
				.GetWordHanFingerFind(mWordHangulJaso[mWordHangulJasoCount]);
		var finger = this.GetWordStepFinger(fingerFind[0], fingerFind[1]);
		this.fSelectRedKey22.x = finger[0];
		this.fSelectRedKey22.y = finger[1];

		var shift = this.CheckWordStepShiftFinger(fingerFind[0], fingerFind[1]);
		if (shift === 1) {
			this.fSelectRedKey221.visible = true;
			this.fSelectRedKey222.visible = false;
		} else if (shift === 2) {
			this.fSelectRedKey221.visible = false;
			this.fSelectRedKey222.visible = true;
		} else {
			this.fSelectRedKey221.visible = false;
			this.fSelectRedKey222.visible = false;
		}

		mFingerImageName = this
				.GetWordImageFinger(fingerFind[0], fingerFind[1]);
		this.setFingerImage(mFingerImageName);
	} else {
		for (var i = 0; i < mWordCurrentSave.length; i++) {
			if (mWordCurrentSave[i] === inputWord[i]
					|| inputWord[i] === undefined) {
				mWordShowTextArray[mWordKeyboardUserCount].addColor('#2b3748',
						i);
			} else {
				mWordShowTextArray[mWordKeyboardUserCount].addColor('#ff0000',
						i);
			}
		}

		mWordHangulJasoCount = inputWord.length;

		var wordEng = "";
		var wordUpperCase = false;
		if (mWordCurrentSave[mWordHangulJasoCount] !== undefined) {
			wordEng = mWordCurrentSave[mWordHangulJasoCount].toUpperCase();
		}

		if (wordEng == mWordCurrentSave[mWordHangulJasoCount]) {
			wordUpperCase = true;
		}

		var fingerFind = this.GetWordEngFingerFind(wordEng);
		var finger = this.GetWordStepFinger(fingerFind[0], fingerFind[1]);
		this.fSelectRedKey22.x = finger[0];
		this.fSelectRedKey22.y = finger[1];

		var shift = this.CheckWordEngStepShiftFinger(fingerFind[0],
				fingerFind[1], wordUpperCase);
		if (shift === 1) {
			this.fSelectRedKey221.visible = true;
			this.fSelectRedKey222.visible = false;
		} else if (shift === 2) {
			this.fSelectRedKey221.visible = false;
			this.fSelectRedKey222.visible = true;
		} else {
			this.fSelectRedKey221.visible = false;
			this.fSelectRedKey222.visible = false;
		}

		mFingerImageName = this
				.GetWordImageFinger(fingerFind[0], fingerFind[1]);
		this.setFingerImage(mFingerImageName);
	}
};

// 낱말 연습 선택 버튼
MenuV2.prototype.WordPracticeMenuSelectButton = function(target) {
	mWordPracticsSelect = target.index;

	this.fStageInfo21.visible = false;
	this.fStageInfo22.visible = true;

	this.fOptionBtn3.visible = true;
	this.fOptionBtn2.visible = false;

	for (var i = 0; i < mWordPracticeSelectBtnArray.length; i++) {
		if (mWordPracticsSelect === i) {
			mWordPracticeSelectBtnArray[i].setFrames(1, 1, 1, 1);
			mWordPracticeSelectBtnArray[i].inputEnabled = false;
		} else {
			var complete = 0;
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				complete = mWordHanCompleteSave[mTajaHangulType][i];
			} else {
				complete = mWordEngCompleteSave[mTajaEnglishType][i];
			}

			if (complete === 1) {
				mWordPracticeSelectBtnArray[i].setFrames(2, 2, 2, 2);
			} else {
				mWordPracticeSelectBtnArray[i].setFrames(0, 0, 0, 0);
			}
			mWordPracticeSelectBtnArray[i].inputEnabled = true;
		}
	}

	this.SetTajaGameStartTime();
	mGameWordType = this.gameConst.GameWordType.WORD;
	this.WordPracticeInit();
	this.SetTajaGameStartTime();

	typing_Music.stop();
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 선택 버튼
MenuV2.prototype.WordPracticeSelectButton = function(target) {
	if (mWordPracticsSelect === target.index)
		return;

	mTajaGamePopupType = 1;
	this.SetPublicPopup(2, "현재 단계를 그만두고\n선택한 단계를 시작할까요?", this.WordNextButton,
			this.WordExitButton);

	mWordPracticsChangeSelect = target.index;

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 다음 단계로 넘어가기
MenuV2.prototype.WordNextButton = function() {
	this.SendStartEndGameLog(2, mWordPracticsSelect + 1, 0, 0);

	this.SetPublicExitPopup();

	mWordPracticsSelect = mWordPracticsChangeSelect;
	mWordPracticsChangeSelect = 0;

	for (var i = 0; i < mWordPracticeSelectBtnArray.length; i++) {
		if (mWordPracticsSelect === i) {
			mWordPracticeSelectBtnArray[i].setFrames(1, 1, 1, 1);
			mWordPracticeSelectBtnArray[i].inputEnabled = false;
		} else {
			var complete = 0;
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				complete = mWordHanCompleteSave[mTajaHangulType][i];
			} else {
				complete = mWordEngCompleteSave[mTajaEnglishType][i];
			}

			if (complete === 1) {
				mWordPracticeSelectBtnArray[i].setFrames(2, 2, 2, 2);
			} else {
				mWordPracticeSelectBtnArray[i].setFrames(0, 0, 0, 0);
			}
			mWordPracticeSelectBtnArray[i].inputEnabled = true;
		}
	}

	this.WordPracticeInit();
	this.SetTajaGameStartTime();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 현재 단계 그대로 유지
MenuV2.prototype.WordExitButton = function() {
	this.SetPublicExitPopup();

	mWordPracticsChangeSelect = 0;

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 손가락 활성화 유무
MenuV2.prototype.WordPracticeFingerButton = function() {
	if (mTajaFingerShow === true) {
		mTajaFingerShow = false;
	} else {
		mTajaFingerShow = true;
	}

	this.WordPracticeDrawFinger();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 낱말 연습 손가락 활성화 유무
MenuV2.prototype.WordPracticeDrawFinger = function() {
	if (mTajaFingerShow === true) {
		this.fHandToggle2.setFrames(1, 1, 1, 1);
	} else {
		this.fHandToggle2.setFrames(0, 0, 0, 0);
	}
};

// 정확도, 진행도, 오타수 정보 처리
MenuV2.prototype.WordPracticeInfoProcess = function() {
	// 정확도
	if (mWordPracticsProcess !== 0) {
		mWordPracticsAccuracy = parseInt((mWordPracticsProcess - mWordPracticsWrong)
				/ mWordPracticsProcess * 100);
		if (mWordPracticsAccuracy < 0) {
			mWordPracticsAccuracy = 0;
		}
	}
	this.gameUtil.setText(this.fAccuracy22, 0, 24, "left", "top",
			mWordPracticsAccuracy + "%");

	var accuracyGauge = 0;
	if (mWordPracticsProcess !== 0) {
		accuracyGauge = (mWordPracticsProcess - mWordPracticsWrong)
				/ mWordPracticsProcess;
		if (accuracyGauge > 1) {
			accuracyGauge = 1;
		} else if (accuracyGauge < 0) {
			accuracyGauge = 0;
		}
	}
	this.fAccuracyGauge22.scale.x = accuracyGauge;

	// 진행도
	var process = parseInt(mWordPracticsProcess
			/ this.gameConst.InputTotalCount * 100);
	if (process < 0) {
		process = 0;
	} else if (process > 100) {
		process = 100;
	}
	this.gameUtil.setText(this.fProcessPersent22, 0, 24, "left", "top", process
			+ "%");

	var processGauge = mWordPracticsProcess / this.gameConst.InputTotalCount;
	if (processGauge > 1) {
		processGauge = 1;
	}
	this.fProcessGauge22.scale.x = processGauge;

	// 오타수
	this.gameUtil.setText(this.fWrongTypingNum22, 0, 24, "left", "top",
			mWordPracticsWrong);
	var wrongGauge = mWordPracticsWrong * 0.01;
	if (wrongGauge > 1) {
		wrongGauge = 1;
	}
	this.fWrongTypingGauge22.scale.x = wrongGauge;
};

// 낱말 연습 텍스트 가지고 오는 처리
MenuV2.prototype.GetWordStepWords = function(index) {
	var word = "";

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			word = mWordPracticeHangulData[mWordPracticsSelect][mWordShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			word = mWordPracticeHangul390Data[mWordPracticsSelect][mWordShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			word = mWordPracticeHangulSoonData[mWordPracticsSelect][mWordShowKeyArray[index]];
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			word = mWordPracticeHangulFinalData[mWordPracticsSelect][mWordShowKeyArray[index]];
		}
	} else {
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			word = mWordPracticeEnglishData[mWordPracticsSelect][mWordShowKeyArray[index]];
		} else {
			word = mWordPracticeEnglishDvoData[mWordPracticsSelect][mWordShowKeyArray[index]];
		}
	}

	return word;
};

// 낱말 연습 한글 손가락 위치 처리
MenuV2.prototype.GetWordHanFingerFind = function(text) {
	var isFind = false;
	var fingerFind = [];

	if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
		for (var i = 0; i < mSeatHanOneStep.length; i++) {
			if (text === mSeatHanOneStep[i]) {
				fingerFind[0] = 0;
				fingerFind[1] = i;
				isFind = true;
				break;
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanTwoStep.length; i++) {
				if (text === mSeatHanTwoStep[i]) {
					fingerFind[0] = 1;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanThreeStep.length; i++) {
				if (text === mSeatHanThreeStep[i]) {
					fingerFind[0] = 2;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFourStep.length; i++) {
				if (text === mSeatHanFourStep[i]) {
					fingerFind[0] = 3;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFiveStep.length; i++) {
				if (text === mSeatHanFiveStep[i]) {
					fingerFind[0] = 4;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSixStep.length; i++) {
				if (text === mSeatHanSixStep[i]) {
					fingerFind[0] = 5;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSevenStep.length; i++) {
				if (text === mSeatHanSevenStep[i]) {
					fingerFind[0] = 6;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanEightStep.length; i++) {
				if (text === mSeatHanEightStep[i]) {
					fingerFind[0] = 7;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
		var keyCode = parseInt(mHangulSebelKeyCode[mWordHangulJasoCount]);
		for (var i = 0; i < mSeatHan390OneStep.length; i++) {
			if (text === mSeatHan390OneStep[i]
					&& keyCode === parseInt(mSeatHan390KeyChoSung[0][i])) {
				fingerFind[0] = 0;
				fingerFind[1] = i;
				isFind = true;
				break;
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHan390TwoStep.length; i++) {
				if (text === mSeatHan390TwoStep[i]
						&& keyCode === parseInt(mSeatHan390KeyChoSung[1][i])) {
					fingerFind[0] = 1;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHan390ThreeStep.length; i++) {
				if (text === mSeatHan390ThreeStep[i]
						&& keyCode === parseInt(mSeatHan390KeyChoSung[2][i])) {
					fingerFind[0] = 2;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHan390FourStep.length; i++) {
				if (text === mSeatHan390FourStep[i]
						&& keyCode === parseInt(mSeatHan390KeyChoSung[3][i])) {
					fingerFind[0] = 3;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHan390FiveStep.length; i++) {
				if (text === mSeatHan390FiveStep[i]
						&& keyCode === parseInt(mSeatHan390KeyChoSung[4][i])) {
					fingerFind[0] = 4;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHan390SixStep.length; i++) {
				if (text === mSeatHan390SixStep[i]
						&& keyCode === parseInt(mSeatHan390KeyChoSung[5][i])) {
					fingerFind[0] = 5;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHan390SevenStep.length; i++) {
				if (text === mSeatHan390SevenStep[i]
						&& keyCode === parseInt(mSeatHan390KeyChoSung[6][i])) {
					fingerFind[0] = 6;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHan390EightStep.length; i++) {
				if (text === mSeatHan390EightStep[i]
						&& keyCode === parseInt(mSeatHan390KeyChoSung[7][i])) {
					fingerFind[0] = 7;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		var keyCode = parseInt(mHangulSebelKeyCode[mWordHangulJasoCount]);
		for (var i = 0; i < mSeatHanSoonOneStep.length; i++) {
			if (text === mSeatHanSoonOneStep[i]
					&& keyCode === parseInt(mSeatHanSoonKeyChoSung[0][i])) {
				fingerFind[0] = 0;
				fingerFind[1] = i;
				isFind = true;
				break;
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSoonTwoStep.length; i++) {
				if (text === mSeatHanSoonTwoStep[i]
						&& keyCode === parseInt(mSeatHanSoonKeyChoSung[1][i])) {
					fingerFind[0] = 1;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSoonThreeStep.length; i++) {
				if (text === mSeatHanSoonThreeStep[i]
						&& keyCode === parseInt(mSeatHanSoonKeyChoSung[2][i])) {
					fingerFind[0] = 2;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSoonFourStep.length; i++) {
				if (text === mSeatHanSoonFourStep[i]
						&& keyCode === parseInt(mSeatHanSoonKeyChoSung[3][i])) {
					fingerFind[0] = 3;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSoonFiveStep.length; i++) {
				if (text === mSeatHanSoonFiveStep[i]
						&& keyCode === parseInt(mSeatHanSoonKeyChoSung[4][i])) {
					fingerFind[0] = 4;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSoonSixStep.length; i++) {
				if (text === mSeatHanSoonSixStep[i]
						&& keyCode === parseInt(mSeatHanSoonKeyChoSung[5][i])) {
					fingerFind[0] = 5;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSoonSevenStep.length; i++) {
				if (text === mSeatHanSoonSevenStep[i]
						&& keyCode === parseInt(mSeatHanSoonKeyChoSung[6][i])) {
					fingerFind[0] = 6;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanSoonEightStep.length; i++) {
				if (text === mSeatHanSoonEightStep[i]
						&& keyCode === parseInt(mSeatHanSoonKeyChoSung[7][i])) {
					fingerFind[0] = 7;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
		var keyCode = parseInt(mHangulSebelKeyCode[mWordHangulJasoCount]);
		for (var i = 0; i < mSeatHanFinalOneStep.length; i++) {
			if (text === mSeatHanFinalOneStep[i]
					&& keyCode === parseInt(mSeatHanFinalKeyChoSung[0][i])) {
				fingerFind[0] = 0;
				fingerFind[1] = i;
				isFind = true;
				break;
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFinalTwoStep.length; i++) {
				if (text === mSeatHanFinalTwoStep[i]
						&& keyCode === parseInt(mSeatHanFinalKeyChoSung[1][i])) {
					fingerFind[0] = 1;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFinalThreeStep.length; i++) {
				if (text === mSeatHanFinalThreeStep[i]
						&& keyCode === parseInt(mSeatHanFinalKeyChoSung[2][i])) {
					fingerFind[0] = 2;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFinalFourStep.length; i++) {
				if (text === mSeatHanFinalFourStep[i]
						&& keyCode === parseInt(mSeatHanFinalKeyChoSung[3][i])) {
					fingerFind[0] = 3;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFinalFiveStep.length; i++) {
				if (text === mSeatHanFinalFiveStep[i]
						&& keyCode === parseInt(mSeatHanFinalKeyChoSung[4][i])) {
					fingerFind[0] = 4;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFinalSixStep.length; i++) {
				if (text === mSeatHanFinalSixStep[i]
						&& keyCode === parseInt(mSeatHanFinalKeyChoSung[5][i])) {
					fingerFind[0] = 5;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFinalSevenStep.length; i++) {
				if (text === mSeatHanFinalSevenStep[i]
						&& keyCode === parseInt(mSeatHanFinalKeyChoSung[6][i])) {
					fingerFind[0] = 6;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatHanFinalEightStep.length; i++) {
				if (text === mSeatHanFinalEightStep[i]
						&& keyCode === parseInt(mSeatHanFinalKeyChoSung[7][i])) {
					fingerFind[0] = 7;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}
	}

	return fingerFind;
};

// 낱말 연습 영문 손가락 위치 처리
MenuV2.prototype.GetWordEngFingerFind = function(text) {
	var isFind = false;
	var fingerFind = [];

	if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
		for (var i = 0; i < mSeatEngOneStep.length; i++) {
			if (text == mSeatEngOneStep[i]) {
				fingerFind[0] = 0;
				fingerFind[1] = i;
				isFind = true;
				break;
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngTwoStep.length; i++) {
				if (text == mSeatEngTwoStep[i]) {
					fingerFind[0] = 1;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngThreeStep.length; i++) {
				if (text == mSeatEngThreeStep[i]) {
					fingerFind[0] = 2;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngFourStep.length; i++) {
				if (text == mSeatEngFourStep[i]) {
					fingerFind[0] = 3;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngFiveStep.length; i++) {
				if (text == mSeatEngFiveStep[i]) {
					fingerFind[0] = 4;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngSixStep.length; i++) {
				if (text == mSeatEngSixStep[i]) {
					fingerFind[0] = 5;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}
	} else {
		for (var i = 0; i < mSeatEngDvorakOneStep.length; i++) {
			if (text == mSeatEngDvorakOneStep[i]) {
				fingerFind[0] = 0;
				fingerFind[1] = i;
				isFind = true;
				break;
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngDvorakTwoStep.length; i++) {
				if (text == mSeatEngDvorakTwoStep[i]) {
					fingerFind[0] = 1;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngDvorakThreeStep.length; i++) {
				if (text == mSeatEngDvorakThreeStep[i]) {
					fingerFind[0] = 2;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngDvorakFourStep.length; i++) {
				if (text == mSeatEngDvorakFourStep[i]) {
					fingerFind[0] = 3;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngDvorakFiveStep.length; i++) {
				if (text == mSeatEngDvorakFiveStep[i]) {
					fingerFind[0] = 4;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}

		if (isFind === false) {
			for (var i = 0; i < mSeatEngDvorakSixStep.length; i++) {
				if (text == mSeatEngDvorakSixStep[i]) {
					fingerFind[0] = 5;
					fingerFind[1] = i;
					isFind = true;
					break;
				}
			}
		}
	}

	return fingerFind;
};

// 낱말 연습 키보드 시프트 키 처리
MenuV2.prototype.CheckWordStepShiftFinger = function(select, index) {
	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
		if (select === 0) {
			if (index >= 8) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (select === 1) {
			if (index >= 5 && index <= 8) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (select === 5) {
			if (index === 19) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (select === 7) {
			if (index >= 5 && index <= 8) {
				return 2; // 우측 시프트 키 활성화
			}
		}
	} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		if (select === 6) {
			if (index >= 6) {
				return 1; // 좌측 시프트 키 활성화
			}
		} else if (select === 7) {
			if (index >= 5) {
				return 2; // 우측 시프트 키 활성화
			}
		}
	} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
			&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
		if (select === 0) {
			if (index >= 8) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (select === 1) {
			if (index >= 5) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (select === 3) {
			if ((index >= 9 && index <= 10) || index === 17) {
				return 2; // 우측 시프트 키 활성화
			} else if (index >= 11 && index <= 16) {
				return 1; // 좌측 시프트 키 활성화
			}
		} else if (select === 5) {
			if ((index >= 11 && index <= 13) || (index >= 16 && index <= 17)) {
				return 2; // 우측 시프트 키 활성화
			} else if ((index >= 14 && index <= 15)
					|| (index >= 18 && index <= 20)) {
				return 1; // 좌측 시프트 키 활성화
			}
		} else if (select === 6) {
			if (index === 6) {
				return 1; // 좌측 시프트 키 활성화
			}
		} else if (select === 7) {
			if (index >= 5 && index <= 8) {
				return 2; // 우측 시프트 키 활성화
			}
		}
	} else {
		if (select === 6) {
			if (index >= 5 && index <= 9) {
				return 2; // 우측 시프트 키 활성화
			}
		} else if (select === 7) {
			if (index >= 4 && index <= 5) {
				return 1; // 좌측 시프트 키 활성화
			}
		}
	}

	return 0;
};

// 낱말 연습 영문 시프트 키 처리
MenuV2.prototype.CheckWordEngStepShiftFinger = function(select, index,
		wordUpperCase) {
	var shift = 0;

	if (wordUpperCase == false) {
		return 0;
	}

	if (select === 0) {
		if (index <= 3) {
			shift = 2; // 우측 시프트 키 활성화
		} else {
			shift = 1; // 좌측 시프트 키 활성화
		}
	} else if (select === 1 || select === 4) {
		shift = 2; // 우측 시프트 키 활성화
	} else if (select === 2) {
		if (index === 0 || index === 2 || index === 4) {
			shift = 2; // 우측 시프트 키 활성화
		} else {
			shift = 1; // 좌측 시프트 키 활성화
		}
	} else if (select === 3 || select === 5) {
		shift = 1; // 좌측 시프트 키 활성화
	}

	return shift;
};

// 자소 분리된 단어 손가락 위치 처리
MenuV2.prototype.GetWordStepFinger = function(fingerSelect, fingerIndex) {
	var finger = [];

	switch (fingerSelect) {
	case 0:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390OneStepFingerX[fingerIndex];
			finger[1] = mSeat390OneStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonOneStepFingerX[fingerIndex];
			finger[1] = mSeatSoonOneStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalOneStepFingerX[fingerIndex];
			finger[1] = mSeatFinalOneStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatOneStepFingerX[fingerIndex];
			finger[1] = mSeatOneStepFingerY[fingerIndex];
		}
		break;
	case 1:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390TwoStepFingerX[fingerIndex];
			finger[1] = mSeat390TwoStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonTwoStepFingerX[fingerIndex];
			finger[1] = mSeatSoonTwoStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalTwoStepFingerX[fingerIndex];
			finger[1] = mSeatFinalTwoStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatTwoStepFingerX[fingerIndex];
			finger[1] = mSeatTwoStepFingerY[fingerIndex];
		}
		break;
	case 2:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390ThreeStepFingerX[fingerIndex];
			finger[1] = mSeat390ThreeStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonThreeStepFingerX[fingerIndex];
			finger[1] = mSeatSoonThreeStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalThreeStepFingerX[fingerIndex];
			finger[1] = mSeatFinalThreeStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatThreeStepFingerX[fingerIndex];
			finger[1] = mSeatThreeStepFingerY[fingerIndex];
		}
		break;
	case 3:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390FourStepFingerX[fingerIndex];
			finger[1] = mSeat390FourStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonFourStepFingerX[fingerIndex];
			finger[1] = mSeatSoonFourStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalFourStepFingerX[fingerIndex];
			finger[1] = mSeatFinalFourStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatFourStepFingerX[fingerIndex];
			finger[1] = mSeatFourStepFingerY[fingerIndex];
		}
		break;
	case 4:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390FiveStepFingerX[fingerIndex];
			finger[1] = mSeat390FiveStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonFiveStepFingerX[fingerIndex];
			finger[1] = mSeatSoonFiveStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalFiveStepFingerX[fingerIndex];
			finger[1] = mSeatFinalFiveStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatFiveStepFingerX[fingerIndex];
			finger[1] = mSeatFiveStepFingerY[fingerIndex];
		}
		break;
	case 5:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390SixStepFingerX[fingerIndex];
			finger[1] = mSeat390SixStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonSixStepFingerX[fingerIndex];
			finger[1] = mSeatSoonSixStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalSixStepFingerX[fingerIndex];
			finger[1] = mSeatFinalSixStepFingerY[fingerIndex];
		} else {
			if (mTajaLanguageType === that.gameConst.LanguageType.ENGLISH
					&& mTajaEnglishType === that.gameConst.EnglishType.DVORAK) {
				finger[0] = mSeatDvoSixStepFingerX[fingerIndex];
				finger[1] = mSeatDvoSixStepFingerY[fingerIndex];
			} else {
				finger[0] = mSeatSixStepFingerX[fingerIndex];
				finger[1] = mSeatSixStepFingerY[fingerIndex];
			}
		}
		break;
	case 6:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390SevenStepFingerX[fingerIndex];
			finger[1] = mSeat390SevenStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonSevenStepFingerX[fingerIndex];
			finger[1] = mSeatSoonSevenStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalSevenStepFingerX[fingerIndex];
			finger[1] = mSeatFinalSevenStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatSevenStepFingerX[fingerIndex];
			finger[1] = mSeatSevenStepFingerY[fingerIndex];
		}
		break;
	case 7:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390EightStepFingerX[fingerIndex];
			finger[1] = mSeat390EightStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonEightStepFingerX[fingerIndex];
			finger[1] = mSeatSoonEightStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalEightStepFingerX[fingerIndex];
			finger[1] = mSeatFinalEightStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatEightStepFingerX[fingerIndex];
			finger[1] = mSeatEightStepFingerY[fingerIndex];
		}
		break;
	default:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger[0] = mSeat390OneStepFingerX[fingerIndex];
			finger[1] = mSeat390OneStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger[0] = mSeatSoonOneStepFingerX[fingerIndex];
			finger[1] = mSeatSoonOneStepFingerY[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger[0] = mSeatFinalOneStepFingerX[fingerIndex];
			finger[1] = mSeatFinalOneStepFingerY[fingerIndex];
		} else {
			finger[0] = mSeatOneStepFingerX[fingerIndex];
			finger[1] = mSeatOneStepFingerY[fingerIndex];
		}
		break;
	}

	return finger;
};

// 자소 분리된 단어 손가락 이미지 처리
MenuV2.prototype.GetWordImageFinger = function(fingerSelect, fingerIndex) {
	var finger = "";

	switch (fingerSelect) {
	case 0:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390OneStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonOneStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalOneStep[fingerIndex];
		} else {
			finger = mFingerHanOneStep[fingerIndex];
		}
		break;
	case 1:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390TwoStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonTwoStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalTwoStep[fingerIndex];
		} else {
			finger = mFingerHanTwoStep[fingerIndex];
		}
		break;
	case 2:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390ThreeStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonThreeStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalThreeStep[fingerIndex];
		} else {
			finger = mFingerHanThreeStep[fingerIndex];
		}
		break;
	case 3:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390FourStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonFourStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalFourStep[fingerIndex];
		} else {
			finger = mFingerHanFourStep[fingerIndex];
		}
		break;
	case 4:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390FiveStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonFiveStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalFiveStep[fingerIndex];
		} else {
			finger = mFingerHanFiveStep[fingerIndex];
		}
		break;
	case 5:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390SixStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonSixStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalSixStep[fingerIndex];
		} else {
			if (mTajaLanguageType === that.gameConst.LanguageType.ENGLISH
					&& mTajaEnglishType === that.gameConst.EnglishType.DVORAK) {
				finger = mFingerDvoSixStep[fingerIndex];
			} else {
				finger = mFingerHanSixStep[fingerIndex];
			}
		}
		break;
	case 6:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390SevenStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonSevenStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalSevenStep[fingerIndex];
		} else {
			finger = mFingerHanSevenStep[fingerIndex];
		}
		break;
	case 7:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390EightStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonEightStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalEightStep[fingerIndex];
		} else {
			finger = mFingerHanEightStep[fingerIndex];
		}
		break;
	default:
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			finger = mFingerHan390OneStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			finger = mFingerHanSoonOneStep[fingerIndex];
		} else if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL
				&& mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			finger = mFingerHanFinalOneStep[fingerIndex];
		} else {
			finger = mFingerHanOneStep[fingerIndex];
		}
		break;
	}

	return finger;
};

var mTajaGame390HanReturn = false;

//
MenuV2.prototype.WordUserWordsCheck = function(evt) {
	if (evt.type === "keydown") {
		if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
				&& get_ohi_type() === true) {
			mTajaGame390HanReturn = true;
			evt.returnValue = false;
			return false;
		} else {
			mTajaGame390HanReturn = false;
		}
	} else if (evt.type === "keyup") {
		if (mTajaGame390HanReturn === true) {
			mTajaGameHanEngKey = 3;
			mTajaGame390HanReturn = false;
			evt.returnValue = false;
			return false;
		}
	}

	if (mGameWordType !== 2 || mWordKeyboardUserCount > 4
			|| mTajaGameHanEngKey != 0 || mWordIsStepText === true
			|| that.fPopupGroup.visible === true) {
		evt.returnValue = false;
		return false;
	}

	event = evt || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;

	if (keyID === 8) {
		mWordIsBackSound = true;
	}

	// Pgup, pgdn, END, HOME, LEFT, UP, RIGHT, DOWN 버튼 처리
	if ((keyID >= 33 && keyID <= 40) || keyID === 18) {
		evt.returnValue = false;
		return false;
	}

	mTajaGameKeyCode = evt.keyCode;

	var wordIsCheck = true;

	if (mGameStartAgent === that.gameConst.GameAgentType.CHROM) {
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (evt.keyCode === 8 || evt.keyCode === 9 || evt.keyCode === 37
					|| evt.keyCode === 39 || evt.keyCode === 46) {
				mWordInputText = userTajaTyping.value;
				return;
			} else {
				if (/[a-zA-Z]/g.test(evt.target.value)) {
					evt.returnValue = false;
					// 가끔 영문이 들어오는 경우가 발생해서 텍스트 길이 체크를 해서 구분한다.
					if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
							&& evt.keyCode !== 13 && evt.keyCode !== 27
							&& evt.target.value.length < 2) {
						mTajaGameHanEngKey = 1;
					}
				}
				evt.target.value = evt.target.value.replace(/[a-zA-Z]/g, "");
			}
		} else {
			if ((mWordInputText.length > 0 && keyID === 8) || keyID === 9
					|| keyID === 37 || keyID === 39 || keyID === 46) {
				userTajaTyping.value = userTajaTyping.value.replace(
						mTajaGameEngCheckStr, "");
				mWordInputText = userTajaTyping.value;
				return;
			} else {
				if (mTajaGameEngCheckStr.test(evt.target.value)) {
					evt.returnValue = false;
					if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
							&& evt.keyCode !== 13 && evt.keyCode !== 27) {
						mTajaGameHanEngKey = 2;
					}
				}
				evt.target.value = evt.target.value.replace(
						mTajaGameEngCheckStr, "");
			}
		}
	} else {
	}

	var wordAnswer = userTajaTyping.value;
	var wordString = "";

	if (mTajaGameTimeStartFlag === false && wordAnswer.length > 0) {
		mTajaGameTimeStartFlag = true;
		mTajaGameStartTime = new Date();
	}

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
			wordString = mWordPracticeHangulData[mWordPracticsSelect][mWordShowKeyArray[mWordKeyboardUserCount]];
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			wordString = mWordPracticeHangul390Data[mWordPracticsSelect][mWordShowKeyArray[mWordKeyboardUserCount]];
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			wordString = mWordPracticeHangulSoonData[mWordPracticsSelect][mWordShowKeyArray[mWordKeyboardUserCount]];
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			wordString = mWordPracticeHangulFinalData[mWordPracticsSelect][mWordShowKeyArray[mWordKeyboardUserCount]];
		}
	} else {
		if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
			wordString = mWordPracticeEnglishData[mWordPracticsSelect][mWordShowKeyArray[mWordKeyboardUserCount]];
		} else {
			wordString = mWordPracticeEnglishDvoData[mWordPracticsSelect][mWordShowKeyArray[mWordKeyboardUserCount]];
		}
	}

	// ie에서 enter입력값이 들어오면 한칸 빈 공간이 들어간다. 방지하기 위한 처리
	if (evt.keyCode === 13 && (wordString.length - 1 >= wordAnswer.length)) {
		evt.returnValue = false;
		return false;
	}

	// 통계 타수 저장하는 처리
	if (mWordInputText !== wordAnswer && evt.keyCode !== 13) {
		mWordIsProcess = true;
		mWordInputText = wordAnswer;
	}

	// 엔터키를 누른 경우와 비교 글자보다 더 많은 글자를 쓸 경우 넘어간다.
	if ((wordIsCheck === true)
			&& (wordAnswer !== undefined)
			&& (mWordPracticsProcess < that.gameConst.InputTotalCount)
			&& (((wordString.length - 1 < wordAnswer.length) && evt.keyCode === 13) || wordString.length < wordAnswer.length)) {
		mWordPracticsProcess++;
		if (wordAnswer.replace(/\s+$/, "") === wordString) {
			mCharacterAniState = 1;
			mTajaGameScore += 2;
			mTajaGameSaveScore += 2;
		} else {
			mWordPracticsWrong++;
			mCharacterAniState = 2;
		}

		mWordKeyboardUserCount++;
		if (mWordKeyboardUserCount > 4) {
			mWordIsChangeText = true;
			mIsTajaCheckEnter = false;
		} else {
			mWordIsStepText = true;
			userTajaTyping.blur();
		}

		userTajaTyping.value = "";
	}
};

MenuV2.prototype.rtrim = function(stringToTrim) {
	return stringToTrim.replace(/\s+$/, "");
};

//
MenuV2.prototype.WordPlayTween = function() {
	this.fTweenTextGroup2.y = 0;
	this.fTweenTextGroup2.tweenA = this.game.add.tween(this.fTweenTextGroup2)
			.to({
				y : this.fTweenTextGroup2.y - 100
			}, 50, "Quart.easeOut");
	this.fTweenTextGroup2.tweenA.start();
	this.fTweenTextGroup2.tweenA.onComplete
			.addOnce(this.WordEndTweenPlay, this);
};

//
MenuV2.prototype.WordEndTweenPlay = function() {
	this.fTweenTextGroup2.y = -1000;
	this.fShowTextGroup2.y = 0;
	this.WordChangeKeyboard();
};

//
MenuV2.prototype.WordChangeKeyboard = function() {
	this.fStage2SelectCursor.visible = true;
	this.fWordInputCursorAni.visible = true;
	mIsTajaTypingFocus = false;

	for (var i = 0; i < mWordShowTextArray.length; i++) {
		this.gameUtil.setText(mWordTweenTextArray[i], 0, 0, "left", "top",
				mWordTweenTextArray[i + 5].text);
		mWordShowKeyArray[i] = mWordShowKeyArray[i + 5];
	}

	var wordCount = 0;
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			wordCount = mWordPracticeHangulData[mWordPracticsSelect].length;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			wordCount = mWordPracticeHangul390Data[mWordPracticsSelect].length;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			wordCount = mWordPracticeHangulSoonData[mWordPracticsSelect].length;
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			wordCount = mWordPracticeHangulFinalData[mWordPracticsSelect].length;
		}
	} else {
		if (mTajaEnglishType === this.gameConst.EnglishType.QWERTY) {
			wordCount = mWordPracticeEnglishData[mWordPracticsSelect].length;
		} else {
			wordCount = mWordPracticeEnglishDvoData[mWordPracticsSelect].length;
		}
	}

	mWordShowKeyArray[5] = Math.floor((Math.random() * wordCount));
	mWordShowKeyArray[6] = Math.floor((Math.random() * wordCount));
	mWordShowKeyArray[7] = Math.floor((Math.random() * wordCount));
	mWordShowKeyArray[8] = Math.floor((Math.random() * wordCount));
	mWordShowKeyArray[9] = Math.floor((Math.random() * wordCount));

	for (var i = 5; i < mWordTweenTextArray.length; i++) {
		this.gameUtil.setText(mWordTweenTextArray[i], 0, 0, "left", "top", this
				.GetWordStepWords(i));
	}

	mWordCurrentSave = mWordShowTextArray[0].text;
	if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
		mWordHangulJaso = this.GetHangulToJaso(mWordCurrentSave);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
		mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
		mWordHangulJaso = this.GetHangulSebelToJaso(mWordCurrentSave, 1);
	}

	this.fStage2SelectCursor.x = 235;
	mWordKeyboardUserCount = 0;

	this.fSelectRedKey22.visible = true;

	for (var i = 0; i < mWordShowTextArray.length; i++) {
		if (i === 0) {
			mWordShowTextArray[i].fill = '#2b3748';
		} else {
			mWordShowTextArray[i].fill = '#fff151';
		}
	}

	for (var i = 0; i < mWordMeShowTextArray.length; i++) {
		if (i === 0) {
			mWordMeShowTextArray[i].fill = '#2b3748';
		} else {
			mWordMeShowTextArray[i].fill = '#fff151';
		}
	}
};

// 한글 초성/중성/종성 분리하기
MenuV2.prototype.GetHangulToJaso = function(text) {
	// 초성(19자) ㄱ ㄲ ㄴ ㄷ ㄸ ㄹ ㅁ ㅂ ㅃ ㅅ ㅆ ㅇ ㅈ ㅉ ㅊ ㅋ ㅌ ㅍ ㅎ
	var ChoSeong = new Array(0x3131, 0x3132, 0x3134, 0x3137, 0x3138, 0x3139,
			0x3141, 0x3142, 0x3143, 0x3145, 0x3146, 0x3147, 0x3148, 0x3149,
			0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	// 중성(21자) ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ(9) ㅙ(10) ㅚ(11) ㅛ ㅜ ㅝ(14) ㅞ(15) ㅟ(16) ㅠ ㅡ
	// ㅢ(19) ㅣ
	var JungSeong = new Array(0x314f, 0x3150, 0x3151, 0x3152, 0x3153, 0x3154,
			0x3155, 0x3156, 0x3157, 0x3158, 0x3159, 0x315a, 0x315b, 0x315c,
			0x315d, 0x315e, 0x315f, 0x3160, 0x3161, 0x3162, 0x3163);
	// 종성(28자) <없음> ㄱ ㄲ ㄳ(3) ㄴ ㄵ(5) ㄶ(6) ㄷ ㄹ ㄺ(9) ㄻ(10) ㄼ(11) ㄽ(12) ㄾ(13) ㄿ(14)
	// ㅀ(15) ㅁ ㅂ ㅄ(18) ㅅ ㅆ ㅇ ㅈ ㅊ ㅋ ㅌ ㅍ ㅎ
	var JongSeong = new Array(0x0000, 0x3131, 0x3132, 0x3133, 0x3134, 0x3135,
			0x3136, 0x3137, 0x3139, 0x313a, 0x313b, 0x313c, 0x313d, 0x313e,
			0x313f, 0x3140, 0x3141, 0x3142, 0x3144, 0x3145, 0x3146, 0x3147,
			0x3148, 0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	var chars = new Array();
	var v = new Array();
	for (var i = 0; i < text.length; i++) {
		chars[i] = text.charCodeAt(i);
		// // "AC00:가" ~ "D7A3:힣" 에 속한 글자면 분해
		if (chars[i] >= 0xAC00 && chars[i] <= 0xD7A3) {
			var i1, i2, i3;

			i3 = chars[i] - 0xAC00;
			i1 = i3 / (21 * 28);
			i3 = i3 % (21 * 28);

			i2 = i3 / 28;
			i3 = i3 % 28;

			v.push(String.fromCharCode(ChoSeong[parseInt(i1)]));

			// 복모음 분리
			switch (parseInt(i2)) {
			case 9:
				v.push('ㅗㅏ');
				break;
			case 10:
				v.push('ㅗㅐ');
				break;
			case 11:
				v.push('ㅗㅣ');
				break;
			case 14:
				v.push('ㅜㅓ');
				break;
			case 15:
				v.push('ㅜㅔ');
				break;
			case 16:
				v.push('ㅜㅣ');
				break;
			case 19:
				v.push('ㅡㅣ');
				break;

			default:
				v.push(String.fromCharCode(JungSeong[parseInt(i2)]));
			}

			// c가 0이 아니면, 즉 받침이 있으면
			if (i3 != 0x0000) {
				// 복자음 분리
				switch (parseInt(i3)) {
				case 3:
					v.push('ㄱㅅ');
					break;
				case 5:
					v.push('ㄴㅈ');
					break;
				case 6:
					v.push('ㄴㅎ');
					break;
				case 9:
					v.push('ㄹㄱ');
					break;
				case 10:
					v.push('ㄹㅁ');
					break;
				case 11:
					v.push('ㄹㅂ');
					break;
				case 12:
					v.push('ㄹㅅ');
					break;
				case 13:
					v.push('ㄹㅌ');
					break;
				case 14:
					v.push('ㄹㅍ');
					break;
				case 15:
					v.push('ㄹㅎ');
					break;
				case 18:
					v.push('ㅂㅅ');
					break;

				default:
					v.push(String.fromCharCode(JongSeong[parseInt(i3)]));
				}
			}

		} else {
			v.push(String.fromCharCode(chars[i]));
		}
	}

	var return_str = v.join('');
	return return_str;
};

MenuV2.prototype.GetHangulToJasoArray = function(text) {
	// 초성(19자) ㄱ ㄲ ㄴ ㄷ ㄸ ㄹ ㅁ ㅂ ㅃ ㅅ ㅆ ㅇ ㅈ ㅉ ㅊ ㅋ ㅌ ㅍ ㅎ
	var ChoSeong = new Array(0x3131, 0x3132, 0x3134, 0x3137, 0x3138, 0x3139,
			0x3141, 0x3142, 0x3143, 0x3145, 0x3146, 0x3147, 0x3148, 0x3149,
			0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	// 중성(21자) ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ(9) ㅙ(10) ㅚ(11) ㅛ ㅜ ㅝ(14) ㅞ(15) ㅟ(16) ㅠ ㅡ
	// ㅢ(19) ㅣ
	var JungSeong = new Array(0x314f, 0x3150, 0x3151, 0x3152, 0x3153, 0x3154,
			0x3155, 0x3156, 0x3157, 0x3158, 0x3159, 0x315a, 0x315b, 0x315c,
			0x315d, 0x315e, 0x315f, 0x3160, 0x3161, 0x3162, 0x3163);
	// 종성(28자) <없음> ㄱ ㄲ ㄳ(3) ㄴ ㄵ(5) ㄶ(6) ㄷ ㄹ ㄺ(9) ㄻ(10) ㄼ(11) ㄽ(12) ㄾ(13) ㄿ(14)
	// ㅀ(15) ㅁ ㅂ ㅄ(18) ㅅ ㅆ ㅇ ㅈ ㅊ ㅋ ㅌ ㅍ ㅎ
	var JongSeong = new Array(0x0000, 0x3131, 0x3132, 0x3133, 0x3134, 0x3135,
			0x3136, 0x3137, 0x3139, 0x313a, 0x313b, 0x313c, 0x313d, 0x313e,
			0x313f, 0x3140, 0x3141, 0x3142, 0x3144, 0x3145, 0x3146, 0x3147,
			0x3148, 0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	var chars = new Array();
	var v = new Array();
	var texts = new Array();
	for (var i = 0; i < text.length; i++) {
		chars[i] = text.charCodeAt(i);
		// // "AC00:가" ~ "D7A3:힣" 에 속한 글자면 분해
		if (chars[i] >= 0xAC00 && chars[i] <= 0xD7A3) {
			var i1, i2, i3;

			i3 = chars[i] - 0xAC00;
			i1 = i3 / (21 * 28);
			i3 = i3 % (21 * 28);

			i2 = i3 / 28;
			i3 = i3 % 28;

			v.push(String.fromCharCode(ChoSeong[parseInt(i1)]));

			// 복모음 분리
			switch (parseInt(i2)) {
			case 9:
				v.push('ㅗㅏ');
				break;
			case 10:
				v.push('ㅗㅐ');
				break;
			case 11:
				v.push('ㅗㅣ');
				break;
			case 14:
				v.push('ㅜㅓ');
				break;
			case 15:
				v.push('ㅜㅔ');
				break;
			case 16:
				v.push('ㅜㅣ');
				break;
			case 19:
				v.push('ㅡㅣ');
				break;

			default:
				v.push(String.fromCharCode(JungSeong[parseInt(i2)]));
			}

			// c가 0이 아니면, 즉 받침이 있으면
			if (i3 != 0x0000) {
				// 복자음 분리
				switch (parseInt(i3)) {
				case 3:
					v.push('ㄱㅅ');
					break;
				case 5:
					v.push('ㄴㅈ');
					break;
				case 6:
					v.push('ㄴㅎ');
					break;
				case 9:
					v.push('ㄹㄱ');
					break;
				case 10:
					v.push('ㄹㅁ');
					break;
				case 11:
					v.push('ㄹㅂ');
					break;
				case 12:
					v.push('ㄹㅅ');
					break;
				case 13:
					v.push('ㄹㅌ');
					break;
				case 14:
					v.push('ㄹㅍ');
					break;
				case 15:
					v.push('ㄹㅎ');
					break;
				case 18:
					v.push('ㅂㅅ');
					break;

				default:
					v.push(String.fromCharCode(JongSeong[parseInt(i3)]));
				}
			}
		} else {
			v.push(String.fromCharCode(chars[i]));
		}

		texts[i] = v.join('');
		v = new Array();
	}

	var return_str = texts;
	return return_str;
};

var mHangulSebelKeyCode = new Array(); // 입력해야 되는 텍스트 세벌식 자소 분리된 코드값 저장
var mHangulSebelMeKeyCode = new Array();
; // 입력되어진 텍스트 세벌식 자소 분리된 코드값 저장
// 한글 초성/중성/종성 분리하기
MenuV2.prototype.GetHangulSebelToJaso = function(text, flag) {
	if (flag === 1) {
		mHangulSebelKeyCode = new Array();
	} else if (flag === 2) {
		mHangulSebelMeKeyCode = new Array();
	}
	// 초성(19자) ㄱ ㄲ(1) ㄴ ㄷ ㄸ(4) ㄹ ㅁ ㅂ ㅃ(8) ㅅ ㅆ(10) ㅇ ㅈ ㅉ(13) ㅊ ㅋ ㅌ ㅍ ㅎ
	var ChoSeong = new Array(0x3131, 0x3132, 0x3134, 0x3137, 0x3138, 0x3139,
			0x3141, 0x3142, 0x3143, 0x3145, 0x3146, 0x3147, 0x3148, 0x3149,
			0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	// 중성(21자) ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ(9) ㅙ(10) ㅚ(11) ㅛ ㅜ ㅝ(14) ㅞ(15) ㅟ(16) ㅠ ㅡ
	// ㅢ(19) ㅣ
	var JungSeong = new Array(0x314f, 0x3150, 0x3151, 0x3152, 0x3153, 0x3154,
			0x3155, 0x3156, 0x3157, 0x3158, 0x3159, 0x315a, 0x315b, 0x315c,
			0x315d, 0x315e, 0x315f, 0x3160, 0x3161, 0x3162, 0x3163);
	// 종성(28자) <없음> ㄱ ㄲ(2) ㄳ(3) ㄴ ㄵ(5) ㄶ(6) ㄷ ㄹ ㄺ(9) ㄻ(10) ㄼ(11) ㄽ(12) ㄾ(13)
	// ㄿ(14) ㅀ(15) ㅁ ㅂ ㅄ(18) ㅅ ㅆ(20) ㅇ ㅈ ㅊ ㅋ ㅌ ㅍ ㅎ
	var JongSeong = new Array(0x0000, 0x3131, 0x3132, 0x3133, 0x3134, 0x3135,
			0x3136, 0x3137, 0x3139, 0x313a, 0x313b, 0x313c, 0x313d, 0x313e,
			0x313f, 0x3140, 0x3141, 0x3142, 0x3144, 0x3145, 0x3146, 0x3147,
			0x3148, 0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	var chars = new Array();
	var v = new Array();
	var c = new Array();
	for (var i = 0; i < text.length; i++) {
		chars[i] = text.charCodeAt(i);
		// // "AC00:가" ~ "D7A3:힣" 에 속한 글자면 분해
		if (chars[i] >= 0xAC00 && chars[i] <= 0xD7A3) {
			var i1, i2, i3;

			i3 = chars[i] - 0xAC00;
			i1 = i3 / (21 * 28);
			i3 = i3 % (21 * 28);

			i2 = i3 / 28;
			i3 = i3 % 28;

			// 복자음 분리
			switch (parseInt(i1)) {
			case 1:
				v.push('ㄱㄱ');
				c.push('11');
				break;
			case 4:
				v.push('ㄷㄷ');
				c.push('11');
				break;
			case 8:
				v.push('ㅂㅂ');
				c.push('11');
				break;
			case 10:
				v.push('ㅅㅅ');
				c.push('11');
				break;
			case 13:
				v.push('ㅈㅈ');
				c.push('11');
				break;

			default:
				v.push(String.fromCharCode(ChoSeong[parseInt(i1)]));
				c.push('1');
			}

			// 복모음 분리
			switch (parseInt(i2)) {
			case 9:
				v.push('ㅗㅏ');
				c.push('00');
				break;
			case 10:
				v.push('ㅗㅐ');
				c.push('00');
				break;
			case 11:
				v.push('ㅗㅣ');
				c.push('00');
				break;
			case 14:
				v.push('ㅜㅓ');
				c.push('00');
				break;
			case 15:
				v.push('ㅜㅔ');
				c.push('00');
				break;
			case 16:
				v.push('ㅜㅣ');
				c.push('00');
				break;
			case 19:
				v.push('ㅡㅣ');
				c.push('00');
				break;

			default:
				v.push(String.fromCharCode(JungSeong[parseInt(i2)]));
				c.push('0');
			}

			// c가 0이 아니면, 즉 받침이 있으면
			if (i3 != 0x0000) {
				// 복자음 분리
				switch (parseInt(i3)) {
				case 2:
					if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
						v.push('ㄱㄱ');
						c.push('00');
					} else {
						v.push(String.fromCharCode(JongSeong[parseInt(i3)]));
						c.push('0');
					}
					break;
				case 3:
					v.push('ㄱㅅ');
					c.push('00');
					break;
				case 5:
					v.push('ㄴㅈ');
					c.push('00');
					break;
				case 6:
					v.push('ㄴㅎ');
					c.push('00');
					break;
				case 9:
					v.push('ㄹㄱ');
					c.push('00');
					break;
				case 10:
					v.push('ㄹㅁ');
					c.push('00');
					break;
				case 11:
					v.push('ㄹㅂ');
					c.push('00');
					break;
				case 12:
					v.push('ㄹㅅ');
					c.push('00');
					break;
				case 13:
					v.push('ㄹㅌ');
					c.push('00');
					break;
				case 14:
					v.push('ㄹㅍ');
					c.push('00');
					break;
				case 15:
					v.push('ㄹㅎ');
					c.push('00');
					break;
				case 18:
					v.push('ㅂㅅ');
					c.push('00');
					break;
				case 20:
					v.push('ㅅㅅ');
					c.push('00');
					break;

				default:
					v.push(String.fromCharCode(JongSeong[parseInt(i3)]));
					c.push('0');
				}
			}

		} else {
			switch (chars[i]) {
			case 12594:
				v.push('ㄱㄱ');
				c.push('11');
				break;
			case 12600:
				v.push('ㄷㄷ');
				c.push('11');
				break;
			case 12611:
				v.push('ㅂㅂ');
				c.push('11');
				break;
			case 12614:
				v.push('ㅅㅅ');
				c.push('11');
				break;
			case 12617:
				v.push('ㅈㅈ');
				c.push('11');
				break;

			default:
				v.push(String.fromCharCode(chars[i]));
				c.push('1');
			}
		}
	}

	if (flag === 1) {
		mHangulSebelKeyCode = c.join('');
	} else if (flag === 2) {
		mHangulSebelMeKeyCode = c.join('');
	}
	var return_str = v.join('');
	return return_str;
};

var mHangulSebelKeyCodeArray = new Array(); // 입력해야 되는 텍스트 세벌식 자소 분리된 코드값 저장
var mHangulSebelMeKeyCodeArray = new Array();
; // 입력되어진 텍스트 세벌식 자소 분리된 코드값 저장
// 한글 초성/중성/종성 분리하기
MenuV2.prototype.GetHangulSebelToJasoArray = function(text, flag) {
	if (flag === 1) {
		mHangulSebelKeyCode = new Array();
	} else if (flag === 2) {
		mHangulSebelMeKeyCode = new Array();
	}
	// 초성(19자) ㄱ ㄲ(1) ㄴ ㄷ ㄸ(4) ㄹ ㅁ ㅂ ㅃ(8) ㅅ ㅆ(10) ㅇ ㅈ ㅉ(13) ㅊ ㅋ ㅌ ㅍ ㅎ
	var ChoSeong = new Array(0x3131, 0x3132, 0x3134, 0x3137, 0x3138, 0x3139,
			0x3141, 0x3142, 0x3143, 0x3145, 0x3146, 0x3147, 0x3148, 0x3149,
			0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	// 중성(21자) ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ(9) ㅙ(10) ㅚ(11) ㅛ ㅜ ㅝ(14) ㅞ(15) ㅟ(16) ㅠ ㅡ
	// ㅢ(19) ㅣ
	var JungSeong = new Array(0x314f, 0x3150, 0x3151, 0x3152, 0x3153, 0x3154,
			0x3155, 0x3156, 0x3157, 0x3158, 0x3159, 0x315a, 0x315b, 0x315c,
			0x315d, 0x315e, 0x315f, 0x3160, 0x3161, 0x3162, 0x3163);
	// 종성(28자) <없음> ㄱ ㄲ(2) ㄳ(3) ㄴ ㄵ(5) ㄶ(6) ㄷ ㄹ ㄺ(9) ㄻ(10) ㄼ(11) ㄽ(12) ㄾ(13)
	// ㄿ(14) ㅀ(15) ㅁ ㅂ ㅄ(18) ㅅ ㅆ(20) ㅇ ㅈ ㅊ ㅋ ㅌ ㅍ ㅎ
	var JongSeong = new Array(0x0000, 0x3131, 0x3132, 0x3133, 0x3134, 0x3135,
			0x3136, 0x3137, 0x3139, 0x313a, 0x313b, 0x313c, 0x313d, 0x313e,
			0x313f, 0x3140, 0x3141, 0x3142, 0x3144, 0x3145, 0x3146, 0x3147,
			0x3148, 0x314a, 0x314b, 0x314c, 0x314d, 0x314e);
	var chars = new Array();
	var v = new Array();
	var c = new Array();
	var texts = new Array();
	var keys = new Array();
	for (var i = 0; i < text.length; i++) {
		chars[i] = text.charCodeAt(i);
		// // "AC00:가" ~ "D7A3:힣" 에 속한 글자면 분해
		if (chars[i] >= 0xAC00 && chars[i] <= 0xD7A3) {
			var i1, i2, i3;

			i3 = chars[i] - 0xAC00;
			i1 = i3 / (21 * 28);
			i3 = i3 % (21 * 28);

			i2 = i3 / 28;
			i3 = i3 % 28;

			// 복자음 분리
			switch (parseInt(i1)) {
			case 1:
				v.push('ㄱㄱ');
				c.push('11');
				break;
			case 4:
				v.push('ㄷㄷ');
				c.push('11');
				break;
			case 8:
				v.push('ㅂㅂ');
				c.push('11');
				break;
			case 10:
				v.push('ㅅㅅ');
				c.push('11');
				break;
			case 13:
				v.push('ㅈㅈ');
				c.push('11');
				break;

			default:
				v.push(String.fromCharCode(ChoSeong[parseInt(i1)]));
				c.push('1');
			}

			// 복모음 분리
			switch (parseInt(i2)) {
			case 9:
				v.push('ㅗㅏ');
				c.push('00');
				break;
			case 10:
				v.push('ㅗㅐ');
				c.push('00');
				break;
			case 11:
				v.push('ㅗㅣ');
				c.push('00');
				break;
			case 14:
				v.push('ㅜㅓ');
				c.push('00');
				break;
			case 15:
				v.push('ㅜㅔ');
				c.push('00');
				break;
			case 16:
				v.push('ㅜㅣ');
				c.push('00');
				break;
			case 19:
				v.push('ㅡㅣ');
				c.push('00');
				break;

			default:
				v.push(String.fromCharCode(JungSeong[parseInt(i2)]));
				c.push('0');
			}

			// c가 0이 아니면, 즉 받침이 있으면
			if (i3 != 0x0000) {
				// 복자음 분리
				switch (parseInt(i3)) {
				case 2:
					if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
						v.push('ㄱㄱ');
						c.push('00');
					} else {
						v.push(String.fromCharCode(JongSeong[parseInt(i3)]));
						c.push('0');
					}
					break;
				case 3:
					v.push('ㄱㅅ');
					c.push('00');
					break;
				case 5:
					v.push('ㄴㅈ');
					c.push('00');
					break;
				case 6:
					v.push('ㄴㅎ');
					c.push('00');
					break;
				case 9:
					v.push('ㄹㄱ');
					c.push('00');
					break;
				case 10:
					v.push('ㄹㅁ');
					c.push('00');
					break;
				case 11:
					v.push('ㄹㅂ');
					c.push('00');
					break;
				case 12:
					v.push('ㄹㅅ');
					c.push('00');
					break;
				case 13:
					v.push('ㄹㅌ');
					c.push('00');
					break;
				case 14:
					v.push('ㄹㅍ');
					c.push('00');
					break;
				case 15:
					v.push('ㄹㅎ');
					c.push('00');
					break;
				case 18:
					v.push('ㅂㅅ');
					c.push('00');
					break;
				case 20:
					v.push('ㅅㅅ');
					c.push('00');
					break;

				default:
					v.push(String.fromCharCode(JongSeong[parseInt(i3)]));
					c.push('0');
				}
			}

		} else {
			switch (chars[i]) {
			case 12594:
				v.push('ㄱㄱ');
				c.push('11');
				break;
			case 12600:
				v.push('ㄷㄷ');
				c.push('11');
				break;
			case 12611:
				v.push('ㅂㅂ');
				c.push('11');
				break;
			case 12614:
				v.push('ㅅㅅ');
				c.push('11');
				break;
			case 12617:
				v.push('ㅈㅈ');
				c.push('11');
				break;

			default:
				v.push(String.fromCharCode(chars[i]));
				c.push('1');
			}
		}

		texts[i] = v.join('');
		v = new Array();

		keys[i] = c.join('');
		c = new Array();
	}

	if (flag === 1) {
		mHangulSebelKeyCodeArray = keys;
	} else if (flag === 2) {
		mHangulSebelMeKeyCodeArray = keys;
	}

	var return_str = texts;
	return return_str;
};

// 낱말 연습 스텝 저장
MenuV2.prototype.WordCompleteSave = function() {
	var languageType = this.GetGameLanguageType();
	that.ajaxManager.netReqWriteTypingWordPractice(that.gameConst.uuid,
			mWordPracticsSelect, languageType, 1,
			this.netResWriteTypingWordPracticeSuccess,
			this.netResWriteTypingWordPracticeFail);
};

// 자리 연습 스텝 저장 성공
MenuV2.prototype.netResWriteTypingWordPracticeSuccess = function(aData) {
	console.log("netResWriteTypingWordPracticeSuccess = " + aData.result);
};

// 자리 연습 스텝 실패
MenuV2.prototype.netResWriteTypingWordPracticeFail = function(aResult) {
	console.log("netResWriteTypingWordPracticeFail = " + aResult);
};

/**
 * 짧은글 연습
 */

var mShortPracticeHangulData = []; // 짧은 글 한글 텍스트 데이터 저장
var mShortPracticeEnglishData = []; // 짧은 글 영문 텍스트 데이터 저장
var mShortPracticsSelect = 0;

var mShortPracticsProcess = 0; // 진행도
var mShortPracticsJasoRight = 0; // 자소 정타수
var mShortPracticsRight = 0; // 정타수
var mShortPracticsBsetHit = 0; // 최고타수
var mShortPracticsNowHit = 0; // 현재타수
var mShortPracticsAvgHit = 0; // 평균타수
var mShortPracticsAccuracy = 0; // 정확도
var mShortPracticsAvgAccuracy = 0; // 평균 정확도
var mShortPracticsOldHit = 0; // 현재타수

var mShortPracticeMenuSelectBtnArray = []; // 메뉴 버튼 배열 저장

var mShortShowTextArray = []; // 입력해야되는 텍스트 배열
var mShortMeShowTextArray = []; // 입력되어진 텍스트 배열

var mShortShowKeyArray = [ -1, -1, -1, -1, -1, -1 ];

var mShortIsStepText = false;
var mShortIsTouchText = false;

var mShortGameTime = 0; // 짧은 글 시간
var mShortGameStartTime = 0; // 짧은 글 시작 시간

var mShortHangulJaso = []; // 자소 분리 저장

var mShortIsProcess = false;
var mShortInputText = "";
var mShortIsBackSound = false;

// 짧은글 연습
MenuV2.prototype.ShortPracticeCreate = function() {
	mShortPracticeMenuSelectBtnArray = [ this.fStage31StepBtn1,
			this.fStage31StepBtn2, this.fStage31StepBtn3, this.fStage31StepBtn4 ];

	mShortShowTextArray = [ this.fShortWordList11, this.fShortWordList21,
			this.fShortWordList3, this.fShortWordList4, this.fShortWordList5,
			this.fShortWordList6 ];
	mShortMeShowTextArray = [ this.fShortWordList12, this.fShortWordList22 ];

	for (var i = 0; i < mShortPracticeMenuSelectBtnArray.length; i++) {
		mShortPracticeMenuSelectBtnArray[i].index = i;
	}

	var hanData = this.game.cache.getText('shorthan');
	mShortPracticeHangulData[0] = hanData.split('\n');
	hanData = this.game.cache.getText('shorthan3');
	mShortPracticeHangulData[1] = hanData.split('\n');
	hanData = this.game.cache.getText('shorthan1');
	mShortPracticeHangulData[2] = hanData.split('\n');
	hanData = this.game.cache.getText('shorthan2');
	mShortPracticeHangulData[3] = hanData.split('\n');

	var engData = this.game.cache.getText('shorteng');
	mShortPracticeEnglishData[0] = engData.split('\n');
	engData = this.game.cache.getText('shorteng1');
	mShortPracticeEnglishData[1] = engData.split('\n');
	engData = this.game.cache.getText('shorteng2');
	mShortPracticeEnglishData[2] = engData.split('\n');
	engData = this.game.cache.getText('shorteng3');
	mShortPracticeEnglishData[3] = engData.split('\n');

	this.fShortInputCursor.visible = false;
	this.fShortInputCursorAni.animations.play("PLAY");

	mShortPracticsSelect = 0;
};

// 짧은글 연습 초기화
MenuV2.prototype.ShortPracticeInit = function() {
	mGameStateType = this.gameConst.GameStateType.SHORT;

	this.StageInfo();

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL
			&& mShortPracticeHangulData[mShortPracticsSelect] != undefined) {
		for (var i = 0; i < mShortPracticeHangulData[mShortPracticsSelect].length; i++) {
			str = mShortPracticeHangulData[mShortPracticsSelect][i];
			mShortPracticeHangulData[mShortPracticsSelect][i] = str.replace(
					/(\r\n\t|\n|\r\t|\r\n|\n\t|\n\r|\r|\t|\s+$)/gm, "");
		}
	}

	var keyArray;
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mShortPracticeHangulData[mShortPracticsSelect] != undefined)
			keyArray = this.GetShuffleRandom(6,
					mShortPracticeHangulData[mShortPracticsSelect].length);
	} else {
		if (mShortPracticeEnglishData[mShortPracticsSelect] != undefined)
			keyArray = this.GetShuffleRandom(6,
					mShortPracticeEnglishData[mShortPracticsSelect].length);
	}

	for (var i = 1; i < mShortShowKeyArray.length; i++) {
		mShortShowKeyArray[i] = keyArray[i];
	}

	for (var i = 0; i < mShortShowTextArray.length; i++) {
		if (i == 0)
			this.gameUtil.setText(mShortShowTextArray[i], 0, 0, "left", "top",
					"");
		else {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				if (mShortPracticeHangulData[mShortPracticsSelect] != undefined)
					this.gameUtil
							.setText(
									mShortShowTextArray[i],
									0,
									0,
									"left",
									"top",
									mShortPracticeHangulData[mShortPracticsSelect][mShortShowKeyArray[i]]);
			} else {
				if (mShortPracticeEnglishData[mShortPracticsSelect] != undefined)
					this.gameUtil
							.setText(
									mShortShowTextArray[i],
									0,
									0,
									"left",
									"top",
									mShortPracticeEnglishData[mShortPracticsSelect][mShortShowKeyArray[i]]);
			}
		}
	}

	for (var i = 0; i < mShortMeShowTextArray.length; i++) {
		this.gameUtil
				.setText(mShortMeShowTextArray[i], 0, 0, "left", "top", "");
	}

	if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
		mShortHangulJaso = this
				.GetHangulToJasoArray(mShortShowTextArray[1].text);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
		mShortHangulJaso = this.GetHangulSebelToJasoArray(
				mShortShowTextArray[1].text, 1);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
		mShortHangulJaso = this.GetHangulSebelToJasoArray(
				mShortShowTextArray[1].text, 1);
	} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
		mShortHangulJaso = this.GetHangulSebelToJasoArray(
				mShortShowTextArray[1].text, 1);
	}

	mShortIsStepText = false;
	mShortIsTouchText = false;
	mTajaGameTimeStartFlag = false;
	mIsTajaTypingFocus = false;
	mShortGameTime = 1;
	mTajaGamePopupType = 0;
	mShortPracticsProcess = 0;
	mShortPracticsRight = 0;
	mShortPracticsJasoRight = 0;
	mShortPracticsBsetHit = 0;
	mShortPracticsNowHit = 0;
	mShortPracticsOldHit = 0;
	mShortPracticsAvgHit = 0;
	mShortPracticsAccuracy = 0;
	mShortPracticsAvgAccuracy = 0;
	userTajaTyping.value = "";
	mShortInputText = "";

	mLongMenuSavePage = 1;
	mLongMenuSaveTitleSelect = 0;

	mTajaGameStatStartTime = new Date();

	userTajaTyping.onkeyup = this.ShortUserWordsCheck;
	userTajaTyping.onkeydown = this.ShortUserWordsCheck;
};

// 짧은글 중복 없는 난수 생성
MenuV2.prototype.GetShuffleRandom = function(aTotal, aRange) {
	var numbers = [];
	var pickNumbers = aTotal;

	for (var insertCur = 0; insertCur < pickNumbers; insertCur++) {
		numbers[insertCur] = Math.floor(Math.random() * aRange);

		// 배열의 기존 원소(insertCur 이전까지)를
		// 방금 삽입한 수와 비교해 같은 수가 있다면 insertCur를 앞으로 밀어
		// 다음 반복에서 같은 칸에 다른 수를 쓰도록 합니다.
		for (var searchCur = 0; searchCur < insertCur; searchCur++) {
			if (numbers[insertCur] == numbers[searchCur]) {
				insertCur--; // insertCur를 앞으로 민다
				break; // 다음 것을 검색할 필요가 없으므로 중복검사 반복을 나갑니다.
			}
		}
	}

	return numbers;
};

// 짧은글 업데이트 처리
MenuV2.prototype.ShortGameProcess = function() {
	this.ShortPracticeInfoProcess();

	// 통계에 따른 한글 자소/영문 알파벳 저장
	if (mShortIsProcess === true && this.fStageInfo32.visible === true) {
		mShortIsProcess = false;
		if (this.fPopupGroup.visible === false) {
			this.playAudio(typing_key, mTajaSoundVolume, false);
		}
		// 통계 처리
		this.ShortTasuStatistics();
	}

	if (mShortIsStepText === true) {
		if (mShortPracticsProcess >= this.gameConst.ShortInputTotalCount) {
			mIsTajaTypingFocus = true;
			var avgAccuracy = parseInt(mShortPracticsAvgAccuracy
					/ mShortPracticsProcess); // 정확도
			var hit = parseInt(mShortPracticsAvgHit / mShortPracticsProcess); // 빠르기
			mTajaGamePopupType = 1;
			this.SetShortResultPopup(2, hit, avgAccuracy, mTajaGameTime,
					this.ShortPracticeContinueButton,
					this.ShortPracticeStopButton);
			this.SendStartEndGameLog(3, mShortPracticsSelect + 1, 0, 1);
			if (avgAccuracy >= 70) {
				mTajaGameScore += 30;
				mTajaGameSaveScore += 30;
			}
			this.TajaScoreDataSave();
			// 통계 타자 속도 처리
			this.SetTajaSpeedStatistics(hit);
		} else {
			mShortShowTextArray[1].clearColors();

			for (var i = 0; i < mShortShowTextArray.length - 1; i++) {
				this.gameUtil.setText(mShortShowTextArray[i], 0, 0, "left",
						"top", mShortShowTextArray[i + 1].text);
				mShortShowKeyArray[i] = mShortShowKeyArray[i + 1];
			}

			if ((mShortPracticsProcess + 4) < this.gameConst.ShortInputTotalCount) {
				if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
					mShortShowKeyArray[5] = this
							.GetShortDeduplication(mShortPracticeHangulData[mShortPracticsSelect].length);
					this.gameUtil
							.setText(
									mShortShowTextArray[5],
									0,
									0,
									"left",
									"top",
									mShortPracticeHangulData[mShortPracticsSelect][mShortShowKeyArray[5]]);
				} else {
					mShortShowKeyArray[5] = this
							.GetShortDeduplication(mShortPracticeEnglishData[mShortPracticsSelect].length);
					this.gameUtil
							.setText(
									mShortShowTextArray[5],
									0,
									0,
									"left",
									"top",
									mShortPracticeEnglishData[mShortPracticsSelect][mShortShowKeyArray[5]]);
				}
			} else {
				mShortShowKeyArray[5] = 0;
				this.gameUtil.setText(mShortShowTextArray[5], 0, 0, "left",
						"top", "");
			}

			var showText = mShortMeShowTextArray[1].text;
			this.gameUtil.setText(mShortMeShowTextArray[0], 0, 0, "left",
					"top", showText);

			for (var i = 0; i < mShortShowTextArray[0].text.length; i++) {
				if (mShortShowTextArray[0].text[i] === mShortMeShowTextArray[0].text[i]) {
					mShortShowTextArray[0].addColor('#2b3748', i);
				} else {
					mShortShowTextArray[0].addColor('#ff0000', i);
				}

				mShortMeShowTextArray[0].addColor('#ffffff', i);
			}
		}

		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			mShortHangulJaso = this
					.GetHangulToJasoArray(mShortShowTextArray[1].text);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			mShortHangulJaso = this.GetHangulSebelToJasoArray(
					mShortShowTextArray[1].text, 1);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			mShortHangulJaso = this.GetHangulSebelToJasoArray(
					mShortShowTextArray[1].text, 1);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			mShortHangulJaso = this.GetHangulSebelToJasoArray(
					mShortShowTextArray[1].text, 1);
		}

		mShortInputText = "";
		mShortIsStepText = false;
	} else {
		if (mTajaGameTimeStartFlag === true) {
			this.nowTime();
			this.ShortNowTime();
		}
	}

	if (mIsTajaTypingFocus === false) {
		var inputWord = mShortInputText;
		var ctx = mShortMeShowTextArray[1].canvas.getContext("2d");
		var text = ctx.measureText(inputWord); // TextMetrics object
		if (text.width < 700) {
			mLongTextLimit = inputWord;
		}
		mShortMeShowTextArray[1].text = mLongTextLimit;
		this.fShortInputCursor.x = 273 + text.width;
		if (mGameStartAgent === this.gameConst.GameAgentType.CHROM) {
			this.fShortInputCursorAni.x = 273 + text.width;
		} else {
			this.fShortInputCursorAni.x = 273 + text.width
					+ (inputWord.length * 0.07);
		}

		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			for (var i = 0; i < mShortShowTextArray[1].text.length; i++) {
				if (mShortShowTextArray[1].text[i] === inputWord[i]
						|| inputWord[i] === undefined
						|| i >= inputWord.length - 1) {
					if (i > inputWord.length - 1) {
						mShortShowTextArray[1].addColor('#ffffff', i);
					} else if (i == inputWord.length - 1) {
						if (mShortShowTextArray[1].text[i] === inputWord[i]) {
							mShortShowTextArray[1].addColor('#000000', i);
						} else {
							mShortShowTextArray[1].addColor('#ffffff', i);
						}
					} else {
						mShortShowTextArray[1].addColor('#000000', i);
					}
				} else {
					mShortShowTextArray[1].addColor('#ff0000', i);
				}
				mShortMeShowTextArray[1].addColor('#ffffff', i);
			}

			// 정확도 처리
			var rightCount = 0;
			var jaso = "";
			if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
				jaso = this.GetHangulToJasoArray(mShortMeShowTextArray[1].text);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
				jaso = this.GetHangulSebelToJasoArray(
						mShortMeShowTextArray[1].text, 2);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				jaso = this.GetHangulSebelToJasoArray(
						mShortMeShowTextArray[1].text, 2);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
				jaso = this.GetHangulSebelToJasoArray(
						mShortMeShowTextArray[1].text, 2);
			}

			var rigthArray = 0;
			for (var i = 0; i < jaso.length; i++) {
				if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
					rigthArray = 0;
					for (var j = 0; j < mShortHangulJaso[i].length; j++) {
						if (jaso[i][j] === mShortHangulJaso[i][j]) {
							rigthArray++;
						} else if ((jaso.length - 1) !== i) {
							rigthArray = 0;
							break;
						} else if ((jaso.length - 1) === i
								&& jaso[i][j] != undefined) {
							rigthArray = 0;
							break;
						}
					}
					rightCount += rigthArray;
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390
						|| mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE
						|| mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
					rigthArray = 0;
					for (var j = 0; j < mShortHangulJaso[i].length; j++) {
						if ((jaso[i][j] === mShortHangulJaso[i][j])
								&& (mHangulSebelKeyCodeArray[i][j] === mHangulSebelMeKeyCodeArray[i][j])) {
							rigthArray++;
						} else if ((jaso.length - 1) !== i) {
							rigthArray = 0;
							break;
						} else if ((jaso.length - 1) === i
								&& jaso[i][j] != undefined) {
							rigthArray = 0;
							break;
						}
					}
					rightCount += rigthArray;
				}
			}

			mShortPracticsJasoRight = rightCount;

			rightCount = 0;
			var meShow = mShortMeShowTextArray[1].text;
			for (var i = 0; i < meShow.length; i++) {
				if (meShow[i] === mShortShowTextArray[1].text[i]) {
					rightCount++;
				}
			}

			mShortPracticsRight = rightCount;
		} else {
			for (var i = 0; i < mShortShowTextArray[1].text.length; i++) {
				if (mShortShowTextArray[1].text[i] === inputWord[i]
						|| inputWord[i] === undefined) {
					if (i >= inputWord.length) {
						mShortShowTextArray[1].addColor('#ffffff', i);
					} else {
						mShortShowTextArray[1].addColor('#0066ff', i);
					}
				} else {
					mShortShowTextArray[1].addColor('#ff0000', i);
				}
				mShortMeShowTextArray[1].addColor('#ffffff', i);
			}

			// 정확도 처리
			var rightCount = 0;
			for (var i = 0; i < mShortMeShowTextArray[1].text.length; i++) {
				if (mShortMeShowTextArray[1].text[i] === mShortShowTextArray[1].text[i]) {
					rightCount++;
				}
			}

			mShortPracticsRight = rightCount;
			mShortPracticsJasoRight = rightCount;
		}
	}

	if (mShortIsBackSound === true && this.fStageInfo32.visible === true) {
		mShortIsBackSound = false;
		this.playAudio(typing_back, mTajaSoundVolume, false);
	}

	if (this.game.input.keyboard.isDown(Phaser.Keyboard.ESC)) {
		if (this.fStageInfo32.visible === true) {
			if (mTajaGamePopupType === 1) {
				this.ShortPracticeStopButton();
			} else if (mTajaGamePopupType === 10) {
				this.TajaGameHanEngConfirm();
			} else {
				this.GoBackButton();
			}
		}

		mTajaGamePopupType = 0;
		this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	}
};

// 짧은글 연습 글쇠별 타수 통계 처리
MenuV2.prototype.ShortTasuStatistics = function() {
	if (mShortInputText.length <= 0) {
		return;
	}

	var nowTime = new Date();
	mTajaGameStatTime = nowTime.getTime() - mTajaGameStatStartTime.getTime();
	mTajaGameStatStartTime = new Date();

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		var jaso = "";
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			jaso = this.GetHangulToJaso(mShortInputText);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			jaso = this.GetHangulSebelToJaso(mShortInputText, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			jaso = this.GetHangulSebelToJaso(mShortInputText, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			jaso = this.GetHangulSebelToJaso(mShortInputText, 0);
		}
		var jasoLength = jaso.length - 1;
		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, jaso[jasoLength],
					mTajaGameKeyCode) === true) {
				mTajaHangulTasu[mTajaHangulType][i]++;
				break;
			}
		}

		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			jaso = this
					.GetHangulToJaso(mShortInputText[mShortInputText.length - 1]);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			jaso = this.GetHangulSebelToJaso(
					mShortInputText[mShortInputText.length - 1], 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			jaso = this.GetHangulSebelToJaso(
					mShortInputText[mShortInputText.length - 1], 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			jaso = this.GetHangulSebelToJaso(
					mShortInputText[mShortInputText.length - 1], 0);
		}
		jasoLength = jaso.length - 1;
		var showText = mShortShowTextArray[1].text;
		if (showText.length >= mShortInputText.length) {
			if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
				wordJaso = this
						.GetHangulToJaso(mShortShowTextArray[1].text[mShortInputText.length - 1]);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
				wordJaso = this
						.GetHangulSebelToJaso(
								mShortShowTextArray[1].text[mShortInputText.length - 1],
								0);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordJaso = this
						.GetHangulSebelToJaso(
								mShortShowTextArray[1].text[mShortInputText.length - 1],
								0);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordJaso = this
						.GetHangulSebelToJaso(
								mShortShowTextArray[1].text[mShortInputText.length - 1],
								0);
			}
		} else {
			wordJaso = "";
		}
		if (wordJaso.length < jaso.length) {
			if (mShortShowTextArray[1].text.length > mShortInputText.length) {
				var addJaso = "";
				if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
					addJaso = this
							.GetHangulToJaso(mShortShowTextArray[1].text[mShortInputText.length]);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
					addJaso = this
							.GetHangulSebelToJaso(
									mShortShowTextArray[1].text[mShortInputText.length],
									0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
					addJaso = this
							.GetHangulSebelToJaso(
									mShortShowTextArray[1].text[mShortInputText.length],
									0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
					addJaso = this
							.GetHangulSebelToJaso(
									mShortShowTextArray[1].text[mShortInputText.length],
									0);
				}
				wordJaso += addJaso[0];
			}
		}

		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, jaso[jasoLength],
					mTajaGameKeyCode) === true
					&& jaso[jasoLength] === wordJaso[jasoLength]) {
				mTajaHangulRight[mTajaHangulType][i]++;
				mTajaHangulSpeed[mTajaHangulType][i] += parseInt((1000 * 60)
						/ mTajaGameStatTime);
				for (var j = 0; j < mTajaHangulFingerJaso[mTajaHangulType].length; j++) {
					for (var k = 0; k < mTajaHangulFingerJaso[mTajaHangulType][j].length; k++) {
						if (that.IsStatUserWordFingerRightWrong(j, k,
								jaso[jasoLength], mTajaGameKeyCode) === true) {
							mTajaHangulFingerRight[mTajaHangulType][j]++;
							mTajaHangulFingerSpeed[mTajaHangulType][j] += parseInt((1000 * 60)
									/ mTajaGameStatTime);
							break;
						}
					}
				}
				break;
			}
		}
	} else {
		var jasoLength = mShortInputText.length - 1;
		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (mTajaEnglishAlphabet[mTajaEnglishType][i] === mShortInputText[jasoLength]
					.toUpperCase()) {
				mTajaEnglishTasu[mTajaEnglishType][i]++;
				break;
			}
		}

		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (mTajaEnglishAlphabet[mTajaEnglishType][i] === mShortInputText[jasoLength]
					.toUpperCase()
					&& mShortInputText[jasoLength] === mShortShowTextArray[1].text[jasoLength]) {
				mTajaEnglishRight[mTajaEnglishType][i]++;
				mTajaEnglishSpeed[mTajaEnglishType][i] += parseInt((1000 * 60)
						/ mTajaGameStatTime);
				for (var j = 0; j < mTajaEnglishFingerAlphabet[mTajaEnglishType].length; j++) {
					for (var k = 0; k < mTajaEnglishFingerAlphabet[mTajaEnglishType][j].length; k++) {
						if (mTajaEnglishFingerAlphabet[mTajaEnglishType][j][k] === mShortInputText[jasoLength]
								.toUpperCase()) {
							mTajaEnglishFingerRight[mTajaEnglishType][j]++;
							mTajaEnglishFingerSpeed[mTajaEnglishType][j] += parseInt((1000 * 60)
									/ mTajaGameStatTime);
							break;
						}
					}
				}
				break;
			}
		}
	}
};

// 짧은글 마지막 텍스트 중복되지 않게 생성
MenuV2.prototype.GetShortDeduplication = function(aRange) {
	var index = 0;
	var checkSame = false;
	var keyArray = 0;

	keyArray = Math.floor((Math.random() * aRange));
	while (true) {
		if (keyArray === mShortShowKeyArray[index]) {
			checkSame = true;
		}

		index++;
		if (index > 4) {
			if (checkSame === false) {
				break;
			} else {
				checkSame = false;
				index = 0;
				keyArray = Math.floor((Math.random() * aRange));
			}
		}
	}

	return keyArray;
};

// 짧은글 연습 완료후 계속 버튼
MenuV2.prototype.ShortPracticeContinueButton = function() {
	this.SetLongResultExitPopup();
	this.ShortPracticeInit();
	this.SetTajaGameStartTime();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 짧은글 연습 완료후 그만 버튼
MenuV2.prototype.ShortPracticeStopButton = function() {
	this.SetLongResultExitPopup();

	this.fStageInfo31.visible = true;
	this.fStageInfo32.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	mGameWordType = this.gameConst.GameWordType.NONE;

	this.playAudio(click_sound, mTajaSoundVolume, false);
	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 짧은글 연습 선택 버튼
MenuV2.prototype.ShortPracticeMenuSelectButton = function(target) {
	if (target.index === 1
			&& mTajaLanguageType === this.gameConst.LanguageType.ENGLISH) {
		this
				.SetPublicPopup(1, "컨텐츠가 추가될 예정입니다.", null,
						this.SetPublicExitPopup);
		return;
	}

	mShortPracticsSelect = target.index;

	this.fStageInfo31.visible = false;
	this.fStageInfo32.visible = true;

	this.fOptionBtn3.visible = true;
	this.fOptionBtn2.visible = false;

	this.ShortPracticeInit();
	this.SetTajaGameStartTime();

	mGameWordType = this.gameConst.GameWordType.SHORT;

	typing_Music.stop();
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 짧은글 연습 이벤트 버튼
MenuV2.prototype.ShortEventButton = function(target) {
	mShortPracticsSelect = 4;

	this.fStageInfo31.visible = false;
	this.fStageInfo32.visible = true;

	this.fOptionBtn3.visible = true;
	this.fOptionBtn2.visible = false;

	this.ShortPracticeInit();
	this.SetTajaGameStartTime();

	mGameWordType = this.gameConst.GameWordType.SHORT;

	typing_Music.stop();
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 정확도, 진행도, 오타수 정보 처리
MenuV2.prototype.ShortPracticeInfoProcess = function() {
	// 진행도
	var process = parseInt(mShortPracticsProcess
			/ this.gameConst.ShortInputTotalCount * 100);
	if (process < 0) {
		process = 0;
	} else if (process > 100) {
		process = 100;
	}
	this.gameUtil.setText(this.fProcessPersent32, 0, 24, "left", "top", process
			+ "%");

	var processGauge = mShortPracticsProcess
			/ this.gameConst.ShortInputTotalCount;
	if (processGauge > 1) {
		processGauge = 1;
	}
	this.fProcessGauge32.scale.x = processGauge;

	// 최고타수
	this.gameUtil.setText(this.fBest32, 0, 24, "left", "top",
			mShortPracticsBsetHit);
	var bestGauge = mShortPracticsBsetHit / 800;
	if (bestGauge > 1) {
		bestGauge = 1;
	}
	this.fBestGauge32.scale.x = bestGauge;

	// 목표타수
	this.gameUtil.setText(this.fGoal32, 0, 24, "left", "top",
			this.gameConst.TypingSpeed);
	var goalGauge = this.gameConst.TypingSpeed / 800;
	if (goalGauge > 1) {
		goalGauge = 1;
	}
	this.fGoalGauge32.scale.x = goalGauge;

	// 정확도
	if (mShortIsTouchText === false) {
		if (mShortPracticsProcess === 0) {
			this.gameUtil.setText(this.fAccuracy32, 0, 24, "left", "top", "0%");
			this.fAccuracyGauge32.scale.x = 0;
		} else {
			var accuracy = 0;
			if (mShortPracticsProcess > 0) {
				accuracy = parseInt(mShortPracticsAvgAccuracy
						/ mShortPracticsProcess);
			}

			if (accuracy < 0) {
				accuracy = 0;
			}
			this.gameUtil.setText(this.fAccuracy32, 0, 24, "left", "top",
					accuracy + "%");

			var accuracyGauge = 0;
			if (mShortPracticsProcess > 0) {
				accuracyGauge = (mShortPracticsAvgAccuracy / mShortPracticsProcess) / 100;
			}

			if (accuracyGauge > 1) {
				accuracyGauge = 1;
			} else if (accuracyGauge < 0) {
				accuracyGauge = 0;
			}
			this.fAccuracyGauge32.scale.x = accuracyGauge;
		}
		// 현재타수
		this.gameUtil.setText(this.fNow32, 0, 24, "left", "top",
				mShortPracticsOldHit);
		var nowGauge = mShortPracticsOldHit / 800;
		if (nowGauge > 1) {
			nowGauge = 1;
		}
		this.fNowGauge32.scale.x = nowGauge;
	} else {
		var meShow = mShortMeShowTextArray[1].text.length;

		if (meShow <= 0) {
			mShortPracticsAccuracy = 0;
		} else {
			mShortPracticsAccuracy = parseInt(mShortPracticsRight / meShow
					* 100);
		}

		if (mShortPracticsAccuracy < 0) {
			mShortPracticsAccuracy = 0;
		}
		this.gameUtil.setText(this.fAccuracy32, 0, 24, "left", "top",
				mShortPracticsAccuracy + "%");

		var accuracyGauge = 0;
		if (meShow > 0) {
			accuracyGauge = mShortPracticsRight / meShow;
		}

		if (accuracyGauge > 1) {
			accuracyGauge = 1;
		} else if (accuracyGauge < 0) {
			accuracyGauge = 0;
		}
		this.fAccuracyGauge32.scale.x = accuracyGauge;

		// 현재타수
		mShortPracticsNowHit = parseInt(mShortPracticsJasoRight
				/ mShortGameTime * 60);
		this.gameUtil.setText(this.fNow32, 0, 24, "left", "top",
				mShortPracticsNowHit);
		var nowGauge = mShortPracticsNowHit / 800;
		if (nowGauge > 1) {
			nowGauge = 1;
		}
		this.fNowGauge32.scale.x = nowGauge;
	}
};

//
MenuV2.prototype.ShortUserWordsCheck = function(evt) {
	if (evt.type === "keydown") {
		if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
				&& get_ohi_type() === true) {
			mTajaGame390HanReturn = true;
			evt.returnValue = false;
			return false;
		} else {
			mTajaGame390HanReturn = false;
		}
	} else if (evt.type === "keyup") {
		if (mTajaGame390HanReturn === true) {
			mTajaGameHanEngKey = 3;
			mTajaGame390HanReturn = false;
			evt.returnValue = false;
			return false;
		}
	}

	if (mGameWordType !== 3 || mTajaGameHanEngKey != 0
			|| that.fPopupGroup.visible === true) {
		evt.returnValue = false;
		return false;
	}

	if (evt.keyCode === 8) {
		mShortIsBackSound = true;
	}

	// Pgup, pgdn, END, HOME, LEFT, UP, RIGHT, DOWN 버튼 처리
	if ((evt.keyCode >= 33 && evt.keyCode <= 40) || evt.keyCode === 18) {
		evt.returnValue = false;
		return false;
	}

	mTajaGameKeyCode = evt.keyCode;

	if (mGameStartAgent === that.gameConst.GameAgentType.CHROM) {
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (evt.keyCode === 8 || evt.keyCode === 9 || evt.keyCode === 37
					|| evt.keyCode === 39 || evt.keyCode === 46) {
				mShortInputText = userTajaTyping.value;
				return;
			} else {
				if (/[a-zA-Z]/g.test(evt.target.value)) {
					evt.returnValue = false;
					if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
							&& evt.keyCode !== 13 && evt.keyCode !== 27) {
						mTajaGameHanEngKey = 1;
					}
				}
				evt.target.value = evt.target.value.replace(/[a-zA-Z]/g, "");
			}
		} else {
			if ((mShortInputText.length > 0 && evt.keyCode === 8)
					|| evt.keyCode === 9 || evt.keyCode === 37
					|| evt.keyCode === 39 || evt.keyCode === 46) {
				userTajaTyping.value = userTajaTyping.value.replace(
						mTajaGameEngCheckStr, "");
				mShortInputText = userTajaTyping.value;
				return;
			} else {
				if (mTajaGameEngCheckStr.test(evt.target.value)) {
					evt.returnValue = false;
					if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
							&& evt.keyCode !== 13 && evt.keyCode !== 27) {
						mTajaGameHanEngKey = 2;
					}
				}
				evt.target.value = evt.target.value.replace(
						mTajaGameEngCheckStr, "");
			}
		}
	}

	var wordAnswer = userTajaTyping.value;
	var wordString = "";

	if (mTajaGameTimeStartFlag === false && wordAnswer.length > 0) {
		mTajaGameTimeStartFlag = true;
		mTajaGameStartTime = new Date();
		mShortGameStartTime = new Date();
	}

	if (mShortIsTouchText === false && evt.keyCode !== 13) {
		mShortGameStartTime = new Date();
		mShortIsTouchText = true;
	}

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		wordString = mShortPracticeHangulData[mShortPracticsSelect][mShortShowKeyArray[1]];
	} else {
		wordString = mShortPracticeEnglishData[mShortPracticsSelect][mShortShowKeyArray[1]];
	}

	// ie에서 enter입력값이 들어오면 한칸 빈 공간이 들어간다. 방지하기 위한 처리
	if (evt.keyCode === 13 && (wordString.length > wordAnswer.length)) {
		evt.returnValue = false;
		return false;
	}

	if (mShortInputText !== wordAnswer && evt.keyCode !== 13) {
		mShortIsProcess = true;
		mShortInputText = wordAnswer;
	}

	// 엔터키를 누른 경우와 비교 글자보다 더 많은 글자를 쓸 경우 넘어간다.
	if ((wordAnswer !== undefined)
			&& (mShortPracticsProcess < 33)
			&& ((wordString.length <= wordAnswer.length && evt.keyCode === 13) || wordString.length < wordAnswer.length)) {
		mShortPracticsProcess++;
		if (wordAnswer.replace(/\s+$/, "") === wordString) {
			mCharacterAniState = 1;
			mTajaGameScore += 3;
			mTajaGameSaveScore += 3;
		} else {
			mWordPracticsWrong++;
			mCharacterAniState = 2;
		}

		mShortIsStepText = true;
		mShortIsTouchText = false;
		userTajaTyping.value = "";
		userTajaTyping.blur();

		mShortPracticsAvgAccuracy += mShortPracticsAccuracy;
		mShortPracticsAvgHit += mShortPracticsNowHit;
		mShortPracticsOldHit = mShortPracticsNowHit;
		if (mShortPracticsBsetHit < mShortPracticsNowHit) {
			mShortPracticsBsetHit = mShortPracticsNowHit;
		}
	}
};

/**
 * 긴글 연습
 */

// 0509 긴글목록제거.
// var mLongMenuHanTitleData = ["메밀꽃 필 무렵", "마지막 잎새", "동백꽃", "별 헤는 밤", "애국가",
// "금도끼", "별", "어린왕자", "별주부전", "나비", "님의침묵"];
var mLongMenuHanTitleData = [ "컨텐츠 점검중입니다. 이용에 불편을 드려서 죄송합니다." ];

var mLongMenuHanSourceData = [ "이효석 소설", "O.헨리 소설", "김유정 소설", "윤동주 시",
		"작사가 알 수 없음", "방정환 소설", "황순원 소설", "생텍쥐페리 소설", "작자 미상 소설", "노천명 시",
		"한용운 시" ];

// 0509 긴글목록제거.
// var mLongMenuEngTitleData = ["The Selfish Giant", "The Elves and the
// Shoemaker", "Rapunzel", "Narcissus", "Gulliver's Travels", "The Wind and the
// Sun",
// "The Little Prince", "Beauty and the Beast", "The Princess and the Pea", "The
// Wolf and the Lamb"];
var mLongMenuEngTitleData = [ "컨텐츠 점검중입니다. 이용에 불편을 드려서 죄송합니다." ];

var mLongMenuEngSourceData = [ "오스카와일드 동화", "Grimm형제 동화", "Grimm형제 동화",
		"그리스신화", "Swift 소설", "이솝우화", "생텍쥐페리 소설", "보몽부인 소설", "안데르센 동화", "이솝우화" ];
var mLongMenuHanVankTitleData = [ "[대한민국] 이 나라 사람들에 대해 아시나요?", "[대한민국] 아시아의 꿈",
		"[대한민국] 이 나라에 대해 아시나요?", "[독도] 독도", "[독도] 독도의 역사적 기록", "[독립운동가] 강우규",
		"[독립운동가] 권기옥", "[독립운동가] 김교신", "[독립운동가] 김구", "[독립운동가] 김마리아",
		"[독립운동가] 김익주", "[독립운동가] 김좌진", "[독립운동가] 독립선언서", "[독립운동가] 방정환",
		"[독립운동가] 스코필드", "[독립운동가] 신채호", "[독립운동가] 안중근", "[독립운동가] 안창호",
		"[독립운동가] 앨버트 테일러", "[독립운동가] 어니스트 베델", "[독립운동가] 유관순", "[독립운동가] 윤동주",
		"[독립운동가] 윤봉길", "[독립운동가] 의병", "[독립운동가] 이봉창", "[독립운동가] 이육사",
		"[독립운동가] 이태준", "[독립운동가] 이회영", "[독립운동가] 임천택", "[독립운동가] 전명훈, 장인환",
		"[독립운동가] 전형필", "[독립운동가] 주시경", "[독립운동가] 헤이그 특사", "[독립운동가] 황현",
		"[독립운동가] 후세다쓰지", "[문화유산] 한국 기록 유산", "[문화유산] 한국 문화 유산", "[문화유산] 한국 역사 유적",
		"[한국의 꽃] 한국의 꽃", "[독립운동가] 가네코 후미코", "[독립운동가] 김란사", "[독립운동가] 김향화",
		"[독립운동가] 남자현", "[독립운동가] 두군혜", "[독립운동가] 루이 마랭", "[독립운동가] 박차정",
		"[독립운동가] 부춘화", "[독립운동가] 안경신", "[독립운동가] 어윤희", "[독립운동가] 엘버트 와일더 테일러",
		"[독립운동가] 오광심", "[독립운동가] 윌리엄 알더만 린튼", "[독립운동가] 윤희순", "[독립운동가] 장개석",
		"[독립운동가] 저보성", "[독립운동가] 정정화", "[독립운동가] 조신성", "[독립운동가] 조지 루이스 쇼",
		"[독립운동가] 조지 애쉬모어 피치", "[독립운동가] 조화벽", "[독립운동가] 최용신", "[독립운동가] 프레드릭 아서 맥켄지",
    "[독립운동가] 플로이드 윌리엄 톰킨스", "[독립운동가] 호머 베절릴 헐버트", "[한국명소] 창덕궁", "[한국명소] 명동",
    "[한국명소] 인천 개항장", "[한국명소] 수원화성", "[한국명소] 독립기념관", "[한국명소] 설악산", "[한국명소] 전주한옥마을",
    "[한국명소] 석굴암과 불국사", "[한국명소] 해운대", "[한국명소] 한라산", "[한국명소] 울릉도와 독도"
    ];
// var mLongMenuHanVankTitleData = [];

var mLongMenuHanVankTitleDatas = [];

var mLongMenuEngVankTitleData = [ "[Dokdo] The easternmost island in Korea",
		"[Independence movement] Proclamation of Korean Independence",
		"[Korea] Have you ever heard about the people of this country?",
		"[Korea] The Vision of Asia",
		"[Korea] Have you ever heard of this country?",
		"[Korea] Documentary heritage of Korea",
		"[Korea] Korean Cultural Heritage",
    "[Korea] Historical sites of Korea",
    "[Korea] The flower of Korea",
		"[DOKDO] THE EASTERNMOST ISLAND IN KOREA",
		"[INDEPENDENCE MOVEMENT] PROCLAMATION OF KOREAN INDEPENDENCE",
		"[KOREA] HAVE YOU EVER HEARD ABOUT THE PEOPLE OF THIS COUNTRY",
		"[KOREA] THE VISION OF ASIA",
		"[KOREA] HAVE YOU EVER HEARD OF THIS COUNTRY",
		"[KOREA] DOCUMENTARY HERITAGE OF KOREA",
		"[KOREA] KOREAN CULTURAL HERITAGE",
    "[KOREA] HISTORICAL SITES OF KOREA",
    "[KOREA] THE FLOWER OF KOREA",
    "[Korean Landmark] Changdeokgung Palace",
    "[Korean Landmark] Myeongdong",
    "[Korean Landmark] Incheon Open Port",
    "[Korean Landmark] Suwon Hwaseong Fortress",
    "[Korean Landmark] Independence Hall",
    "[Korean Landmark] Mt. Seorak",
    "[Korean Landmark] Jeonju Hanok Village",
    "[Korean Landmark] Seokguram and Bulguksa",
    "[Korean Landmark] Haeundae Beach",
    "[Korean Landmark] Mt. Halla",
    "[Korean Landmark] Ulleungdo and Dokdo",
    "[Korean Food] Taste of Korean Food",
    "[Korean Food] Hobakjuk Pumpkin Porridge",
    "[Korean Food] Haemul-pajeon Seafood Green Onion Pancake",
    "[Korean Food] Samgyetang Ginseng Chicken Soup",
    "[Korean Food] Bibimbap Rice Mixed with Vegetables and Beef",
    "[Korean Food] Bulgogi Korean Barbecue",
    "[Korean Food] Baechu-kimchi Cabbage Kimchi",
    "[Korean Food] Mul-naengmyeon Chilled Buckwheat Noodle Soup",
    "[Korean Food] Tteok Rice Cake",
    "[Korean Food] Topokki Stir-Fried Rice Cake"
  ];
var mLongMenuEngVankTitleCompleteData = [
		"[Dokdo] The easternmost island in Korea",
		"[Independence movement] Proclamation of ...",
		"[Korea] Have you ever heard about the people ...",
		"[Korea] The Vision of Asia",
		"[Korea] Have you ever heard of this country?",
		"[Korea] Documentary heritage of Korea",
		"[Korea] Korean Cultural Heritage",
    "[Korea] Historical sites of Korea",
    "[Korea] The flower of Korea",
		"[DOKDO] THE EASTERNMOST ISLAND IN KOREA",
		"[INDEPENDENCE MOVEMENT] PROCLAMATION ...",
		"[KOREA] HAVE YOU EVER HEARD ABOUT THE ...",
		"[KOREA] THE VISION OF ASIA",
		"[KOREA] HAVE YOU EVER HEARD OF THIS ...",
		"[KOREA] DOCUMENTARY HERITAGE OF KOREA",
		"[KOREA] KOREAN CULTURAL HERITAGE",
    "[KOREA] HISTORICAL SITES OF KOREA",
    "[KOREA] THE FLOWER OF KOREA",
    "[Korean Landmark] Changdeokgung Palace",
    "[Korean Landmark] Myeongdong",
    "[Korean Landmark] Incheon Open Port",
    "[Korean Landmark] Suwon Hwaseong Fortress",
    "[Korean Landmark] Independence Hall",
    "[Korean Landmark] Mt. Seorak",
    "[Korean Landmark] Jeonju Hanok Village",
    "[Korean Landmark] Seokguram and Bulguksa",
    "[Korean Landmark] Haeundae Beach",
    "[Korean Landmark] Mt. Halla",
    "[Korean Landmark] Ulleungdo and Dokdo",
    "[Korean Food] Taste of Korean Food",
    "[Korean Food] Hobakjuk Pumpkin Porridge",
    "[Korean Food] Haemul-pajeon Seafood ...",
    "[Korean Food] Samgyetang Ginseng Chicken Soup",
    "[Korean Food] Bibimbap Rice Mixed with ...",
    "[Korean Food] Bulgogi Korean Barbecue",
    "[Korean Food] Baechu-kimchi Cabbage Kimchi",
    "[Korean Food] Mul-naengmyeon Chilled ...",
    "[Korean Food] Tteok Rice Cake",
    "[Korean Food] Topokki Stir-Fried Rice Cake"
  ];

var mLongMenuHanContTitleData = [ "[수학개념] 초등학교 1,2학년", "[수학개념] 초등학교 3,4학년",
		"[수학개념] 초등학교 5,6학년", "[수학개념] 중학교 1학년", "[수학개념] 중학교 2학년",
		"[수학개념] 중학교 3학년", "[수학개념] 고등학교 1학년", "[수학개념] 고등학교 2,3학년" ];
var mLongMenuHanContSourceData = [ "No.1 수학 콘텐츠, 개념원리" ];
var mLongMenuEngContTitleData = [ "개념원리 컨텐츠가 없습니다." ];
var mLongMenuEngContSourceData = [ "No.1 수학 콘텐츠, 개념원리" ];

var mLongPracticeHangulData = []; // 긴 글 텍스트 데이터 저장
var mLongPracticeEnglishData = []; // 긴 글 텍스트 데이터 저장

var mLongPracticeHangulVankData = []; // 긴 글 반크 텍스트 데이터 저장
var mLongPracticeEnglishVankData = []; // 긴 글 반크 텍스트 데이터 저장

var mLongPracticeHangulContData = []; // 긴 글 개념원리 텍스트 데이터 저장
var mLongPracticeEnglishContData = []; // 긴 글 개념원리 텍스트 데이터 저장

var mLongPracticsSelect = 0; // 글선택/불러오기 탭 설정

var mLongMenuMaxListBar = 6; // 한 페이지에 들어갈 리스트 갯수 정의

var mLongMenuTotalCount = 11; // 테스트를 위한 메뉴 카운트
var mLongMenuTotalPage = 0; // 전체 페이지
var mLongMenuPage = 0; // 현재 페이지
var mLongMenuTitleSelect = 0; // 타이틀 선택

var mLongMenuSavePage = 0; // 현재 페이지
var mLongMenuSaveTitleSelect = 0; // 타이틀 선택

var mLongMenuTitleArray = []; // 메뉴 타이틀
var mLongMenuTestCompleteArray = []; // 검정 완료 버튼
var mLongMenuPracticeCompleteArray = []; // 연습 완료 버튼
var mLongMenuSelectBarArray = []; // 타이틀 리스트 선택 버튼

var mLongMenuCallTitleArray = []; // 메뉴 타이틀
var mLongMenuCallDeleteArray = []; // 지우기 버튼
var mLongMenuCallTestCompleteArray = []; // 검정 완료 버튼
var mLongMenuCallPracticeCompleteArray = []; // 연습 완료 버튼
var mLongMenuCallSelectBarArray = []; // 타이틀 리스트 선택 버튼
var mLongMenuCallDatas; // 불러오기 데이터 저장

var mLongShowTextArray = []; // 긴글 보여주는 텍스트
var mLongMeShowTextArray = []; // 긴글 쓰는 부분

var mLongHangulJasoArray = []; // 한글을 자소 단위로 저장
var mLongTextData = []; // 한줄이 40자가 넘어가는것을 대비해서 다시 텍스트 데이터를 저장한다.

var mLongShowKeyArray = [ -1, -1, -1, -1 ]; // 긴글 보여주는 인덱스 저장
var mLongKeyboardUserCount = 0; // 한줄 단위 이동 카운트
var mLongShowPage = 0; // 긴글쓰기중 현재 페이지
var mLongTotalShowPage = 0; // 긴글쓰기중 전체 페이지
var mLongIsChangeText = false; // 페이지에서 다 쓰고 다음 페이지로 넘어가는 체크
var mLongIsStepText = false; // 페이지에서 한줄씩 넘어가는 체크
var mLongIsEndText = false; // 더 이상 긴글을 쓸 텍스트가 있는지 체크
var mLongTotalWordCount = 0; // 전체 타자수
var mLongRightTotalWordCount = 0; // 전체 정타자수
var mLongRightTotalJasoCount = 0; // 전체 정자소수
var mLongRightWordCount = 0; // 정타수
var mLongRightJasoCount = 0; // 정타 자소수
var mLongAccuracyValue = 0; // 정확도
var mLongAccuracyTotValue = 0; // 연습 정확도
var mLongNowHit = 0; // 현재 입력 타자수

var mLongUserWordCheck = false; // 입력 텍스트창 눌렸는지 체크
var mLongSec = 0; // 1초 카운트 시간
var mLongStartSec = 0; // 1초 카운트 시작 시간

var mLongdLoadErrorType = 0; // 불러오기시 에러 처리
var mLongdLoadName = 0; // 불러오기시 이름 저장
var mLongdLoadContents = 0; // 불러오기시 내용 저장

var mLongMenuDeleteIndex = 0; // 긴글 불러오기 지우기 버튼 인덱스

var mLongGameType = 0; // 0 : 연습모드, 1 : 타자 검정

var mLongTextLimit = ""; // 화면 최대 길이 처리

var mLongIsProcess = false; // 키 눌린 상태 체크
var mLongInputText = ""; // 긴 글 입력 텍스트 저장
var mLongIsBackSound = false; // 백키 사운드

var mLongIsContinue = false; // 이어하기 상태 처리

/*
 * 이 아래 배열들은 스테이지 클리어 정보를 저장하기 위한 용도로 사용됨...(내가 만든것 아님..;;;) 2차원 배열의 행은 키보드
 * 타입(키보드 종류)를 지칭하고 열은 총 컨텐츠 갯수를 의미함... 이 주석이 작성된 시점으로 부터 열의 갯수를 조오오올라 늘려둠
 * ....20191211 by leesso
 */

// 가변
var mLongHanCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																				// 한글
																				// 완료
																				// 체크

var mLongEngCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																				// 영어
																				// 완료
																				// 체크
// 가변
var mLongHanTestCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																				// 타자
																				// 검정
																				// 한글
																				// 완료
																				// 체크

var mLongEngTestCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																				// 타자
																				// 검정
																				// 영어
																				// 완료
																				// 체크

// 가변
var mLongHanVankCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴 글
																					// 연습
																					// 한글
																					// 완료
																					// 체크

var mLongEngVankCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																		// 영어 완료
																		// 체크

var mLongHanVankTestCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴 글
																					// 연습
																					// 검정
																					// 한글
																					// 완료
																					// 체크

var mLongEngVankTestCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																		// 타자 검정
																		// 영어 완료
																		// 체크

var mLongHanContCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																		// 개념원리
																		// 한글 완료
																		// 체크

var mLongEngContCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습 개념원리 영어 완료 체크

var mLongHanContTestCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																			// 타자
																			// 검정
																			// 개념원리
																			// 한글
																			// 완료
																			// 체크

var mLongEngContTestCompleteSave = [
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ]; // 긴글연습
																			// 타자
																			// 검정
																			// 영어
																			// 개념원리
																			// 완료
																			// 체크

// 타자 검정 결과 저장
var mLongTestResults = {
	queue : [ {
		name : "제목",
		date : "2019-02-07",
		page : "999/999",
		speed : 0,
		acc : 0
	} ]
};

// 긴글 불러오기 저장
var mLongLoadDatas = {
	queue : [ {
		name : "",
		contents : ""
	} ]
};

// 이어하기 저장
var mLongContinueDatas = {
	queue : [ {
		type : 0,
		select : 0,
		page : 0,
		acc : 0
	}, {
		type : 0,
		select : 0,
		page : 0,
		acc : 0
	}, {
		type : 0,
		select : 0,
		page : 0,
		acc : 0
	}, {
		type : 0,
		select : 0,
		page : 0,
		acc : 0
	}, {
		type : 0,
		select : 0,
		page : 0,
		acc : 0
	}, {
		type : 0,
		select : 0,
		page : 0,
		acc : 0
	} ]
};

// 긴글 연습
MenuV2.prototype.LongPracticeCreate = function() {
	// console.log('긴글연습생성::');
	mLongMenuTitleArray = [ this.fListTitleTxt1, this.fListTitleTxt2,
			this.fListTitleTxt3, this.fListTitleTxt4, this.fListTitleTxt5,
			this.fListTitleTxt6 ];
	mLongMenuTestCompleteArray = [ this.fListbarTestComplete1,
			this.fListbarTestComplete2, this.fListbarTestComplete3,
			this.fListbarTestComplete4, this.fListbarTestComplete5,
			this.fListbarTestComplete6 ];
	mLongMenuPracticeCompleteArray = [ this.fListbarPracticeComplete1,
			this.fListbarPracticeComplete2, this.fListbarPracticeComplete3,
			this.fListbarPracticeComplete4, this.fListbarPracticeComplete5,
			this.fListbarPracticeComplete6 ];
	mLongMenuSelectBarArray = [ this.fListBtnBar1, this.fListBtnBar2,
			this.fListBtnBar3, this.fListBtnBar4, this.fListBtnBar5,
			this.fListBtnBar6 ];

	mLongMenuCallTitleArray = [ this.fListTitleTxt1T, this.fListTitleTxt2T,
			this.fListTitleTxt3T, this.fListTitleTxt4T, this.fListTitleTxt5T,
			this.fListTitleTxt6T ];

	mLongMenuCallDeleteArray = [ this.fListBtnListDel1T,
			this.fListBtnListDel2T, this.fListBtnListDel3T,
			this.fListBtnListDel4T, this.fListBtnListDel5T,
			this.fListBtnListDel6T ];
	mLongMenuCallTestCompleteArray = [ this.fListbarTestComplete1T,
			this.fListbarTestComplete2T, this.fListbarTestComplete3T,
			this.fListbarTestComplete4T, this.fListbarTestComplete5T,
			this.fListbarTestComplete6T ];
	mLongMenuCallPracticeCompleteArray = [ this.fListbarPracticeComplete1T,
			this.fListbarPracticeComplete2T, this.fListbarPracticeComplete3T,
			this.fListbarPracticeComplete4T, this.fListbarPracticeComplete5T,
			this.fListbarPracticeComplete6T ];

	mLongMenuCallSelectBarArray = [ this.fListBtnBar1T, this.fListBtnBar2T,
			this.fListBtnBar3T, this.fListBtnBar4T, this.fListBtnBar5T,
			this.fListBtnBar6T ];

	mLongShowTextArray = [ this.fLongWordList11, this.fLongWordList21,
			this.fLongWordList31, this.fLongWordList41 ];
	mLongMeShowTextArray = [ this.fLongWordList12, this.fLongWordList22,
			this.fLongWordList32, this.fLongWordList42 ];

	this.fLongInputCursor.visible = false;
	this.fLongInputCursorAni.animations.play("PLAY");

	this.fListTapSelect41.index = 0;
	this.fListTapLoad41.index = 1;
	this.fListTapSelect241.index = 2;
	this.fListTapSelect341.index = 3;
	this.LongPracticeMenuTabVankInit();

	// 이벤트 카테고리 비활성화
//	this.fListTapSelect41.visible = false;
	// 이벤트 카테고리 활성화
	this.fListTapSelect41.visible = true;

	var hanData;
	for(var i=0;i<11;i++){
		hanData = this.game.cache.getText('han' + (i + 1));
		mLongPracticeHangulData[i] = hanData.split('\n');
	}

	var engData;
	for(var i=0;i<10;i++){
		engData = this.game.cache.getText('eng' + (i + 1));
		mLongPracticeEnglishData[i] = engData.split('\n');
	}

	var hanVankData;
//	한글 반크 타이틀 데이터 정방향 출력

	for(var i=0;i<mLongMenuHanVankTitleData.length;i++){
		hanVankData = this.game.cache.getText('kor_vank' + (i + 1));
		mLongPracticeHangulVankData[i] = hanVankData.split('\n');
	}

//	console.log(mLongPracticeHangulVankData);

	var engVankData;

	for(var i=0;i<mLongMenuEngVankTitleData.length;i++){
		engVankData = this.game.cache.getText('eng_vank' + (i + 1));
		mLongPracticeEnglishVankData[i] = engVankData.split('\n');
	}

	var hancContData;
	for(var i=0;i<8;i++){ // 개념원리
    hancContData = this.game.cache.getText('kor_cont' + (i + 1));
		mLongPracticeHangulContData[i] = hancContData.split('\n');
	}
};

// 긴글 연습 초기화 (와드2)
MenuV2.prototype.LongPracticeInit = function() {
	mGameStateType = this.gameConst.GameStateType.LONG;

	this.StageInfo();

	mLongMenuPage = mLongMenuSavePage;
	mLongMenuTitleSelect = mLongMenuSaveTitleSelect;

	this.LongPracticeMenuBarInit();

	mLongStartSec = new Date();
	mTajaGameTimeStartFlag = false;
	mIsTajaTypingFocus = false;
	mTajaGamePopupType = 0;
};

// 긴글 연습 초기화
MenuV2.prototype.LongPracticeMenuBarInit = function() {
	if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			if (that.mTajaContentsLongHanDatas === undefined) {
				mLongMenuTotalCount = 0;
			} else {
				mLongMenuTotalCount = that.mTajaContentsLongHanDatas.length;
			}
		} else {
			if (that.mTajaContentsLongEngDatas === undefined) {
				mLongMenuTotalCount = 0;
			} else {
				mLongMenuTotalCount = that.mTajaContentsLongEngDatas.length;
			}
		}

		this.LongPracticeMenuPage();
		this.LongPracticeMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
		for (var i = 0; i < mLongMenuCallTestCompleteArray.length; i++) {
			mLongMenuCallTestCompleteArray[i].visible = false;
		}

		for (var i = 0; i < mLongMenuCallPracticeCompleteArray.length; i++) {
			mLongMenuCallPracticeCompleteArray[i].visible = false;
		}

		for (var i = 0; i < mLongMenuCallDeleteArray.length; i++) {
			mLongMenuCallDeleteArray[i].visible = false;
		}

		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mLongMenuCallDatas = JSON.parse(localStorage
					.getItem('longHanLoadDatas'));
			if (mLongMenuCallDatas === null) {
				mLongMenuTotalCount = 0;
			} else {
				mLongMenuTotalCount = mLongMenuCallDatas.queue.length;
			}
		} else {
			mLongMenuCallDatas = JSON.parse(localStorage
					.getItem('longEngLoadDatas'));
			if (mLongMenuCallDatas === null) {
				mLongMenuTotalCount = 0;
			} else {
				mLongMenuTotalCount = mLongMenuCallDatas.queue.length;
			}
		}

		this.LongPracticeCallMenuPage();
		this.LongPracticeCallMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mLongMenuTotalCount = mLongMenuHanVankTitleData.length;
//			console.log("mLongMenuTotalCount ::::: " + mLongMenuTotalCount);
		} else {
			mLongMenuTotalCount = mLongMenuEngVankTitleData.length;
//			console.log("mLongMenuTotalCount ::::: " + mLongMenuTotalCount);
		}

		this.LongPracticeMenuPage();
		this.LongPracticeVankMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			mLongMenuTotalCount = mLongMenuHanContTitleData.length;
		} else {
			mLongMenuTotalCount = mLongMenuEngContTitleData.length;
		}

		this.LongPracticeMenuPage();
		this.LongPracticeConceptMenuBarGroup();
	}
};

// 긴글 업데이트 처리
MenuV2.prototype.LongGameProcess = function() { // 와드
	if (this.game.input.keyboard.isDown(Phaser.Keyboard.ESC)) {
		if (this.fStageInfo42.visible === true) {
			if (mTajaGamePopupType === 1) {
				this.LongStopButton();
			} else if (mTajaGamePopupType === 10) {
				this.TajaGameHanEngConfirm();
			} else {
				this.GoBackButton();
			}
		}

		mTajaGamePopupType = 0;
		this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	}

	// 통계에 따른 한글 자소/영문 알파벳 저장
	if (mLongIsProcess === true) {
		mLongIsProcess = false;
		if (this.fStageInfo42.visible === true) {
			if (this.fPopupGroup.visible === false) {
				this.playAudio(typing_key, mTajaSoundVolume, false);
			}
		}

		// 통계 처리
		this.LongTasuStatistics(mLongKeyboardUserCount);
	}

	if (mLongIsEndText === true) {
		return;
	}

	if (mLongIsChangeText === false) {
		this.LongProcessTime();
	}

	this.LongPracticeInfoProcess();
	if (mLongIsStepText === true) {
		// console.log(mLongTextData[mLongShowKeyArray[mLongKeyboardUserCount]]);
		// 더 이상 글이 없으면 마지막이라는 팝업창을 호출한다.
		if (mLongTextData[mLongShowKeyArray[mLongKeyboardUserCount]] === undefined) {
			mLongIsChangeText = true;
			mLongIsEndText = true;
		}

		this.LongPracticeInputProcess(mLongKeyboardUserCount - 1);

		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			for (var i = 0; i < mLongShowTextArray[mLongKeyboardUserCount - 1].text.length; i++) {
				if (mLongShowTextArray[mLongKeyboardUserCount - 1].text[i] === mLongInputText[i]
						|| mLongInputText[i] === undefined) {
					if (i > mLongInputText.length) {
						mLongShowTextArray[mLongKeyboardUserCount - 1]
								.addColor('#0066ff', i);
					} else {
						mLongShowTextArray[mLongKeyboardUserCount - 1]
								.addColor('#000000', i);
					}
				} else {
					mLongShowTextArray[mLongKeyboardUserCount - 1].addColor(
							'#ff0000', i);
				}
			}
		}

		mLongIsStepText = false;
		mLongInputText = "";
		userTajaTyping.value = "";

		this.fStage4SelectCursor.y += 86;
		this.fLongInputCursor.y += 86;
		this.fLongInputCursorAni.y += 86;
	}
	if (mLongIsChangeText === true) {
		// 더 이상 글이 없으면 마지막이라는 팝업창을 호출한다.
		if (mLongTextData[mLongShowKeyArray[3] + 1] === undefined) {
			mLongIsEndText = true;
		}

		if (this.fPopupGroup.visible === false) {
			this.LongPracticeInputProcess(mLongKeyboardUserCount - 1);
			if (mLongIsEndText !== true) {
				this.LongPracticeInfoProcess();
			}
		}

		if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 연습
																			// 모드
			if (parseInt(mLongAccuracyValue) >= 70
					&& this.fPopupGroup.visible !== true) { // 정확도가 70미만이면서
															// 팝업그룹의 visible이
															// true가 아니면
				if (mLongPracticsSelect !== this.gameConst.StotyType.STORYCALL) {// 불러온
																					// 파일이
																					// 아닌이상
					mTajaGameScore += 15;// 클라 점수를 추가
					mTajaGameSaveScore += 15;// 서버로 보낼 점수도 추가
				}
			}

			if (mIsTajaTypingFocus === false) {
				if (mLongIsEndText === true) {
					mTajaGamePopupType = 1;
					this.SetLongResultPopup(1, mLongNowHit,
							parseInt(mLongAccuracyValue), mTajaGameTime,
							this.LongContinueButton, this.LongStopButton);
					mLongAccuracyTotValue += parseInt(mLongAccuracyValue);
					this.LongCompleteSave(parseInt(mLongAccuracyTotValue
							/ (mLongShowPage + 1)));
					this.LongContinueSave(0, 0);
					// 통계 타자 속도 처리
					this.SetTajaSpeedStatistics(mLongNowHit);
					this.SetLongPracticeLog(1);
				} else {
					mTajaGamePopupType = 1;
					this.SetLongResultPopup(2, mLongNowHit,
							parseInt(mLongAccuracyValue), mTajaGameTime,
							this.LongContinueButton, this.LongStopButton);
					mLongAccuracyTotValue += parseInt(mLongAccuracyValue);
					this.LongContinueSave(mLongShowPage + 1,
							mLongAccuracyTotValue);
					// 통계 타자 속도 처리
					this.SetTajaSpeedStatistics(mLongNowHit);
				}
				this.TajaScoreDataSave();
			}

			mTajaGameTimeStartFlag = false;
			mIsTajaTypingFocus = true;
		} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																				// 검정
			if (mLongIsEndText === true) {
				this.LongTestResultPushIt(mLongNowHit,
						parseInt(mLongAccuracyValue));
				mTajaGamePopupType = 1;
				this.SetLongResultPopup(3, mLongNowHit,
						parseInt(mLongAccuracyValue), mTajaGameTime,
						this.LongTestSendMailButton, this.LongStopButton);
				if (parseInt(mLongAccuracyValue) >= 70) {
					if (mLongPracticsSelect !== this.gameConst.StotyType.STORYCALL) {
						mTajaGameScore += 40;
						mTajaGameSaveScore += 40;
					}
				}
				this.TajaScoreDataSave();
				this.LongCompleteSave(parseInt(mLongAccuracyValue));
				this.SetLongPracticeLog(1);
				// 통계 타자 속도 처리
				this.SetTajaSpeedStatistics(mLongNowHit);
			} else {
				// 다음 페이지로드
				this.LongGameContinueInit();
			}
		}
	} else {

	}

	if (mIsTajaTypingFocus === false) {
		this.LongPracticeInputProcess(mLongKeyboardUserCount);
	}

	this.LongLoadProcess();

	if (mLongIsBackSound === true && this.fStageInfo42.visible === true) {
		mLongIsBackSound = false;
		this.playAudio(typing_back, mTajaSoundVolume, false);
	}
};

// 긴글 연습 글쇠별 타수 통계 처리
MenuV2.prototype.LongTasuStatistics = function(aLongKeyboardUserCount) {
	if (mLongInputText.length <= 0 || aLongKeyboardUserCount > 3) {
		return;
	}

	var nowTime = new Date();
	mTajaGameStatTime = nowTime.getTime() - mTajaGameStatStartTime.getTime();
	mTajaGameStatStartTime = new Date();

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		var jaso = "";
		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			jaso = this.GetHangulToJaso(mLongInputText);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			jaso = this.GetHangulSebelToJaso(mLongInputText, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			jaso = this.GetHangulSebelToJaso(mLongInputText, 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			jaso = this.GetHangulSebelToJaso(mLongInputText, 0);
		}
		var jasoLength = jaso.length - 1;

		if (jasoLength < 0) {
			return;
		}

		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, jaso[jasoLength],
					mTajaGameKeyCode) === true) {
				mTajaHangulTasu[mTajaHangulType][i]++;
				break;
			}
		}

		if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
			jaso = this
					.GetHangulToJaso(mLongInputText[mLongInputText.length - 1]);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
			jaso = this.GetHangulSebelToJaso(
					mLongInputText[mLongInputText.length - 1], 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			jaso = this.GetHangulSebelToJaso(
					mLongInputText[mLongInputText.length - 1], 0);
		} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
			jaso = this.GetHangulSebelToJaso(
					mLongInputText[mLongInputText.length - 1], 0);
		}
		jasoLength = jaso.length - 1;
		var showText = mLongShowTextArray[aLongKeyboardUserCount].text;
		if (showText.length >= mLongInputText.length)
			if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
				wordJaso = this
						.GetHangulToJaso(mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length - 1]);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
				wordJaso = this
						.GetHangulSebelToJaso(
								mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length - 1],
								0);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				wordJaso = this
						.GetHangulSebelToJaso(
								mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length - 1],
								0);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
				wordJaso = this
						.GetHangulSebelToJaso(
								mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length - 1],
								0);
			} else
				wordJaso = "";

		if (wordJaso.length < jaso.length) {
			if (mLongShowTextArray[aLongKeyboardUserCount].text.length > mLongInputText.length) {
				var addJaso = "";
				if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
					addJaso = this
							.GetHangulToJaso(mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length]);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
					addJaso = this
							.GetHangulSebelToJaso(
									mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length],
									0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
					addJaso = this
							.GetHangulSebelToJaso(
									mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length],
									0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
					addJaso = this
							.GetHangulSebelToJaso(
									mLongShowTextArray[aLongKeyboardUserCount].text[mLongInputText.length],
									0);
				}
				wordJaso += addJaso[0];
			}
		}

		for (var i = 0; i < mTajaHangulJaso[mTajaHangulType].length; i++) {
			if (that.IsStatUserWordRightWrong(i, jaso[jasoLength],
					mTajaGameKeyCode) === true
					&& jaso[jasoLength] === wordJaso[jasoLength]) {
				mTajaHangulRight[mTajaHangulType][i]++;
				mTajaHangulSpeed[mTajaHangulType][i] += parseInt((1000 * 60)
						/ mTajaGameStatTime);
				for (var j = 0; j < mTajaHangulFingerJaso[mTajaHangulType].length; j++) {
					for (var k = 0; k < mTajaHangulFingerJaso[mTajaHangulType][j].length; k++) {
						if (that.IsStatUserWordFingerRightWrong(j, k,
								jaso[jasoLength], mTajaGameKeyCode) === true) {
							mTajaHangulFingerRight[mTajaHangulType][j]++;
							mTajaHangulFingerSpeed[mTajaHangulType][j] += parseInt((1000 * 60)
									/ mTajaGameStatTime);
							break;
						}
					}
				}
				break;
			}
		}
	} else {
		var jasoLength = mLongInputText.length - 1;
		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (mTajaEnglishAlphabet[mTajaEnglishType][i] === mLongInputText[jasoLength]
					.toUpperCase()) {
				mTajaEnglishTasu[mTajaEnglishType][i]++;
				break;
			}
		}

		for (var i = 0; i < mTajaEnglishAlphabet[mTajaEnglishType].length; i++) {
			if (jasoLength <= mLongShowTextArray[aLongKeyboardUserCount].text.length) {
				if (mTajaEnglishAlphabet[mTajaEnglishType][i] === mLongInputText[jasoLength]
						.toUpperCase()
						&& mLongInputText[jasoLength] === mLongShowTextArray[aLongKeyboardUserCount].text[jasoLength]) {
					mTajaEnglishRight[mTajaEnglishType][i]++;
					mTajaEnglishSpeed[mTajaEnglishType][i] += parseInt((1000 * 60)
							/ mTajaGameStatTime);
					for (var j = 0; j < mTajaEnglishFingerAlphabet[mTajaEnglishType].length; j++) {
						for (var k = 0; k < mTajaEnglishFingerAlphabet[mTajaEnglishType][j].length; k++) {
							if (mTajaEnglishFingerAlphabet[mTajaEnglishType][j][k] === mLongInputText[jasoLength]
									.toUpperCase()) {
								mTajaEnglishFingerRight[mTajaEnglishType][j]++;
								mTajaEnglishFingerSpeed[mTajaEnglishType][j] += parseInt((1000 * 60)
										/ mTajaGameStatTime);
								break;
							}
						}
					}
					break;
				}
			}
		}
	}
};

// 긴글 불러오기 처리
MenuV2.prototype.LongLoadProcess = function() {
	if (mLongdLoadErrorType === 1) {
		mLongdLoadErrorType = 0;
		this.LongPracticeMenuCallDelete();
		this.SetPublicPopup(1, "100K가 넘는 파일을 불러올 수 없습니다.", null,
				this.SetPublicExitPopup);
	} else if (mLongdLoadErrorType === 2) {
		mLongdLoadErrorType = 0;
		this.LongPracticeMenuCallDelete();
		this.SetPublicPopup(1, "TXT파일만 불러올 수 있습니다.", null,
				this.SetPublicExitPopup);
	} else if (mLongdLoadErrorType === 3) {
		mLongdLoadErrorType = 0;
		this.LongPracticeMenuCallDelete();
		this.SetPublicPopup(1, "1K가 안되는 파일을 불러올 수 없습니다.", null,
				this.SetPublicExitPopup);
	} else if (mLongdLoadErrorType === 4) {
		var check;
		mLongdLoadErrorType = 0;
		this.LongPracticeMenuCallDelete();

		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			check = /[a-zA-Z]/;
		} else {
			check = /[ㄱ-ㅎㅏ-ㅣ가-힣]/;
		}

		if (check.test(mLongdLoadContents) === true) {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				this.SetPublicPopup(1, "영문자가 포함된 파일은 불러올 수 없습니다.", null,
						this.SetPublicExitPopup);
			} else {
				this.SetPublicPopup(1, "한글 문자가 포함된 파일은 불러올 수 없습니다.", null,
						this.SetPublicExitPopup);
			}
		} else {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				this.LongLoadPushIt(mLongdLoadName, mLongdLoadContents,
						'longHanLoadDatas');
			} else {
				this.LongLoadPushIt(mLongdLoadName, mLongdLoadContents,
						'longEngLoadDatas');
			}

			this.LongPracticeInit();
		}
	}
};

// 현재 텍스트 처리
MenuV2.prototype.LongPracticeInputProcess = function(aLongKeyboardUserCount) {
	var inputWord = mLongInputText;

	if (aLongKeyboardUserCount < 0 || aLongKeyboardUserCount > 3) {
		// 여기 들어오면 망합니다.
		console.log("aLongKeyboardUserCount_LongPracticeInputProcess = "
				+ aLongKeyboardUserCount);
		return;
	}

	var ctx = mLongMeShowTextArray[aLongKeyboardUserCount].canvas
			.getContext("2d");
	var text = ctx.measureText(inputWord); // TextMetrics object
	if (text.width < 650) {
		mLongTextLimit = inputWord;
	}
	this.gameUtil.setText(mLongMeShowTextArray[aLongKeyboardUserCount], 0, 0,
			"left", "top", mLongTextLimit);
	this.fLongInputCursor.x = 272 + text.width;
	if (mGameStartAgent === this.gameConst.GameAgentType.CHROM) {
		this.fLongInputCursorAni.x = 273 + text.width;
	} else {
		this.fLongInputCursorAni.x = 273 + text.width
				+ (inputWord.length * 0.07);
	}

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		for (var i = 0; i < mLongShowTextArray[aLongKeyboardUserCount].text.length; i++) {
			if (mLongShowTextArray[aLongKeyboardUserCount].text[i] === inputWord[i]
					|| inputWord[i] === undefined || i >= inputWord.length - 1) {
				if (i > inputWord.length - 1) {
					mLongShowTextArray[aLongKeyboardUserCount].addColor(
							'#0066ff', i);
				} else if (i === inputWord.length - 1) {
					if (mLongShowTextArray[aLongKeyboardUserCount].text[i] === inputWord[i]) {
						mLongShowTextArray[aLongKeyboardUserCount].addColor(
								'#000000', i);
					} else {
						mLongShowTextArray[aLongKeyboardUserCount].addColor(
								'#0066ff', i);
					}
				} else {
					mLongShowTextArray[aLongKeyboardUserCount].addColor(
							'#000000', i);
				}
			} else {
				mLongShowTextArray[aLongKeyboardUserCount].addColor('#ff0000',
						i);
			}

			mLongMeShowTextArray[aLongKeyboardUserCount].addColor('#ffffff', i);
		}

		// 정확도 처리
		var rightCount = 0;
		for (var i = 0; i < mLongMeShowTextArray.length; i++) {
			if (mLongHangulJasoArray[i] === undefined)
				continue;
			var jaso = new Array();
			var jasoShow = "";
			if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
				jaso = this.GetHangulToJasoArray(mLongMeShowTextArray[i].text);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
				jasoShow = this.GetHangulSebelToJasoArray(
						mLongShowTextArray[i].text, 1);
				jaso = this.GetHangulSebelToJasoArray(
						mLongMeShowTextArray[i].text, 2);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
				jasoShow = this.GetHangulSebelToJasoArray(
						mLongShowTextArray[i].text, 1);
				jaso = this.GetHangulSebelToJasoArray(
						mLongMeShowTextArray[i].text, 2);
			} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
				jasoShow = this.GetHangulSebelToJasoArray(
						mLongShowTextArray[i].text, 1);
				jaso = this.GetHangulSebelToJasoArray(
						mLongMeShowTextArray[i].text, 2);
			}

			var rigthArray = 0;
			for (var j = 0; j < jaso.length; j++) {
				if (mLongHangulJasoArray[i][j] === undefined)
					continue;
				if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
					rigthArray = 0;
					for (var k = 0; k < mLongHangulJasoArray[i][j].length; k++) {
						if (jaso[j][k] === mLongHangulJasoArray[i][j][k]) {
							rigthArray++;
						} else if ((jaso.length - 1) !== j) {
							rigthArray = 0;
							break;
						} else if ((jaso.length - 1) === j
								&& jaso[j][k] != undefined) {
							rigthArray = 0;
							break;
						}
					}
					rightCount += rigthArray;
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390
						|| mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE
						|| mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
					rigthArray = 0;
					for (var k = 0; k < mLongHangulJasoArray[i][j].length; k++) {
						if ((jaso[j][k] === mLongHangulJasoArray[i][j][k])
								&& (mHangulSebelKeyCodeArray[j][k] === mHangulSebelMeKeyCodeArray[j][k])) {
							rigthArray++;
						} else if ((jaso.length - 1) !== i) {
							rigthArray = 0;
							break;
						} else if ((jaso.length - 1) === i
								&& jaso[j][k] != undefined) {
							rigthArray = 0;
							break;
						}
					}
					rightCount += rigthArray;
				}
			}
		}

		mLongRightJasoCount = rightCount;

		rightCount = 0;
		for (var i = 0; i < mLongMeShowTextArray.length; i++) {
			var meShow = mLongMeShowTextArray[i].text;
			for (var j = 0; j < meShow.length; j++) {
				if (mLongShowTextArray[i].text[j] === meShow[j]) {
					rightCount++;
				}
			}
		}

		mLongRightWordCount = rightCount;
	} else {
		for (var i = 0; i < mLongShowTextArray[aLongKeyboardUserCount].text.length; i++) {
			if (mLongShowTextArray[aLongKeyboardUserCount].text[i] === inputWord[i]
					|| inputWord[i] === undefined) {
				if (i >= inputWord.length) {
					mLongShowTextArray[aLongKeyboardUserCount].addColor(
							'#0066ff', i);
				} else {
					mLongShowTextArray[aLongKeyboardUserCount].addColor(
							'#000000', i);
				}
			} else {
				mLongShowTextArray[aLongKeyboardUserCount].addColor('#ff0000',
						i);
			}

			mLongMeShowTextArray[aLongKeyboardUserCount].addColor('#ffffff', i);
		}

		// 정확도 처리
		var rightCount = 0;
		for (var i = 0; i < mLongMeShowTextArray.length; i++) {
			var meShow = mLongMeShowTextArray[i].text.replace(/\s+$/, "");
			for (var j = 0; j < mLongMeShowTextArray[i].text.length; j++) {
				if (mLongShowTextArray[i].text[j] === meShow[j]) {
					rightCount++;
				}
			}
		}

		mLongRightWordCount = rightCount;
		mLongRightJasoCount = rightCount;
	}
};

// 정확도, 현재타수 정보 처리
MenuV2.prototype.LongPracticeInfoProcess = function() {
	// 정확도
	var meShow = 0;
	for (var i = 0; i < mLongMeShowTextArray.length; i++) {
		if (mLongMeShowTextArray[i].text.length >= mLongShowTextArray[i].text.length) {
			meShow += mLongShowTextArray[i].text.length;
		} else {
			meShow += mLongMeShowTextArray[i].text.length;
		}
	}

	if (mLongGameType === this.gameConst.LongGameType.LONGTEST) {
		meShow += mLongTotalWordCount;
	}

	if (meShow <= 0) {
		mLongAccuracyValue = 0;
	} else {
		if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) {
			mLongAccuracyValue = parseInt(mLongRightWordCount / meShow * 100);
		} else {
			mLongAccuracyValue = parseInt((mLongRightTotalWordCount + mLongRightWordCount)
					/ meShow * 100);
		}
	}

	if (mLongAccuracyValue < 0) {
		mLongAccuracyValue = 0;
	}
	this.gameUtil.setText(this.fProcessPersent42, 0, 0, "left", "top",
			mLongAccuracyValue + "%");

	var accuracyGauge = 0;
	if (meShow > 0) {
		if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) {
			accuracyGauge = mLongRightWordCount / meShow;
		} else {
			accuracyGauge = (mLongRightTotalWordCount + mLongRightWordCount)
					/ meShow;
		}
	}

	if (accuracyGauge > 1) {
		accuracyGauge = 1;
	} else if (accuracyGauge < 0) {
		accuracyGauge = 0;
	}
	this.fProcessGauge42.scale.x = accuracyGauge;

	// 현재타수 1초에 한번씩 처리
	if (mTajaGameTime > 0) {
		if (mLongSec === 999 || mLongUserWordCheck === true || mLongSec > 1) {
			if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) {
				mLongNowHit = parseInt(mLongRightJasoCount
						/ (mTajaGameTime / 1000) * 60);
			} else {
				mLongNowHit = parseInt((mLongRightTotalJasoCount + mLongRightJasoCount)
						/ (mTajaGameTime / 1000) * 60);
			}
			this.gameUtil.setText(this.fNow42, 0, 24, "left", "top",
					mLongNowHit);

			var nowGauge = mLongNowHit / 800;
			if (nowGauge > 1) {
				nowGauge = 1;
			}
			this.fNowGauge42.scale.x = nowGauge;
			mLongUserWordCheck = false;
			mLongSec = 0;
			mLongStartSec = new Date();
		} else {
			var nowTime = new Date();
			mLongSec = ((nowTime.getTime() - mLongStartSec.getTime()) / 1000);
		}
	}
};

// 긴글 연습 계속 버튼
MenuV2.prototype.LongContinueButton = function() {
	this.SetLongResultExitPopup();
	// 다음페이지로드
	this.LongGameContinueInit();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 연습 그만 버튼
MenuV2.prototype.LongStopButton = function() {
	if (mLongIsEndText === false) {
		this.SetLongPracticeLog(0);
	}

	this.SetLongResultExitPopup();

	mLongGameType = this.gameConst.LongGameType.LONGPRACTICE;
	mLongKeyboardUserCount = 0;
	mLongAccuracyTotValue = 0;
	mLongIsStepText = false;
	mLongIsEndText = false;
	mIsTajaTypingFocus = false;
	userTajaTyping.value = "";

	mLongIsChangeText = false;
	mTajaGameTime = 1;

	this.fStageInfo41.visible = true;
	this.fStageInfo42.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	this.LongPracticeMenuBarInit();

	mGameWordType = this.gameConst.GameWordType.NONE;

	this.playAudio(click_sound, mTajaSoundVolume, false);
	this.playAudio(typing_Music, mTajaSoundVolume, true);
};

// 긴글 타자검정 메일 보내기 버튼
MenuV2.prototype.LongTestSendMailButton = function() {
	this.SetLongResultExitPopup();

	this.SetTestResultSendPopup(mLongNowHit, parseInt(mLongAccuracyValue));

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 연습 글선택
MenuV2.prototype.LongPracticeMenuTabSelectInit = function() {
	this.fListTapSelect41.setFrames(1, 1, 1, 1);
	this.fListTapSelect41.inputEnabled = false;
	this.fListTapLoad41.setFrames(0, 0, 0, 0);
	this.fListTapLoad41.inputEnabled = true;
	this.fListTapSelect241.setFrames(0, 0, 0, 0);
	this.fListTapSelect241.inputEnabled = true;
	this.fListTapSelect341.setFrames(0, 0, 0, 0);
	this.fListTapSelect341.inputEnabled = true;
	this.fTapStorySelect.visible = true;
	this.fTapStoryCall.visible = false;
};

// 긴글 연습 불러온글
MenuV2.prototype.LongPracticeMenuTabCallInit = function() {
	this.fListTapSelect41.setFrames(0, 0, 0, 0);
	this.fListTapSelect41.inputEnabled = true;
	this.fListTapLoad41.setFrames(1, 1, 1, 1);
	this.fListTapLoad41.inputEnabled = false;
	this.fListTapSelect241.setFrames(0, 0, 0, 0);
	this.fListTapSelect241.inputEnabled = true;
	this.fListTapSelect341.setFrames(0, 0, 0, 0);
	this.fListTapSelect341.inputEnabled = true;
	this.fTapStorySelect.visible = false;
	this.fTapStoryCall.visible = true;
};

// 긴글 연습 글선택
MenuV2.prototype.LongPracticeMenuTabVankInit = function() {
	this.fListTapSelect241.setFrames(1, 1, 1, 1);
	this.fListTapSelect241.inputEnabled = false;
	this.fListTapSelect41.setFrames(0, 0, 0, 0);
	this.fListTapSelect41.inputEnabled = true;
	this.fListTapLoad41.setFrames(0, 0, 0, 0);
	this.fListTapLoad41.inputEnabled = true;
	this.fListTapSelect341.setFrames(0, 0, 0, 0);
	this.fListTapSelect341.inputEnabled = true;
	this.fTapStorySelect.visible = true;
	this.fTapStoryCall.visible = false;
};

// 긴글 연습 글선택
MenuV2.prototype.LongPracticeMenuTabConceptInit = function() {
	this.fListTapSelect341.setFrames(1, 1, 1, 1);
	this.fListTapSelect341.inputEnabled = false;
	this.fListTapSelect41.setFrames(0, 0, 0, 0);
	this.fListTapSelect41.inputEnabled = true;
	this.fListTapLoad41.setFrames(0, 0, 0, 0);
	this.fListTapLoad41.inputEnabled = true;
	this.fListTapSelect241.setFrames(0, 0, 0, 0);
	this.fListTapSelect241.inputEnabled = true;
	this.fTapStorySelect.visible = true;
	this.fTapStoryCall.visible = false;
};

// 긴글 연습 글선택/불러온글 탭 처리
MenuV2.prototype.LongPracticeMenuToggle = function(target) {
	// console.log('호출시기')
	if (target.index === 0) {
		this.LongPracticeMenuTabSelectInit();
	} else if (target.index === 1) {
		this.LongPracticeMenuTabCallInit();
	} else if (target.index === 2) {
		this.LongPracticeMenuTabVankInit();
	} else if (target.index === 3) {
		this.LongPracticeMenuTabConceptInit();
	}

	mLongPracticsSelect = target.index;
	mLongMenuSavePage = 1;// 와드
	mLongMenuSaveTitleSelect = 0;
	this.LongPracticeInit();

	this.playAudio(tog_sound, mTajaSoundVolume, false);
};

// 긴글 연습 선택 버튼 (눌렀을때)
MenuV2.prototype.LongPracticeMenuSelectButton = function() {
	if (mLongMenuTotalCount === 0)
		return;
	var continueValue = this.LongContinueRead();
	if (mLongIsContinue === true) {
		mLongPracticsSelect = continueValue[0];
		mLongMenuTitleSelect = continueValue[1];
		mLongShowPage = continueValue[2];
		mLongAccuracyTotValue = continueValue[3];
	} else {
		if (mLongPracticsSelect === continueValue[0]
				&& mLongMenuTitleSelect === continueValue[1]) {
			mLongShowPage = continueValue[2];
			mLongAccuracyTotValue = continueValue[3];
		} else {
			mLongShowPage = 0;
			mLongAccuracyTotValue = 0;
		}
	}

	mLongIsContinue = false;
	mLongGameType = that.gameConst.LongGameType.LONGPRACTICE;
	// 서버로 내려받는 긴글 데이터들

	if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
		mTajaGameTimeStartFlag = false;
		mTajaGameTime = 1;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			that.ajaxManager.netReqReadTajaContentsData(
					that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Idx,
					this.netReqReadTajaContentsDataSuccess,
					this.netReqReadTajaContentsDataFail);
			console.log("=====서버에서 받아온 모두의 타자 데이터 한글=====");
			console.log(that.mTajaContentsLongHanDatas);
		} else {
			that.ajaxManager.netReqReadTajaContentsData(
					that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Idx,
					this.netReqReadTajaContentsDataSuccess,
					this.netReqReadTajaContentsDataFail);
			console.log("=====서버에서 받아온 모두의 타자 데이터 영어=====");
			console.log(that.mTajaContentsLongEngDatas);
		}
	} else {
		this.fOptionBtn3.visible = true;
		this.fOptionBtn2.visible = false;

		this.fStageInfo41.visible = false;
		this.fStageInfo42.visible = true;

		this.LongGameStart();

		mGameWordType = this.gameConst.GameWordType.LONG;

		typing_Music.stop();
		this.playAudio(click_sound, mTajaSoundVolume, false);
	}
	console.log('긴글데이터 로드')
};

// 긴글타자 시작하고 데이터를 성공적으로 가져왔을때 와드
MenuV2.prototype.netReqReadTajaContentsDataSuccess = function(aData) {
	if (aData.data === null) {
		console.log("Data is Null!!!!!!!");
	} else {
		console.log("===== aData.data =====");
		console.log(aData.data);

		var textData = aData.data[0].Words.replace(/^\s+/, "");

		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			mLongPracticeHangulData[0] = textData;
		} else {
			mLongPracticeEnglishData[0] = textData;
		}

		mLongShowPage = 0;
		mLongAccuracyTotValue = 0;

		that.fOptionBtn3.visible = true;
		that.fOptionBtn2.visible = false;

		that.fStageInfo41.visible = false;
		that.fStageInfo42.visible = true;

		that.LongGameStart();

		mGameWordType = that.gameConst.GameWordType.LONG;

		typing_Music.stop();
		that.playAudio(click_sound, mTajaSoundVolume, false);
	}
}

//
MenuV2.prototype.netReqReadTajaContentsDataFail = function(aResult) {
	console.log("netReqReadTajaContentsDataFail = " + aResult);
}

// 한 페이지 클리어 시 다음 페이지 세팅 부분
MenuV2.prototype.LongGameContinueInit = function() {
	mLongShowPage++;

	for (var i = 0; i < mLongMeShowTextArray.length; i++) {
		mLongTotalWordCount += mLongMeShowTextArray[i].text.length;
	}

	mLongRightTotalWordCount += mLongRightWordCount;
	mLongRightTotalJasoCount += mLongRightJasoCount;

	for (var i = 0; i < mLongShowTextArray.length; i++) {
		mLongShowKeyArray[i] = mLongShowPage * 4 + i;
	}

	for (var i = 0; i < mLongShowTextArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			if (mLongTextData[mLongShowKeyArray[i]] !== undefined) {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", mLongTextData[mLongShowKeyArray[i]]);
				if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
					mLongHangulJasoArray[i] = this
							.GetHangulToJasoArray(mLongShowTextArray[i].text);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
					mLongHangulJasoArray[i] = this.GetHangulSebelToJasoArray(
							mLongShowTextArray[i].text, 0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
					mLongHangulJasoArray[i] = this.GetHangulSebelToJasoArray(
							mLongShowTextArray[i].text, 0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
					mLongHangulJasoArray[i] = this.GetHangulSebelToJasoArray(
							mLongShowTextArray[i].text, 0);
				}
			} else {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", "");
			}
		} else {
			if (mLongTextData[mLongShowKeyArray[i]] !== undefined) {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", mLongTextData[mLongShowKeyArray[i]]);
			} else {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", "");
			}
		}

		for (var j = 0; j < mLongShowTextArray[i].text.length; j++) {
			mLongShowTextArray[i].addColor('#0066ff', j);
		}
	}

	for (var i = 0; i < mLongMeShowTextArray.length; i++) {
		this.gameUtil.setText(mLongMeShowTextArray[i], 0, 0, "left", "top", "");
	}

	this.fStage4SelectCursor.y = 229;
	this.fLongInputCursor.y = 237;
	this.fLongInputCursorAni.y = 236;

	mLongSec = 999;
	mLongKeyboardUserCount = 0;
	mLongIsStepText = false;
	mLongIsEndText = false;
	mIsTajaTypingFocus = false;
	userTajaTyping.value = "";
	mLongInputText = "";

	mLongIsChangeText = false;

	this.LongGameShowPage();
};

// 긴글 타자 검정 버튼
MenuV2.prototype.LongPracticeMenuTestButton = function() {
	if (mLongMenuTotalCount === 0)
		return;

	mLongGameType = this.gameConst.LongGameType.LONGTEST;

	if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
		mTajaGameTimeStartFlag = false;
		mTajaGameTime = 1;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			that.ajaxManager.netReqReadTajaContentsData(
					that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Idx,
					this.netReqReadTajaContentsDataSuccess,
					this.netReqReadTajaContentsDataFail);
		} else {
			that.ajaxManager.netReqReadTajaContentsData(
					that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Idx,
					this.netReqReadTajaContentsDataSuccess,
					this.netReqReadTajaContentsDataFail);
		}
	} else {
		mLongShowPage = 0;
		mLongAccuracyTotValue = 0;

		this.fOptionBtn3.visible = true;
		this.fOptionBtn2.visible = false;

		this.fStageInfo41.visible = false;
		this.fStageInfo42.visible = true;

		this.LongGameStart();

		mGameWordType = this.gameConst.GameWordType.LONG;

		typing_Music.stop();
		this.playAudio(click_sound, mTajaSoundVolume, false);
	}
};

// 긴글 타자 검정 결과 버튼
MenuV2.prototype.LongPracticeMenuTestResultButton = function() {
	this.SetTestResultPopup();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글연습결과 push it
MenuV2.prototype.LongTestResultPushIt = function(speed, acc) {
	var titleText = "";
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			titleText = that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			// titleText =
			// that.mTajaContentsLongHanVankData[mLongMenuTitleSelect].Title;
			titleText = mLongMenuHanVankTitleData[mLongMenuTitleSelect];
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			titleText = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
			console.log('storycall????', titleText);
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			titleText = mLongMenuHanContTitleData[mLongMenuTitleSelect];
		}
	} else {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			titleText = that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			if (mLongMenuEngVankTitleData[mLongMenuTitleSelect].length <= 45) {
				titleText = mLongMenuEngVankTitleData[mLongMenuTitleSelect];
			} else {
				titleText = mLongMenuEngVankTitleData[mLongMenuTitleSelect]
						.slice(0, 45)
						+ "...";
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			titleText = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			titleText = mLongMenuEngContTitleData[mLongMenuTitleSelect];
		}
	}

	var date = new Date();
	var dateSave = this.LongTestResultLeadingZeros(date.getFullYear(), 4) + "-"
			+ this.LongTestResultLeadingZeros((date.getMonth() + 1), 2) + "-"
			+ this.LongTestResultLeadingZeros(date.getDate(), 2);

	that.ajaxManager.netReqWriteTestResult(that.gameConst.uuid, titleText,
			speed, acc, (mLongShowPage + 1), mLongTotalShowPage, dateSave,
			this.netReqWriteTestResultSuccess, this.netReqWriteTestResultFail);
};

// 검정 결과 저장 성공
MenuV2.prototype.netReqWriteTestResultSuccess = function(aData) {
	console.log("netReqWriteTestResultSuccess = " + aData.result);
};

// 검정 결과 저장 실패
MenuV2.prototype.netReqWriteTestResultFail = function(aResult) {
	console.log("netReqWriteTestResultFail = " + aResult);
};

//
MenuV2.prototype.LongTestResultLeadingZeros = function(n, digits) {
	var zero = '';
	var len = n.toString();

	if (len.length < digits) {
		for (var i = 0; i < digits - len.length; i++)
			zero += '0';
	}
	return zero + len;
};

var inputCall;
// 긴글 타자 불러오기 초기화
MenuV2.prototype.LongPracticeMenuCallInit = function() {
	inputCall = document.createElement("input");

	inputCall.setAttribute("type", "file");
	inputCall.setAttribute("accept", ".txt");
	inputCall.style.display = 'none';

	inputCall.onchange = function(event) {
		processFile(event.target.files[0]);
	};

	document.body.appendChild(inputCall);
};

// 긴글 타자 불러오기 삭제
MenuV2.prototype.LongPracticeMenuCallDelete = function() {
	document.body.removeChild(inputCall);
};

// 긴글 타자 불러오기 버튼
MenuV2.prototype.LongPracticeMenuCallButton = function() {
	this.playAudio(click_sound, mTajaSoundVolume, false);
	this.LongPracticeMenuCallInit();

	inputCall.click();
};

// 긴글 타자 불러오기 기능
function processFile(file) {
	if (file.size > 100000) {
		mLongdLoadErrorType = 1;
		return;
	}
	if (file.type !== "text/plain") {
		mLongdLoadErrorType = 2;
		return;
	}
	if (file.size < 1) {
		mLongdLoadErrorType = 3;
		return;
	}

	var reader = new FileReader();
	reader.onload = function() {
		mLongdLoadErrorType = 4;
		mLongdLoadName = file.name;
		mLongdLoadContents = reader.result;
	};
	reader.readAsText(file, "utf-8");
}

// 불러온 데이터 로컬스트로지에 pop
MenuV2.prototype.LongLoadPopIt = function(dataName) {
	var restoredData = JSON.parse(localStorage.getItem(dataName));
	restoredData.queue.shift();
	localStorage.setItem(dataName, JSON.stringify(restoredData));
};

// 불러온 데이터 로컬스트로지에 push
MenuV2.prototype.LongLoadPushIt = function(name, contents, dataName) {
	var restoredData = JSON.parse(localStorage.getItem(dataName));
	if (restoredData === null) {
		localStorage.setItem(dataName, JSON.stringify(mLongLoadDatas));
		this.LongLoadPopIt(dataName);
		restoredData = JSON.parse(localStorage.getItem(dataName));
	}

	if (restoredData.queue.length >= 10) {
		this.SetPublicPopup(1, "10개 이상은 등록하실 수 없습니다.", null,
				this.SetPublicExitPopup);
		return;
	}

	var loadName = name.substring(0, name.length - 4);

	// 제목 길이가 20이 넘어가면 20자까지만 보여주고 ...을 뒤에 붙인다.
	if (loadName.length > 20) {
		loadName = loadName.substring(0, 20) + "...";
	}

	restoredData.queue.push({
		name : loadName,
		contents : contents
	});

	localStorage.setItem(dataName, JSON.stringify(restoredData));
};

// 긴글 타자 제목변경 버튼
MenuV2.prototype.LongPracticeMenuTitleChangeButton = function() {
	// 쿼티/두벌식으로 입력기를 변경 처리
	document.getElementById("userTajaTyping").style.imeMode = "auto";
	userTajaTyping.blur();

	setTimeout(function() {
		ohiChange('Ko', '2-KSX5002');
		ohiChange('En', 'qwerty');
	}, 100);

	this.SetChangeTitlePopup(mLongMenuTitleSelect);

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 메뉴 왼쪽 이동 버튼
MenuV2.prototype.LongPracticeMenuLeftButton = function() {
	mLongMenuPage--;
	if (mLongMenuPage < 1) {
		mLongMenuPage = 1;
	}

	if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) { // 이벤트
																		// 글선택
		this.LongPracticeMenuPage();
		this.LongPracticeMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) { // 불러온글
		this.LongPracticeCallMenuPage();
		this.LongPracticeCallMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) { // 반크
																				// 글선택
		this.LongPracticeMenuPage();
		this.LongPracticeVankMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) { // 개념원리
																				// 글선택
		this.LongPracticeMenuPage();
		this.LongPracticeConceptMenuBarGroup();
	}

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 메뉴 오른쪽 이동 버튼
MenuV2.prototype.LongPracticeMenuRightButton = function() {
	mLongMenuPage++;
	if (mLongMenuPage > mLongMenuTotalPage) {
		mLongMenuPage = mLongMenuTotalPage;
	}

	if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) { // 이벤트
																		// 글선택
		this.LongPracticeMenuPage();
		this.LongPracticeMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) { // 불러온글
		this.LongPracticeCallMenuPage();
		this.LongPracticeCallMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) { // 반크
																				// 글선택
		this.LongPracticeMenuPage();
		this.LongPracticeVankMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) { // 개념원리
																				// 글선택
		this.LongPracticeMenuPage();
		this.LongPracticeConceptMenuBarGroup();
	}

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 메뉴 타이틀 선택 버튼
MenuV2.prototype.LongPracticeMenuTitleButton = function(target) {
	if (mLongMenuTitleSelect === target.index) {
		mLongIsContinue = false;
		this.LongPracticeMenuSelectButton();
		return;
	}

	mLongMenuTitleSelect = target.index;

	if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) { // 이벤트
																		// 글선택
		this.LongPracticeMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) { // 불러온글
		this.LongPracticeCallMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) { // 반크
																				// 글선택
		this.LongPracticeVankMenuBarGroup();
	} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) { // 개념원리
																				// 글선택
		this.LongPracticeConceptMenuBarGroup();
	}

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 메뉴 이어하기 확인
MenuV2.prototype.ContinueConfirm = function() {
	this.SetPublicExitPopup();

	mLongIsContinue = true;
	this.LongPracticeMenuSelectButton();
};

// 긴글 메뉴 이어하기 취소
MenuV2.prototype.ContinueCancel = function() {
	this.SetPublicExitPopup();
	this.LongContinueSave(0, 0);
	mLongShowPage = 0;
	mLongAccuracyTotValue = 0;
};

// 긴글 메뉴 타이틀 지우기 버튼
MenuV2.prototype.LongPracticeMenuDeleteButton = function(target) {
	this.SetPublicPopup(2, "선택한 글을 지울까요?", this.SetLongMenuDeleteButton,
			this.SetPublicExitPopup);
	mLongMenuDeleteIndex = target.index;

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 메뉴 타이틀 지우기 확인 버튼
MenuV2.prototype.SetLongMenuDeleteButton = function() {
	this.SetPublicExitPopup();
	var dataName = '';
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		dataName = 'longHanLoadDatas';
	} else {
		dataName = 'longEngLoadDatas';
	}

	var restoredDatas = JSON.parse(localStorage.getItem(dataName));
	restoredDatas.queue.splice(mLongMenuDeleteIndex, 1);
	localStorage.setItem(dataName, JSON.stringify(restoredDatas));
	this.LongPracticeInit();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 긴글 메뉴 선택 페이지 표시
MenuV2.prototype.LongPracticeMenuPage = function() {
	if (mLongMenuTotalCount === 0) {
		mLongMenuTotalPage = 1; // 전체 페이지 수
	} else {
		mLongMenuTotalPage = Math.ceil(mLongMenuTotalCount
				/ mLongMenuMaxListBar); // 전체 페이지 수
	}

	this.gameUtil.setText(this.fPageNum41, 0, 30, "center", "middle",
			mLongMenuPage.toString() + "/" + mLongMenuTotalPage.toString()); // 페이지

	// 페이지 이동 왼쪽 버튼
	this.fListBtnLeftArrow41.visible = true;
	if (mLongMenuPage === 1) {
		this.fListBtnLeftArrow41.visible = false;
	}

	// 페이지 이동 오른쪽 버튼
	this.fListBtnRightArrow41.visible = true;
	if (mLongMenuPage === mLongMenuTotalPage) {
		this.fListBtnRightArrow41.visible = false;
	}
};

// 긴글 메뉴 리스트 내용 처리
MenuV2.prototype.LongPracticeMenuBarGroup = function() {
	var pageIndex = (mLongMenuPage - 1) * mLongMenuMaxListBar; // 현재 페이지 시작 인덱스
	var pageTotal = mLongMenuMaxListBar; // 화면에 출력하는 리스트 갯수
	var complete = 0;

	// 화면에 출력하는 리스트가 6개 보다 작을 경우 몇개 출력해야하는지 계산한다.
	if (mLongMenuTotalCount - pageIndex < mLongMenuMaxListBar) {
		pageTotal = mLongMenuTotalCount - pageIndex;
	}

	// 화면에 출력한 리스트
	for (var i = 0; i < mLongMenuMaxListBar; i++) {
		// 화면에 출력할 리스트가 6개 보다 작을 경우 빈 공간으로 채운다.
		if (pageTotal > i) {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				this.LongPracticeMenuBar(mLongMenuTitleArray[i],
						that.mTajaContentsLongHanDatas[pageIndex + i].Title);
			} else {
				this.LongPracticeMenuBar(mLongMenuTitleArray[i],
						that.mTajaContentsLongEngDatas[pageIndex + i].Title);
			}
			mLongMenuSelectBarArray[i].index = pageIndex + i;
			if ((pageIndex + i) === mLongMenuTitleSelect) {
				mLongMenuSelectBarArray[i].setFrames(1, 1, 1, 1);
				mLongMenuSelectBarArray[i].inputEnabled = true;
			} else {
				mLongMenuSelectBarArray[i].setFrames(2, 0, 0, 0);
				mLongMenuSelectBarArray[i].inputEnabled = true;
			}
		} else {
			mLongMenuSelectBarArray[i].setFrames(2, 0, 0, 0);
			mLongMenuSelectBarArray[i].inputEnabled = false;
			this.LongPracticeMenuBar(mLongMenuTitleArray[i], "");
		}
	}

	// 이벤트 컨텐츠가 없는 경우 처리
	if (pageTotal <= 0) {
		this.LongPracticeMenuBar(mLongMenuTitleArray[0], "모두의 타자 컨텐츠가 없습니다.");
	}
  // 의도적인 연습완료 버튼 비활성
	for(var i=0;i<mLongMenuTestCompleteArray.length;i++){
		mLongMenuTestCompleteArray[i].visible = false;
	}
  // 의도적인 검증완료 버튼 비활성
	for(var i=0;i<mLongMenuPracticeCompleteArray.length;i++){
		mLongMenuPracticeCompleteArray[i].visible = false;
	}

	// fVankUserStepSet 긴글연습 제목 텍스트오브젝트
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			this.fVankUserStepSet.text = that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			this.fVankUserStepSet.text = mLongMenuHanVankTitleData[mLongMenuTitleSelect];
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			this.fVankUserStepSet.text = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			this.fVankUserStepSet.text = mLongMenuHanContTitleData[mLongMenuTitleSelect];
		}
	} else {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			this.fVankUserStepSet.text = that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			if (mLongMenuEngVankTitleData[mLongMenuTitleSelect].length <= 45) {
				this.fVankUserStepSet.text = mLongMenuEngVankTitleData[mLongMenuTitleSelect];
			} else {
				this.fVankUserStepSet.text = mLongMenuEngVankTitleData[mLongMenuTitleSelect]
						.slice(0, 45)
						+ "...";
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			this.fVankUserStepSet.text = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			this.fVankUserStepSet.text = mLongMenuEngContTitleData[mLongMenuTitleSelect];
		}
	}
};

// 긴글 메뉴 불러온글 선택 페이지 표시
MenuV2.prototype.LongPracticeCallMenuPage = function() {
	if (mLongMenuTotalCount === 0) {
		mLongMenuTotalPage = 1; // 전체 페이지 수
	} else {
		mLongMenuTotalPage = Math.ceil(mLongMenuTotalCount
				/ mLongMenuMaxListBar); // 전체 페이지 수
	}

	this.gameUtil.setText(this.fPageNum41T, 0, 30, "center", "middle",
			mLongMenuPage.toString() + "/" + mLongMenuTotalPage.toString()); // 페이지

	// 페이지 이동 왼쪽 버튼
	this.fListBtnLeftArrow41T.visible = true;
	if (mLongMenuPage === 1) {
		this.fListBtnLeftArrow41T.visible = false;
	}

	// 페이지 이동 오른쪽 버튼
	this.fListBtnRightArrow41T.visible = true;
	if (mLongMenuPage === mLongMenuTotalPage) {
		this.fListBtnRightArrow41T.visible = false;
	}
};

// 긴글 메뉴 불러온글 리스트 내용 처리
MenuV2.prototype.LongPracticeCallMenuBarGroup = function() {
	var pageIndex = (mLongMenuPage - 1) * mLongMenuMaxListBar; // 현재 페이지 시작 인덱스
	var pageTotal = mLongMenuMaxListBar; // 화면에 출력하는 리스트 갯수
	// 화면에 출력하는 리스트가 6개 보다 작을 경우 몇개 출력해야하는지 계산한다.
	if (mLongMenuTotalCount - pageIndex < mLongMenuMaxListBar) {
		pageTotal = mLongMenuTotalCount - pageIndex;
	}

	// 화면에 출력한 리스트
	for (var i = 0; i < mLongMenuMaxListBar; i++) {
		// 화면에 출력할 리스트가 6개 보다 작을 경우 빈 공간으로 채운다.
		if (pageTotal > i) {
			this.LongPracticeMenuBar(mLongMenuCallTitleArray[i],
					mLongMenuCallDatas.queue[pageIndex + i].name);
			mLongMenuCallSelectBarArray[i].index = pageIndex + i;
			if ((pageIndex + i) === mLongMenuTitleSelect) {
				mLongMenuCallSelectBarArray[i].setFrames(1, 1, 1, 1);
				mLongMenuCallSelectBarArray[i].inputEnabled = true;
			} else {
				mLongMenuCallSelectBarArray[i].setFrames(2, 0, 0, 0);
				mLongMenuCallSelectBarArray[i].inputEnabled = true;
			}

			mLongMenuCallDeleteArray[i].index = pageIndex + i;
			mLongMenuCallDeleteArray[i].visible = true;
		} else {
			mLongMenuCallDeleteArray[i].index = pageIndex + i;
			mLongMenuCallDeleteArray[i].visible = false;
			mLongMenuCallSelectBarArray[i].setFrames(2, 0, 0, 0);
			mLongMenuCallSelectBarArray[i].inputEnabled = false;
			this.LongPracticeMenuBar(mLongMenuCallTitleArray[i], "");
		}
	}
};

// 긴글 반크 메뉴 리스트 내용 처리
MenuV2.prototype.LongPracticeVankMenuBarGroup = function() {
	var pageIndex = (mLongMenuPage - 1) * mLongMenuMaxListBar; // 현재 페이지 시작 인덱스
	var pageTotal = mLongMenuMaxListBar; // 화면에 출력하는 리스트 갯수
	var complete = 0;

	// 화면에 출력하는 리스트가 6개 보다 작을 경우 몇개 출력해야하는지 계산한다.
	if (mLongMenuTotalCount - pageIndex < mLongMenuMaxListBar) {
		pageTotal = mLongMenuTotalCount - pageIndex;
	}
	// 화면에 출력한 리스트
	for (var i = 0; i < mLongMenuMaxListBar; i++) {
		// 화면에 출력할 리스트가 6개 보다 작을 경우 빈 공간으로 채운다.
		if (pageTotal > i) {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				this.LongPracticeMenuBar(mLongMenuTitleArray[i],
						mLongMenuHanVankTitleData[pageIndex + i]);
			} else {
				if (parseInt(mLongEngVankTestCompleteSave[mTajaEnglishType][pageIndex
						+ i]) === 1
						|| parseInt(mLongEngVankCompleteSave[mTajaEnglishType][pageIndex
								+ i]) === 1) {
					this.LongPracticeMenuBar(mLongMenuTitleArray[i],
              mLongMenuEngVankTitleCompleteData[pageIndex + i]);
				} else {// 와드
					this.LongPracticeMenuBar(mLongMenuTitleArray[i],
							mLongMenuEngVankTitleData[pageIndex + i]);
				}
			}
			mLongMenuSelectBarArray[i].index = pageIndex + i;
			if ((pageIndex + i) === mLongMenuTitleSelect) {
				mLongMenuSelectBarArray[i].setFrames(1, 1, 1, 1);
				mLongMenuSelectBarArray[i].inputEnabled = true;
			} else {
				mLongMenuSelectBarArray[i].setFrames(2, 0, 0, 0);
				mLongMenuSelectBarArray[i].inputEnabled = true;
			}
		} else {
			mLongMenuSelectBarArray[i].setFrames(2, 0, 0, 0);
			mLongMenuSelectBarArray[i].inputEnabled = false;
			this.LongPracticeMenuBar(mLongMenuTitleArray[i], "");
		}
	}
	// 반크 검정 버튼 활성부분
	for (var i = 0; i < mLongMenuTestCompleteArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			complete = parseInt(mLongHanVankTestCompleteSave[mTajaHangulType][pageIndex
					+ i]);
		} else {
			complete = parseInt(mLongEngVankTestCompleteSave[mTajaEnglishType][pageIndex
					+ i]);
		}

		if (complete === 1) {
			mLongMenuTestCompleteArray[i].visible = true;
		} else {
			mLongMenuTestCompleteArray[i].visible = false;
		}
	}
	// 반크 연습버튼 활성부분
	for (var i = 0; i < mLongMenuPracticeCompleteArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			complete = parseInt(mLongHanVankCompleteSave[mTajaHangulType][pageIndex
					+ i]);
		} else {
			complete = parseInt(mLongEngVankCompleteSave[mTajaEnglishType][pageIndex
					+ i]);
		}

		if (complete === 1) {
			mLongMenuPracticeCompleteArray[i].visible = true;
		} else {
			mLongMenuPracticeCompleteArray[i].visible = false;
		}
	}

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			this.fVankUserStepSet.text = that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			this.fVankUserStepSet.text = mLongMenuHanVankTitleData[mLongMenuTitleSelect];
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			this.fVankUserStepSet.text = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			this.fVankUserStepSet.text = mLongMenuHanContTitleData[mLongMenuTitleSelect];
		}
	} else {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			this.fVankUserStepSet.text = that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			if (mLongMenuEngVankTitleData[mLongMenuTitleSelect].length <= 38) {
				this.fVankUserStepSet.text = mLongMenuEngVankTitleData[mLongMenuTitleSelect];
			} else {
				this.fVankUserStepSet.text = mLongMenuEngVankTitleData[mLongMenuTitleSelect]
						.slice(0, 38)
						+ "...";
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			this.fVankUserStepSet.text = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			this.fVankUserStepSet.text = mLongMenuEngContTitleData[mLongMenuTitleSelect];
		}
	}
};

// 개념원리 글 메뉴 리스트 내용 처리
MenuV2.prototype.LongPracticeConceptMenuBarGroup = function() {
	var pageIndex = (mLongMenuPage - 1) * mLongMenuMaxListBar; // 현재 페이지 시작 인덱스
	var pageTotal = mLongMenuMaxListBar; // 화면에 출력하는 리스트 갯수
	var complete = 0;

	// 화면에 출력하는 리스트가 6개 보다 작을 경우 몇개 출력해야하는지 계산한다.
	if (mLongMenuTotalCount - pageIndex < mLongMenuMaxListBar) {
		pageTotal = mLongMenuTotalCount - pageIndex;
	}

	// 화면에 출력한 리스트
	for (var i = 0; i < mLongMenuMaxListBar; i++) {
		// 화면에 출력할 리스트가 6개 보다 작을 경우 빈 공간으로 채운다.
		if (pageTotal > i) {
			if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
				this.LongPracticeMenuBar(mLongMenuTitleArray[i],
						mLongMenuHanContTitleData[pageIndex + i]);
			} else {
				this.LongPracticeMenuBar(mLongMenuTitleArray[i],
						mLongMenuEngContTitleData[pageIndex + i]);
			}
			mLongMenuSelectBarArray[i].index = pageIndex + i;
			if ((pageIndex + i) === mLongMenuTitleSelect) {
				mLongMenuSelectBarArray[i].setFrames(1, 1, 1, 1);
				mLongMenuSelectBarArray[i].inputEnabled = true;
			} else {
				mLongMenuSelectBarArray[i].setFrames(2, 0, 0, 0);
				mLongMenuSelectBarArray[i].inputEnabled = true;
			}
		} else {
			mLongMenuSelectBarArray[i].setFrames(2, 0, 0, 0);
			mLongMenuSelectBarArray[i].inputEnabled = false;
			this.LongPracticeMenuBar(mLongMenuTitleArray[i], "");
		}
	}

	for (var i = 0; i < mLongMenuTestCompleteArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			complete = parseInt(mLongHanContTestCompleteSave[mTajaHangulType][pageIndex
					+ i]);
		} else {
			complete = parseInt(mLongEngContTestCompleteSave[mTajaEnglishType][pageIndex
					+ i]);
		}

		if (complete === 1) {
			mLongMenuTestCompleteArray[i].visible = true;
		} else {
			mLongMenuTestCompleteArray[i].visible = false;
		}
	}

	for (var i = 0; i < mLongMenuPracticeCompleteArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			complete = parseInt(mLongHanContCompleteSave[mTajaHangulType][pageIndex
					+ i]);
		} else {
			complete = parseInt(mLongEngContCompleteSave[mTajaEnglishType][pageIndex
					+ i]);
		}

		if (complete === 1) {
			mLongMenuPracticeCompleteArray[i].visible = true;
		} else {
			mLongMenuPracticeCompleteArray[i].visible = false;
		}
	}

	// // 영어일 경우 컨텐츠가 없으므로 비활성화 처리
	// if(mTajaLanguageType === this.gameConst.LanguageType.ENGLISH){
	// mLongMenuSelectBarArray[0].setFrames(2, 0, 0, 0);
	// mLongMenuSelectBarArray[0].inputEnabled = false;
	// }

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			this.fVankUserStepSet.text = that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			this.fVankUserStepSet.text = mLongMenuHanVankTitleData[mLongMenuTitleSelect];
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			this.fVankUserStepSet.text = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			this.fVankUserStepSet.text = mLongMenuHanContTitleData[mLongMenuTitleSelect];
		}
	} else {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			this.fVankUserStepSet.text = that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			this.fVankUserStepSet.text = mLongMenuEngVankTitleData[mLongMenuTitleSelect];
			if (mLongMenuEngVankTitleData[mLongMenuTitleSelect].length <= 45) {
				this.fVankUserStepSet.text = mLongMenuEngVankTitleData[mLongMenuTitleSelect];
			} else {
				this.fVankUserStepSet.text = mLongMenuEngVankTitleData[mLongMenuTitleSelect]
						.slice(0, 45)
						+ "...";
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			this.fVankUserStepSet.text = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			this.fVankUserStepSet.text = mLongMenuEngContTitleData[mLongMenuTitleSelect];
		}
	}
};

// 긴글 메뉴 타이틀 처리
MenuV2.prototype.LongPracticeMenuBar = function(aName, aTitleText) {
	this.gameUtil.setText(aName, 0, 28, "left", "middle", aTitleText); // 타이틀
};

// 한줄이 40자가 넘어가면 줄을 나누어서 다시 저장
MenuV2.prototype.LongGameTextDivLine = function() {
	var textData;
	var saveData = [];
	var tempData = "";
	var index = 0;

	mLongTextData = [];

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {// 모두의타자
			textData = mLongPracticeHangulData[0];
			// 임시주석처리 20200221
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {// 반크
			textData = mLongPracticeHangulVankData[mLongMenuTitleSelect];
			// console.log('이 데이터는 뭔데', mLongShowPage);
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {// 개념원리
			textData = mLongPracticeHangulContData[mLongMenuTitleSelect];
		} else {
			textData = mLongMenuCallDatas.queue[mLongMenuTitleSelect].contents;
			textData = textData.replace(/(^\s*)/g, '');
		}
	} else {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			textData = mLongPracticeEnglishData[0];
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			textData = mLongPracticeEnglishVankData[mLongMenuTitleSelect];
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			textData = mLongPracticeEnglishContData[mLongMenuTitleSelect];
		} else {
			textData = mLongMenuCallDatas.queue[mLongMenuTitleSelect].contents;
			textData = textData.replace(/(^\s*)/g, '');
		}
	}

	if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL
			|| mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT
			/* || mLongPracticsSelect === this.gameConst.StotyType.STORYVANK */
			/*|| mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT*/) {
		index = 0;
		// console.log(textData);
		for (var i = 0; i < textData.length; i++) {
			if (textData[i] !== '\n' && textData[i] !== '\r\n'
					&& textData[i] !== '\n\t' && textData[i] !== '\n\r') {
				tempData += textData[i];
			} else {
				saveData[index] = tempData;
				tempData = "";
				index++;
			}
		}

		if (tempData.length > 0) {
			saveData[index] = tempData;
		}
		// console.log(saveData);
		textData = saveData;

	}

	var checkStr = /[\r|\t|\r\n|\r\n\t|\n|\r\t|\n\t|\n\r]/g;
	var str = "";
	index = 0;
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		var ctx = mLongShowTextArray[0].canvas.getContext("2d");
		var text = 0;
		var lenArray = 0;
		var inputWord = "";
		var checkWord = "";

		for (var i = 0; i < textData.length; i++) {
			lenArray = 0;
			inputWord = textData[i];
			text = ctx.measureText(inputWord); // TextMetrics object
			if (text.width < 600) {
				str = textData[i];
				str = str.replace(checkStr, ' ');
				mLongTextData[index] = str;
				index++;
			} else {
				for (var j = lenArray + 1; j < textData[i].length; j++) {
					inputWord = textData[i].substring(lenArray, j);
					text = ctx.measureText(inputWord); // TextMetrics object
					if (text.width > 600) {
						var wordLenArray = inputWord.lastIndexOf(' ') + 1;
						if (wordLenArray !== 0) {
							inputWord = textData[i].substring(lenArray,
									lenArray + wordLenArray);
							lenArray += wordLenArray;
						} else {
							lenArray = j;
						}

						str = inputWord;
						mLongTextData[index] = str;
						index++;
					}
				}

				if (lenArray < textData[i].length) {
					inputWord = textData[i].substring(lenArray,
							textData[i].length);
					str = inputWord;
					str = str.replace(checkStr, ' ');
					mLongTextData[index] = str;
					index++;
				}
			}
		}
	} else {
		var ctx = mLongShowTextArray[0].canvas.getContext("2d");
		var text = 0;
		var lenArray = 0;
		var inputWord = "";
		// console.log(textData);
		for (var i = 0; i < textData.length; i++) {
			lenArray = 0;
			inputWord = textData[i];
			text = ctx.measureText(inputWord); // TextMetrics object
			if (text.width < 620) {
				str = textData[i];
				str = str.replace(checkStr, ' ');
				mLongTextData[index] = str;
				index++;
			} else {
				for (var j = lenArray + 1; j < textData[i].length; j++) {
					inputWord = textData[i].substring(lenArray, j);
					text = ctx.measureText(inputWord); // TextMetrics object
					if (text.width > 620) {
						var wordLenArray = inputWord.lastIndexOf(' ') + 1;
						if (wordLenArray !== 0) {
							inputWord = textData[i].substring(lenArray,
									lenArray + wordLenArray);
							lenArray += wordLenArray;
						} else {
							lenArray = j;
						}

						str = inputWord;
						mLongTextData[index] = str;
						index++;
					}
				}

				if (lenArray < textData[i].length) {
					inputWord = textData[i].substring(lenArray,
							textData[i].length);
					str = inputWord;
					mLongTextData[index] = str;
					index++;
				}
			}
		}
	}
};

// 긴글 연습 시작
MenuV2.prototype.LongGameStart = function() {
	mLongMenuSavePage = mLongMenuPage;
	mLongMenuSaveTitleSelect = mLongMenuTitleSelect;

	this.SetTajaGameStartTime();

	// console.log(mLongShowTextArray);

	for (var i = 0; i < mLongShowTextArray.length; i++) {
		mLongShowKeyArray[i] = i;
	}

	for (var i = 0; i < mLongShowTextArray.length; i++) {
		mLongShowKeyArray[i] = mLongShowPage * 4 + i;
	}

	this.LongGameTextDivLine();

	for (var i = 0; i < mLongShowTextArray.length; i++) {
		this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left", "top", "");
	}

	for (var i = 0; i < mLongShowTextArray.length; i++) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			if (mLongTextData[mLongShowKeyArray[i]] !== undefined) {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", mLongTextData[mLongShowKeyArray[i]]);
				if (mTajaHangulType === this.gameConst.HangulType.DUBEOLSIG) {
					mLongHangulJasoArray[i] = this
							.GetHangulToJasoArray(mLongShowTextArray[i].text);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_390) {
					mLongHangulJasoArray[i] = this.GetHangulSebelToJasoArray(
							mLongShowTextArray[i].text, 0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
					mLongHangulJasoArray[i] = this.GetHangulSebelToJasoArray(
							mLongShowTextArray[i].text, 0);
				} else if (mTajaHangulType === this.gameConst.HangulType.SEBEOLSIG_FINAL) {
					mLongHangulJasoArray[i] = this.GetHangulSebelToJasoArray(
							mLongShowTextArray[i].text, 0);
				}
			} else {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", "");
			}
		} else {
			if (mLongTextData[mLongShowKeyArray[i]] !== undefined) {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", mLongTextData[mLongShowKeyArray[i]]);
			} else {
				this.gameUtil.setText(mLongShowTextArray[i], 0, 0, "left",
						"top", "");
			}
		}

		for (var j = 0; j < mLongShowTextArray[i].text.length; j++) {
			mLongShowTextArray[i].addColor('#0066ff', j);
		}
	}

	for (var i = 0; i < mLongMeShowTextArray.length; i++) {
		this.gameUtil.setText(mLongMeShowTextArray[i], 0, 0, "left", "top", "");
	}

	mLongTotalShowPage = Math.ceil(mLongTextData.length / 4);

	mLongRightWordCount = 0;
	mLongRightJasoCount = 0;
	mLongTotalWordCount = 0;
	mLongRightTotalWordCount = 0;
	mLongRightTotalJasoCount = 0;

	this.fStage4SelectCursor.y = 229;
	this.fLongInputCursor.y = 237;
	this.fLongInputCursorAni.y = 236;

	mLongKeyboardUserCount = 0;
	mLongNowHit = 0;
	mTajaGameTime = 1;
	mLongIsChangeText = false;
	mLongIsStepText = false;
	mLongIsEndText = false;
	mIsTajaTypingFocus = false;
	userTajaTyping.value = "";
	mLongInputText = "";
	mTajaGameTimeStartFlag = false;

	this.LongGameShowPage();

	mTajaGameStatStartTime = new Date();

	userTajaTyping.onkeyup = this.LongUserWordsCheck;
	userTajaTyping.onkeydown = this.LongUserWordsCheck;
};

//
MenuV2.prototype.LongGameShowPage = function() {
	var pageText = (mLongShowPage + 1) + "쪽 / 총 " + mLongTotalShowPage + "쪽";
	this.gameUtil.setText(this.fStage4PageNum, 0, 28, "left", "middle",
			pageText); // 페이지
	if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			this.gameUtil
					.setText(
							this.fStage4Source,
							0,
							28,
							"left",
							"middle",
							that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Reference); // 출처
		} else {
			this.gameUtil
					.setText(
							this.fStage4Source,
							0,
							28,
							"left",
							"middle",
							that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Reference); // 출처
		}
	} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			this.gameUtil
					.setText(
							this.fStage4Source,
							0,
							28,
							"left",
							"middle",
							"사이버 외교사절단 반크"); // 반크
																									// 출처(한글)
		} else {
			this.gameUtil
					.setText(
							this.fStage4Source,
							0,
							28,
							"left",
							"middle",
							"사이버 외교사절단 반크"); // 반크
																									// 출처(영어)
		}
	} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			this.gameUtil
					.setText(
							this.fStage4Source,
							0,
							28,
							"left",
							"middle",
            mLongMenuHanContSourceData[0]); // 출처
		} else {
			this.gameUtil
					.setText(
							this.fStage4Source,
							0,
							28,
							"left",
							"middle",
            mLongMenuEngContSourceData[0]); // 출처
		}
	} else {
		this.gameUtil.setText(this.fStage4Source, 0, 28, "left", "middle", ""); // 출처
	}
};

// 연습 시간
MenuV2.prototype.LongProcessTime = function() {
	if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) {
		if (mTajaGameTimeStartFlag === true) {
			this.gameUtil.setText(this.fTimeNum42, 0, 28, "center", "top", this
					.nowTime());
		} else {
			this.gameUtil.setText(this.fTimeNum42, 0, 28, "center", "top",
					"00:00");
		}
	} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) {
		if (mTajaGameTimeStartFlag === true) {
			this.gameUtil.setText(this.fTimeNum42, 0, 28, "center", "top", this
					.TestNowTime());
		} else {
			this.gameUtil.setText(this.fTimeNum42, 0, 28, "center", "top",
					"00:00");
		}

		var gameTime = parseInt(mTajaGameTime / 1000);
		if (gameTime >= this.gameConst.LongTestTime) {
			mLongIsEndText = true;
			if (gameTime >= this.gameConst.LongTestTime + 3) {
				mLongNowHit = parseInt((mLongRightTotalJasoCount + mLongRightJasoCount)
						/ (mTajaGameTime / 1000) * 60);
			}
			this
					.LongTestResultPushIt(mLongNowHit,
							parseInt(mLongAccuracyValue));
			mTajaGamePopupType = 1;
			this.SetLongResultPopup(3, mLongNowHit,
					parseInt(mLongAccuracyValue), mTajaGameTime,
					this.LongTestSendMailButton, this.LongStopButton);
			if (parseInt(mLongAccuracyValue) >= 70) {
				if (mLongPracticsSelect !== this.gameConst.StotyType.STORYCALL) {
					mTajaGameScore += 40;
					mTajaGameSaveScore += 40;
				}
			}
			this.TajaScoreDataSave();
			this.LongCompleteSave(parseInt(mLongAccuracyValue));
			this.SetLongPracticeLog(1);
			// 통계 타자 속도 처리
			this.SetTajaSpeedStatistics(mLongNowHit);
		}
	}
};

//
MenuV2.prototype.nowTime = function() {
	var nowTime = new Date();
	mTajaGameTime = nowTime.getTime() - mTajaGameStartTime.getTime();

	var sec_gap = Math.floor((mTajaGameTime / 1000) % 60);
	var min_gap = Math.floor(mTajaGameTime / 1000 / 60);

	var sec_gap_str = sec_gap.toString();
	var min_gap_str = min_gap.toString();

	if (sec_gap < 10)
		sec_gap_str = "0" + sec_gap_str;
	if (min_gap < 10)
		min_gap_str = "0" + min_gap_str;

	return min_gap_str + ":" + sec_gap_str;
};

// 타자 검정 시간
MenuV2.prototype.TestNowTime = function() {
	var nowTime = new Date();
	mTajaGameTime = nowTime.getTime() - mTajaGameStartTime.getTime();

	var sec_gap = Math
			.floor((((this.gameConst.LongTestTime * 1000) - mTajaGameTime) / 1000) % 60);
	var min_gap = Math
			.floor((((this.gameConst.LongTestTime * 1000) - mTajaGameTime) / 1000) / 60);

	if (sec_gap < 0)
		sec_gap = 0;
	if (min_gap < 0)
		min_gap = 0;

	var sec_gap_str = sec_gap.toString();
	var min_gap_str = min_gap.toString();

	if (sec_gap < 10)
		sec_gap_str = "0" + sec_gap_str;
	if (min_gap < 10)
		min_gap_str = "0" + min_gap_str;

	return min_gap_str + ":" + sec_gap_str;
};

//
MenuV2.prototype.ShortNowTime = function() {
	var nowTime = new Date();
	mShortGameTime = (nowTime.getTime() - mShortGameStartTime.getTime()) / 1000;
};

//
MenuV2.prototype.LongUserWordsCheck = function(evt) {
	if (evt.type === "keydown") {
		if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
				&& get_ohi_type() === true) {
			mTajaGame390HanReturn = true;
			evt.returnValue = false;
			return false;
		} else {
			mTajaGame390HanReturn = false;
		}
	} else if (evt.type === "keyup") {
		if (mTajaGame390HanReturn === true) {
			mTajaGameHanEngKey = 3;
			mTajaGame390HanReturn = false;
			evt.returnValue = false;
			return false;
		}
	}

	if (mGameWordType !== 4 || mLongKeyboardUserCount > 3
			|| mTajaGameHanEngKey != 0 || mLongIsChangeText === true
			|| mLongIsStepText === true || that.fPopupGroup.visible === true) {
		evt.returnValue = false;
		return false;
	}

	if (evt.keyCode === 8) {
		mLongIsBackSound = true;
	}

	// Pgup, pgdn, END, HOME, LEFT, UP, RIGHT, DOWN 버튼 처리
	if ((evt.keyCode >= 33 && evt.keyCode <= 40) || evt.keyCode === 18) {
		evt.returnValue = false;
		return false;
	}

	var wordString = "";
	if (mLongTextData[mLongShowKeyArray[mLongKeyboardUserCount]] !== undefined) {
		wordString = mLongTextData[mLongShowKeyArray[mLongKeyboardUserCount]];
	}

	// ie에서 enter입력값이 들어오면 한칸 빈 공간이 들어간다. 방지하기 위한 처리
	if (evt.keyCode === 13
			&& (wordString.replace(/\s+$/, "").length > userTajaTyping.value.length)) {
		evt.returnValue = false;
		return false;
	}

	// console.log(wordString);
	mTajaGameKeyCode = evt.keyCode;
	// 한글타자일때 영어들어오면 막거나 영어타자일때 한글들어오면 막는 처리
	if (mGameStartAgent === that.gameConst.GameAgentType.CHROM) {
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (evt.keyCode === 8 || evt.keyCode === 9 || evt.keyCode === 37
					|| evt.keyCode === 39 || evt.keyCode === 46) {// 8:백스페이스
																	// 9:탭
																	// 37:왼쪽화살표
																	// 39:오른쪽화살표
																	// 46:Del키
				mLongInputText = userTajaTyping.value;
				return;
			} else {
				if (/[a-zA-Z]/.test(evt.target.value)) {
					evt.returnValue = false;
					if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
							&& evt.keyCode !== 13 && evt.keyCode !== 27) {// 13:
																			// 엔터,
																			// 27:
																			// esc
						mTajaGameHanEngKey = 1;
					}
				}
				evt.target.value = evt.target.value.replace(/[a-zA-Z]/g, "");
			}
		} else {
			if (evt.keyCode === 8 || evt.keyCode === 9 || evt.keyCode === 37
					|| evt.keyCode === 39 || evt.keyCode === 46) {
				userTajaTyping.value = userTajaTyping.value.replace(
						mTajaGameEngCheckStr, "");
				mLongInputText = userTajaTyping.value;
				return;
			} else {
				if (mTajaGameEngCheckStr.test(evt.target.value)) {
					evt.returnValue = false;
					if (mGameStartAgent === that.gameConst.GameAgentType.CHROM
							&& evt.keyCode !== 13 && evt.keyCode !== 27) {
						mTajaGameHanEngKey = 2;
					}
				}
				evt.target.value = evt.target.value.replace(
						mTajaGameEngCheckStr, "");
			}
		}
	}

	var wordAnswer = userTajaTyping.value;

	mLongUserWordCheck = true;

	if (mTajaGameTimeStartFlag === false && wordAnswer.length > 0) {
		mTajaGameTimeStartFlag = true;
		mTajaGameStartTime = new Date();
		mLongStartSec = new Date();
		mLongSec = 999;
	}

	if (mLongInputText !== wordAnswer && evt.keyCode !== 13) {
		mLongIsProcess = true;
		mLongInputText = wordAnswer;
	}

	// console.log(wordAnswer);
	// 엔터키를 누른 경우와 비교 글자보다 더 많은 글자를 쓸 경우 넘어간다.
	var check = /[.|,|!]/g;
	var checkWordAnswer = wordAnswer.replace(/\s+$/, "");
	if ((wordAnswer.length !== undefined)
			&& (wordString.length !== undefined)
			&& ((wordString.replace(/\s+$/, "").length <= wordAnswer.length && evt.keyCode === 13) || wordString
					.replace(/\s+$/, "").length < wordAnswer.length)
			|| (wordString.replace(/\s+$/, "").length <= wordAnswer.length
					&& wordString[wordString.length - 1] === wordAnswer[wordAnswer.length - 1] && check
					.test(checkWordAnswer[checkWordAnswer.length - 1]) === false)) {
		if (wordAnswer.replace(/\s+$/, "") === wordString.replace(/\s+$/, "")) {
			mWordPracticsProcess++;
			mCharacterAniState = 1;
			if (mLongPracticsSelect !== 1) {
				mTajaGameScore += 4;
				mTajaGameSaveScore += 4;
			}
		} else {
			mWordPracticsWrong++;
			mCharacterAniState = 2;
		}

		mLongKeyboardUserCount++;
		if (mLongKeyboardUserCount > 3) {
			mLongIsChangeText = true;
		} else {
			mLongIsStepText = true;
		}
		userTajaTyping.value = "";
		userTajaTyping.blur();
	}
};

// 시간을 넣어 분초로 출력한다.
MenuV2.prototype.GetMinSecTime = function(time) {
	var sec_gap = Math.floor((time / 1000) % 60);
	var min_gap = Math.floor((time / 1000) / 60);

	var sec_gap_str = sec_gap.toString();
	var min_gap_str = min_gap.toString();

	if (sec_gap < 10)
		sec_gap_str = "0" + sec_gap_str;
	if (min_gap < 10)
		min_gap_str = "0" + min_gap_str;

	return min_gap_str + "분" + sec_gap_str + "초";
};

/*
 * 설정 저장.
 */

// 설정 저장
MenuV2.prototype.TajaConfigDataSave = function() {
	var finger = 0;
	if (mTajaFingerShow === true) {
		finger = 1;
	} else {
		finger = 0;
	}

	that.ajaxManager.netReqWriteTypingSetup(that.gameConst.uuid,
			mTajaHangulType, mTajaEnglishType, mTajaLanguageType,
			mTajaSoundVolume, finger, this.netReqWriteTypingSetupSuccess,
			this.netReqWriteTypingSetupFail);
};

// 설정 저장 성공
MenuV2.prototype.netReqWriteTypingSetupSuccess = function(aData) {
	console.log("netReqWriteTypingSetupSuccess = " + aData.result);
};

// 설정 저장 실패
MenuV2.prototype.netReqWriteTypingSetupFail = function(aResult) {
	console.log("netReqWriteTypingSetupFail = " + aResult);
};

// 설정 읽기
MenuV2.prototype.TajaConfigDataLoad = function() {
};

// 타자 점수 저장
MenuV2.prototype.TajaScoreDataSave = function() {
	that.ajaxManager.netReqWriteGameResult(that.gameConst.uuid,
			mTajaGameSaveScore, that.gameConst.userNickName,
			this.netResWriteGameResultSuccess, this.netResWriteGameResultFail);
};

// 점수 저장 성공
MenuV2.prototype.netResWriteGameResultSuccess = function(aData) {
	console.log("netResWriteGameResultSuccess = " + aData.result);
	mTajaGameSaveScore = 0;
};

// 점수 저장 실패
MenuV2.prototype.netResWriteGameResultFail = function(aResult) {
	console.log("netResWriteGameResultFail = " + aResult);
};

// 타자 점수 읽기
MenuV2.prototype.TajaScoreDataLoad = function() {
};

/*
 * 긴글 연습 결과 팝업창.
 */

// 긴글 연습 결과 팝업창 출력
MenuV2.prototype.SetLongResultPopup = function(aState, aMean, aAccuracy,
		aPractive, aConfirm, aCancel) {
	mTajaGameHanEngKey = 0;

	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = false;
	this.fResultP.visible = true;
	this.fSettingP.visible = false;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fResultGroupLongWord.visible = true;
	this.fResultGroupShortWord.visible = false;
	this.fResultGroupPieceWord.visible = false;
	this.fResultGroupLongShortButton.visible = true;
	this.fResultGroupPieceButton.visible = false;
	this.fResultGroupLongTestButton.visible = true;
	this.fPopupTransPanel.inputEnabled = true;

	this.fChaIconYaya.loadTexture(this.SetResultCharacter(), 0);

	if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) {
		this.gameUtil.setText(this.fResultTitleTxtL, 0, 0, "left", "top",
				"긴 글 연습 결과"); // 타이틀
	} else {
		if (aPractive >= 300000)
			aPractive = 300000;

		this.gameUtil.setText(this.fResultTitleTxtL, 0, 0, "left", "top",
				"타자 검정 결과"); // 타이틀
	}
	this.gameUtil.setText(this.fResultNicknameTxt, 0, 0, "left", "top",
			that.gameConst.userNickName + " 님의 연습 결과"); // 닉네임
	this.gameUtil.setText(this.fResultMeanValueL, 0, 0, "left", "top", aMean); // 평균
																				// 타수
	this.gameUtil.setText(this.fResultAccuracyValueL, 0, 0, "left", "top",
			aAccuracy + "%"); // 정확도
	this.gameUtil.setText(this.fResultPracticeValueL, 0, 0, "left", "top", this
			.GetMinSecTime(aPractive)); // 연습시간

	// ok 버튼
	if (aState === 1) {
		this.fResultPopupBtn_Ok.visible = true;
		this.fResultPopupBtn_Stop.visible = false;
		this.fResultPopupBtn_Continue.visible = false;
		this.fResultPopupBtn_TestStop.visible = false;
		this.fResultPopupBtn_SendMail.visible = false;
		this.fResultPopupBtn_Ok.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aCancel, this);
	} // 계속, 그만 버튼
	else if (aState === 2) {
		this.fResultPopupBtn_Ok.visible = false;
		this.fResultPopupBtn_Stop.visible = true;
		this.fResultPopupBtn_Continue.visible = true;
		this.fResultPopupBtn_TestStop.visible = false;
		this.fResultPopupBtn_SendMail.visible = false;
		this.fResultPopupBtn_Continue.events.onInputDown
				.addOnce(aConfirm, this);
		this.fResultPopupBtn_Stop.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aConfirm, this);
	} else if (aState === 3) {
		if (that.gameConst.uuid === 0) {
			this.fResultPopupBtn_Ok.visible = true;
			this.fResultPopupBtn_Stop.visible = false;
			this.fResultPopupBtn_Continue.visible = false;
			this.fResultPopupBtn_TestStop.visible = false;
			this.fResultPopupBtn_SendMail.visible = false;
			this.fResultPopupBtn_Ok.events.onInputDown.addOnce(aCancel, this);

			key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
			key2.onDown.add(aCancel, this);
		} else {
			this.fResultPopupBtn_Ok.visible = false;
			this.fResultPopupBtn_Stop.visible = false;
			this.fResultPopupBtn_Continue.visible = false;
			this.fResultPopupBtn_TestStop.visible = true;
			this.fResultPopupBtn_SendMail.visible = true;
			this.fResultPopupBtn_SendMail.events.onInputDown.addOnce(aConfirm,
					this);
			this.fResultPopupBtn_TestStop.events.onInputDown.addOnce(aCancel,
					this);

			key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
			key2.onDown.add(aConfirm, this);
		}
	}

	this.fResultPopupBtn_X.events.onInputDown.addOnce(aCancel, this);
	this.playAudio(popup_sound, mTajaSoundVolume, false);
};

// 짧은글 연습 결과 팝업창 출력
MenuV2.prototype.SetShortResultPopup = function(aState, aFast, aAccuracy,
		aPractive, aConfirm, aCancel) {
	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = false;
	this.fResultP.visible = true;
	this.fSettingP.visible = false;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fResultGroupLongWord.visible = false;
	this.fResultGroupShortWord.visible = true;
	this.fResultGroupPieceWord.visible = false;
	this.fResultGroupLongShortButton.visible = true;
	this.fResultGroupPieceButton.visible = false;
	this.fResultGroupLongTestButton.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	this.fChaIconYaya.loadTexture(this.SetResultCharacter(), 0);

	this.gameUtil.setText(this.fResultNicknameTxt, 0, 0, "left", "top",
			that.gameConst.userNickName + " 님의 연습 결과"); // 닉네임
	this.gameUtil.setText(this.fResultFastValueS, 0, 0, "left", "top", aFast); // 빠르기
	this.gameUtil.setText(this.fResultAccuracyValueS, 0, 0, "left", "top",
			aAccuracy + "%"); // 정확도
	this.gameUtil.setText(this.fResultPracticeValueS, 0, 0, "left", "top", this
			.GetMinSecTime(aPractive)); // 연습시간

	// ok 버튼
	if (aState === 1) {
		this.fResultPopupBtn_Ok.visible = true;
		this.fResultPopupBtn_Stop.visible = false;
		this.fResultPopupBtn_Continue.visible = false;
		this.fResultPopupBtn_Ok.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aCancel, this);
	} // 계속, 그만 버튼
	else if (aState === 2) {
		this.fResultPopupBtn_Ok.visible = false;
		this.fResultPopupBtn_Stop.visible = true;
		this.fResultPopupBtn_Continue.visible = true;
		this.fResultPopupBtn_Continue.events.onInputDown
				.addOnce(aConfirm, this);
		this.fResultPopupBtn_Stop.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aConfirm, this);
	}

	this.fResultPopupBtn_X.events.onInputDown.addOnce(aCancel, this);
	this.playAudio(popup_sound, mTajaSoundVolume, false);
};

// 자리/낱말 연습 결과 팝업창 출력
MenuV2.prototype.SetPieceResultPopup = function(aState, aWhole, aWrong,
		aAccuracy, aPractive, aConfirm, aAgain, aCancel) {
	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = false;
	this.fResultP.visible = true;
	this.fSettingP.visible = false;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fResultGroupLongWord.visible = false;
	this.fResultGroupShortWord.visible = false;
	this.fResultGroupPieceWord.visible = true;
	this.fResultGroupLongShortButton.visible = false;
	this.fResultGroupPieceButton.visible = true;
	this.fResultGroupLongTestButton.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	this.fChaIconYaya.loadTexture(this.SetResultCharacter(), 0);

	if (mGameStateType === this.gameConst.GameStateType.SEAT) {
		this.fResultTitleTxtP1.visible = true;
		this.fResultTitleTxtP2.visible = false;
	} else if (mGameStateType === this.gameConst.GameStateType.WORD) {
		this.fResultTitleTxtP1.visible = false;
		this.fResultTitleTxtP2.visible = true;
	}

	this.gameUtil.setText(this.fResultNicknameTxt, 0, 0, "left", "top",
			that.gameConst.userNickName + " 님의 연습 결과"); // 닉네임
	this.gameUtil.setText(this.fResultWholeValueP, 0, 0, "left", "top", aWhole); // 총 타수
	this.gameUtil.setText(this.fResultWrongValueP, 0, 0, "left", "top", aWrong); // 오타수
	this.gameUtil.setText(this.fResultAccuracyValueP, 0, 0, "left", "top",
			aAccuracy + "%"); // 정확도
	this.gameUtil.setText(this.fResultPracticeValueP, 0, 0, "left", "top", this
			.GetMinSecTime(aPractive)); // 연습시간

	// ok 버튼
	if (aState === 1) {
		this.fResultPopupBtn_Ok.visible = true;
		this.fResultPopupBtn_StopP.visible = false;
		this.fPopupBtn_AgainP.visible = false;
		this.fResultPopupBtn_ContinueP.visible = false;
		this.fResultPopupBtn_Ok.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aCancel, this);
	} // 계속, 그만 버튼
	else if (aState === 2) {
		this.fResultPopupBtn_Ok.visible = false;
		this.fResultPopupBtn_StopP.visible = true;
		this.fResultPopupBtn_ContinueP.visible = true;
		this.fPopupBtn_AgainP.visible = true;
		this.fResultPopupBtn_ContinueP.events.onInputDown.addOnce(aConfirm,
				this);
		this.fPopupBtn_AgainP.events.onInputDown.addOnce(aAgain, this);
		this.fResultPopupBtn_StopP.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aConfirm, this);
	}

	this.fResultPopupBtn_X.events.onInputDown.addOnce(aCancel, this);

	this.playAudio(popup_sound, mTajaSoundVolume, false);
};

// 긴글 연습 결과 팝업창 닫기 버튼
MenuV2.prototype.SetLongResultExitPopup = function() {
	this.fPopupGroup.visible = false;
	this.fResultP.visible = false;
	this.fPopupTransPanel.inputEnabled = false;
	mTajaGamePopupType = 0;

	this.fResultPopupBtn_Ok.events.onInputDown.removeAll(this);
	this.fResultPopupBtn_Continue.events.onInputDown.removeAll(this);
	this.fResultPopupBtn_Stop.events.onInputDown.removeAll(this);
	this.fResultPopupBtn_ContinueP.events.onInputDown.removeAll(this);
	this.fPopupBtn_AgainP.events.onInputDown.removeAll(this);
	this.fResultPopupBtn_StopP.events.onInputDown.removeAll(this);
	this.fResultPopupBtn_X.events.onInputDown.removeAll(this);
	this.fResultPopupBtn_SendMail.events.onInputDown.removeAll(this);
	this.fResultPopupBtn_TestStop.events.onInputDown.removeAll(this);

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 타자 검정 결과 보내기
MenuV2.prototype.SetTestResultSendPopup = function(aTasu, aAcc) {
	if (this.fPopupGroup.visible === true)
		return;

	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = false;
	this.fResultP.visible = true;
	this.fSettingP.visible = false;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = true;
	this.fResultGroupLongWord.visible = false;
	this.fResultGroupShortWord.visible = false;
	this.fResultGroupPieceWord.visible = false;
	this.fResultGroupLongShortButton.visible = true;
	this.fResultGroupPieceButton.visible = false;
	this.fResultGroupLongTestButton.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	this.fInputCursorC2.visible = false;
	this.fInputCursorC5.visible = false;

	this.fSendSemiContentC2.text = "메일주소를 입력하세요.";
	this.fSendSemiContentC5.text = "70자 이내로 내용을 입력해 주세요.";

	document.getElementById("userTajaTyping").style.imeMode = "auto";
	userTajaTyping.blur();

	userTajaTyping.value = "";
	mSendTestResultEmail = "";
	mSendTestResultContents = "";
	mSendTestResultState = 0;

	var titleText = "";
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			titleText = that.mTajaContentsLongHanDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			titleText = mLongMenuHanVankTitleData[mLongMenuTitleSelect];
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			titleText = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			titleText = mLongMenuHanContTitleData[mLongMenuTitleSelect];
		}
	} else {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			titleText = that.mTajaContentsLongEngDatas[mLongMenuTitleSelect].Title;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			titleText = mLongMenuEngVankTitleData[mLongMenuTitleSelect];

		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYCALL) {
			titleText = mLongMenuCallDatas.queue[mLongMenuTitleSelect].name;
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			titleText = mLongMenuEngContTitleData[mLongMenuTitleSelect];
		}
	}

	mSendTestResultTitle = "[한컴 타자연습] " + that.gameConst.userNickName
			+ " 님의 타자 검정 결과 공유";
	this.gameUtil.setText(this.fSendSemiContentC3, 0, 0, "left", "top",
			mSendTestResultTitle); // 보내기 제목
	mSendTestResultFixContents = "게임 닉네임 : " + that.gameConst.userNickName
			+ "\n" + "학교 정보 : " + that.gameConst.School + "\n" + "연습한 글 : "
			+ titleText + "\n" + "평균타수 : " + aTasu + "\n" + "정확도 : " + aAcc
			+ "%\n";
	this.gameUtil.setText(this.fSendSemiContentC4, 0, 0, "left", "top", ""); // 보내기
																				// 본문
	this.gameUtil.setText(this.fSendSemiContentC41, 0, 0, "left", "top",
			"게임 닉네임 : " + that.gameConst.userNickName); // 게임 닉네임
	this.gameUtil.setText(this.fSendSemiContentC42, 0, 0, "left", "top",
			"학교 정보 : " + that.gameConst.School); // 학교 정보
	this.gameUtil.setText(this.fSendSemiContentC43, 0, 0, "left", "top",
			"연습한 글 : " + titleText); // 연습한 글
	this.gameUtil.setText(this.fSendSemiContentC44, 0, 0, "left", "top",
			"평균타수 : " + aTasu); // 평균타수
	this.gameUtil.setText(this.fSendSemiContentC45, 0, 0, "left", "top",
			"정확도 : " + aAcc + "%"); // 정확도

	this.fPopupBtn_Send.events.onInputDown.add(this.SetTestResultSendButton,
			this);
	this.fPopupBtn_Cancels.events.onInputDown.add(
			this.SetTestResultSendExitButton, this);

	key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
	key2.onDown.add(this.SetTestResultSendButton, this);

	this.fSendResultPopupBtnX.events.onInputDown.add(
			this.SetTestResultSendExitButton, this);

	this.playAudio(popup_sound, mTajaSoundVolume, false);

	this.fSendContentPanelP2.inputEnabled = true;
	this.fSendContentPanelP2.events.onInputDown.add(this.SendResultEmailInput,
			this);
	this.fSendContentPanelP4.inputEnabled = true;
	this.fSendContentPanelP4.events.onInputDown.add(
			this.SendResultContentlInput, this);

	for (var j = this.fNoticeSmallContentTxt1.text.length - 7; j < this.fNoticeSmallContentTxt1.text.length; j++) {
		this.fNoticeSmallContentTxt1.addColor('#0093ea', j);
  }

	userTajaTyping.onkeyup = this.SendUserWordsCheck;
	userTajaTyping.onkeydown = this.SendUserWordsCheck;
};

var mSendTestResultEmail = "";
var mSendTestResultTitle = "";
var mSendTestResultFixContents = "";
var mSendTestResultContents = "";
var mSendTestResultState = 0;
//
MenuV2.prototype.SendResultProcess = function() {
	var ctx;
	var text;

	if (mSendTestResultState === 1) {
		ctx = this.fSendSemiContentC2.canvas.getContext("2d");
		text = ctx.measureText(mSendTestResultEmail); // TextMetrics object
		this.fInputCursorC2.x = 383 + text.width;
		this.gameUtil.setText(this.fSendSemiContentC2, 0, 0, "left", "top",
				mSendTestResultEmail); // 보내기 이메일
	} else if (mSendTestResultState === 2) {
		this.TestWordWrap();
	}
};

// 본문 내용 개행 처리
MenuV2.prototype.TestWordWrap = function() {
	var drawText = "";
	var textData = mSendTestResultContents;
	var ctx = this.fSendSemiContentC5.canvas.getContext("2d");
	var text; // TextMetrics object
	var drawLine = [];
	var index = 0;
	var inputWord;

	lenArray = 0;
	text = ctx.measureText(textData); // TextMetrics object
	if (text.width < 350) {
		drawLine[index] = textData;
		index++;
	} else {
		for (var j = lenArray + 1; j < textData.length; j++) {
			inputWord = textData.substring(lenArray, j);
			text = ctx.measureText(inputWord); // TextMetrics object
			if (text.width > 350) {
				lenArray = j;
				drawLine[index] = inputWord;
				index++;
			}
		}

		if (lenArray < textData.length) {
			drawLine[index] = textData.substring(lenArray, textData.length);
			index++;
		}
	}

	for (var i = 0; i < drawLine.length; i++) {
		drawText += (drawLine[i] + "\n");
	}

	text = ctx.measureText(drawLine[drawLine.length - 1]); // TextMetrics
															// object
	this.fInputCursorC5.x = 380 + text.width;
	this.fInputCursorC5.y = 316 + ((index - 1) * (this.fInputCursorC5.height - 7));

	this.gameUtil.setText(this.fSendSemiContentC5, 0, 0, "left", "top",
			drawText); // 보내기 본문
};

MenuV2.prototype.SendUserWordsCheck = function(evt) {
	// Pgup, pgdn, END, HOME, LEFT, UP, RIGHT, DOWN 버튼 처리
	if ((evt.keyCode >= 33 && evt.keyCode <= 40) || evt.keyCode === 18) {
		evt.returnValue = false;
		return false;
	}

	if (mSendTestResultState === 1) {
		if (evt.target.value.length >= 30) {
			userTajaTyping.value = mSendTestResultEmail;
			evt.returnValue = false;
			return false;
		}
	} else if (mSendTestResultState === 2) {
		if (evt.target.value.length >= 70) {
			userTajaTyping.value = mSendTestResultContents;
			evt.returnValue = false;
			return false;
		}
	}

	if (mSendTestResultState === 1) {
		mSendTestResultEmail = userTajaTyping.value;
	} else if (mSendTestResultState === 2) {
		mSendTestResultContents = userTajaTyping.value;
	}
};

// 이메일 텍스트 입력창
MenuV2.prototype.SendResultEmailInput = function() {
	if (mSendTestResultState !== 1) {
		this.fInputCursorC2.visible = true;
		this.fInputCursorC2.animations.play("PLAY");
		this.fInputCursorC5.visible = false;
		mSendTestResultState = 1;
		userTajaTyping.value = mSendTestResultEmail;
		setTimeout(function() {
			ohiChange('Ko', '2-KSX5002');
			ohiChange('En', 'qwerty');
		}, 100);
	}
};

// 내용 텍스트 입력창
MenuV2.prototype.SendResultContentlInput = function() {
	if (mSendTestResultState !== 2) {
		this.fInputCursorC2.visible = false;
		this.fInputCursorC5.visible = true;
		this.fInputCursorC5.animations.play("PLAY");
		mSendTestResultState = 2;
		userTajaTyping.value = mSendTestResultContents;
		setTimeout(function() {
			ohiChange('Ko', '2-KSX5002');
			ohiChange('En', 'qwerty');
		}, 100);
	}
};

// 타자 검정 보내기 버튼
MenuV2.prototype.SetTestResultSendButton = function() {
	this.playAudio(click_sound, mTajaSoundVolume, false);

	var regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;
	if (mSendTestResultEmail.match(regExp) != null
			&& mSendTestResultEmail !== null) {
		that.SetToastMessage("타자 검정 결과를 전송중입니다.");
		that.ajaxManager.netReqSendMail(that.gameConst.uuid,
				that.gameConst.userNickName, mSendTestResultEmail,
				mSendTestResultTitle, mSendTestResultFixContents
						+ mSendTestResultContents + "\n\n" + "본 메일은 발신전용 메일입니다.", this.netResSendMailSuccess,
				this.netResSendMailFail);
	} else {
		that.SetToastMessage("이메일 주소를 잘못 입력하셨습니다.", 1);
	}
};

// 타자 검정 메일 보내기창 닫기
MenuV2.prototype.TestResultSendClose = function() {
	this.fPopupGroup.visible = false;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = false;
	mTajaGamePopupType = 0;
	mSendTestResultState = 0;

	this.fPopupBtn_Send.events.onInputDown.removeAll(this);
	this.fPopupBtn_Cancels.events.onInputDown.removeAll(this);
	this.fSendResultPopupBtnX.events.onInputDown.removeAll(this);

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	this.KeyboardInit();
};

MenuV2.prototype.netResSendMailSuccess = function(aData) {
	that.TestResultSendClose();
	that.DisableToastMessage();
	that.SetPublicPopup(1, "점수가 성공적으로 전송되었습니다.", null,
			that.TestSendSuccessConfirm);
	that.KeyboardInit();
};

MenuV2.prototype.netResSendMailFail = function(aResult) {
	that.TestResultSendClose();
	that.DisableToastMessage();
	that.SetPublicPopup(1, "전송 실패했습니다.", null, that.TestSendFailConfirm);
	that.KeyboardInit();
};

MenuV2.prototype.TestSendSuccessConfirm = function(aResult) {
	this.SetPublicExitPopup();

	mLongGameType = this.gameConst.LongGameType.LONGPRACTICE;
	mLongKeyboardUserCount = 0;
	mLongAccuracyTotValue = 0;
	mLongIsStepText = false;
	mLongIsEndText = false;
	mIsTajaTypingFocus = false;
	userTajaTyping.value = "";

	mLongIsChangeText = false;

	this.fStageInfo41.visible = true;
	this.fStageInfo42.visible = false;

	this.fOptionBtn3.visible = false;
	this.fOptionBtn2.visible = true;

	this.LongPracticeMenuBarInit();

	mGameWordType = this.gameConst.GameWordType.NONE;

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

MenuV2.prototype.TestSendFailConfirm = function(aResult) {
	this.SetPublicExitPopup();

	this.SetTestResultSendPopup(mLongNowHit, parseInt(mLongAccuracyValue));
};

// 타자 검정 보내기 나가기 버튼
MenuV2.prototype.SetTestResultSendExitButton = function() {
	this.fPopupGroup.visible = false;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = false;
	mTajaGamePopupType = 0;
	mSendTestResultState = 0;

	this.fPopupBtn_Send.events.onInputDown.removeAll(this);
	this.fPopupBtn_Cancels.events.onInputDown.removeAll(this);
	this.fSendResultPopupBtnX.events.onInputDown.removeAll(this);

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	mTajaGamePopupType = 1;
	this.SetLongResultPopup(3, mLongNowHit, parseInt(mLongAccuracyValue),
			mTajaGameTime, this.LongTestSendMailButton, this.LongStopButton);

	this.playAudio(click_sound, mTajaSoundVolume, false);

	this.KeyboardInit();
};

// 문의하기 url
MenuV2.prototype.HyperLinkButton = function() {
	var site = window.location.host;
	if (site.indexOf("stg-") != -1) {
		url = "https://stg-www.malangmalang.com/inquiry?menu=taja";
	} else {
		url = "https://www.malangmalang.com/inquiry?menu=taja";
	}

	window
			.open(
					url,
					"한컴타자새창",
					"width=1300, height=800, toolbar=yes, menubar=yes, scrollbars=yes, resizable=yes");
};

// 긴글 연습 저장 (검증,연습저장)
MenuV2.prototype.LongCompleteSave = function(aAccuracyValue) {

	// 목표 정확도를 못맞추면 튕겨냄
	if (aAccuracyValue < this.gameConst.TypingAccuracy)
		return;
	console.log('세이브 타입:', mTajaLanguageType, '\nmLongPracticsSelect');
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) { // 한글타입인가?
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
			if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 타자
																				// 연습
				if (mLongHanCompleteSave[mTajaHangulType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongHanCompleteSave[mTajaHangulType][mLongMenuTitleSelect] = 1;
			} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																					// 검정
				if (mLongHanTestCompleteSave[mTajaHangulType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongHanTestCompleteSave[mTajaHangulType][mLongMenuTitleSelect] = 1;
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
			if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 타자
																				// 연습
				if (mLongHanVankCompleteSave[mTajaHangulType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongHanVankCompleteSave[mTajaHangulType][mLongMenuTitleSelect] = 1;
			} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																					// 검정
				if (mLongHanVankTestCompleteSave[mTajaHangulType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongHanVankTestCompleteSave[mTajaHangulType][mLongMenuTitleSelect] = 1;
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
			if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 타자
																				// 연습
				if (mLongHanContCompleteSave[mTajaHangulType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongHanContCompleteSave[mTajaHangulType][mLongMenuTitleSelect] = 1;
			} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																					// 검정
				if (mLongHanContTestCompleteSave[mTajaHangulType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongHanContTestCompleteSave[mTajaHangulType][mLongMenuTitleSelect] = 1;
			}
			// console.log('모두의타자 타자연습 데이터 확인:\nmTajaEnglishType:',
			// 		mTajaEnglishType, '\nmLongMenuTitleSelect:',
			// 		mLongMenuTitleSelect);

		}
	} else {
		if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) { // 스토리
			if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 타자
																				// 연습
				if (mLongEngCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongEngCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] = 1;
			} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																					// 검정
				if (mLongEngTestCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongEngTestCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] = 1;
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) { // 스토리반크
			if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 타자
																				// 연습
				if (mLongEngVankCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongEngVankCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] = 1;
			} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																					// 검정
				if (mLongEngVankTestCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongEngVankTestCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] = 1;
			}
		} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) { // 모두의
																					// 타자
			if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 타자
																				// 연습
				if (mLongEngContCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongEngContCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] = 1;
			} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																					// 검정
				if (mLongEngContTestCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] === 0) {
					if (that.gameConst.uuid != 0) {
						that.SetToastMessage("연습 완료 보상으로 " + 100
								+ " 한컴 포인트를 획득했습니다.", 2);
					}
					that.ajaxManager.netReqWriteUpdatePoint(
							that.gameConst.uuid, that.gameConst.userNickName,
							100, this.netResWriteUpdatePointSuccess,
							this.netResWriteUpdatePointFail);
				}
				mLongEngContTestCompleteSave[mTajaEnglishType][mLongMenuTitleSelect] = 1;
			}
		}
	}

	var isComplete = [];

	if (mLongGameType === this.gameConst.LongGameType.LONGPRACTICE) { // 타자 연습
		isComplete[0] = 1;
		isComplete[1] = 0;
	} else if (mLongGameType === this.gameConst.LongGameType.LONGTEST) { // 타자
																			// 검정
		isComplete[0] = 0;
		isComplete[1] = 1;
	}

	var languageType = this.GetGameLanguageType();

	that.ajaxManager.netReqWriteTypingLongWordPractice(that.gameConst.uuid,
			mLongMenuTitleSelect, mLongPracticsSelect, languageType,
			isComplete[0], isComplete[1],
			this.netResWriteTypingLongWordPracticeSuccess,
			this.netResWriteTypingLongWordPracticeFail);

};

// 긴글 연습 저장 성공
MenuV2.prototype.netResWriteTypingLongWordPracticeSuccess = function(aData) {
	console.log("netResWriteTypingLongWordPracticeSuccess = " + aData.result);
};

// 긴글 연습 저장 실패
MenuV2.prototype.netResWriteTypingLongWordPracticeFail = function(aResult) {
	console.log("netResWriteTypingLongWordPracticeFail = " + aResult);
};

// 이어하기 정보 저장함수
MenuV2.prototype.LongContinueSave = function(aPage, aAcc) {
	if (that.gameConst.uuid === 0
			|| (mLongPracticsSelect != this.gameConst.StotyType.STORYVANK && mLongPracticsSelect != this.gameConst.StotyType.EVENTCONCEPT)) {
		return;
	}
	// console.log('이어하기 저장\naPage:', aPage, '\naAcc:', aAcc);
	var languageType = that.GetGameLanguageType();
	mLongContinueDatas.queue[languageType].type = mLongPracticsSelect;
	mLongContinueDatas.queue[languageType].select = mLongMenuTitleSelect;
	mLongContinueDatas.queue[languageType].page = aPage;
	mLongContinueDatas.queue[languageType].acc = aAcc;

	that.ajaxManager.netReqWriteTypingLongWordContinue(that.gameConst.uuid,
			languageType, mLongPracticsSelect, mLongMenuTitleSelect, aPage,
			aAcc, that.netResWriteTypingLongWordContinueSuccess,
			that.netResWriteTypingLongWordContinueFail);
};

// 긴글 연습 이어하기 저장 성공
MenuV2.prototype.netResWriteTypingLongWordContinueSuccess = function(aData) {
	console.log("netResWriteTypingLongWordContinueSuccess = " + aData.result);
};

// 긴글 연습 이어하기 저장 실패
MenuV2.prototype.netResWriteTypingLongWordContinueFail = function(aResult) {
	console.log("netResWriteTypingLongWordContinueFail = " + aResult);
};

// 긴글 이어하기
MenuV2.prototype.LongContinueRead = function() {
	var continueValue = [ 2, 0, 0, 0 ];

	if (that.gameConst.uuid === 0) {
		return continueValue;
	}

	var languageType = that.GetGameLanguageType();
	if (mLongContinueDatas.queue[languageType].page > 0) {
		continueValue[0] = mLongContinueDatas.queue[languageType].type;
		continueValue[1] = mLongContinueDatas.queue[languageType].select;
		continueValue[2] = mLongContinueDatas.queue[languageType].page;
		continueValue[3] = mLongContinueDatas.queue[languageType].acc;
	}
	console.log('이어하기 값', continueValue);
	return continueValue;
};

// 타자속도 통계 처리
MenuV2.prototype.SetTajaSpeedStatistics = function(aSpeed) {
	mTajaGameTajaSpeed += aSpeed;
	mTajaGameTajaSpeedCount++;

	var languageType = this.GetGameLanguageType();
	that.ajaxManager.netReqWriteTypingSpeed(that.gameConst.uuid, languageType,
			aSpeed, that.netResWriteTypingSpeedSuccess,
			that.netResWriteTypingSpeedFail);
};

MenuV2.prototype.netResWriteTypingSpeedSuccess = function(aData) {
	console.log("netResWriteTypingSpeedSuccess = " + aData.result);
};

MenuV2.prototype.netResWriteTypingSpeedFail = function(aResult) {
	console.log("netResWriteTypingSpeedFail = " + aResult.result);
};

// 타자 저장시 언어에 따라 값 변경
MenuV2.prototype.GetGameLanguageType = function() {
	var language = 0;

	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
			language = that.gameConst.GameLanguageSaveType.DUBEOLSIG;
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			language = that.gameConst.GameLanguageSaveType.SEBEOLSIG_390;
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			language = that.gameConst.GameLanguageSaveType.SEBEOLSIG_SUNALAE;
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			language = that.gameConst.GameLanguageSaveType.SEBEOLSIG_FINAL;
		}
	} else if (mTajaLanguageType === that.gameConst.LanguageType.ENGLISH) {
		if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
			language = that.gameConst.GameLanguageSaveType.QWERTY;
		} else if (mTajaEnglishType === that.gameConst.EnglishType.DVORAK) {
			language = that.gameConst.GameLanguageSaveType.DVORAK;
		}
	}

	return language;
};

/**
 * 도움말 팝업창.
 */

var mHelpTotalPage = 0; // 도움말 전체 페이지
var mHelpCurrentPage = 0; // 도움말 현재 페이지

// 도움말 팝업창 출력
MenuV2.prototype.SetHelpPopup = function() {
	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = true;
	this.fResultP.visible = false;
	this.fBResultP.visible = false;
	this.fPublicP.visible = false;
	this.fSettingP.visible = false;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	mHelpTotalPage = 8;
	mHelpCurrentPage = 1;

	this.CreateHelpImage();
	this.DrawHelpMoveButton();

	key1 = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC);
	key1.onDown.add(this.SetHelpExitPopup, this);
	key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
	key2.onDown.add(this.SetHelpExitPopup, this);
};

// 도움말 팝업창 오른쪽 이동 버튼
MenuV2.prototype.HelpMoveRight = function() {
	mHelpCurrentPage++;
	if (mHelpCurrentPage >= mHelpTotalPage) {
		mHelpCurrentPage = mHelpTotalPage;
	}

	this.DrawHelpMoveButton();
};

// 도움말 팝업창 왼쪽 이동 버튼
MenuV2.prototype.HelpMoveLeft = function() {
	mHelpCurrentPage--;

	if (mHelpCurrentPage < 1) {
		mHelpCurrentPage = 1;
	}

	this.DrawHelpMoveButton();
};

// 도움말 왼쪽/오른쪽 이동 버튼 출력 유무
MenuV2.prototype.DrawHelpMoveButton = function() {
	if (mHelpCurrentPage <= 1) {
		this.fHelpLeftArrow.visible = false;
		this.fHelpRightArrow.visible = true;
	} else if (mHelpCurrentPage >= mHelpTotalPage) {
		this.fHelpLeftArrow.visible = true;
		this.fHelpRightArrow.visible = false;
	} else {
		this.fHelpLeftArrow.visible = true;
		this.fHelpRightArrow.visible = true;
	}

	this.SetHelpContentImage();
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 도움말 팝업창 닫기
MenuV2.prototype.SetHelpExitPopup = function() {
	this.fPopupGroup.visible = false;
	this.fGuideHelp.visible = false;
	this.fPopupTransPanel.inputEnabled = false;

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 도움말 이미지 생성
MenuV2.prototype.CreateHelpImage = function() {
	if (this.fHelpContentImage === undefined) {
		this.fHelpContentImage = this.game.add.sprite(255, 155,
				"TajaHelpContent1");
		this.fTajaHelpContentGroup.add(this.fHelpContentImage);
	}
};

// 도움말 이미지 변경
MenuV2.prototype.SetHelpContentImage = function() {
	var helpContent = "";
	if (mHelpCurrentPage === 8) {
		helpContent = "TajaHelpContent9";
	} else {
		helpContent = "TajaHelpContent" + mHelpCurrentPage;
	}
	this.fHelpContentImage.loadTexture(helpContent, 0);

	this.fPageTxt.text = mHelpCurrentPage.toString() + " / 8";
};

/**
 * 설정창.
 */

var mSettingLanguage = [ "한글", "영어" ];
var mSettingHangulKind = [ "두벌식 표준", "세벌식 390", "세벌식 순아래", "세벌식 최종" ];
var mSettingEnglishKind = [ "쿼티", "드보락" ];
var mSettingFingerKind = [ "켜기", "끄기" ];

var mSettingLangCount = 0; // 언어 설정 이동

// 설정창
MenuV2.prototype.SetSettingPopup = function() {
	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = false;
	this.fResultP.visible = false;
	this.fSettingP.visible = true;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	this.SetSettingText();
	this.SettingLangButton();
	this.SettingKindButton();
	this.DrawSettingFinger();
	this.SettingSoundButton();

	key1 = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC);
	key1.onDown.add(this.SetSettingExitPopup, this);
	key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
	key2.onDown.add(this.SetSettingExitPopup, this);
};

// 설정창 텍스트
MenuV2.prototype.SetSettingText = function() {
	this.gameUtil.setText(this.fTxtSetOp2, 0, 24, "center", "top",
			mSettingLanguage[mTajaLanguageType]);
	this.gameUtil.setText(this.fTxtSetOp1, 0, 24, "center", "top", this
			.GetSettingKind());
	this.gameUtil.setText(this.fTxtSetOp3, 0, 24, "center", "top",
			mTajaSoundVolume);
};

// 설정창 자판 설정
MenuV2.prototype.GetSettingKind = function() {
	var kindText = "";

	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		kindText = mSettingHangulKind[mTajaHangulType];
	} else {
		kindText = mSettingEnglishKind[mTajaEnglishType];
	}

	return kindText;
};

// 설정창 닫기
MenuV2.prototype.SetSettingExitPopup = function() {
	this.fPopupGroup.visible = false;
	this.fSettingP.visible = false;
	this.fPopupTransPanel.inputEnabled = false;

	this.TajaConfigDataSave();

	this.KeyboardInit();
	this.ShortPracticeEventButtonShow();

	mSeatPracticsSelect = 0;
	mWordPracticsSelect = 0;

	if (mGameStateType === this.gameConst.GameStateType.SEAT) {
		this.SeatPracticeInit();
	} else if (mGameStateType === this.gameConst.GameStateType.WORD) {
		this.WordPracticeInit();
	} else if (mGameStateType === this.gameConst.GameStateType.SHORT) {
		this.ShortPracticeInit();
	} else if (mGameStateType === this.gameConst.GameStateType.LONG) {
		var continueValue = this.LongContinueRead();
		mLongPracticsSelect = continueValue[0];
		mLongShowPage = continueValue[2];
		// console.log('continueValue:', continueValue);
		if (mLongShowPage > 0) {
			this.SetPublicPopup(2, "진행중이던 긴 글 연습이 있습니다.\n이어서 하시겠습니까?",
					this.ContinueConfirm, this.ContinueCancel);
		}

		if (mLongPracticsSelect === 0) {
			this.LongPracticeMenuTabSelectInit();
		} else if (mLongPracticsSelect === 1) {
			this.LongPracticeMenuTabCallInit();
		} else if (mLongPracticsSelect === 2) {
			this.LongPracticeMenuTabVankInit();
		} else if (mLongPracticsSelect === 3) {
			this.LongPracticeMenuTabConceptInit();
		}

		mLongMenuSavePage = 1;
		mLongMenuSaveTitleSelect = 0;
		this.LongPracticeInit();
	}

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 언어 설정 오른쪽 이동
MenuV2.prototype.MoveSettingLangRight = function() {
	mTajaLanguageType++;

	if (mTajaLanguageType > mSettingLanguage.length - 1) {
		mTajaLanguageType = 0;
	}

	this.SetSettingText();
	this.SettingLangButton();
	this.SettingKindButton();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 언어 설정 왼쪽 이동
MenuV2.prototype.MoveSettingLangLeft = function() {
	mTajaLanguageType--;

	if (mTajaLanguageType < 0)
		mTajaLanguageType = mSettingLanguage.length - 1;

	this.SetSettingText();
	this.SettingLangButton();
	this.SettingKindButton();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 언어 설정 버튼 처리
MenuV2.prototype.SettingLangButton = function() {
	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		this.fSetBtnLeftArrow2.visible = false;
		this.fSetBtnRightArrow2.visible = true;
	} else if (mTajaLanguageType === mSettingLanguage.length - 1) {
		this.fSetBtnLeftArrow2.visible = true;
		this.fSetBtnRightArrow2.visible = false;
	} else {
		this.fSetBtnLeftArrow2.visible = true;
		this.fSetBtnRightArrow2.visible = true;
	}

	this.fSetBtnLeftArrow2.visible = true;
	this.fSetBtnRightArrow2.visible = true;
};

// 설정창 자판 설정 오른쪽 이동
MenuV2.prototype.MoveSettingKindRight = function() {
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		mTajaHangulType++;

		if (mTajaHangulType > mSettingHangulKind.length - 1) {
			mTajaHangulType = 0;
		}
	} else {
		mTajaEnglishType++;

		if (mTajaEnglishType > mSettingEnglishKind.length - 1) {
			mTajaEnglishType = 0;
		}
	}

	this.SetSettingText();
	this.SettingKindButton();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 자판 설정 왼쪽 이동
MenuV2.prototype.MoveSettingKindLeft = function() {
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		mTajaHangulType--;

		if (mTajaHangulType < 0) {
			mTajaHangulType = mSettingHangulKind.length - 1;
		}
	} else {
		mTajaEnglishType--;

		if (mTajaEnglishType < 0) {
			mTajaEnglishType = mSettingEnglishKind.length - 1;
		}
	}

	this.SetSettingText();
	this.SettingKindButton();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 자판 설정 버튼 처리
MenuV2.prototype.SettingKindButton = function() {
	this.fSetBtnLeftArrow.visible = true;
	this.fSetBtnRightArrow.visible = true;
};

// 설정창 사운드 설정 오른쪽 이동
MenuV2.prototype.MoveSettingSoundRight = function() {
	mTajaSoundVolume += 10;

	if (mTajaSoundVolume > 100) {
		mTajaSoundVolume = 100;
	}

	this.SetSettingText();
	this.SettingSoundButton();

	typing_Music.stop();
	this.playAudio(typing_Music, mTajaSoundVolume, true);
	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 사운드 설정 왼쪽 이동
MenuV2.prototype.MoveSettingSoundLeft = function() {
	mTajaSoundVolume -= 10;

	typing_Music.stop();
	this.playAudio(typing_Music, mTajaSoundVolume, true);
	if (mTajaSoundVolume <= 0) {
		typing_Music.stop();
		mTajaSoundVolume = 0;
	}

	this.SetSettingText();
	this.SettingSoundButton();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 사운드 설정 버튼 처리
MenuV2.prototype.SettingSoundButton = function() {
	if (mTajaSoundVolume === 0) {
		this.fSetBtnLeftArrow3.visible = false;
		this.fSetBtnRightArrow3.visible = true;
	} else if (mTajaSoundVolume === 100) {
		this.fSetBtnLeftArrow3.visible = true;
		this.fSetBtnRightArrow3.visible = false;
	} else {
		this.fSetBtnLeftArrow3.visible = true;
		this.fSetBtnRightArrow3.visible = true;
	}
};

// 설정창 손가락 설정
MenuV2.prototype.SettingFinger = function() {
	if (mTajaFingerShow === true) {
		mTajaFingerShow = false;
	} else {
		mTajaFingerShow = true;
	}

	this.DrawSettingFinger();

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 설정창 손가락
MenuV2.prototype.DrawSettingFinger = function() {
	if (mTajaFingerShow === true) {
		this.gameUtil.setText(this.fTxtSetOp4, 0, 24, "center", "top",
				mSettingFingerKind[0]);
	} else {
		this.gameUtil.setText(this.fTxtSetOp4, 0, 24, "center", "top",
				mSettingFingerKind[1]);
	}
};

/**
 * 검정 결과창.
 */

var mTestResultDateArray = [];
var mTestResultValueArray = [];
var mTestResultPersentArray = [];

var mTestResultMaxListBar = 10; // 검정 결과 한 화면에 출력하는 리스트
var mTestResultTotalCount = 0;
var mTestResultTotalPage = 0; // 검정 결과 전체 페이지
var mTestResultPage = 0; // 검정 결과 현제 페이지
var mTestResultDatas = 0; // 검정 결과 세이브 데이터

// 검정 결과창
MenuV2.prototype.SetTestResultPopup = function() {
	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = false;
	this.fResultP.visible = false;
	this.fSettingP.visible = false;
	this.fBResultP.visible = true;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	mTestResultDateArray = [ this.fBResultListDate1, this.fBResultListDate2,
			this.fBResultListDate3, this.fBResultListDate4,
			this.fBResultListDate5, this.fBResultListDate6,
			this.fBResultListDate7, this.fBResultListDate8,
			this.fBResultListDate9, this.fBResultListDate10 ];
	mTestResultValueArray = [ this.fBResultListValue1, this.fBResultListValue2,
			this.fBResultListValue3, this.fBResultListValue4,
			this.fBResultListValue5, this.fBResultListValue6,
			this.fBResultListValue7, this.fBResultListValue8,
			this.fBResultListValue9, this.fBResultListValue10 ];
	mTestResultPersentArray = [ this.fBResultListPersent1,
			this.fBResultListPersent2, this.fBResultListPersent3,
			this.fBResultListPersent4, this.fBResultListPersent5,
			this.fBResultListPersent6, this.fBResultListPersent7,
			this.fBResultListPersent8, this.fBResultListPersent9,
			this.fBResultListPersent10 ];
	mTestResultPageArray = [ this.fBResultListPage1, this.fBResultListPage2,
			this.fBResultListPage3, this.fBResultListPage4,
			this.fBResultListPage5, this.fBResultListPage6,
			this.fBResultListPage7, this.fBResultListPage8,
			this.fBResultListPage9, this.fBResultListPage10 ];
	mTestResultNameArray = [ this.fBResultListName1, this.fBResultListName2,
			this.fBResultListName3, this.fBResultListName4,
			this.fBResultListName5, this.fBResultListName6,
			this.fBResultListName7, this.fBResultListName8,
			this.fBResultListName9, this.fBResultListName10 ];

	mTestResultPage = 1;

	that.ajaxManager.netReqRequestTestResult(that.gameConst.uuid,
			this.netReqRequestTestResultSuccess,
			this.netReqRequestTestResultFail);

	key1 = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC);
	key1.onDown.add(this.SetTestResultExitPopup, this);
	key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
	key2.onDown.add(this.SetTestResultExitPopup, this);
};

// 검정 결과 불러오기 성공
MenuV2.prototype.netReqRequestTestResultSuccess = function(aData) {
	console.log("netReqRequestTestResultSuccess =  " + aData.data.length);

	mTestResultDatas = aData.data;
	if (mTestResultDatas === null) {
		mTestResultTotalCount = 0;
	} else {
		mTestResultTotalCount = mTestResultDatas.length;
	}

	that.LongTestResultBarGroup();
};

// 검정 결과 불러오기 실패
MenuV2.prototype.netReqRequestTestResultFail = function(aResult) {
	console.log("netReqRequestTestResultFail = " + aResult);
};

// 검정 결과 텍스트
MenuV2.prototype.SetTestResultText = function(i, page) {
	var text = null;
	var namePosY = [ 157, 187, 217, 247, 277, 307, 337, 367, 397, 427 ];

	if (page !== -1) {
		var ctx = mTestResultNameArray[i].fText.canvas.getContext("2d");
		ctx.font = mTestResultNameArray[i].fText.font;
		text = ctx.measureText(mTestResultDatas[page].title);
	}

	if (page === -1) {
		this.gameUtil.setText(mTestResultDateArray[i], 0, 0, "center", "top",
				"");
		this.gameUtil.setText(mTestResultValueArray[i], 0, 0, "center", "top",
				"");
		this.gameUtil.setText(mTestResultPersentArray[i], 0, 0, "center",
				"top", "");
		this.gameUtil.setText(mTestResultPageArray[i], 0, 0, "center", "top",
				"");
		mTestResultNameArray[i]
				.setText("", 1, 209, namePosY[i], 180, 25, false);
	} else {
		this.gameUtil.setText(mTestResultDateArray[i], 0, 0, "left", "top",
				mTestResultDatas[page].regit_date.substring(0, 10));
		this.gameUtil.setText(mTestResultValueArray[i], 0, 0, "left", "top",
				mTestResultDatas[page].speed + "타");
		this.gameUtil.setText(mTestResultPersentArray[i], 0, 0, "left", "top",
				mTestResultDatas[page].acc + "%");
		var pageText = mTestResultDatas[page].page_ing + "쪽 / 총 "
				+ mTestResultDatas[page].page_end + "쪽";
		this.gameUtil.setText(mTestResultPageArray[i], 0, 0, "left", "top",
				pageText);
		if (text.width > 170) {
			mTestResultNameArray[i].setText(mTestResultDatas[page].title, 1,
					209, namePosY[i], 180, 25, true);
		} else {
			mTestResultNameArray[i].setText(mTestResultDatas[page].title, 1,
					209, namePosY[i], 180, 25, false);
		}
	}
};

// 검정 결과창 닫기
MenuV2.prototype.SetTestResultExitPopup = function() {
	this.fPopupGroup.visible = false;
	this.fBResultP.visible = false;
	this.fPopupTransPanel.inputEnabled = false;

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 검정 결과 리스트 내용 처리
MenuV2.prototype.LongTestResultBarGroup = function() {
	var pageIndex = (mTestResultPage - 1) * mTestResultMaxListBar; // 현재 페이지 시작
																	// 인덱스
	var pageTotal = mTestResultMaxListBar; // 화면에 출력하는 리스트 갯수

	// 화면에 출력하는 리스트가 10개 보다 작을 경우 몇개 출력해야하는지 계산한다.
	if (mTestResultTotalCount - pageIndex < mTestResultMaxListBar) {
		pageTotal = mTestResultTotalCount - pageIndex;
	}

	// 화면에 출력한 리스트
	for (var i = 0; i < 10; i++) {
		// 화면에 출력할 리스트가 10개 보다 작을 경우 빈 공간으로 채운다.
		if (pageTotal > i) {
			this.SetTestResultText(i, pageIndex + i);
		} else {
			this.SetTestResultText(i, -1);
		}
	}
};

/*
 * 긴글 연습 불러오기 제목 변경.
 */

var mLongChangeTitle = "";
var mLongDataIndex = 0;
var mLongRestoredDatas;

// 불러오기 제목 변경 팝업창
MenuV2.prototype.SetChangeTitlePopup = function(aIndex) {
	if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
		mLongRestoredDatas = JSON.parse(localStorage
				.getItem('longHanLoadDatas'));
	} else {
		mLongRestoredDatas = JSON.parse(localStorage
				.getItem('longEngLoadDatas'));
	}

	if (mLongRestoredDatas.queue.length <= 0)
		return;

	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = false;
	this.fResultP.visible = false;
	this.fSettingP.visible = false;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = true;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	mLongDataIndex = aIndex;

	userTajaTyping.value = "";
	mLongChangeTitle = userTajaTyping.value;

	userTajaTyping.onkeypressed = null;
	userTajaTyping.onkeydown = this.LongChangeTitleCheck;
	userTajaTyping.onkeyup = this.LongChangeTitleCheck;

	key1 = this.game.input.keyboard.addKey(Phaser.Keyboard.ESC);
	key1.onDown.add(this.SetChangeTitleExitPopup, this);
	key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
	key2.onDown.add(this.SetChangeTitleConfirmPopup, this);
};

// 불러오기 제목 변경 텍스트
MenuV2.prototype.SetChangeTitleText = function() {
	ctx = this.fInputFieldtext.canvas.getContext("2d");
	text = ctx.measureText(mLongChangeTitle); // TextMetrics object
	this.fInputCursor.x = 404 + text.width;
	this.gameUtil.setText(this.fInputFieldtext, 0, 24, "left", "top",
			mLongChangeTitle); // 제목
};

// 불러오기 제목 변경 팝업창 확인
MenuV2.prototype.SetChangeTitleConfirmPopup = function() {
	if (mLongChangeTitle.length <= 0) {
		this.SetPublicPopup(1, "제목을 입력하세요.", null, this.SetPublicExitPopup);
	} else if (mLongChangeTitle.length > 10) {
		this.SetPublicPopup(1, "10자 이하로 입력하세요.", null, this.SetPublicExitPopup);
	} else {
		this.SetChangeTitleExitPopup();
		mLongRestoredDatas.queue[mLongDataIndex].name = mLongChangeTitle;
		if (mTajaLanguageType === this.gameConst.LanguageType.HANGUL) {
			localStorage.setItem('longHanLoadDatas', JSON
					.stringify(mLongRestoredDatas));
		} else {
			localStorage.setItem('longEngLoadDatas', JSON
					.stringify(mLongRestoredDatas));
		}
		this.LongPracticeInit();
	}

	this.KeyboardInit();
};

// 불러오기 제목 변경 팝업창 닫기
MenuV2.prototype.SetChangeTitleExitPopup = function() {
	this.fPopupGroup.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = false;

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ESC);
	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	this.playAudio(click_sound, mTajaSoundVolume, false);

	this.KeyboardInit();
};

// 키보드 눌릴 경우 처리
MenuV2.prototype.LongChangeTitleCheck = function(evt) {
	// Pgup, pgdn, END, HOME, LEFT, UP, RIGHT, DOWN 버튼 처리
	if ((evt.keyCode >= 33 && evt.keyCode <= 40) || evt.keyCode === 18) {
		evt.returnValue = false;
		return false;
	}

	if (evt.target.value.length >= 10) {
		userTajaTyping.value = mLongChangeTitle;
		evt.returnValue = false;
		return false;
	}

	mLongChangeTitle = userTajaTyping.value;
};

/*
 * 공용 팝업창.
 */

// 공용 팝업창
MenuV2.prototype.SetPublicPopup = function(aState, aExplan, aConfirm, aCancel) {
	this.fPopupGroup.visible = true;
	this.fGuideHelp.visible = false;
	this.fPublicP.visible = true;
	this.fResultP.visible = false;
	this.fSettingP.visible = false;
	this.fBResultP.visible = false;
	this.fChangeTitleP.visible = false;
	this.fSendResultPoint.visible = false;
	this.fPopupTransPanel.inputEnabled = true;

	this.gameUtil.setText(this.fPublicInfoTxt, 0, 24, "center", "middle",
			aExplan); // 설명

	// ok 버튼
	if (aState === 1) {
		this.fPopupBtn_Ok.visible = true;
		this.fPopupBtn_No.visible = false;
		this.fPopupBtn_Yes.visible = false;
		this.fPopupBtn_Ok.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aCancel, this);
	} // 네, 아니요 버튼
	else if (aState === 2) {
		this.fPopupBtn_Ok.visible = false;
		this.fPopupBtn_No.visible = true;
		this.fPopupBtn_Yes.visible = true;
		this.fPopupBtn_Yes.events.onInputDown.addOnce(aConfirm, this);
		this.fPopupBtn_No.events.onInputDown.addOnce(aCancel, this);

		key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
		key2.onDown.add(aConfirm, this);
	}

	this.fPopupBtn_X.events.onInputDown.addOnce(aCancel, this);
};

// 공용 팝업창 닫기
MenuV2.prototype.SetPublicExitPopup = function() {
	this.fPopupGroup.visible = false;
	this.fPublicP.visible = false;
	this.fPopupTransPanel.inputEnabled = false;
	mTajaGamePopupType = 0;

	this.fPopupBtn_Ok.events.onInputDown.removeAll(this);
	this.fPopupBtn_Yes.events.onInputDown.removeAll(this);
	this.fPopupBtn_No.events.onInputDown.removeAll(this);
	this.fPopupBtn_X.events.onInputDown.removeAll(this);

	this.game.input.keyboard.removeKey(Phaser.Keyboard.ENTER);

	this.playAudio(click_sound, mTajaSoundVolume, false);
};

// 토스트 메세지
MenuV2.prototype.SetToastMessage = function(aExplan, aSecTime) {
	that.fToastMessageGroup.visible = true;
	that.fToastTransPanel.inputEnabled = true;

	that.gameUtil.setText(this.fToastMessageText, 0, 0, "center", "top",
			aExplan);

	if (aSecTime === undefined)
		return;

	that.game.time.events.add(Phaser.Timer.SECOND * aSecTime, function() {
		that.fToastMessageGroup.visible = false;
		that.fToastTransPanel.inputEnabled = false;
	}, that);
};

// 토스트 메세지
MenuV2.prototype.DisableToastMessage = function() {
	that.fToastMessageGroup.visible = false;
	that.fToastTransPanel.inputEnabled = false;
};

// 사운드 플레이
MenuV2.prototype.playAudio = function(aAudio, aVolume, aIsLoop) {

	var isLoop = aIsLoop === undefined ? false : aIsLoop;
	var volume = aVolume === undefined ? 0.5 : (aVolume / 100);

	if (isLoop === true && aAudio.isPlaying === true)
		return;

	aAudio.volume = volume;
	aAudio.loop = isLoop;
	aAudio.play();
};

// 캐릭터 애니메이션
MenuV2.prototype.SetIngameCharacterAni = function(aCharacterType) {
	var characterAni;

	switch (aCharacterType) {
	case that.gameConst.CharacterType.AMOGAE:
		characterAni = new PrefabCharAmogaeV2(this.game, 79.0, 65.0);
		break;

	case that.gameConst.CharacterType.GIGI:
		characterAni = new PrefabCharJiji(this.game, 79.0, 65.0);
		break;

	case that.gameConst.CharacterType.MOA:
		characterAni = new PrefabCharMoa(this.game, 79.0, 65.0);
		break;

	case that.gameConst.CharacterType.MAMANG:
		characterAni = new PrefabCharMamangV2(this.game, 79.0, 65.0);
		break;

	case that.gameConst.CharacterType.YUKBEE:
		characterAni = new PrefabChar6B(this.game, 79.0, 65.0);
		break;

	case that.gameConst.CharacterType.YAYA:
		characterAni = new PrefabCharYaya(this.game, 79.0, 65.0);
		break;

	default:
		characterAni = new PrefabCharAmogaeV2(this.game, 79.0, 65.0);
		break;
	}

	this.fCharSheetUser = characterAni;
	this.fCharSheetUserGroup.add(this.fCharSheetUser);
};

// 손가락 이미지
MenuV2.prototype.createFingerImage = function(aFinger) {
	this.fFingerImage = this.game.add.sprite(150, 282, 'a');
	this.fHandImgs.add(this.fFingerImage);
};

// 손가락 이미지
MenuV2.prototype.setFingerImage = function(aFinger) {
	if (this.fStageInfo12.visible === true
			|| this.fStageInfo22.visible === true) {
		this.fHandImgs.visible = mTajaFingerShow;
		this.fFingerImage.loadTexture(aFinger, 0);
		this.fFingerImage.alpha = 0.5;
	}
};

// 결과창 캐릭터 이미지
MenuV2.prototype.SetResultCharacter = function() {
	var characterImage;

	switch (that.gameConst.userCharacterType) {
	case that.gameConst.CharacterType.AMOGAE:
		characterImage = "ChaIconAmogae";
		break;

	case that.gameConst.CharacterType.GIGI:
		characterImage = "ChaIconGigi";
		break;

	case that.gameConst.CharacterType.MOA:
		characterImage = "ChaIconMoya";
		break;

	case that.gameConst.CharacterType.MAMANG:
		characterImage = "ChaIconMamang";
		break;

	case that.gameConst.CharacterType.YUKBEE:
		characterImage = "ChaIcon6B";
		break;

	case that.gameConst.CharacterType.YAYA:
		characterImage = "ChaIconYaya";
		break;

	default:
		characterImage = "ChaIconAmogae";
		break;
	}

	return characterImage;
};

// 연습 버튼 클릭 시 서버 로그 작업 처리
MenuV2.prototype.SetPracticeLog = function() {
	if (this.fStageInfo12.visible === true) {
		this.SendStartEndGameLog(1, mSeatPracticsSelect + 1, 0, 0);
	}

	if (this.fStageInfo22.visible === true) {
		this.SendStartEndGameLog(2, mWordPracticsSelect + 1, 0, 0);
	}

	if (this.fStageInfo32.visible === true) {
		this.SendStartEndGameLog(3, mShortPracticsSelect + 1, 0, 0);
	}

	if (this.fStageInfo42.visible === true) {
		this.SetLongPracticeLog(0);
	}

	if (this.fStageInfo12.visible === true
			|| this.fStageInfo22.visible === true
			|| this.fStageInfo32.visible === true
			|| this.fStageInfo42.visible === true) {
		this.TajaScoreDataSave();
	}
};

// 긴글 연습 로그 처리
MenuV2.prototype.SetLongPracticeLog = function(aClear) {
	if (mLongPracticsSelect !== this.gameConst.StotyType.STORYCALL) {
		var longIndex = 0;
		if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
			if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
				longIndex = mLongMenuTitleSelect + 1;
			} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
				longIndex = 11 + (mLongMenuTitleSelect + 1);
			} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
				longIndex = 200 + (mLongMenuTitleSelect + 1);
			}
		} else {
			if (mLongPracticsSelect === this.gameConst.StotyType.STORYSELECT) {
				longIndex = mLongMenuTitleSelect + 1;
			} else if (mLongPracticsSelect === this.gameConst.StotyType.STORYVANK) {
				longIndex = 10 + (mLongMenuTitleSelect + 1);
			} else if (mLongPracticsSelect === this.gameConst.StotyType.EVENTCONCEPT) {
				longIndex = 200 + (mLongMenuTitleSelect + 1);
			}
		}
		this.SendStartEndGameLog(4, mLongGameType + 1, longIndex, aClear);
	}
};

// 각 모드별 시작 시간 정의
MenuV2.prototype.SetTajaGameStartTime = function() {
	var date = new Date();
	mTajaStartTime = this.LongTestResultLeadingZeros(date.getFullYear(), 4)
			+ "-" + this.LongTestResultLeadingZeros((date.getMonth() + 1), 2)
			+ "-" + this.LongTestResultLeadingZeros(date.getDate(), 2) + " "
			+ this.LongTestResultLeadingZeros(date.getHours(), 2) + ":"
			+ this.LongTestResultLeadingZeros(date.getMinutes(), 2) + ":"
			+ this.LongTestResultLeadingZeros(date.getSeconds(), 2);
};

// 서버 로그 작업
MenuV2.prototype.SendStartEndGameLog = function(aMClass, aSClass, aLongID,
		aClearID) {
	if (that.gameConst.uuid === 0)
		return;

	var keyId = 0; // 글자판 종류
	// 종료 시간
	var date = new Date();
	var endTime = this.LongTestResultLeadingZeros(date.getFullYear(), 4) + "-"
			+ this.LongTestResultLeadingZeros((date.getMonth() + 1), 2) + "-"
			+ this.LongTestResultLeadingZeros(date.getDate(), 2) + " "
			+ this.LongTestResultLeadingZeros(date.getHours(), 2) + ":"
			+ this.LongTestResultLeadingZeros(date.getMinutes(), 2) + ":"
			+ this.LongTestResultLeadingZeros(date.getSeconds(), 2);

	// 글자판 종류
	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		if (mTajaHangulType === that.gameConst.HangulType.DUBEOLSIG) {
			keyId = 1;
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_390) {
			keyId = 2;
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_SUNALAE) {
			keyId = 3;
		} else if (mTajaHangulType === that.gameConst.HangulType.SEBEOLSIG_FINAL) {
			keyId = 4;
		}
	} else {
		if (mTajaEnglishType === that.gameConst.EnglishType.QWERTY) {
			keyId = 5;
		} else if (mTajaEnglishType === that.gameConst.EnglishType.DVORAK) {
			keyId = 6;
		}
	}

	that.ajaxManager.netReqStartEndGameLog(that.gameConst.uuid,
			that.gameConst.userNickName, keyId, aMClass, aSClass, aLongID,
			aClearID, mTajaStartTime, endTime, that.netResSeverLogSuccess,
			that.netResSeverLogFail);
	// 두벌식/쿼티 글쇠별 타수 저장하기
	var languageType = this.GetGameLanguageType();
	if (mTajaLanguageType === that.gameConst.LanguageType.HANGUL) {
		that.ajaxManager.netReqWriteTwoTypingSpeed(that.gameConst.uuid,
				languageType, mTajaHangulTasu[mTajaHangulType],
				that.netResWriteTwoTypingSpeedSuccess,
				that.netResWriteTwoTypingSpeedFail);
		that.ajaxManager.netReqWriteTwoWordFingerSpeed(that.gameConst.uuid,
				languageType, mTajaHangulFingerRight[mTajaHangulType],
				mTajaHangulFingerSpeed[mTajaHangulType],
				that.netResWriteTwoWordFingerSpeedSuccess,
				that.netResWriteTwoWordFingerSpeedFail);
		that.ajaxManager.netReqWriteTwoWordAcc(that.gameConst.uuid,
				languageType, mTajaHangulTasu[mTajaHangulType],
				mTajaHangulRight[mTajaHangulType],
				that.netResWriteTwoWordAccSuccess,
				that.netResWriteTwoWordAccFail);
		that.ajaxManager.netReqWriteTwoWordVelocity(that.gameConst.uuid,
				languageType, mTajaHangulRight[mTajaHangulType],
				mTajaHangulSpeed[mTajaHangulType],
				that.netResWriteTwoWordVelocitySuccess,
				that.netResWriteTwoWordVelocityFail);
	} else {
		that.ajaxManager.netReqWriteTwoTypingSpeed(that.gameConst.uuid,
				languageType, mTajaEnglishTasu[mTajaEnglishType],
				that.netResWriteTwoTypingSpeedSuccess,
				that.netResWriteTwoTypingSpeedFail);
		that.ajaxManager.netReqWriteTwoWordFingerSpeed(that.gameConst.uuid,
				languageType, mTajaEnglishFingerRight[mTajaEnglishType],
				mTajaEnglishFingerSpeed[mTajaEnglishType],
				that.netResWriteTwoWordFingerSpeedSuccess,
				that.netResWriteTwoWordFingerSpeedFail);
		that.ajaxManager.netReqWriteTwoWordAcc(that.gameConst.uuid,
				languageType, mTajaEnglishTasu[mTajaEnglishType],
				mTajaEnglishRight[mTajaEnglishType],
				that.netResWriteTwoWordAccSuccess,
				that.netResWriteTwoWordAccFail);
		that.ajaxManager.netReqWriteTwoWordVelocity(that.gameConst.uuid,
				languageType, mTajaEnglishRight[mTajaEnglishType],
				mTajaEnglishSpeed[mTajaEnglishType],
				that.netResWriteTwoWordVelocitySuccess,
				that.netResWriteTwoWordVelocityFail);
	}

	this.InitTasuStatistics();
};

MenuV2.prototype.netResSeverLogSuccess = function(aData) {
	console.log("netResSeverLogSuccess = " + aData.result);
};

MenuV2.prototype.netResSeverLogFail = function(aResult) {
	console.log("netResSeverLogFail = " + aResult);
};

MenuV2.prototype.netResWriteUpdatePointSuccess = function(aData) {
	console.log("netResWriteUpdatePointSuccess = " + aData.result);
};

MenuV2.prototype.netResWriteUpdatePointFail = function(aResult) {
	console.log("netResWriteUpdatePointFail = " + aResult);
};

MenuV2.prototype.netResWriteTwoTypingSpeedSuccess = function(aData) {
	console.log("netResWriteTwoTypingSpeedSuccess = " + aData.result);
};

MenuV2.prototype.netResWriteTwoTypingSpeedFail = function(aResult) {
	console.log("netResWriteTwoTypingSpeedFail = " + aResult);
};

MenuV2.prototype.netResWriteTwoWordFingerSpeedSuccess = function(aData) {
	console.log("netResWriteTwoWordFingerSpeedSuccess = " + aData.result);
};

MenuV2.prototype.netResWriteTwoWordFingerSpeedFail = function(aResult) {
	console.log("netResWriteTwoWordFingerSpeedFail = " + aResult);
};

MenuV2.prototype.netResWriteTwoWordAccSuccess = function(aData) {
	console.log("netResWriteTwoWordAccSuccess = " + aData.result);
};

MenuV2.prototype.netResWriteTwoWordAccFail = function(aResult) {
	console.log("netResWriteTwoWordAccFail = " + aResult);
};

MenuV2.prototype.netResWriteTwoWordVelocitySuccess = function(aData) {
	console.log("netResWriteTwoWordVelocitySuccess = " + aData.result);
};

MenuV2.prototype.netResWriteTwoWordVelocityFail = function(aResult) {
	console.log("netResWriteTwoWordVelocityFail = " + aResult);
};

//
MenuV2.prototype.InitQuery = function() {
	switch (that.gameUtil.getQuery('exercise')) {
	case 'key-placements':
		// 자리연습으로 시작
		that.SeatPracticeButton();
		break;

	case 'words-typing':
		// 낱말연습으로 시작
		that.WordPracticeButton();
		break;

	case 'sentence-typing':
		// 짧은글연습으로 시작
		that.ShortPracticeButton();
		break;

	case 'writing-typing':
		// 긴글연습
		that.LongPracticeButton();
		break;

	default:
		// 자리연습으로 시작
		that.SeatPracticeButton();
		break;
	}
};

// 세션아이디 로그인...
function setSessionIDLogin() {

	var sessionID = that.gameUtil.getCookie('session_id');

	if (sessionID === null || sessionID === "") {
		sessionID = that.gameUtil.getCookie('guest_id');
	}

	if (sessionID !== undefined && sessionID !== null && sessionID !== "") {
		that.gameConst.sessionID = sessionID;
		if (that.gameConst.sessionID.indexOf("Guest") != -1) {
			that.gameConst.uuid = 0;
			that.gameConst.userNickName = that.gameConst.sessionID;
			that.gameConst.userCharacterType = Math.floor((Math.random() * 5));
			that.game.time.events.add(Phaser.Timer.SECOND * 0.01, function() {
				netResSessionGuestLoginSuccess();
			}, that);
		} else {
			that.ajaxManager.netReqSessionIDLogin(that.gameConst.sessionID,
					netResSessionIDLoginSuccess, netResSessionIDLoginFail);
		}
	} else {
		that.SetPublicPopup(1, "말랑말랑 로그인이 필요합니다.\n다시 접속해주세요.", null,
				SetPublicQuitPopup);
	}
}

// 세션아이디 로그인...
function setEditSessionIDLogin() {
	that.ajaxManager.netReqSessionIDLogin(that.gameConst.sessionID,
			netResSessionIDLoginSuccess, netResSessionIDLoginFail);
}

// 세션아이디 로그인 성공시...
function netResSessionIDLoginSuccess(aData) {
	// 정보들 저장
	that.gameConst.uuid = aData.uuid;
	that.gameConst.userNickName = aData.nick_name;
	that.gameConst.userCharacterType = aData.character_type;
	that.gameConst.TypingSpeed = aData.target_typing_speed;
	that.gameConst.TypingAccuracy = aData.target_typing_accuracy;
	if (aData.school === null) {
		that.gameConst.School = "없음";
	} else {
		that.gameConst.School = aData.school;
	}

	that.SetIngameCharacterAni(that.gameConst.userCharacterType); // 캐릭터 타입..
	that.fCharSheetUser.visible = true;
	that.fCharSheetUser.setPlay("IDLE");

	that.gameUtil.setText(that.fNicknameTxt, 0, 0, "center", "top",
			that.gameConst.userNickName); // 닉네임..

	that.ajaxManager.netReqRequestGameResult(that.gameConst.uuid,
			netResRequestGameResultSuccess, netResRequestGameResultFail);
	that.ajaxManager.netReqRequestTypingSetup(that.gameConst.uuid,
			netResRequestTypingSetupSuccess, netResRequestTypingSetupFail);
	that.ajaxManager.netReqRequestTypingPosPractice(that.gameConst.uuid,
			netResRequestTypingPosPracticeSuccess,
			netResRequestTypingPosPracticeFail);
}

// 세션아이디 로그인 실패시..
function netResSessionIDLoginFail(aResult) {
	if (aResult === 3101) {
		that.SetPublicPopup(1, "세션이 만료되었습니다.", null, SetPublicQuitPopup);
	} else {
		that.SetPublicPopup(1, "로그인을 실패했습니다.\n다시 로그인해 주십시오.", null,
				SetPublicQuitPopup);
	}
	// 실패 하였습니다.
}

// 게스트 로그인일 경우 닉네임, 캐릭터 애니 처리
function netResSessionGuestLoginSuccess() {
	that.SetIngameCharacterAni(that.gameConst.userCharacterType); // 캐릭터 타입..
	that.fCharSheetUser.visible = true;
	that.fCharSheetUser.setPlay("IDLE");

	that.gameUtil.setText(that.fNicknameTxt, 0, 0, "center", "top",
			that.gameConst.userNickName); // 닉네임..

	that.InitQuery();
}

//
function netReqReadTajaContentsSuccess(aData) {
	var contentsDatas;
	if (aData.data === null) {
		console.log("data is Null!!!!!");
	} else {
		contentsDatas = aData.data;
		if (contentsDatas.length > 0) {
			// CategoryIdx : 1(영문), Type : 2(긴글 이벤트) - 카테고리 레퍼런스 타입 인텍스 타이틀 서버에서
			// 가져옴
			if (contentsDatas[0].CategoryIdx === 1
					&& contentsDatas[0].Type === 2) {
				that.mTajaContentsLongEngDatas = contentsDatas;
				// console.log("===영문 긴글 모두의 타자===");
				// console.log(contentsDatas);
				// console.log(that.mTajaContentsLongEngDatas);
			}
			// CategoryIdx : 2(한글), Type : 2(긴글 이벤트) - 카테고리 레퍼런스 타입 인텍스 타이틀 서버에서
			// 가져옴
			else if (contentsDatas[0].CategoryIdx === 2
					&& contentsDatas[0].Type === 2) {
				that.mTajaContentsLongHanDatas = contentsDatas;
				// console.log("===한글 긴글 모두의 타자===");
				// console.log(contentsDatas);
				// console.log(that.mTajaContentsLongHanDatas);
			}
			// CategoryIdx : 1(영문), Type : 3(긴글 개념원리) - 카테고리 레퍼런스 타입 인텍스 타이틀
			// 서버에서 가져옴
			else if (contentsDatas[0].CategoryIdx === 1
					&& contentsDatas[0].Type === 3) { // 개념원리 와드
				that.mTajaContentsLongConceptEngDatas = contentsDatas;
        // console.log("===영문  짧은 글 개념원리===");
        // console.log(contentsDatas);
			}
			// CategoryIdx : 2(한글), Type : 3(긴글 개념원리) - 카테고리 레퍼런스 타입 인텍스 타이틀
			// 서버에서 가져옴
			else if (contentsDatas[0].CategoryIdx === 2
					&& contentsDatas[0].Type === 3) { // 개념원리 와드
				that.mTajaContentsLongConceptHanDatas = contentsDatas;
        // console.log("===한글 짧은 글 개념원리===");
        // console.log(contentsDatas);
			}
			// CategoryIdx : 1(영문), Type : 1(짧은 글) - 카테고리 레퍼런스 타입 인텍스 타이틀 서버에서
			// 가져옴
			else if (contentsDatas[0].CategoryIdx === 1
					&& contentsDatas[0].Type === 1) {
				that.mTajaContentsShortEngDatas = contentsDatas;
				that.ajaxManager.netReqReadTajaContentsData(
						that.mTajaContentsShortEngDatas[0].Idx,
						netReqReadTajaContentsShortDataSuccess,
						netReqReadTajaContentsShortDataFail);
        // console.log("===영문 짧은글===");
        // console.log(contentsDatas);
			}
			// CategoryIdx : 2(한글), Type : 1(짧은 글) - 카테고리 레퍼런스 타입 인텍스 타이틀 서버에서
			// 가져옴
			else if (contentsDatas[0].CategoryIdx === 2
					&& contentsDatas[0].Type === 1) {
				that.mTajaContentsShortHanDatas = contentsDatas;
				that.ajaxManager.netReqReadTajaContentsData(
						that.mTajaContentsShortHanDatas[0].Idx,
						netReqReadTajaContentsShortDataSuccess,
						netReqReadTajaContentsShortDataFail);
        // console.log("===한글 짧은글===");
        // console.log(contentsDatas);
			}
			// CategoryIdx : 2(한글), Type : 4(반크) - 카테고리 레퍼런스 타입 인텍스 타이틀 서버에서 가져옴
			else if (contentsDatas[0].CategoryIdx === 2
					&& contentsDatas[0].Type === 4) {
// 				// 임시주석처리 20200221
//         mLongMenuHanVankTitleData = [];
//         for (var i = 0; i < contentsDatas.length; i++) {
//         	mLongMenuHanVankTitleData.push(contentsDatas[i].Title);
//         }
//         that.mTajaContentsLongHanVankDatas = contentsDatas;
// //				console.log(mLongMenuHanVankTitleData);
//         console.log("===한글 반크===");
        // console.log(that.mTajaContentsLongHanVankDatas);
			}// CategoryIdx : 1(영어), Type : 4(반크) - 카테고리 레퍼런스 타입 인텍스 타이틀 서버에서
				// 가져옴
			else if (contentsDatas[0].CategoryIdx === 1
					&& contentsDatas[0].Type === 4) {
        // this.mLongMenuEngVankTitleData = [];
        // for (var i = 0; i < contentsDatas.length; i++) {
        //   this.mLongMenuEngVankTitleData.push(contentsDatas[i]);
        // }
        // this.mLongMenuEngVankTitleData = contentsDatas;
        // console.log("===영어 반크===");
        // // console.log(this.mLongMenuEngVankTitleData);
			}
		}
	}
}

// 짧은글 데이터 실패 callback
function netReqReadTajaContentsFail(aResult) {
	console.log("netReqReadTajaContentsFail = " + aResult);
}

// 짧은글 데이터 callback
function netReqReadTajaContentsShortDataSuccess(aData) {
	var textData;
	var saveData = [];
	var tempData = "";
	var index = 0;

	if (aData.data === null) {

	} else {
		textData = aData.data[0].Words;

		for (var i = 0; i < textData.length; i++) {
			if (textData[i] !== '\n' && textData[i] !== '\r\n'
					&& textData[i] !== '\n\t' && textData[i] !== '\n\r') {
				tempData += textData[i];
			} else {
				saveData[index] = tempData;
				tempData = "";
				index++;
			}
		}

		if (tempData.length > 0) {
			saveData[index] = tempData;
		}

		textData = saveData;

		if (aData.data[0].CategoryIdx === 1) {
			mShortPracticeEnglishData[4] = textData;
		} else if (aData.data[0].CategoryIdx === 2) {
			mShortPracticeHangulData[4] = textData;
		}
	}
}

// 총점수 부르기실패
function netReqReadTajaContentsShortDataFail(aResult) {
	console.log("netReqReadTajaContentsShortDataFail = " + aResult);
}

// 내 총점수 부르기
function netResRequestGameResultSuccess(aData) {
	var posDataList;

	if (aData.data === null) {
		mTajaGameScore = 0;
	} else {
		posDataList = aData.data;
		mTajaGameScore = posDataList[0].score;
		// console.log('뭐하는 callback?', posDataList);
	}
}

// 서버에서 설정값불러오는과정 실패
function netResRequestGameResultFail(aResult) {
	console.log("netResRequestGameResultFail = " + aResult);
	if (aResult === 6802) { // 유저 정보에 스코어 값이 없는 경우
		mTajaGameScore = 0;
	} else {
		that.SetPublicPopup(1, "로그인을 실패했습니다.\n다시 로그인해 주십시오..", null,
				SetPublicQuitPopup);
	}
}

// 서버에서 설정값불러와서 저장
function netResRequestTypingSetupSuccess(aData) {
	var setupDataList = aData.data;

	if (setupDataList.length == 0) {
		mTajaLanguageType = 0;
		mTajaHangulType = 0;
		mTajaEnglishType = 0;
		mTajaFingerShow = true;
		mTajaSoundVolume = 50;
	} else {
		mTajaLanguageType = parseInt(setupDataList[0].language);
		mTajaHangulType = setupDataList[0].keyboard1;
		mTajaEnglishType = setupDataList[0].keyboard2;
		if (parseInt(setupDataList[0].fingerguide) === 0) {
			mTajaFingerShow = false;
		} else {
			mTajaFingerShow = true;
		}
		mTajaSoundVolume = parseInt(setupDataList[0].sound);
	}

	that.KeyboardInit();
	that.StageInfo();
}

//
function netResRequestTypingSetupFail(aResult) {
	console.log("netResRequestTypingPosPracticeFail = " + aResult);
	that.SetPublicPopup(1, "로그인을 실패했습니다..\n다시 로그인해 주십시오.", null,
			SetPublicQuitPopup);
}

// 자리연습 데이터 불러오기
function netResRequestTypingPosPracticeSuccess(aData) {
	var posDataList = aData.data;

	for (var i = 0; i < posDataList.length; i++) {
		var languageType = GetResGameLanguageType(posDataList[i].language);
		if (languageType[0] === that.gameConst.LanguageType.HANGUL) {
			mSeatHanCompleteSave[languageType[1]][posDataList[i].step] = 1;
		} else {
			mSeatEngCompleteSave[languageType[1]][posDataList[i].step] = 1;
		}
	}
	that.ajaxManager.netReqRequestTypingWordPractice(that.gameConst.uuid,
			netResRequestTypingWordPracticeSuccess,
			netResRequestTypingWordPracticeFail);
}

// 자리연습 데이터 불러오기 실패
function netResRequestTypingPosPracticeFail(aResult) {
	console.log("netResRequestTypingPosPracticeFail = " + aResult);
	that.SetPublicPopup(1, "로그인을 실패했습니다..\n다시 로그인해 주십시오..", null,
			SetPublicQuitPopup);
}

// 낱말연습 데이터 불러오기
function netResRequestTypingWordPracticeSuccess(aData) {
	var wordDataList = aData.data;

	for (var i = 0; i < wordDataList.length; i++) {
		var languageType = GetResGameLanguageType(wordDataList[i].language);
		if (languageType[0] === that.gameConst.LanguageType.HANGUL) {
			mWordHanCompleteSave[languageType[1]][wordDataList[i].step] = 1;
		} else {
			mWordEngCompleteSave[languageType[1]][wordDataList[i].step] = 1;
		}
	}
	that.ajaxManager.netReqRequestTypingLongWordPractice(that.gameConst.uuid,
			netResRequestTypingLongWordPracticeSuccess,
			netResRequestTypingLongWordPracticeFail);
}

// 낱말연습 데이터 불러오기 실패
function netResRequestTypingWordPracticeFail(aResult) {
	console.log("netResRequestTypingWordPracticeFail = " + aResult);
	that.SetPublicPopup(1, "로그인을 실패했습니다.\n다시 로그인해 주십시오...", null,
			SetPublicQuitPopup);
}

// 긴글연습 데이터 불러오기 (여기다)
function netResRequestTypingLongWordPracticeSuccess(aData) {
	// console.log('긴글데이터 불러오기 값:', aData);
	var longDataList = aData.data;
	// content:0 긴글저장, 1 긴글영어, 2 반크, 3 cont
	for (var i = 0; i < longDataList.length; i++) {
		var languageType = GetResGameLanguageType(longDataList[i].language);
		if (languageType[0] === that.gameConst.LanguageType.HANGUL) {
			if (longDataList[i].content === 0) {
				mLongHanCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].ispracticecomplete;
				mLongHanTestCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].isverifycomplete;
			} else if (longDataList[i].content === 2) {
				mLongHanVankCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].ispracticecomplete;
				mLongHanVankTestCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].isverifycomplete;
			} else if (longDataList[i].content === 3) {
				mLongHanContCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].ispracticecomplete;
				mLongHanContTestCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].isverifycomplete;
			}
		} else {
			if (longDataList[i].content === 0) {
				mLongEngCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].ispracticecomplete;
				mLongEngTestCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].isverifycomplete;
			} else if (longDataList[i].content === 2) {
				mLongEngVankCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].ispracticecomplete;
				mLongEngVankTestCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].isverifycomplete;
			} else if (longDataList[i].content === 3) {
				mLongEngContCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].ispracticecomplete;
				mLongEngContTestCompleteSave[languageType[1]][longDataList[i].step] = longDataList[i].isverifycomplete;
			}
		}
	}
	that.ajaxManager.netReqRequestTypingLongWordContinue(that.gameConst.uuid,
			netResRequestTypingLongWordContinueSuccess,
			netResRequestTypingLongWordContinueFail);
}

//
function netResRequestTypingLongWordPracticeFail(aResult) {
	console.log("netResRequestTypingLongWordPracticeFail = " + aResult);
	that.SetPublicPopup(1, "로그인을 실패했습니다...\n다시 로그인해 주십시오.", null,
			SetPublicQuitPopup);
}

// 여기서 글불러오기를 성공하면 분배
function netResRequestTypingLongWordContinueSuccess(aData) {
	var longDataList = aData.data;
	for (var i = 0; i < longDataList.length; i++) {
		mLongContinueDatas.queue[i].type = longDataList[i].kind;
		mLongContinueDatas.queue[i].select = longDataList[i].type;
		mLongContinueDatas.queue[i].page = longDataList[i].pos;
		mLongContinueDatas.queue[i].acc = longDataList[i].acc;
	}

	that.InitQuery();
	// todo : 친구 초대 메시지 작업
	SetFriendVisitePopup();
}

// result 보여줄때 네트워크 에러로 팅겨냄
function netResRequestTypingLongWordContinueFail(aResult) {
	console.log("netResRequestTypingWordContinueFail = " + aResult);
	that.SetPublicPopup(1, "로그인을 실패했습니다...\n다시 로그인해 주십시오...", null,
			SetPublicQuitPopup);
}

// 서버에서 받은 언어 타입을 변경 [0] : 0 = 한글, 1 = 영어, [1] : 한글 (두벌식[0], 세벌식 390[1], 세벌식
// 순아래[2], 세벌식 최종[3]), 영어 (쿼티[0], 드보락[1])
function GetResGameLanguageType(aLanguage) {
	var languageType = [ 0, 0 ];

	if (aLanguage === 1 || aLanguage === 2) {
		languageType[0] = 1;
		languageType[1] = aLanguage - 1;
	} else {
		languageType[0] = 0;
		if (aLanguage === 0) {
			languageType[1] = 0;
		} else if (aLanguage === 3) {
			languageType[1] = 1;
		} else if (aLanguage === 4) {
			languageType[1] = 2;
		} else if (aLanguage === 5) {
			languageType[1] = 3;
		}
	}

	return languageType;
}

// 한컴타자 종료
function SetPublicQuitPopup() {
	window.close();
}

function SetFriendVisitePopup() {
	var site = window.location.host;

	if (site.indexOf('localhost') != -1) {
		host = 'http://localhost:7302';
	} else if (site.indexOf("dev-") != -1) {
		host = 'https://dev-typing.malangmalang.com';
	} else if (site.indexOf("stg-") != -1) {
		host = 'https://stg-typing.malangmalang.com';
	} else {
		host = 'https://typing.malangmalang.com';
	}

	var script = document.createElement('script');
	script.setAttribute('type', 'text/javascript');
	script.setAttribute('src', host + '/assets/javascripts/tt-sdk.js');
	script.onload = function() {
		ttsdk.init(10003);
	};
	document.getElementsByTagName('head')[0].appendChild(script);

	var stylesheet = document.createElement('link');
	stylesheet.setAttribute('rel', 'stylesheet');
	stylesheet.setAttribute('type', 'text/css');
	stylesheet.setAttribute('href', host + '/assets/stylesheets/tt-sdk.css');
	document.getElementsByTagName('head')[0].appendChild(stylesheet);
}