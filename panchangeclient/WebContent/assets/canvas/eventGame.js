
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * eventGame.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function eventGame(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _ImgBTranslucency = this.game.add.sprite(0.0, 0.0, 'ImgBTranslucency', null, this);
	_ImgBTranslucency.scale.setTo(300.0, 200.0);
	_ImgBTranslucency.anchor.setTo(0.5, 0.5);
	
	var _eventBoards = this.game.add.group(this);
	_eventBoards.position.setTo(0.0, 50.0);
	
	var _board0 = new eventBoard(this.game, _eventBoards);
	_board0.position.setTo(750.0, 0.0);
	
	var _board1 = new eventBoard(this.game, _eventBoards);
	_board1.position.setTo(1050.0, 0.0);
	
	var _board2 = new eventBoard(this.game, _eventBoards);
	_board2.position.setTo(1350.0, 0.0);
	
	var _watchGroup = this.game.add.group(_eventBoards);
	_watchGroup.scale.setTo(0.0, 0.0);
	_watchGroup.pivot.setTo(0.5, 0.5);
	
	var _ImgEventWatch = this.game.add.sprite(0.0, -265.0, 'ImgEventWatch', null, _watchGroup);
	_ImgEventWatch.anchor.setTo(0.5, 0.5);
	
	var _eventTimerText = this.game.add.text(0.0, -257.0, '20', {"font":"55px Nanum Gothic","align":"center"}, _watchGroup);
	_eventTimerText.anchor.setTo(0.5, 0.5);
	
	var _eventStart = this.game.add.group(this);
	_eventStart.position.setTo(750.0, 0.0);
	
	var _ImgEventTime = this.game.add.sprite(0.0, 0.0, 'ImgEventTime1', null, _eventStart);
	_ImgEventTime.anchor.setTo(0.5, 0.5);
	
	var _ImgEventTime1 = this.game.add.sprite(0.0, 0.0, 'ImgEventTime2', null, _eventStart);
	_ImgEventTime1.scale.setTo(0.0, 0.0);
	_ImgEventTime1.anchor.setTo(0.5, 0.5);
	
	var _eventResult = this.game.add.group(this);
	
	var _PopPanelNotice = this.game.add.sprite(0.0, 0.0, 'PopPanelNotice', null, _eventResult);
	_PopPanelNotice.anchor.setTo(0.5, 0.5);
	
	var _STitleTeamBTotal = this.game.add.sprite(120.0, 0.0, 'STitleTeamBTotal', null, _eventResult);
	_STitleTeamBTotal.anchor.setTo(0.5, 0.5);
	
	var _STitleTeamRTotal = this.game.add.sprite(-120.0, 0.0, 'STitleTeamRTotal', null, _eventResult);
	_STitleTeamRTotal.anchor.setTo(0.5, 0.5);
	
	var _TitleEventEnd = this.game.add.sprite(0.0, -80.0, 'TitleEventEnd', null, _eventResult);
	_TitleEventEnd.anchor.setTo(0.5, 0.5);
	
	var _BarM02 = this.game.add.sprite(120.0, 40.0, 'BarM2', null, _eventResult);
	_BarM02.anchor.setTo(0.5, 0.5);
	
	var _BarM01 = this.game.add.sprite(-120.0, 40.0, 'BarM2', null, _eventResult);
	_BarM01.anchor.setTo(0.5, 0.5);
	
	var _redScore = this.game.add.text(-120.0, 40.0, '0점 획득', {"font":"bold 25px Nanum Gothic","fill":"#ffffff","align":"center"}, _eventResult);
	_redScore.anchor.setTo(0.5, 0.5);
	
	var _blueScore = this.game.add.text(120.0, 40.0, '1000점 획득', {"font":"bold 25px Nanum Gothic","fill":"#ffffff","align":"center"}, _eventResult);
	_blueScore.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fImgBTranslucency = _ImgBTranslucency;
	this.fEventBoards = _eventBoards;
	this.fBoard0 = _board0;
	this.fBoard1 = _board1;
	this.fBoard2 = _board2;
	this.fWatchGroup = _watchGroup;
	this.fEventTimerText = _eventTimerText;
	this.fEventStart = _eventStart;
	this.fImgEventTime = _ImgEventTime;
	this.fImgEventTime1 = _ImgEventTime1;
	this.fEventResult = _eventResult;
	this.fRedScore = _redScore;
	this.fBlueScore = _blueScore;
	
	this.gameManager;
	this.boards = [_board0, _board1, _board2];
			
	//score
	this.flipCount = 0;
	this.redTeamScore = 0;
	this.blueTeamScore = 0;
				
	//timer
	this.fEventTimerText.text = eventTimeSeconds;
	this.timer;
	this.timeInSeconds = eventTimeSeconds;
	
	//Event start animation (bounce)
	this.setStartTween();
	this.fEventResult.visible = false;
	
	//backgoround input block
	//this.fImgBTranslucency.inputEnabled = true;
	//this.fImgBTranslucency.events.onInputOver.add(this.blockInput, this);
	
}

/** @type Phaser.Group */
var eventGame_proto = Object.create(Phaser.Group.prototype);
eventGame.prototype = eventGame_proto;
eventGame.prototype.constructor = eventGame;

/* --- end generated code --- */
// -- user code here --

var eventTimeSeconds = 20;

eventGame.prototype.setStartTween = function() {
//	bouncingTween = this.game.add.tween(_ImgEventTime1.scale);
//	bouncingTween.to({x : 1.0, y : 1.0}, 1000, Phaser.Easing.Bounce.Out);
//	bouncingTween.onComplete.addOnce(this.waitAndKillStart, this);
//	bouncingTween.start();
	showStartTween = this.game.add.tween(this.fEventStart).to({x : 0}, 200, Phaser.Easing.Linear.None);
	showTitleTween = this.game.add.tween(this.fImgEventTime1.scale).to({x : 1, y : 1}, 200, Phaser.Easing.Linear.None);
	goStartTween = this.game.add.tween(this.fEventStart).to({x : -750}, 200, Phaser.Easing.Linear.None, false, 600);
	
	goStartTween.onComplete.addOnce(this.showMainEvent, this);
	
	showStartTween.chain(showTitleTween, goStartTween);
	showStartTween.start();
};

eventGame.prototype.showMainEvent = function() {
	//-300, 0, 300
	show1Tween = this.game.add.tween(this.fBoard0).to({x : -300}, 200, Phaser.Easing.Linear.None, false, 50);
	show2Tween = this.game.add.tween(this.fBoard1).to({x : 0}, 200, Phaser.Easing.Linear.None, false, 100);
	show3Tween = this.game.add.tween(this.fBoard2).to({x : 300}, 200, Phaser.Easing.Linear.None, false, 150);
	
	showWatchTween = this.game.add.tween(this.fWatchGroup.scale).to({x:1, y:1}, 300, Phaser.Easing.Bounce.Out, false, 100);
	showWatchTween.onComplete.addOnce(this.createTimer, this);		//start timer + bgm start
	
	show3Tween.chain(showWatchTween);
	
	show1Tween.start();
	show2Tween.start();
	show3Tween.start();
	
	//this.createTimer();
	this.blinkTween = this.game.add.tween(this.fEventTimerText).to({alpha : 0.5}, 500, Phaser.Easing.Linear.None, false, 0, -1, true);
};


eventGame.prototype.createTimer = function() {
	this.timer = this.game.time.events.loop(Phaser.Timer.SECOND, this.updateTimer, this);
	
	this.game.audioManager.playBgm("Card_eve");
};

eventGame.prototype.updateTimer = function() {
	if (this.timeInSeconds > 0) {
		this.timeInSeconds--;
		
		//blink
		if (this.timeInSeconds == 5) {
			this.blinkTween.start();
			if (this.game.gameManager.isLastEvent == false) {
				this.game.audioManager.playSfxLoop('Time_danger');
			}
			//this.game.audioManager.playSfxLoop('Time_danger');
		}
	}
	this.fEventTimerText.text = this.timeInSeconds;
	
	if (this.timeInSeconds == 0 || this.flipCount > 2) {
		this.game.time.events.remove(this.timer);
		this.game.audioManager.stopAllSound();
		
		//input disable
		this.game.gameManager.inputTextUnavailable = true;
		
		//X sign
		this.boards.forEach(function(board) {
			if (board.flipped == false) { board.fail(); }
		});
		
		//wait event before result
		var waitTimeForShowResult = 2;
		this.game.time.events.add(Phaser.Timer.SECOND * waitTimeForShowResult, this.showResult, this);
	}
};

eventGame.prototype.flip = function(boardIndex, color, userName, avatar) {
	
	if (this.boards[boardIndex].flipped) {return;}
	
	if (color == "RED") {
		this.redTeamScore++;
	} else {
		this.blueTeamScore++;
	}
	this.flipCount++;
	this.boards[boardIndex].flip(color, userName, avatar);
};

eventGame.prototype.showResult = function() {
	//Setting result
	this.fRedScore.text = String(this.redTeamScore * eventScorePoint) + "점 획득";
	this.fBlueScore.text = String(this.blueTeamScore * eventScorePoint) + "점 획득";
	
	//Show result
	this.fEventBoards.visible = false;
	this.fEventResult.visible = true;
	
	//sfx + stop bgm
	this.game.audioManager.stopBgm();
	this.game.audioManager.playSfx("Card_even");
	
	//wait event before kill
	var waitTimeForKillEvent = 3;
	this.game.time.events.add(Phaser.Timer.SECOND * waitTimeForKillEvent, this.killEvent, this);
};

eventGame.prototype.killEvent = function() {
	//input enable & clear
	this.game.gameManager.inputTextUnavailable = false;
	
	this.game.gameManager.gameStatus = "play";
	this.game.gameManager.nowEventId += 1;
	
	this.game.gameManager.level.clearInput();
	
	//item enable
	this.game.itemManager.activeItemSpawn();
	
	//start normal bgm & sfx
	this.game.audioManager.playBgm("Card_music");
	
	if (this.game.gameManager.isLastEvent) {
		this.game.audioManager.playSfxLoop('Time_danger');
	}
	
	this.game.gameManager.getLastEventAnswers();
	
	this.destroy();
};


eventGame.prototype.setGameManager = function(gm) {
	this.gameManager = gm;
	this.gameManager.gameStatus = "event";
};

eventGame.prototype.blockInput = function() {
	console.log("block");
};