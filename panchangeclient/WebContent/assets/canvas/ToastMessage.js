
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * ToastMessage.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function ToastMessage(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _PanelToastMessage = this.game.add.sprite(0.0, 0.0, 'PanelToastMessage', null, this);
	_PanelToastMessage.scale.setTo(5.0, 0.7);
	_PanelToastMessage.anchor.setTo(0.5, 0.5);
	
	var _Message = this.game.add.text(0.0, 0.0, '메시지를 입력하세요', {"font":"20px Nanum Gothic","fill":"#ffffff","align":"center"}, this);
	_Message.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fMessage = _Message;
	
}

/** @type Phaser.Group */
var ToastMessage_proto = Object.create(Phaser.Group.prototype);
ToastMessage.prototype = ToastMessage_proto;
ToastMessage.prototype.constructor = ToastMessage;

/* --- end generated code --- */
// -- user code here --

ToastMessage.prototype.show = function(message) {
	this.alpha = 0.0;
	this.fMessage.text = message;
	
	appear = this.game.add.tween(this).to({alpha:1}, 250, Phaser.Easing.Linear.None, true, 0);
	disappear = this.game.add.tween(this).to({alpha:0}, 250, Phaser.Easing.Linear.None, false, 1500);
	
	appear.chain(disappear);
	disappear.onComplete.addOnce(this.kill, this);
	
	appear.start();
};

ToastMessage.prototype.kill = function() {
	this.destroy();
};