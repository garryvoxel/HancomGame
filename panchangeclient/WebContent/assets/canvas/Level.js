
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {
	Phaser.State.call(this);	
}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.initUserField();
};

Level.prototype.preload = function () {
	console.log("PRELOAD");
	//this.game.load.image('LoadingBackImg', 'assets/image/LoadingBackImg.png');
	this.game.stage.disableVisibilityChange = true;
	this.setLoading();
	this.load.pack('main', 'assets/pack.json');
	this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser-ce/master/filters/Pixelate.js');
};

Level.prototype.create = function () {
	
	console.log("CREATE");
	
	var _backGround = new BackGround(this.game);
	
	var _mainGame = new mainGameBoards(this.game);
	_mainGame.position.setTo(150.0, 120.0);
	
	this.add.sprite(0.0, 100.0, 'PanelTeamListR');
	
	this.add.sprite(923.0, 100.0, 'PanelTeamListB');
	
	var _MyRankPanelR = this.add.sprite(10.0, 419.0, 'MyRankPanelR');
	
	var _MyRankPanelB = this.add.sprite(948.0, 419.0, 'MyRankPanelB');
	
	var _InputPanel = this.add.sprite(512.0, 520.0, 'InputPanel');
	_InputPanel.anchor.setTo(0.5, 0.0);
	
	var _BtnInputTxt = this.add.button(618.0, 533.0, 'BtnInputTxt', this.pushEnter, this, 1, 0, 2, null);
	
	var _InputCursorSheet = this.add.sprite(350.0, 541.0, 'InputCursorSheet', 0);
	var _InputCursorSheet_blink = _InputCursorSheet.animations.add('blink', [0, 1], 1, true);
	_InputCursorSheet_blink.play();
	
	var _redTeamUI = this.add.group();
	_redTeamUI.position.setTo(44.0, 173.0);
	
	var _redTotalScore = this.add.text(0.0, 0.0, '0점', {"font":"14px Nanum Gothic","fill":"#ffffff","align":"center"}, _redTeamUI);
	_redTotalScore.anchor.setTo(0.5, 0.0);
	
	var _redPlayer1 = this.add.text(0.0, 88.0, '', {"font":"13px Nanum Gothic","fill":"#ffffff","align":"center"}, _redTeamUI);
	_redPlayer1.anchor.setTo(0.5, 0.0);
	
	var _redPlayer2 = this.add.text(0.0, 152.0, '', {"font":"13px Nanum Gothic","fill":"#ffffff","align":"center"}, _redTeamUI);
	_redPlayer2.anchor.setTo(0.5, 0.0);
	
	var _redPlayer3 = this.add.text(0.0, 215.0, '', {"font":"13px Nanum Gothic","fill":"#ffffff","align":"center"}, _redTeamUI);
	_redPlayer3.anchor.setTo(0.5, 0.0);
	
	var _redNowRanking = this.add.text(0.0, 277.0, '00위', {"font":"16px Nanum Gothic","fill":"#ffffff","align":"center"}, _redTeamUI);
	_redNowRanking.anchor.setTo(0.5, 0.0);
	
	var _blueTeamUI = this.add.group();
	_blueTeamUI.position.setTo(979.0, 173.0);
	
	var _blueTotalScore = this.add.text(0.0, 0.0, '0점', {"font":"14px Nanum Gothic","fill":"#ffffff","align":"center"}, _blueTeamUI);
	_blueTotalScore.renderable = false;
	_blueTotalScore.anchor.setTo(0.5, 0.0);
	
	var _bluePlayer1 = this.add.text(0.0, 88.0, '', {"font":"13px Nanum Gothic","fill":"#ffffff","align":"center"}, _blueTeamUI);
	_bluePlayer1.anchor.setTo(0.5, 0.0);
	
	var _bluePlayer2 = this.add.text(0.0, 152.0, '', {"font":"13px Nanum Gothic","fill":"#ffffff","align":"center"}, _blueTeamUI);
	_bluePlayer2.anchor.setTo(0.5, 0.0);
	
	var _bluePlayer3 = this.add.text(0.0, 215.0, '', {"font":"13px Nanum Gothic","fill":"#ffffff","align":"center"}, _blueTeamUI);
	_bluePlayer3.anchor.setTo(0.5, 0.0);
	
	var _blueNowRanking = this.add.text(0.0, 279.0, '00위', {"font":"16px Nanum Gothic","fill":"#ffffff","align":"center"}, _blueTeamUI);
	_blueNowRanking.anchor.setTo(0.5, 0.0);
	
	var _PanelMeBlue = this.add.sprite(904.0, 700.0, 'PanelMe2');
	
	var _PanelMeRed = this.add.sprite(75.0, 700.0, 'PanelMe');
	
	this.add.sprite(14.0, 508.0, 'RedBonusPanel');
	
	var _BlueBonusPanel = this.add.sprite(1010.0, 508.0, 'BlueBonusPanel');
	_BlueBonusPanel.anchor.setTo(1.0, 0.0);
	
	var _redBonusScore = this.add.text(111.0, 520.0, '88888', {"font":"30px Nanum Gothic","fill":"#ffffff","strokeThickness":4});
	_redBonusScore.anchor.setTo(0.5, 0.0);
	
	var _blueBonusScore = this.add.text(911.0, 520.0, '88888', {"font":"30px Nanum Gothic","fill":"#ffffff","strokeThickness":4,"align":"center"});
	_blueBonusScore.anchor.setTo(0.5, 0.0);
	
	var _itemNotify = new itemNotify(this.game);
	
	var _TOW = new tugOfWar(this.game);
	_TOW.position.setTo(512.0, 40.0);
	
	var _myScore = new scorePrefab(this.game);
	_myScore.position.setTo(8.0, 2.0);
	
	var _mainTime = new mainTime(this.game);
	_mainTime.position.setTo(804.0, 0.0);
	
	var _startNotice_blueTeam = this.add.sprite(500.0, 75.0, 'startNotice_blueTeam');
	_startNotice_blueTeam.alpha = 0.0;
	_startNotice_blueTeam.anchor.setTo(0.5, 0.0);
	
	var _startNotice_reaTeam = this.add.sprite(500.0, 75.0, 'startNotice_reaTeam');
	_startNotice_reaTeam.alpha = 0.0;
	_startNotice_reaTeam.anchor.setTo(0.5, 0.0);
	
	var _startCountDown = new startCountDown(this.game);
	_startCountDown.position.setTo(512.0, 288.0);
	
	var _readyForMsg = new readyForOtherPlayers(this.game);
	_readyForMsg.position.setTo(500.0, 200.0);
	
	
	
	// fields
	
	this.fBackGround = _backGround;
	this.fMainGame = _mainGame;
	this.fMyRankPanelR = _MyRankPanelR;
	this.fMyRankPanelB = _MyRankPanelB;
	this.fInputPanel = _InputPanel;
	this.fBtnInputTxt = _BtnInputTxt;
	this.fInputCursorSheet = _InputCursorSheet;
	this.fRedTotalScore = _redTotalScore;
	this.fRedPlayer1 = _redPlayer1;
	this.fRedPlayer2 = _redPlayer2;
	this.fRedPlayer3 = _redPlayer3;
	this.fRedNowRanking = _redNowRanking;
	this.fBlueTotalScore = _blueTotalScore;
	this.fBluePlayer1 = _bluePlayer1;
	this.fBluePlayer2 = _bluePlayer2;
	this.fBluePlayer3 = _bluePlayer3;
	this.fBlueNowRanking = _blueNowRanking;
	this.fPanelMeBlue = _PanelMeBlue;
	this.fPanelMeRed = _PanelMeRed;
	this.fRedBonusScore = _redBonusScore;
	this.fBlueBonusScore = _blueBonusScore;
	this.fItemNotify = _itemNotify;
	this.fTOW = _TOW;
	this.fMyScore = _myScore;
	this.fMainTime = _mainTime;
	this.fStartNotice_blueTeam = _startNotice_blueTeam;
	this.fStartNotice_reaTeam = _startNotice_reaTeam;
	this.fStartCountDown = _startCountDown;
	this.fReadyForMsg = _readyForMsg;
	this.afterCreate();
	
};

/* --- end generated code --- */
// -- user code here --

var gameManager;

var inputField;
var inputX = 600;
var inputWidth = 250;
var inputHeight = 46;

Level.prototype.afterCreate = function() {
	
	thisGame = this.game;
	
	userTajaTyping.onkeyup = this.userWordsCheck;
	userTajaTyping.onkeypress = this.checkKeyEvent;
	userTajaTyping.onkeydown = this.preventCursorMove;
	//
	
	//background
	this.fBackGround.setBackGround(8);
	
	//boards
	this.fMainGame.createBoards();
	
	//gameManager
	gameManager = new GameManager(this.game);
	this.game.gameManager = gameManager;
	this.game.gameManager.level = this;
	
	//normalTimer
	this.game.normalTimer = new normalTimer(this.game);
	
	//mainTime
	this.game.mainTime = this.fMainTime;
	
	//mainGame
	this.game.smallBoards = this.fMainGame;
	//gameManager.settingAnswers();
	
	//itemManager
	this.game.itemManager = new ItemManager(this.game);
	
	//score
	this.game.myScore = this.fMyScore;
	
	//item norify
	this.game.itemNotify = this.fItemNotify;
	
	//inputPanel
	this.game.inputPanel = this.fInputPanel;
	
	//inputField
	var inputStyle = { font: "20px Nanum Gothic", fill: "white", align: "left"};
	//inputField = this.add.text(inputX, this.world.height - inputHeight, "", inputStyle);
	inputField = this.add.text(inputX - inputWidth, this.world.height - inputHeight + 8, "", inputStyle);
	inputField.anchor.setTo(1, 0);
	mask = this.game.add.graphics(0, 0);
	mask.beginFill(0xffffff);
	mask.drawRect(inputX - inputWidth, this.world.height - inputHeight + 8, inputWidth, inputHeight);
	inputField.mask = mask;
	
	//depth setting
	bringTopGroup(this.fTOW);
	bringTopGroup(this.fStartNotice_blueTeam);
	bringTopGroup(this.fStartNotice_reaTeam);
	bringTopGroup(this.fStartCountDown);
	bringTopGroup(this.fItemNotify);
	//bringTopGroup(this.fMyRankPanelB);
	//bringTopGroup(this.fMyRankPanelR);
	bringTopGroup(this.fRedNowRanking);
	bringTopGroup(this.fBlueNowRanking);
	bringTopGroup(this.fPanelMeRed);
	bringTopGroup(this.fPanelMeBlue);
	bringTopGroup(this.fReadyForMsg);
	
	//Toast message
	this.toastPosX = 512;
	this.toastPosY = 500;
	
	//rendering
	this.game.renderer.roundPixels = true;
	
	this.game.socketManager.loadedLevel();
	
	this.game.onFocus.add(this.whenOnFocus, this);
};

Level.prototype.initUserField = function() {
	onUserTextField = "<DIV id=" + "TajaControlUser" + " style="
			+ "position:absolute;left:" + "375" + "px;top:" + "-100"
			+ "px;width:300px;height:22px;" + "focus" + ">";

	onUserTextFieldInput = "<input type="
			+ "text"
			+ " id="
			+ "userTajaTyping"
			+ " style='border:0px; border-style : none; background-color:transparent; color : white; outline-style:none;'"
			//+ " onfocus=" + "this.value = this.value;"
			+ " autofocus><br>" + "</div>";

	userTajaBackground.innerHTML = onUserTextField + onUserTextFieldInput;
	
	//Prevent copy and paste
	const myInput = document.getElementById('userTajaTyping');
	myInput.onpaste = function(e) {
		e.preventDefault();
	};
};

Level.prototype.pushEnter = function() {
//	this.game.audioManager.playSfx('Click');
//	var event = new Event('keyup');
//	event.keyCode = 13;
//	event.key = "Enter";
//	this.userWordsCheck(event);
	
	var wordAnswer = userTajaTyping.value;
	
	if (wordAnswer.length < 1) {return;}
	
	if (gameManager.gameStatus == "play" || gameManager.gameStatus == "event") {
		
		//ENTER
		console.log("CHECK ANSWER");
		console.log(wordAnswer);
		gameManager.checkAnswer(wordAnswer);
		userTajaTyping.value = "";
		
	} else {
		userTajaTyping.value = "";
		console.log("input unavailable - gameStatus");
		return;
	}
	
	//set typingContent to textObject's text
	inputField.setText(userTajaTyping.value);
	//move textObject (like textfield)
	if (inputField.width < inputWidth) {
		inputField.x = inputX - (inputWidth - inputField.width);
	} else {
		inputField.x = inputX;
	}
};

Level.prototype.preventCursorMove = function(evt) {
	if (evt.key == "ArrowLeft" || evt.key == "ArrowRight" || evt.key == "ArrowUp" || evt.key == "ArrowDown" ||
			evt.key == "Left" || evt.key == "Right" || evt.key == "Up" || evt.key == "Down" ||
			evt.key == "Home" || evt.key == "End") {
		console.log("prevent arrow key");
		evt.preventDefault();
	}
};

Level.prototype.checkKeyEvent = function(evt) {
	
	console.log(evt.key);
	
	if (evt.key == "Backspace" || evt.key == "Enter" || evt.key == "Spacebar") {
        return;
    }
	
	var pattern = /[^(a-zA-Z)]/;
    if (pattern.test(evt.key) == false) {
    	gameManager.newToastMessage("영문 자판이 활성화 중입니다. 키보드를 한글자판으로 바꿔주세요.");
		evt.preventDefault();
	}
};

Level.prototype.userWordsCheck = function(evt) {
	
	var wordAnswer = userTajaTyping.value;
	
	if (gameManager.inputTextUnavailable) {
		userTajaTyping.value = "";
		console.log("input unavailable - inputSetting");
		return;
	}
	
	if (wordAnswer.length > 1) {
		var lastWord = wordAnswer.slice(-1);
		console.log("lastWord" + lastWord);
		var pattern = /[^(a-zA-Z)]/;
	    if (pattern.test(lastWord) == false) {
	    	gameManager.newToastMessage("영문 자판이 활성화 중입니다. 키보드를 한글자판으로 바꿔주세요.");
	    	wordAnswer = wordAnswer.substring(0, wordAnswer.length - 1);
	    	console.log("trimmedWord" + wordAnswer);
	    	userTajaTyping.value = wordAnswer;
		}
	}
	
	var keyCode = evt.which || evt.keyCode;
	
	if (gameManager.gameStatus == "play") {
		
		if (keyCode == 13 || evt.key == "Enter") {
			//ENTER
			console.log("CHECK ANSWER");
			console.log(wordAnswer);
			gameManager.checkAnswer(wordAnswer);
			userTajaTyping.value = "";
		} else if (keyCode == 32 || evt.key == "Spacebar") {
			//SPACE
			console.log("CHECK ANSWER");
			console.log(wordAnswer);
			gameManager.checkAnswer(wordAnswer.slice(0, -1));
			userTajaTyping.value = "";
		}
		
	} else if (gameManager.gameStatus == "event") {
		
		if (keyCode == 13 || evt.key == "Enter") {
			//ENTER
			//console.log(wordAnswer);
			gameManager.checkEventAnswer(wordAnswer);
			userTajaTyping.value = "";
		}
		//Check nowTyping is Correct
		gameManager.checkEventTyping(wordAnswer);
		
	} else {
		userTajaTyping.value = "";
		console.log("input unavailable - gameStatus");
		return;
	}
	
	//set typingContent to textObject's text
	inputField.setText(userTajaTyping.value);
	//move textObject (like textfield)
	if (inputField.width < inputWidth) {
		inputField.x = inputX - (inputWidth - inputField.width);
	} else {
		inputField.x = inputX;
	}
};

Level.prototype.clearInput = function() {
	inputField.setText("");
	userTajaTyping.value = "";
};

Level.prototype.update = function() {
 
	// update 최상단에서 호출...항상 키 포커스를 유지한다.
	userTajaTyping.focus();	
	
	this.game.normalTimer.update();
	
	//cursor
	if (gameManager != null && inputField != null) {
		//set cursor position
		if (gameManager.gameStatus == "ready") {
			this.fInputCursorSheet.x = inputX - inputWidth;
		} else {
			this.fInputCursorSheet.x = inputField.right;
		}
		
		if (gameManager.inputTextUnavailable) {
			//hide cursor
			this.fInputCursorSheet.alpha = 0.0;
		} else {
			//show cursor
			this.fInputCursorSheet.alpha = 1.0;
		}
	} else {
		//hide cursor
		this.fInputCursorSheet.alpha = 0.0;
	}
 
	if(this.game.socketManager.onSocket === false && this.game.socketManager.forceExit) {
		this.game.panAlert("서버와의 연결이 끊겼습니다.\n다시 접속해주세요.", function() {
			window.close();
		});
	}
};


Level.prototype.render = function() {
	
};

Level.prototype.setNameSize = function(group, name) {
//	_sizeArr = [8, 9, 10, 12, 14];
//	_length = name.length;
//	
//	if (_length > 8) {
//		group.fontSize = 8;
//	} else if (_length < 4 ) {
//		group.fontSize = 14;
//	} else {
//		group.fontSize = _sizeArr[_length - 4];
//	}
//	
//	group.setText(name);
};


Level.prototype.bringTopInputGroup = function() {
	bringTopGroup(this.fInputPanel);
	bringTopGroup(this.fBtnInputTxt);
	bringTopGroup(inputField);
	bringTopGroup(this.fInputCursorSheet);
};


function bringTopGroup(group) {
	thisGame.world.bringToTop(group);
}


//Loading
Level.prototype.setLoading = function() {
	//this.game.load.image('LoadingBackImg', 'assets/image/LoadingBackImg.png');
	//this.loadingImg = this.game.add.image(0, 0, 'LoadingBackImg');
	this.setBackgroundImg();
	this.loadingText = this.game.add.text(this.world.centerX - 100, this.world.centerY + 100, 'Loading...', {fill : '#ffffff'});
	
	//listener
	this.game.load.onLoadStart.add(this.loadStart, this);
	this.game.load.onFileComplete.add(this.fileComplete, this);
	this.game.load.onLoadComplete.add(this.loadComplete, this);
};

Level.prototype.removeLoadingListener = function() {
	this.game.load.onLoadStart.remove(this.loadStart, this);
	this.game.load.onFileComplete.remove(this.fileComplete, this);
	this.game.load.onLoadComplete.remove(this.loadComplete, this);
};

Level.prototype.setBackgroundImg = function() {
	body.style.backgroundImage = 'url(../WebContent/assets/image/LoadingBackImg.png)';
	body.style.backgroundSize = 'cover';
	body.style.backgroundPosition = 'center';
	body.style.backgroundRepeat = 'no-repeat';
};

Level.prototype.removeBackgroundImg = function() {
	body.style.backgroundImage = 'none';
};

Level.prototype.loadStart = function() {
	console.log("LOADING START");
};

Level.prototype.fileComplete = function(progress, cacheKey, success, totalLoaded, totalFiles) {
	console.log("FILE LOADING : " + cacheKey);
	//console.log("File Complete: " + progress + "% - " + totalLoaded + " out of " + totalFiles);
	if(this.loadingText) {
		//this.loadingText.text = "Loading... " + progress + "% - " + totalLoaded + " out of " + totalFiles;
		this.loadingText.text = "Loading... " + progress + "%";
	}
};

Level.prototype.loadComplete = function() {
	console.log("LOAD COMPLETE");
	
	//this.loadingImg.destroy();
	this.loadingText.destroy();
	this.removeBackgroundImg();
	
	this.removeLoadingListener();
};

Level.prototype.whenOnFocus = function() {
	console.log("ON FOCUS");
	this.game.time.events.add(Phaser.Timer.SECOND * 3, this.killStartNotice, this);
};

Level.prototype.killStartNotice = function() {
	if (this.fStartNotice_reaTeam.alpha > 0.0) {
		this.fStartNotice_reaTeam.alpha = 0.0;
	}
	if (this.fStartNotice_blueTeam.alpha > 0.0) {
		this.fStartNotice_blueTeam.alpha = 0.0;
	}
};