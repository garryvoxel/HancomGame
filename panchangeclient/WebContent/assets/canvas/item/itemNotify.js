
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * itemNotify.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function itemNotify(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _groupBlue = this.game.add.group(this);
	_groupBlue.position.setTo(735.0, 580.0);
	
	this.game.add.sprite(0.0, 0.0, 'ItemUseNoticePanelB', null, _groupBlue);
	
	var _messageBlue = this.game.add.text(145.0, 38.0, '누구누구누구누구님이\n땡땡땡땡 아이템을 사용하였습니다', {"font":"17px Nanum Gothic","align":"center"}, _groupBlue);
	_messageBlue.anchor.setTo(0.5, 0.5);
	
	var _groupRed = this.game.add.group(this);
	_groupRed.position.setTo(0.0, 580.0);
	
	this.game.add.sprite(0.0, 0.0, 'ItemUseNoticePanelR', null, _groupRed);
	
	var _messageRed = this.game.add.text(145.0, 38.0, '누구누구누구누구님이\n땡땡땡땡 아이템을 사용하였습니다', {"font":"17px Nanum Gothic","align":"center"}, _groupRed);
	_messageRed.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fGroupBlue = _groupBlue;
	this.fMessageBlue = _messageBlue;
	this.fGroupRed = _groupRed;
	this.fMessageRed = _messageRed;
	
	this.afterCreate();
	
}

/** @type Phaser.Group */
var itemNotify_proto = Object.create(Phaser.Group.prototype);
itemNotify.prototype = itemNotify_proto;
itemNotify.prototype.constructor = itemNotify;

/* --- end generated code --- */
// -- user code here --

itemNotify.prototype.afterCreate = function() {
	//red tween
	this.redTween = this.game.add.tween(this.fGroupRed).to({y : 490}, 300, Phaser.Easing.Linear.None, false);
	redReturn = this.game.add.tween(this.fGroupRed).to({y : 580}, 300, Phaser.Easing.Linear.None, false, 1400);
	
	this.redTween.chain(redReturn);
	
	//blue tween
	this.blueTween = this.game.add.tween(this.fGroupBlue).to({y : 490}, 300, Phaser.Easing.Linear.None, false);
	blueReturn = this.game.add.tween(this.fGroupBlue).to({y : 580}, 300, Phaser.Easing.Linear.None, false, 1400);
	
	this.blueTween.chain(blueReturn);
};

itemNotify.prototype.showNotify = function(userName, itemName, teamColor) {
	if (teamColor == "RED") {
		this.fMessageRed.text = userName + " 님이\n" + itemName + " 아이템을 사용했습니다";
		this.redTween.start();
	} else {
		this.fMessageBlue.text = userName + " 님이\n" + itemName + " 아이템을 사용했습니다";
		this.blueTween.start();
	}
};