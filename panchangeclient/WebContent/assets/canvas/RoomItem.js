
// -- user code here --
/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * RoomItem.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function RoomItem(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0.0, 0.0, 'BarUnitRoomList', null, this);
	
	var _SBtnAdmit = this.game.add.button(654.0, 0.0, 'SBtnAdmit', reqEnter, this, 1, 0, 2, null, this);
	
	var _txt_roomNum = this.game.add.text(57.0, 21.0, '00000000', {"font":"16px Arial","fill":"#ffffff","align":"center"}, this);
	_txt_roomNum.anchor.setTo(0.5, 0.5);
	
	var _txt_roomType = this.game.add.text(403.0, 9.0, '자유', {"font":"16px Arial","fill":"#ffffff"}, this);
	
	var _txt_roomMenNum = this.game.add.text(510.0, 21.0, '000/000', {"font":"16px Arial","fill":"#ffffff","align":"center"}, this);
	_txt_roomMenNum.anchor.setTo(0.5, 0.5);
	
	var _txt_runningTime = this.game.add.text(600.0, 9.0, '0분', {"font":"16px Arial","fill":"#ffffff","align":"right"}, this);
	
	var _IconLock = this.game.add.sprite(327.0, 7.0, 'IconLock', 0, this);
	
	var _txt_roomName = this.game.add.text(115.0, 9.0, '가나다라마바사아자차카타', {"font":"16px Arial"}, this);
	
	
	
	// fields
	
	this.fTxt_roomNum = _txt_roomNum;
	this.fTxt_roomType = _txt_roomType;
	this.fTxt_roomMenNum = _txt_roomMenNum;
	this.fTxt_runningTime = _txt_runningTime;
	this.fIconLock = _IconLock;
	this.fTxt_roomName = _txt_roomName;
	this.fSBtnAdmit = _SBtnAdmit;
	this.currentMen = 0;
	this.maxMen = 0;
	this.roomNum = null;
	this.ip = null;
	this.isLock = false;
	this.game = aGame;
	this.isPublic = false;
	this.aClan = "";
	this.bClan = "";
	
}

/** @type Phaser.Group */
var RoomItem_proto = Object.create(Phaser.Group.prototype);
RoomItem.prototype = RoomItem_proto;
RoomItem.prototype.constructor = RoomItem;

/* --- end generated code --- */
// -- user code here --
/**
 * 게임방 입장 이벤트 
 * @param {*} obj 
 */
var reqEnter = function(obj) {
	obj.game.audioManager.playSfx("Click");

	if(obj.parent.isPublic) {
		if(obj.parent.isLock) {
			var okCallback = function(pwd) {
				obj.game.socketManager.joinRoom(obj.parent.ip, obj.parent.roomNum, pwd);
			};
			var cancelCallback = function() {
			};
			if(obj.game.popupManager.openPopup("pwd")) {
				var _group = new EnterPWDPopup(obj.game);
				_group.init(
					okCallback, cancelCallback
				);
				_group.position.setTo(243.5, 120);
				_group.myInput.startFocus();
			}
		}
		else {
			obj.game.socketManager.joinRoom(obj.parent.ip, obj.parent.roomNum, "");
		}
	}
	else {
		obj.game.socketManager.checkClan(obj.game.userInfoManager.nickname);
		obj.game.roomManager.enterClanCallback = function(clan_name) {
			console.log("clan_name", clan_name);
			obj.game.userInfoManager.clan = clan_name;
			if(obj.game.userInfoManager.clan == "") {
				obj.game.panAlert("클랜대전은 클랜 가입 후 입장할 수 있습니다.\n클랜가입 후 재시도 해주세요.",function() {
				});
				return;
			}
			else if(
					obj.parent.aClan != obj.game.userInfoManager.clan &&
					obj.parent.bClan != obj.game.userInfoManager.clan &&
					obj.parent.aClan != "" &&
					obj.parent.bClan != ""
				) {
				obj.game.panAlert("입장할 수 없는 클랜방입니다.",function() {
				});
				return;
			}
			
			if(obj.parent.isLock) {
				var okCallback = function(pwd) {
					obj.game.socketManager.joinRoom(obj.parent.ip, obj.parent.roomNum, pwd);
				};
				var cancelCallback = function() {
				};
				if(obj.game.popupManager.openPopup("pwd")) {
					var _group = new EnterPWDPopup(obj.game);
					_group.init(
						okCallback,
						cancelCallback
					);
					_group.position.setTo(243.5, 120);
					_group.myInput.startFocus();
				}
			}
			else {
				obj.game.socketManager.joinRoom(obj.parent.ip, obj.parent.roomNum, "");
			}
		}
	}
};