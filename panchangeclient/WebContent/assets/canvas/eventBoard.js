
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * eventBoard.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function eventBoard(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _board = this.game.add.sprite(0.0, 0.0, 'SheetGameEventPanel', 6, this);
	_board.anchor.setTo(0.5, 0.5);
	_board.animations.add('toRed', [6, 7, 2, 0], 10, false);
	_board.animations.add('toBlue', [6, 7, 5, 3], 10, false);
	
	var _winnerData = this.game.add.group(this);
	
	var _ResultPanelCharHaloEffect = this.game.add.sprite(0.0, 20.0, 'ResultPanelCharHaloEffect', null, _winnerData);
	_ResultPanelCharHaloEffect.anchor.setTo(0.5, 0.5);
	
	var _charGroup = new CharacterGroup(this.game, _winnerData);
	
	var _ResultBlue = this.game.add.sprite(-128.0, -160.0, 'ResultBlue', null, _winnerData);
	
	var _ResultRed = this.game.add.sprite(-128.0, -160.0, 'ResultRed', null, _winnerData);
	
	var _winnerName = this.game.add.text(40.0, 140.0, '1등이름표시텍스트', {"font":"16px Nanum Gothic","fill":"#ffffff"}, _winnerData);
	_winnerName.anchor.setTo(0.5, 0.5);
	
	var _sentenceText = this.game.add.text(0.0, 0.0, '동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세. 무궁화 삼천리 화려강산 대한 사람, 대한으로 길이 보전하세. 가을 하늘 공활한데 높고 구름 없이 밝은 달은 우리 가슴 일편단심일세.', {"font":"20px Nanum Gothic","fill":"#ffffff","stroke":"#ffffff"}, this);
	_sentenceText.anchor.setTo(0.5, 0.5);
	
	var _ResultNeutralX = this.game.add.sprite(0.0, 0.0, 'ResultNeutralX', null, this);
	_ResultNeutralX.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fBoard = _board;
	this.fWinnerData = _winnerData;
	this.fResultPanelCharHaloEffect = _ResultPanelCharHaloEffect;
	this.fCharGroup = _charGroup;
	this.fResultBlue = _ResultBlue;
	this.fResultRed = _ResultRed;
	this.fWinnerName = _winnerName;
	this.fSentenceText = _sentenceText;
	this.fResultNeutralX = _ResultNeutralX;
	
	this.flipped = false;
	this.sentence = "";
	
	this.fSentenceText.wordWrap = true;
	this.fSentenceText.wordWrapWidth = eventBoardWidth;
	this.fSentenceText.setTextBounds(0, 0, eventBoardWidth, eventBoardHeight);
	
	this.fWinnerData.visible = false;
	
	this.fBoard.animations.getAnimation('toRed').onComplete.add(this.showWinnerData, this);
	this.fBoard.animations.getAnimation('toBlue').onComplete.add(this.showWinnerData, this);
	
	this.fResultNeutralX.visible = false;
	
	this.fSentenceText.smoothed = false;
	
}

/** @type Phaser.Group */
var eventBoard_proto = Object.create(Phaser.Group.prototype);
eventBoard.prototype = eventBoard_proto;
eventBoard.prototype.constructor = eventBoard;

/* --- end generated code --- */
// -- user code here --

//Phase 1 - EVENT START
//Phase 2 - EVENT GAME
//Phase 3 - EVENT RESULT

var eventScorePoint = 1000;
var eventBoardWidth = 200;
var eventBoardHeight = 280;

eventBoard.prototype.flip = function(winnerTeam, winnerName, avatar) {
	this.flipped = true;
	this.fSentenceText.visible = false;
	
	this.fWinnerName.text = winnerName;
	
	this.avatarIndex = avatar;
	
	if (winnerTeam === "RED") {
		this.fBoard.animations.play('toRed', 10, false);
		this.fResultBlue.visible = false;
	} else {
		this.fBoard.animations.play('toBlue', 10, false);
		this.fResultRed.visible = false;
	}
	
	this.game.audioManager.playSfx('Card_Bturn');
};

eventBoard.prototype.setColorIndex = function(index) {
	console.log("setColorIndex : " + index);
	
	if (index == 0) {
		this.fSentenceText.fill = '#ffffff';
	} else {
		this.fSentenceText.fill = '#00dddd';
	}
	
	//this.fSentenceText.addColor('#00dddd', 0);
	//this.fSentenceText.addColor('#ffffff', index);
	//this.fSentenceText.addStrokeColor('#00dddd', 0);
	//this.fSentenceText.addStrokeColor('#ffffff', index);
};

eventBoard.prototype.fail = function() {
	this.fSentenceText.visible = false;
	this.fResultNeutralX.visible = true;
};

eventBoard.prototype.showWinnerData = function() {
	this.fWinnerData.visible = true;
	this.fCharGroup.startAnimation(this.avatarIndex, 'win');
};

eventBoard.prototype.update = function() {
	this.fResultPanelCharHaloEffect.angle += 0.5;
};