
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * MuteControl.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function MuteControl(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _group1 = this.game.add.group(this);
	
	var _PanelNonCheck = this.game.add.button(0.0, 0.0, 'PanelNonCheck', toggleMuteValue, this, null, null, null, null, _group1);
	_PanelNonCheck.anchor.setTo(0.5, 0.5);
	
	var _PanelMuteCheck = this.game.add.sprite(0.0, 0.0, 'PanelMuteCheck', null, _group1);
	_PanelMuteCheck.anchor.setTo(0.5, 0.5);
	
	var _MuteCheck = this.game.add.sprite(0.0, 1.0, 'MuteCheck', null, _group1);
	_MuteCheck.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fPanelNonCheck = _PanelNonCheck;
	this.fPanelMuteCheck = _PanelMuteCheck;
	this.fMuteCheck = _MuteCheck;
	
	this.check = false;
	
}

/** @type Phaser.Group */
var MuteControl_proto = Object.create(Phaser.Group.prototype);
MuteControl.prototype = MuteControl_proto;
MuteControl.prototype.constructor = MuteControl;

/* --- end generated code --- */
// -- user code here --
MuteControl.prototype.callback = function() {};
MuteControl.prototype.setValue = function(value) {
	this.check = value;
	if(this.check) {
		this.fPanelMuteCheck.visible = true;
		this.fMuteCheck.visible = true;
	}
	else {
		this.fPanelMuteCheck.visible = false;
		this.fMuteCheck.visible = false;
	}
	
	this.callback();
};

MuteControl.prototype.getValue = function() {
	return this.check;
};

var toggleMuteValue = function(obj) {
	obj.parent.parent.setValue(!obj.parent.parent.getValue());
};