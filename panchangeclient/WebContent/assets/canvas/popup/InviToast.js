
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * InviToast.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function InviToast(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _WaitingRoomComingFriend = this.game.add.sprite(0.0, 0.0, 'WaitingRoomComingFriend', null, this);
	
	var _WaitingRoomInvitecancel = this.game.add.sprite(0.0, 0.0, 'WaitingRoomInvitecancel', null, this);
	
	var _txt_comm = this.game.add.text(90.0, 88.0, '초대를\n거절했습니다.', {"font":"bold 20px Arial","align":"center"}, this);
	_txt_comm.anchor.set(0.5, 0.0);
	
	var _txt_nickname = this.game.add.text(90.0, 56.0, '닉네임은여덟글자', {"font":"bold 20px Arial","align":"center"}, this);
	_txt_nickname.anchor.set(0.5, 0.0);
	
	
	
	// fields
	
	this.fWaitingRoomComingFriend = _WaitingRoomComingFriend;
	this.fWaitingRoomInvitecancel = _WaitingRoomInvitecancel;
	this.fTxt_comm = _txt_comm;
	this.fTxt_nickname = _txt_nickname;
	
}

/** @type Phaser.Group */
var InviToast_proto = Object.create(Phaser.Group.prototype);
InviToast.prototype = InviToast_proto;
InviToast.prototype.constructor = InviToast;

/* --- end generated code --- */
// -- user code here --
InviToast.prototype.init = function(t, nickname) {
	if(t) {
		this.fWaitingRoomComingFriend.visible = true;
		this.fWaitingRoomInvitecancel.visible = false;
		this.fTxt_comm.setText("님이\n입장했습니다.");
	}
	else {
		this.fWaitingRoomComingFriend.visible = false;
		this.fWaitingRoomInvitecancel.visible = true;
		this.fTxt_comm.setText("초대를\n거절했습니다.");
	}
	
	this.fTxt_nickname.setText(nickname);
	this.alpha = 0;
	this.onAni();
};

InviToast.prototype.onAni = function() {
	var count = 0;
	var timer = 0;
	var obj = this;
	timer = setInterval(function() {
		if(count < 10) {
			count += 1;
			obj.alpha = count * 0.1;
		}
		else {
			clearInterval(timer);
			setTimeout(function() {
				obj.offAni();
			}, 3000);
		}
	}, 50);
};

InviToast.prototype.offAni = function() {
	var count = 0;
	var timer = 0;
	var obj = this;
	timer = setInterval(function() {
		if(count < 10) {
			count += 1;
			obj.alpha = 1 - (count * 0.1);
		}
		else {
			clearInterval(timer);
			obj.destroy();
		}
	}, 50);
};