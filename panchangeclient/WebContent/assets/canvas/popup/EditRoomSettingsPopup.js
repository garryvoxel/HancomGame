
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * EditRoomSettingsPopup.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function EditRoomSettingsPopup(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0.0, 0.0, 'PopPanelCreateSet', null, this);
	
	this.game.add.button(447.0, -30.0, 'BtnExit', offEditRoomSettingsPopup, this, 1, 0, 2, null, this);
	
	var _STitleBackImg = this.game.add.sprite(98.0, 100.0, 'STitleBackImg', null, this);
	_STitleBackImg.anchor.setTo(0.5, 0.0);
	
	var _STitleAttribute = this.game.add.sprite(252.0, 100.0, 'STitleAttribute', null, this);
	_STitleAttribute.anchor.setTo(0.5, 0.0);
	
	var _STitleMemberNum = this.game.add.sprite(162.0, 180.0, 'STitleMemberNum', null, this);
	_STitleMemberNum.anchor.setTo(0.5, 0.0);
	
	var _STitleTeamColor = this.game.add.sprite(385.0, 100.0, 'STitleTeamColor', null, this);
	_STitleTeamColor.anchor.setTo(0.5, 0.0);
	
	var _STitleRoomName = this.game.add.sprite(385.5, 180.0, 'STitleRoomName', null, this);
	_STitleRoomName.anchor.setTo(0.5, 0.0);
	
	var _STitlePlaytime = this.game.add.sprite(519.0, 100.0, 'STitlePlaytime', null, this);
	_STitlePlaytime.anchor.setTo(0.5, 0.0);
	
	this.game.add.sprite(221.0, 35.0, 'TitleRoomReset', null, this);
	
	this.game.add.sprite(260.0, 220.0, 'BarL2', null, this);
	
	this.game.add.sprite(86.0, 220.0, 'BarM1', null, this);
	
	this.game.add.button(345.0, 327.0, 'BtnCancel', offEditRoomSettingsPopup, this, 1, 0, 2, null, this);
	
	this.game.add.button(85.0, 327.0, 'BtnChange', changeRoomBtn, this, 1, 0, 2, null, this);
	
	var _txt_menNum = this.game.add.text(161.0, 241.0, '10:10', {"font":"bold 20px Arial","fill":"#ffffff"}, this);
	//var _txt_menNum = this.game.add.text(161.0, 241.0, '50:50', {"font":"bold 20px Arial","fill":"#ffffff"}, this);
	_txt_menNum.anchor.setTo(0.5, 0.5);
	
	var _txt_roomName = this.game.add.text(392.0, 241.0, '10:10', {"font":"bold 20px Arial","fill":"#ffffff"}, this);
	//var _txt_roomName = this.game.add.text(392.0, 241.0, '50:50', {"font":"bold 20px Arial","fill":"#ffffff"}, this);
	_txt_roomName.anchor.setTo(0.5, 0.5);
	
	var _DD_Background = new DropDownBackground(this.game, this);
	_DD_Background.position.setTo(22.0, 135.0);
	
	var _DD_IsFree = new DropDownIsFree(this.game, this);
	_DD_IsFree.position.setTo(196.0, 135.0);
	
	var _DD_RunningTime = new DropDownRunningTime(this.game, this);
	_DD_RunningTime.position.setTo(463.0, 135.0);
	
	var _DD_Color = new DropDownTeamColor(this.game, this);
	_DD_Color.position.setTo(329.0, 135.0);
	
	
	
	// fields
	
	this.fTxt_menNum = _txt_menNum;
	this.fTxt_roomName = _txt_roomName;
	this.fDD_Background = _DD_Background;
	this.fDD_IsFree = _DD_IsFree;
	this.fDD_RunningTime = _DD_RunningTime;
	this.fDD_Color = _DD_Color;
	
	this.game.myPopup = this;
	
}

/** @type Phaser.Group */
var EditRoomSettingsPopup_proto = Object.create(Phaser.Group.prototype);
EditRoomSettingsPopup.prototype = EditRoomSettingsPopup_proto;
EditRoomSettingsPopup.prototype.constructor = EditRoomSettingsPopup;

/* --- end generated code --- */
// -- user code here --

EditRoomSettingsPopup.prototype.closeOther = function() {
	this.fDD_Background.forceClose();
	this.fDD_IsFree.forceClose();
	this.fDD_Color.forceClose();
	this.fDD_RunningTime.forceClose();
};

EditRoomSettingsPopup.prototype.init = function() {
	var current = this.game.userInfoManager.currentRoom;
	console.log(this.game.userInfoManager.currentRoom);
	this.fTxt_menNum.setText((current.MEMBER_NUM / 2) + " : " + (current.MEMBER_NUM / 2));
	this.fTxt_roomName.setText(current.ROOM_NAME);
	
	const background = 
	[
	 	'랜덤',
	 	'칠판',
	 	'운동장',
	 	'책상',
	 	'눈밭',
	 	'보도블록',
	 	'꽃밭',
	 	'책',
	 	'나무바닥'
	 ];
	
	this.fDD_Background.dDValue = current.BACKGROUND;
	this.fDD_Background.fTxt_display.setText(background[current.BACKGROUND]);
	
	this.fDD_IsFree.dDValue = current.IS_FREE;
	this.fDD_IsFree.fTxt_display.setText((current.IS_FREE)?'공개':'비밀');
	
	this.fDD_RunningTime.dDValue = current.RUNNING_TIME;
	this.fDD_RunningTime.fTxt_display.setText((current.RUNNING_TIME / 60) + '분');
	
	this.fDD_Color.dDValue = this.game.userInfoManager.team;
	this.fDD_Color.fTxt_display.setText((this.game.userInfoManager.team=='RED')?'빨강':'파랑');
};

EditRoomSettingsPopup.prototype.hidePopup = function() {
	this.visible = false;
};

EditRoomSettingsPopup.prototype.showPopup = function() {
	this.visible = true;
};

var offEditRoomSettingsPopup = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.game.popupManager.closePopup("editRoomSettings");
	obj.parent.destroy();
};

var changeRoomBtn = function(obj) {
	obj.game.audioManager.playSfx("Click");
	
	var data = {};
	data['HOST_NAME'] = obj.game.userInfoManager.nickname;
	data['IS_FREE'] = obj.parent.fDD_IsFree.dDValue;
	data['BACKGROUND'] = obj.parent.fDD_Background.dDValue;
	data['RUNNING_TIME'] = obj.parent.fDD_RunningTime.dDValue;
	data['COLOR'] = obj.parent.fDD_Color.dDValue;
	data['IS_PUBLIC'] = obj.game.userInfoManager.currentRoom.ROOM_TYPE == '자유';
	
	if(data['IS_FREE']) {
		obj.game.socketManager.changeRoom(data);
		offEditRoomSettingsPopup(obj);
	}
	else if(obj.game.userInfoManager.currentRoom.IS_FREE && !data['IS_FREE']){
		var okCallback = function(pwd) {
			data['PASSWORD'] = pwd;
			obj.game.socketManager.changeRoom(data);
			offEditRoomSettingsPopup(obj);
		};
		var cancelCallback = function() {
			obj.parent.showPopup();
		};
		obj.parent.hidePopup();
		var _group = new EnterPWDPopup(obj.game);
		_group.init(
			okCallback,
			cancelCallback
		);
		_group.position.setTo(243.5, 120);
	}
	else {
		obj.game.socketManager.changeRoom(data);
		offEditRoomSettingsPopup(obj);
	}
};