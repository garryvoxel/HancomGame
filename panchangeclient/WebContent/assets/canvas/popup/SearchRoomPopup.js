
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * SearchRoomPopup.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function SearchRoomPopup(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0.0, 0.0, 'PopPanelNotice', null, this);
	
	this.game.add.button(387.0, -30.0, 'BtnExit', offSearchRoomPopup, this, 1, 0, 2, null, this);
	
	this.game.add.sprite(208.5, 35.0, 'TitleRoomSearch', null, this);
	
	var _TapBtnRoomNum = this.game.add.button(295.0, 90.0, 'TapBtnRoomNum', onSearchTabByNumber, this, 4, 3, 2, null, this);
	
	var _TapBtnNickname = this.game.add.button(115.0, 90.0, 'TapBtnNickname', onSearchTabByNickname, this, 1, 0, 2, null, this);
	
	var _group1 = this.game.add.group(this);
	
	this.game.add.sprite(36.0, 170.0, 'InputOnlyPanel', null, _group1);
	
	this.game.add.button(336.0, 180.0, 'SBtnSearch', searchRoom, this, 1, 0, 2, null, _group1);
	
	var _SBtnAdmit = this.game.add.button(426.0, 180.0, 'SBtnAdmit', admitRoom, this, null, 3, null, null, _group1);
	
	
	
	// fields
	
	this.fTapBtnRoomNum = _TapBtnRoomNum;
	this.fTapBtnNickname = _TapBtnNickname;
	this.fSBtnAdmit = _SBtnAdmit;
	
	this.myInput = this.createInput(310, 352);
	this.myInput.setText('');
	this.tab = 'N';
	this.game.audioManager.playSfx("Popup");
	
}

/** @type Phaser.Group */
var SearchRoomPopup_proto = Object.create(Phaser.Group.prototype);
SearchRoomPopup.prototype = SearchRoomPopup_proto;
SearchRoomPopup.prototype.constructor = SearchRoomPopup;

/* --- end generated code --- */
// -- user code here --
var offSearchRoomPopup = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.game.popupManager.closePopup("searchRoom");
	obj.parent.myInput.destroy();
	obj.parent.destroy();
};

var onSearchTabByNumber = function(obj) {
	obj.game.audioManager.playSfx("Tog_sound");
	obj.parent.fTapBtnRoomNum.setFrames(1, 0, 2, null);
	obj.parent.fTapBtnNickname.setFrames(4, 3, 2, null);
	obj.parent.tab = 'R';
};

var searchRoom = function(obj) {
	obj.game.audioManager.playSfx("Click");
	var keyword = obj.parent.parent.myInput.value;
	if(keyword.length != 0) {
		obj.game.socketManager.searchRoom(obj.parent.parent.tab, keyword);
	}
	else {
		obj.parent.parent.hidePopup();
		obj.game.panAlert("검색어를 입력해주세요.", function() {
			obj.parent.parent.showPopup();
		});
	}
};

var admitRoom = function(obj) {
	if(obj.game.userInfoManager.searchRoom) {
		obj.game.audioManager.playSfx("Click");
		var room = obj.game.userInfoManager.searchRoom;

		console.log("room===" , room);

		if(room.is_lock == 0) {
			obj.game.socketManager.joinRoom(room.ip, 'room' + room.room_number, "");
			offSearchRoomPopup(obj.parent);
		}
		else {
			var okCallback = function(pwd) {
				obj.game.socketManager.joinRoom(room.ip, 'room' + room.room_number, pwd);
				offSearchRoomPopup(obj.parent);
			};
			var cancelCallback = function() {
				obj.game.roomManager.searchPopup.showPopup();
			};
			obj.game.roomManager.searchPopup.hidePopup();
			var _group = new EnterPWDPopup(obj.game);
			_group.init(
				okCallback,
				cancelCallback
			);
			_group.position.setTo(243.5, 120);
		}
		
	}
};

var onSearchTabByNickname = function(obj) {
	obj.game.audioManager.playSfx("Tog_sound");
	obj.parent.fTapBtnRoomNum.setFrames(4, 3, 2, null);
	obj.parent.fTapBtnNickname.setFrames(1, 0, 2, null);
	obj.parent.tab = 'N';
};

SearchRoomPopup.prototype.createInput = function(x, y){	
	var myInput = this.game.add.inputField(x, y, {
		fill: '#ffffff',
		font: '17px Arial',
		backgroundColor: '#212d3a',
		cursorColor: '#ffffff',
		width: 220,
		height: 20,
		borderWidth: 0,
		borderColor: '#212d3a'
	});
	
    return myInput;
 };

 
 SearchRoomPopup.prototype.hidePopup = function() {
	this.visible = false;
};

SearchRoomPopup.prototype.showPopup = function() {
	this.visible = true;
};