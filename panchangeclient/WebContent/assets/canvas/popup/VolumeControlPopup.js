
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * VolumeControlPopup.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function VolumeControlPopup(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0.0, 0.0, 'PopPanelCreateSet', null, this);
	
	this.game.add.sprite(213.0, 35.0, 'TitleVolControl', null, this);
	
	this.game.add.sprite(110.0, 100.0, 'STitleSoundMute', null, this);
	
	this.game.add.sprite(110.0, 190.0, 'STitleSoundMute', null, this);
	
	this.game.add.sprite(310.0, 100.0, 'STitleBGM', null, this);
	
	this.game.add.sprite(321.0, 190.0, 'STitleEffSound', null, this);
	
	this.game.add.button(447.0, -30.0, 'BtnExit', offVolumeCtrlPopup, this, 1, 0, 2, null, this);
	
	var _BGMCtrl = new SliderControl(this.game, this);
	_BGMCtrl.position.setTo(357.0, 158.0);
	
	var _EffectCtrl = new SliderControl(this.game, this);
	_EffectCtrl.position.setTo(357.0, 248.0);
	
	this.game.add.button(205.0, 134.0, 'BtnArrowSetL', setLeftBGM, this, null, 0, 1, null, this);
	
	this.game.add.button(205.0, 224.0, 'BtnArrowSetL', setLeftEffect, this, null, 0, 1, null, this);
	
	this.game.add.button(475.0, 134.0, 'BtnArrowSetR', setRightBGM, this, null, 0, 1, null, this);
	
	this.game.add.button(475.0, 224.0, 'BtnArrowSetR', setRightEffect, this, null, 0, 1, null, this);
	
	var _muteBGM = new MuteControl(this.game, this);
	_muteBGM.position.setTo(148.0, 158.0);
	
	var _muteEffect = new MuteControl(this.game, this);
	_muteEffect.position.setTo(148.0, 248.0);
	
	
	
	// fields
	
	this.fBGMCtrl = _BGMCtrl;
	this.fEffectCtrl = _EffectCtrl;
	this.fMuteBGM = _muteBGM;
	this.fMuteEffect = _muteEffect;
	
	this.game.audioManager.playSfx("Popup");
	
}

/** @type Phaser.Group */
var VolumeControlPopup_proto = Object.create(Phaser.Group.prototype);
VolumeControlPopup.prototype = VolumeControlPopup_proto;
VolumeControlPopup.prototype.constructor = VolumeControlPopup;

/* --- end generated code --- */
// -- user code here --

VolumeControlPopup.prototype.init = function(bgm, effect, mute_bgm, mute_effect) {
	this.fBGMCtrl.setValue(bgm);
	this.fEffectCtrl.setValue(effect);
	this.fBGMCtrl.callback = function() {
		this.game.audioManager.bgmVolume = this.getValue();
		this.game.audioManager.updateBgmVolume();
	};
	this.fEffectCtrl.callback = function() {
		this.game.audioManager.sfxVolume = this.getValue();
	};
	
	this.fMuteBGM.setValue(mute_bgm);
	this.fMuteEffect.setValue(mute_effect);
	this.fMuteBGM.callback = function() {
		this.game.audioManager.playSfx("Tog_sound");
		this.game.audioManager.bgmMute = this.getValue();
		this.game.audioManager.updateBgmVolume();
	};
	this.fMuteEffect.callback = function() {
		this.game.audioManager.playSfx("Tog_sound");
		this.game.audioManager.sfxMute = this.getValue();
	};
};

var offVolumeCtrlPopup = function(obj) {
	if(obj.game.audioManager.bgmMute) {
		setCookie("pan_bgmmute", "check", 365);
	}
	else {
		setCookie("pan_bgmmute", "-", -1);
	}
	if(obj.game.audioManager.sfxMute) {
		setCookie("pan_sfxmute", "check", 365);
	}
	else {
		setCookie("pan_sfxmute", "-", -1);
	}
	
	setCookie("pan_bgmvolume", obj.game.audioManager.bgmVolume);
	setCookie("pan_sfxvolume", obj.game.audioManager.sfxVolume);
	
	obj.game.audioManager.playSfx("Click");
	obj.game.popupManager.closePopup("volumeCtrl");
	obj.parent.destroy();
	
};

var setLeftBGM = function(obj) {
	obj.game.audioManager.playSfx("Click");
	var current = obj.parent.fBGMCtrl.getValue();
	current = current - 0.1;
	if(current < 0) { current = 0; }
	obj.parent.fBGMCtrl.setValue(current);
	obj.game.audioManager.bgmVolume = current;
	this.game.audioManager.updateBgmVolume();
};

var setRightBGM = function(obj) {
	obj.game.audioManager.playSfx("Click");
	var current = obj.parent.fBGMCtrl.getValue();
	current = current + 0.1;
	if(current > 1) { current = 1; }
	obj.parent.fBGMCtrl.setValue(current);
	obj.game.audioManager.bgmVolume = current;
	this.game.audioManager.updateBgmVolume();
};

var setLeftEffect = function(obj) {
	obj.game.audioManager.playSfx("Click");
	var current = obj.parent.fEffectCtrl.getValue();
	current = current - 0.1;
	if(current < 0) { current = 0; }
	obj.parent.fEffectCtrl.setValue(current);
	obj.game.audioManager.sfxVolume = current;
};

var setRightEffect = function(obj) {
	obj.game.audioManager.playSfx("Click");
	var current = obj.parent.fEffectCtrl.getValue();
	current = current + 0.1;
	if(current > 1) { current = 1; }
	obj.parent.fEffectCtrl.setValue(current);
	obj.game.audioManager.sfxVolume = current;
};