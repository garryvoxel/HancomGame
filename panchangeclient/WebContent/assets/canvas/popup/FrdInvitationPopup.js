
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * FrdInvitationPopup.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function FrdInvitationPopup(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0.0, 0.0, 'PopPanelFriendInvite', null, this);
	
	this.game.add.sprite(162.0, 35.0, 'TitleFriendInvite', null, this);
	
	this.game.add.sprite(188.5, 358.0, 'PopPanelListPageNum', null, this);
	
	this.game.add.button(366.0, -30.0, 'BtnExit', offInvitationPopup, this, 1, 0, 2, null, this);
	
	this.game.add.sprite(133.0, 98.0, 'STitleNickname', null, this);
	
	this.game.add.sprite(355.0, 98.0, 'STitleInvite', null, this);
	
	var _BtnArrowR = this.game.add.button(477.0, 144.0, 'BtnArrowR', nextInviList, this, 1, 0, 2, null, this);
	_BtnArrowR.anchor.setTo(0.5, 0.0);
	
	var _BtnArrowL = this.game.add.button(0.0, 144.0, 'BtnArrowL', prevInviList, this, 1, 0, 2, null, this);
	_BtnArrowL.anchor.setTo(0.5, 0.0);
	
	var _Invitation01 = new FrdInvitationItem(this.game, this);
	_Invitation01.position.setTo(60.0, 135.0);
	
	var _Invitation02 = new FrdInvitationItem(this.game, this);
	_Invitation02.position.setTo(60.0, 178.0);
	
	var _Invitation03 = new FrdInvitationItem(this.game, this);
	_Invitation03.position.setTo(60.0, 221.0);
	
	var _Invitation04 = new FrdInvitationItem(this.game, this);
	_Invitation04.position.setTo(60.0, 264.0);
	
	var _Invitation05 = new FrdInvitationItem(this.game, this);
	_Invitation05.position.setTo(60.0, 307.0);
	
	var _txt_pageNumStr = this.game.add.text(240.0, 381.0, '00 / 00', {"font":"bold 20px Arial","fill":"#ffffff","align":"center"}, this);
	_txt_pageNumStr.anchor.setTo(0.5, 0.5);
	
	this.game.add.button(155.0, 411.0, 'BtnInviteFriend', inviteFriends, this, 1, 0, 2, null, this);
	
	
	
	// fields
	
	this.fInvitation01 = _Invitation01;
	this.fInvitation02 = _Invitation02;
	this.fInvitation03 = _Invitation03;
	this.fInvitation04 = _Invitation04;
	this.fInvitation05 = _Invitation05;
	this.fTxt_pageNumStr = _txt_pageNumStr;
	
}

/** @type Phaser.Group */
var FrdInvitationPopup_proto = Object.create(Phaser.Group.prototype);
FrdInvitationPopup.prototype = FrdInvitationPopup_proto;
FrdInvitationPopup.prototype.constructor = FrdInvitationPopup;

/* --- end generated code --- */
// -- user code here --
FrdInvitationPopup.prototype.init = function(frdList) {
	this.frdList = frdList;
	for(var i = 0 ; i < frdList.length ; i++) {
		this.frdList[i].checked = true;
	}
	this.pageNum = 0;
	if(this.frdList.length == 0) {
		this.maxPage = 0;
	}
	else if(this.frdList.length % 5 == 0) {
		this.maxPage = (this.frdList.length / 5) - 1;
	}
	else {
		this.maxPage = parseInt(this.frdList.length / 5);
	}
	this.uiList = [];
	this.uiList.push(this.fInvitation01);
	this.uiList.push(this.fInvitation02);
	this.uiList.push(this.fInvitation03);
	this.uiList.push(this.fInvitation04);
	this.uiList.push(this.fInvitation05);
	
	this.showPage();
	this.updatePageStr();
};

FrdInvitationPopup.prototype.prevPage = function() {
	this.pageNum -= 1;
	if(this.pageNum < 0) {
		this.pageNum = 0;
	}
	else {
		this.showPage();
		this.updatePageStr();
	}
};

FrdInvitationPopup.prototype.nextPage = function() {
	this.pageNum += 1;
	if(this.pageNum > this.maxPage) {
		this.pageNum = this.maxPage;
	}
	else {
		this.showPage();
		this.updatePageStr();
	}
};

FrdInvitationPopup.prototype.updatePageStr = function() {
	var str = "";
	var current = this.pageNum + 1;
	str += (current < 10) ? ('0' + current) : current;
	str += " / ";
	var max = this.maxPage + 1;
	str += (max < 10) ? ('0' + max) : max;
	this.fTxt_pageNumStr.setText(str);
};

FrdInvitationPopup.prototype.showPage = function() {
	var showList = this.frdList.slice(this.pageNum * 5, (this.pageNum + 1) * 5);
	var _frdInvitationPopup = this;
	for(var i = 0 ; i < this.uiList.length ; i++) {
		this.uiList[i].visible = false;
	}
	
	for(var i = 0 ; i < showList.length ; i++) {
		this.uiList[i].visible = true;
		this.uiList[i].init(showList[i].nickname, showList[i].checked, i + _frdInvitationPopup.pageNum * 5, function(idx) {
			if(_frdInvitationPopup.frdList[idx].checked) {
				var cnt = 0;
				for(var j = 0 ; j < _frdInvitationPopup.frdList.length ; j++) {
					if(_frdInvitationPopup.frdList[j].checked == false) {
						cnt += 1;
					}
				}
				if(cnt >= 10) {
					return false;
				}
				else {
					_frdInvitationPopup.frdList[idx].checked = !_frdInvitationPopup.frdList[idx].checked;
					return true;
				}
			}
			else {
				_frdInvitationPopup.frdList[idx].checked = !_frdInvitationPopup.frdList[idx].checked;
				return true;
			}
		});
	}
};

var prevInviList = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.parent.prevPage();
};

var nextInviList = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.parent.nextPage();
};

var offInvitationPopup = function(obj) {
	obj.game.audioManager.playSfx("Click");
	
	obj.game.popupManager.closePopup("frd");
	obj.parent.destroy();
};

var inviteFriends = function(obj) {
	obj.game.audioManager.playSfx("Click");
	
	var inviList = [];
	for(var i = 0 ; i < obj.parent.frdList.length ; i++) {
		if(obj.parent.frdList[i].checked == false) {
			console.log(obj);
			inviList.push(obj.parent.frdList[i].nickname);
		}
	}
	
	if(inviList.length > 0) {
		obj.game.socketManager.invitation(inviList);
		for(var i = 0 ; i < inviList.length ; i++) {
			if(obj.game.userInfoManager.inviList.indexOf(inviList[i]) < 0) {
				obj.game.userInfoManager.inviList.push(inviList[i]);
			}
		}
	}
	
	obj.game.popupManager.closePopup("frd");
	obj.parent.destroy();
};