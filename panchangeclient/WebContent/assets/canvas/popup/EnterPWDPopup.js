
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * EnterPWDPopup.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function EnterPWDPopup(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	
	this.myInput = this.createInput(490, 302);
	//this.myInput.setText('');
	this.game.add.sprite(0.0, 0.0, 'PopPanelNotice', null, this);
	
	this.game.add.button(387.0, -30.0, 'BtnExit', cancelCallbackBtn, this, 1, 0, 2, null, this);
	
	this.game.add.button(185.0, 282.0, 'BtnCheck', okCallbackBtn, this, 1, 0, 2, null, this);
	
	this.game.add.sprite(62.5, 105.0, 'TextImgPasswordInfo', null, this);
	
	this.game.add.sprite(154.5, 35.0, 'TitlePasswordInput', null, this);
	
	this.game.add.sprite(122.5, 165.0, 'InputOnlyPanel', null, this);
	
	
	
}

/** @type Phaser.Group */
var EnterPWDPopup_proto = Object.create(Phaser.Group.prototype);
EnterPWDPopup.prototype = EnterPWDPopup_proto;
EnterPWDPopup.prototype.constructor = EnterPWDPopup;

/* --- end generated code --- */
// -- user code here --

var cancelCallbackBtn = function(obj) {
	obj.game.audioManager.playSfx("Click");
	
	obj.parent.cancelCallback();
	obj.game.popupManager.closePopup("pwd");
	obj.parent.myInput.destroy();
	obj.parent.destroy();
};

var okCallbackBtn = function(obj) {
	obj.game.audioManager.playSfx("Click");
	
	var pwd = obj.parent.myInput.value;
	if(pwd.length == 4) {
		obj.parent.okCallback(pwd);
		obj.game.popupManager.closePopup("pwd");
		obj.parent.myInput.destroy();
		obj.parent.destroy();
	}
	else {
		obj.parent.visible = false;
		obj.game.panAlert("비밀번호 4자리를 입력해주세요.",function() {
			obj.parent.visible = true;
		});
	}
};

EnterPWDPopup.prototype.init = function(okCallback, cancelCallback) {
	this.okCallback = okCallback;
	this.cancelCallback = cancelCallback;
};

EnterPWDPopup.prototype.createInput = function(x, y){
//	console.log(this);
//	var bmd = this.game.make.bitmapData(280, 50);    
//    var myInput = this.game.add.sprite(x, y, bmd);
//    
//    myInput.canvasInput = new CanvasInput({
//        canvas: bmd.canvas,
//        fontColor: '#ffffff',
//        fontSize: 20,
//        backgroundColor: 'rgba(0, 0, 0, 0)',
//        width: 220,
//        height: 20,
//        borderWidth: 0,
//        innerShadow: '0px 0px 0px rgba(0, 0, 0, 0)',
//        borderColor: '#212d3a',
//        maxlength: 4,
//        onkeydown: function validateNumber(evt) {
//            var e = evt || window.event;
//            var key = e.keyCode || e.which;
//            if (!e.shiftKey && !e.altKey && !e.ctrlKey &&
//            // numbers   
//            key >= 48 && key <= 57 ||
//            // Numeric keypad
//            key >= 96 && key <= 105 ||
//            // Backspace and Tab and Enter
//            key == 8 || key == 9 || key == 13 ||
//            // Home and End
//            key == 35 || key == 36 ||
//            // left and right arrows
//            key == 37 || key == 39 ||
//            // Del and Ins
//            key == 46 || key == 45) {
//                // input is VALID
//            }
//            else {
//                // input is INVALID
//            	console.log("INVALID");
//                e.returnValue = false;
//                if (e.preventDefault) e.preventDefault();
//            }
//        },
//        onkeypress: function validateNumber(evt) {
//        	console.log("k");
//        }
//    });
//    myInput.inputEnabled = true;
//    myInput.input.useHandCursor = true;    
//    myInput.events.onInputUp.add(this.inputFocus, this);
    
//    return myInput;
    
    var myInput = this.game.add.inputField(x, y, {
		fill: '#ffffff',
		font: '17px Arial',
		backgroundColor: '#212d3a',
		cursorColor: '#ffffff',
		width: 80,
		height: 20,
		borderWidth: 0,
		borderColor: '#212d3a',
		type: 2
	});
	
    return myInput;
 };