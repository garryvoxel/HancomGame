
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * SliderControl.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function SliderControl(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _BarSetGaugeBack = this.game.add.sprite(0.0, 0.0, 'BarSetGaugeBack', null, this);
	_BarSetGaugeBack.anchor.setTo(0.5, 0.5);
	
	var _BtnSetGaugePointer = this.game.add.button(0.0, 0.0, 'BtnSetGaugePointer', null, this, null, 0, 1, null, this);
	_BtnSetGaugePointer.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fBarSetGaugeBack = _BarSetGaugeBack;
	this.fBtnSetGaugePointer = _BtnSetGaugePointer;
	
	this.afterCreate();
	
}

/** @type Phaser.Group */
var SliderControl_proto = Object.create(Phaser.Group.prototype);
SliderControl.prototype = SliderControl_proto;
SliderControl.prototype.constructor = SliderControl;

/* --- end generated code --- */
// -- user code here --
SliderControl.prototype.callback = function() {};
SliderControl.prototype.afterCreate = function() {
	this.gaugeValue = 0.5;							//Slider controller's value
	
	this.fBtnSetGaugePointer.input.enableDrag();
	this.fBtnSetGaugePointer.input.allowVerticalDrag = false;
	//width = 200 (bar width) + 46 (btn width)
	this.fBtnSetGaugePointer.input.boundsRect = new Phaser.Rectangle(-123, -23, 246, 46);
	
	this.fBtnSetGaugePointer.events.onDragStop.add(this.onDragStop, this);
};

SliderControl.prototype.setValue = function(value) {
	this.gaugeValue = value;
	
	this.fBtnSetGaugePointer.x = (value * 200) - 100;
};

SliderControl.prototype.getValue = function() {
	return this.gaugeValue;
};

SliderControl.prototype.onDragStop = function() {
	//console.log("POSITION : " + this.fBtnSetGaugePointer.x);
	
	var gaugeLevel = (this.fBtnSetGaugePointer.x + 100) * 0.5;	//0 ~ 100
	this.gaugeValue = gaugeLevel / 100;							//0 ~ 1
	this.callback();
};