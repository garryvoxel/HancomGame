
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * RoomList.
 */
function RoomList() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var RoomList_proto = Object.create(Phaser.State.prototype);
RoomList.prototype = RoomList_proto;
RoomList.prototype.constructor = RoomList;

RoomList.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	
	this.roomList = [];
	
};

RoomList.prototype.preload = function () {
	
	this.load.pack('main', 'assets/pack.json');
	
};

RoomList.prototype.create = function () {
	this.add.sprite(0.0, 0.0, 'LobbyBackImgBlur');
	
	this.add.sprite(91.0, 69.0, 'PanelRoomList');
	
	this.add.sprite(372.5, 8.0, 'TitleRoomList');
	
	this.add.button(0.0, 0.0, 'BtnVolControl', onVolumeCtrlPopup, this, 1, 0, 2, null);
	
	this.add.button(81.0, 0.0, 'BtnWinsizeS', toggleFullScreen, this, 1, 0, 2, null);
	
	var _BtnHelp = this.add.button(943.0, 0.0, 'BtnHelp', onHelpPopup, this, 1, 0, 2, null);
	_BtnHelp.pivot.setTo(81.0, 0.0);
	
	var _BtnExit = this.add.button(1024.0, 0.0, 'BtnExit', closeWindow, this, 1, 0, 2, null);
	_BtnExit.pivot.setTo(81.0, 0.0);
	
	var _BtnArrowR = this.add.button(974.0, 240.0, 'BtnArrowR', nextRoomList, this, 1, 0, 2, null);
	_BtnArrowR.pivot.setTo(94.0, 0.0);
	
	var _BtnArrowL = this.add.button(50.0, 241.0, 'BtnArrowL', prevRoomList, this, 1, 0, 2, null);
	
	this.add.button(280.0, 490.0, 'BtnRoomGenerate', onCreateRoomPopup, this, 1, 0, 2, null);
	
	this.add.button(50.0, 490.0, 'BtnRoomSearch', onSearchRoomPopup, this, 1, 0, 2, null);
	
	var _BtnFreeAutoAdmit = this.add.button(744.0, 490.0, 'BtnFreeAutoAdmit', autoEnter, this, 1, 0, 2, null);
	_BtnFreeAutoAdmit.pivot.setTo(169.0, 0.0);
	
	var _BtnClanAutoAdmit = this.add.button(974.0, 490.0, 'BtnClanAutoAdmit', autoClan, this, 1, 0, 2, null);
	_BtnClanAutoAdmit.pivot.setTo(169.0, 0.0);
	
	var _txt_roomCount = this.add.text(513.0, 480.0, '00/00', {"font":"bold 22px Arial","fill":"#ffffff","align":"center"});
	_txt_roomCount.anchor.setTo(0.5, 0.5);
	
	
	
	// fields
	
	this.fBtnHelp = _BtnHelp;
	this.fBtnArrowR = _BtnArrowR;
	this.fBtnArrowL = _BtnArrowL;
	this.fTxt_roomCount = _txt_roomCount;

	this.afterCreate();
	
};

/* --- end generated code --- */
// -- user code here --

RoomList.prototype.afterCreate = function() {
	
	console.log('RoomList after create');

	var _roomManager = new RoomManager(this.game, this);
	this.game.roomManager = _roomManager;
	this.game.roomManager.reqRoomList();
	//play bgm
	this.game.audioManager.playBgm('Card_Rm');
	console.log("여기서 룸리스트 BGM 재생!!!!");

	this.game.scale.fullScreenTarget = document.documentElement;
	this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
	
	this.game.add.plugin(PhaserInput.Plugin);	
	this.stage.disableVisibilityChange = false; // NTAJA-1261
	console.log(this.stage.disableVisibilityChange);
	
	var game_tmp = this.game;	
	

	for(var i = 0 ; i < 8 ; i++) {
		var _group = new RoomItem(this.game);
		_group.visible = false;
		_group.position.setTo(145.0, 142.0 + i * 40);
		this.roomList.push(_group);
	}
	
	/* this.game.intervalID = setInterval(function() {
		game_tmp.roomManager.reqRoomList();
	}, 5000); */
	
	// help popup on/off check
	if(getCookie("pan_help") != "check") {
		onHelpPopup(this.fBtnHelp);
	}
	
	// get sound value
	if(getCookie("pan_bgmmute") == "check") {
		this.game.audioManager.bgmMute = true;
		this.game.audioManager.updateBgmVolume();
	}
	if(getCookie("pan_sfxmute") == "check") {
		this.game.audioManager.sfxMute = true;
	}
	if(getCookie("pan_bgmvolume") != "") {
		this.game.audioManager.bgmVolume = parseFloat(getCookie("pan_bgmvolume"));
	}
	if(getCookie("pan_sfxvolume") != "") {
		this.game.audioManager.sfxVolume = parseFloat(getCookie("pan_sfxvolume"));
	}
	
	// session id
	var session_id = getCookie("session_id");
	// 임시 session
	// var session_id = (new Date() % 2) == 0 ? "c662dcd8-a45e-4dd8-8f40-ade04f527481": "785b06e5-2b4c-48c3-8d96-c5547c14bb49";
	// var session_id = "";
	this.game.userInfoManager.sessionID = session_id;
	if(session_id.length > 0) {
		this.game.userInfoManager.isLogin = true;
		this.game.socketManager.getUserInfo();
	}
	else {
		session_id = getCookie("guest_id");

		console.log('session_id----', session_id);

		if(session_id.length>0){
	//		session_id = "guest_" + parseInt(Math.random() * 10000);
	//		session_id = "guest_1234";
			this.game.userInfoManager.isLogin = false;
			this.game.userInfoManager.nickname = session_id;
			this.game.userInfoManager.pk = 0;
			this.game.userInfoManager.sessionID = session_id;
			this.game.userInfoManager.avatar = Math.floor(Math.random() * 6);
		}
		else{
			this.game.panAlert("잘못된 접근 입니다. \n한컴 타자 홈페이지로 이동 합니다.", function() {
				window.close();
			});
		}
	}
	this.initUserField();

	this.game.socketManager.joining = false;

	// this.game.onFocus.add(this.whenOnFocus, this);
};

var onCreateRoomPopup = function(obj) {
	obj.game.audioManager.playSfx("Click");
	if(obj.game.popupManager.openPopup("createRoom")) {
		var _group = new CreateRoomPopup(obj.game);
		_group.position.setTo(213.49996948242188, 76.0);
		const title = [
		               "판뒤집기 고수 등장!",
		               "판뒤집기 한판?",
		               "뒤집어봐 뒤집는다!",
		               "이기는 편 우리 편!",
		               "뒤집고 또 뒤집고",
		               "판 속에 뭐 있나",
		               "재미있는 판 뒤집기",
		               "이 판이 네 판이냐",
		               "이 판에 다 건다",
		               "승리는 나의 것"
		               ];
		
		_group.myInput.setText(title[Math.floor(Math.random() * title.length)]);
	}
};

var onHelpPopup = function(obj) {
	obj.game.audioManager.playSfx("Click");
	if(obj.game.popupManager.openPopup("help")) {
		var _group = new helpPopup(obj.game);
		_group.position.setTo(172, 36);
		_group.init();
	}
}

var onVolumeCtrlPopup = function(obj) {
	obj.game.audioManager.playSfx("Click");
	if(obj.game.popupManager.openPopup("volumeCtrl")) {
		var _group = new VolumeControlPopup(obj.game);
		_group.init(
				obj.game.audioManager.bgmVolume, 
				obj.game.audioManager.sfxVolume, 
				obj.game.audioManager.bgmMute, 
				obj.game.audioManager.sfxMute);
		_group.position.setTo(210.5, 130);
	}
}

var onSearchRoomPopup = function(obj) {
	obj.game.audioManager.playSfx("Click");
	if(obj.game.popupManager.openPopup("searchRoom")) {
		var _group = new SearchRoomPopup(obj.game);
		_group.position.setTo(243.5, 165);
		obj.game.roomManager.searchPopup = _group;
		_group.myInput.startFocus();
	}
}

var prevRoomList = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.game.roomManager.prevPage();
};

var nextRoomList = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.game.roomManager.nextPage();
};

var autoEnter = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.game.socketManager.autoEnter();
};

var autoClan = function(obj) {
	obj.game.audioManager.playSfx("Click");
	obj.game.socketManager.autoClan();
};

var toggleFullScreen = function(obj) {
	obj.game.audioManager.playSfx("Click");
	
	if (obj.game.scale.isFullScreen)
    {
		obj.game.scale.stopFullScreen();
    }
    else
    {
    	obj.game.scale.startFullScreen(false);
    }
};

var closeWindow = function(obj) {
	window.close();
};

RoomList.prototype.initUserField = function() {
	
	onUserTextField = "<DIV id=" + "TajaControlUser" + " style="
	+ "position:absolute;left:" + "375" + "px;top:" + "-100"
	+ "px;width:300px;height:22px;" + "focus" + ">";

	onUserTextFieldInput = "<input type="
	+ "text"
	+ " id="
	+ "RoomListInput"
	+ " style='border:0px; border-style : none; background-color:transparent; color : white; outline-style:none;'"
	+ " focus><br>" + "</div>";

	userTajaBackground.innerHTML = onUserTextField + onUserTextFieldInput;

};

// RoomList.prototype.whenOnFocus = function() {
// 	console.log("ONFOCUS");	
//  	// this.game.time.events.add(Phaser.Timer.SECOND * 3, this.killStartNotice, this);
// };

// RoomList.prototype.killStartNotice = function() {
// 	console.log("KILL");
// };

RoomList.prototype.update = function() {
	try{
		document.getElementsByTagName("input")[document.getElementsByTagName("input").length - 1].focus();
	}
	catch(e) {
	}
};
