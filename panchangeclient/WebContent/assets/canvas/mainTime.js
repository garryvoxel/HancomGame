
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * mainTime.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function mainTime(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0.0, 0.0, 'PanelGameTime', null, this);
	
	var _GaugeGameTime = this.game.add.sprite(70.0, 18.0, 'GaugeGameTime', null, this);
	
	var _mainTime = this.game.add.text(102.0, 17.0, '00:00', {"font":"25px Nanum Gothic","fill":"#ffffff","strokeThickness":4,"align":"right"}, this);
	
	
	
	// fields
	
	this.fGaugeGameTime = _GaugeGameTime;
	this.fMainTime = _mainTime;
	
	this.afterCreate();
	
}

/** @type Phaser.Group */
var mainTime_proto = Object.create(Phaser.Group.prototype);
mainTime.prototype = mainTime_proto;
mainTime.prototype.constructor = mainTime;

/* --- end generated code --- */
// -- user code here --

mainTime.prototype.afterCreate = function() {
	
	//hide gauge by mask
	this.gaugeMask = this.game.add.graphics(0, 0);
	this.gaugeMask.beginFill(0xffffff);
	this.gaugeMask.drawRect(this.fGaugeGameTime.worldPosition.x, this.fGaugeGameTime.worldPosition.y, this.fGaugeGameTime.width, 200);
	//this.gaugeMask.endFill();
	
	this.fGaugeGameTime.mask = this.gaugeMask;
	
	this.blinkTween = this.game.add.tween(this.fMainTime).to({alpha : 0.5}, 1000, Phaser.Easing.Linear.None, false, 0, -1, true);
	//call by timer
};

mainTime.prototype.update = function() {
	this.fullTime = this.game.normalTimer.gameTime;
	this.fMainTime.text = this.game.normalTimer.getTime();
	this.gauge();
};

mainTime.prototype.gauge = function() {
	var now = this.game.normalTimer.getTimeMS();
	var per = now / this.fullTime;
	
	var moveAmount = (1 - per) * this.fGaugeGameTime.width;
	this.gaugeMask.x = this.fGaugeGameTime.worldPosition.x - moveAmount;
};